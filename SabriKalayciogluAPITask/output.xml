<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0 (Python 3.7.5 on win32)" generated="20250205 13:17:43.088" rpa="false" schemaversion="3">
<suite id="s1" name="Testsuites" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites">
<suite id="s1-s1" name="Pet" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\pet">
<suite id="s1-s1-s1" name="01 POST pet" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\pet\01_POST_pet.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:17:44.173" level="INFO">Log level changed from INFO to TRACE.</msg>
<msg timestamp="20250205 13:17:44.175" level="TRACE">Return: 'INFO'</msg>
<status status="PASS" starttime="20250205 13:17:44.173" endtime="20250205 13:17:44.175"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:17:44.176" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'pet.csv' ]</msg>
<msg timestamp="20250205 13:17:44.177" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_03'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_04'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_05'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_06'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_07'), ('Type', 'Negative'), ('Description', 'Create pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_08'), ('Type', 'Positive'), ('Description', 'Update pet name and status with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_09'), ('Type', 'Negative'), ('Description', 'Update pet name and status with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_10'), ('Type', 'Negative'), ('Description', 'Update pet status with formdata using invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_11'), ('Type', 'Positive'), ('Description', 'Upload pet image with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_12'), ('Type', 'Negative'), ('Description', 'Update pet image with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_01'), ('Type', 'Positive'), ('Description', 'Update an existing pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet by providing non-existing id to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_03'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_04'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_05'), ('Type', 'Negative'), ('Description', 'Update pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_06'), ('Type', 'Negative'), ('Description', 'Update pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_01'), ('Type', 'Positive'), ('Description', 'Retrieve pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_02'), ('Type', 'Negative'), ('Description', 'Retrieve pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_03'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by valid  status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_04'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by invalid status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'), ('Type', 'Positive'), ('Description', 'Delete pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'), ('Type', 'Negative'), ('Description', 'Delete pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:44.178" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:17:44.181" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<status status="PASS" starttime="20250205 13:17:44.175" endtime="20250205 13:17:44.181"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:17:44.182" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:17:44.182" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<msg timestamp="20250205 13:17:44.182" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.181" endtime="20250205 13:17:44.182"/>
</kw>
<msg timestamp="20250205 13:17:44.183" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.172" endtime="20250205 13:17:44.183"/>
</kw>
<test id="s1-s1-s1-t1" name="TC_POST_pet_01" line="16">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:44.184" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:44.186" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_01' ]</msg>
<msg timestamp="20250205 13:17:44.188" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Create pet with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:44.188" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0...</msg>
<status status="PASS" starttime="20250205 13:17:44.185" endtime="20250205 13:17:44.188"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:44.190" level="TRACE">Arguments: [ 'Test Description:Create pet with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:44.190" level="INFO">Set test documentation to:
Test Description:Create pet with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:44.190" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.188" endtime="20250205 13:17:44.190"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:44.190" endtime="20250205 13:17:44.191"/>
</return>
<msg timestamp="20250205 13:17:44.191" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Create pet with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:44.191" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0...</msg>
<status status="PASS" starttime="20250205 13:17:44.184" endtime="20250205 13:17:44.191"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.193" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:44.193" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:44.193" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:44.192" endtime="20250205 13:17:44.193"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.195" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:44.195" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:44.195" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:44.195" endtime="20250205 13:17:44.195"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.195" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:44.195" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:44.195" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:44.195" endtime="20250205 13:17:44.195"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:44.195" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:44.195" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:44.195" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:44.195" endtime="20250205 13:17:44.195"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:17:44.202" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:17:44.203" level="TRACE">Return: 1738750664</msg>
<msg timestamp="20250205 13:17:44.203" level="INFO">${SECS} = 1738750664</msg>
<status status="PASS" starttime="20250205 13:17:44.201" endtime="20250205 13:17:44.203"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:44.203" level="TRACE">Arguments: [ 1738750664 ]</msg>
<msg timestamp="20250205 13:17:44.203" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:44.203" level="TRACE">Return: 1738750664</msg>
<msg timestamp="20250205 13:17:44.203" level="INFO">${ID} = 1738750664</msg>
<status status="PASS" starttime="20250205 13:17:44.203" endtime="20250205 13:17:44.203"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.207" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.id' | 1738750664 ]</msg>
<msg timestamp="20250205 13:17:44.207" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:17:44.243" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 1738750664,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.207" endtime="20250205 13:17:44.243"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_ID}</arg>
<arg>${ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.243" level="TRACE">Arguments: [ '${PET_01_ID}' | '${ID}' ]</msg>
<msg timestamp="20250205 13:17:44.243" level="INFO">${PET_01_ID} = 1738750664</msg>
<msg timestamp="20250205 13:17:44.243" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.243" endtime="20250205 13:17:44.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${NAME}</var>
<arg>NAME${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.253" level="TRACE">Arguments: [ 'NAME1738750664' ]</msg>
<msg timestamp="20250205 13:17:44.254" level="TRACE">Return: 'NAME1738750664'</msg>
<msg timestamp="20250205 13:17:44.254" level="INFO">${NAME} = NAME1738750664</msg>
<status status="PASS" starttime="20250205 13:17:44.252" endtime="20250205 13:17:44.255"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.name</arg>
<arg>${NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.257" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 1738750664,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.name' | 'NAME1738750664' ]</msg>
<msg timestamp="20250205 13:17:44.258" level="INFO">Update JSON with expression: '$.name'</msg>
<msg timestamp="20250205 13:17:44.284" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.256" endtime="20250205 13:17:44.284"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_NAME}</arg>
<arg>${NAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.284" level="TRACE">Arguments: [ '${PET_01_NAME}' | '${NAME}' ]</msg>
<msg timestamp="20250205 13:17:44.292" level="INFO">${PET_01_NAME} = NAME1738750664</msg>
<msg timestamp="20250205 13:17:44.292" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.284" endtime="20250205 13:17:44.292"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${CATEGORY_ID}</var>
<arg>100</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:44.292" level="TRACE">Arguments: [ '100' ]</msg>
<msg timestamp="20250205 13:17:44.292" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:44.292" level="TRACE">Return: 100</msg>
<msg timestamp="20250205 13:17:44.292" level="INFO">${CATEGORY_ID} = 100</msg>
<status status="PASS" starttime="20250205 13:17:44.292" endtime="20250205 13:17:44.292"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.category.id</arg>
<arg>${CATEGORY_ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.292" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.category.id' | 100 ]</msg>
<msg timestamp="20250205 13:17:44.292" level="INFO">Update JSON with expression: '$.category.id'</msg>
<msg timestamp="20250205 13:17:44.322" level="TRACE">Return: {'category': {'id': 100, 'name': 'string'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.292" endtime="20250205 13:17:44.322"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_CATEGORY_ID}</arg>
<arg>${CATEGORY_ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.323" level="TRACE">Arguments: [ '${PET_01_CATEGORY_ID}' | '${CATEGORY_ID}' ]</msg>
<msg timestamp="20250205 13:17:44.325" level="INFO">${PET_01_CATEGORY_ID} = 100</msg>
<msg timestamp="20250205 13:17:44.325" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.323" endtime="20250205 13:17:44.325"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${CATEGORY_NAME}</var>
<arg>CATEGORY.NAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.325" level="TRACE">Arguments: [ 'CATEGORY.NAME' ]</msg>
<msg timestamp="20250205 13:17:44.325" level="TRACE">Return: 'CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:17:44.325" level="INFO">${CATEGORY_NAME} = CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:17:44.325" endtime="20250205 13:17:44.325"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.category.name</arg>
<arg>${CATEGORY_NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.325" level="TRACE">Arguments: [ {'category': {'id': 100, 'name': 'string'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.category.name' | 'CATEGORY.NAME' ]</msg>
<msg timestamp="20250205 13:17:44.325" level="INFO">Update JSON with expression: '$.category.name'</msg>
<msg timestamp="20250205 13:17:44.355" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.325" endtime="20250205 13:17:44.355"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_CATEGORY_NAME}</arg>
<arg>${CATEGORY_NAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.355" level="TRACE">Arguments: [ '${PET_01_CATEGORY_NAME}' | '${CATEGORY_NAME}' ]</msg>
<msg timestamp="20250205 13:17:44.355" level="INFO">${PET_01_CATEGORY_NAME} = CATEGORY.NAME</msg>
<msg timestamp="20250205 13:17:44.355" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.355" endtime="20250205 13:17:44.355"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHOTOURLS}</var>
<arg>https://abc/001</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.355" level="TRACE">Arguments: [ 'https://abc/001' ]</msg>
<msg timestamp="20250205 13:17:44.355" level="TRACE">Return: 'https://abc/001'</msg>
<msg timestamp="20250205 13:17:44.355" level="INFO">${PHOTOURLS} = https://abc/001</msg>
<status status="PASS" starttime="20250205 13:17:44.355" endtime="20250205 13:17:44.355"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.photoUrls[0]</arg>
<arg>${PHOTOURLS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.362" level="TRACE">Arguments: [ {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.photoUrls[0]' | 'https://abc/001' ]</msg>
<msg timestamp="20250205 13:17:44.363" level="INFO">Update JSON with expression: '$.photoUrls[0]'</msg>
<msg timestamp="20250205 13:17:44.385" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.355" endtime="20250205 13:17:44.385"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_PHOTOURLS}</arg>
<arg>${PHOTOURLS}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.385" level="TRACE">Arguments: [ '${PET_01_PHOTOURLS}' | '${PHOTOURLS}' ]</msg>
<msg timestamp="20250205 13:17:44.392" level="INFO">${PET_01_PHOTOURLS} = https://abc/001</msg>
<msg timestamp="20250205 13:17:44.393" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.385" endtime="20250205 13:17:44.393"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${TAGS_ID}</var>
<arg>200</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:44.393" level="TRACE">Arguments: [ '200' ]</msg>
<msg timestamp="20250205 13:17:44.393" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:44.393" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:44.393" level="INFO">${TAGS_ID} = 200</msg>
<status status="PASS" starttime="20250205 13:17:44.393" endtime="20250205 13:17:44.393"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.tags[0].id</arg>
<arg>${TAGS_ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.393" level="TRACE">Arguments: [ {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.tags[0].id' | 200 ]</msg>
<msg timestamp="20250205 13:17:44.393" level="INFO">Update JSON with expression: '$.tags[0].id'</msg>
<msg timestamp="20250205 13:17:44.421" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.393" endtime="20250205 13:17:44.421"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_TAGS_ID}</arg>
<arg>${TAGS_ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.423" level="TRACE">Arguments: [ '${PET_01_TAGS_ID}' | '${TAGS_ID}' ]</msg>
<msg timestamp="20250205 13:17:44.425" level="INFO">${PET_01_TAGS_ID} = 200</msg>
<msg timestamp="20250205 13:17:44.425" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.423" endtime="20250205 13:17:44.425"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${TAGS_NAME}</var>
<arg>TAGS.NAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.425" level="TRACE">Arguments: [ 'TAGS.NAME' ]</msg>
<msg timestamp="20250205 13:17:44.425" level="TRACE">Return: 'TAGS.NAME'</msg>
<msg timestamp="20250205 13:17:44.425" level="INFO">${TAGS_NAME} = TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:17:44.425" endtime="20250205 13:17:44.425"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.tags[0].name</arg>
<arg>${TAGS_NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.425" level="TRACE">Arguments: [ {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'string'}]} | '$.tags[0].name' | 'TAGS.NAME' ]</msg>
<msg timestamp="20250205 13:17:44.425" level="INFO">Update JSON with expression: '$.tags[0].name'</msg>
<msg timestamp="20250205 13:17:44.454" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'TAGS.NAME'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.425" endtime="20250205 13:17:44.454"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_TAGS_NAME}</arg>
<arg>${TAGS_NAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.454" level="TRACE">Arguments: [ '${PET_01_TAGS_NAME}' | '${TAGS_NAME}' ]</msg>
<msg timestamp="20250205 13:17:44.454" level="INFO">${PET_01_TAGS_NAME} = TAGS.NAME</msg>
<msg timestamp="20250205 13:17:44.454" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.454" endtime="20250205 13:17:44.454"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${STATUS}</var>
<arg>available</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:44.454" level="TRACE">Arguments: [ 'available' ]</msg>
<msg timestamp="20250205 13:17:44.454" level="TRACE">Return: 'available'</msg>
<msg timestamp="20250205 13:17:44.454" level="INFO">${STATUS} = available</msg>
<status status="PASS" starttime="20250205 13:17:44.454" endtime="20250205 13:17:44.454"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.status</arg>
<arg>${STATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:44.454" level="TRACE">Arguments: [ {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'TAGS.NAME'}]} | '$.status' | 'available' ]</msg>
<msg timestamp="20250205 13:17:44.454" level="INFO">Update JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:44.487" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'TAGS.NAME'}]}</msg>
<status status="PASS" starttime="20250205 13:17:44.454" endtime="20250205 13:17:44.487"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_01_STATUS}</arg>
<arg>${STATUS}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:44.489" level="TRACE">Arguments: [ '${PET_01_STATUS}' | '${STATUS}' ]</msg>
<msg timestamp="20250205 13:17:44.489" level="INFO">${PET_01_STATUS} = available</msg>
<msg timestamp="20250205 13:17:44.489" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:44.488" endtime="20250205 13:17:44.489"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:44.492" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:44.492" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:44.492" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:44.489" endtime="20250205 13:17:44.492"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:44.494" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:44.495" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:44.495" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:44.495" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:44.495" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:44.494" endtime="20250205 13:17:44.495"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:44.495" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:44.495" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:44.495" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:44.495" endtime="20250205 13:17:44.495"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:44.498" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:44.498" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:44.523" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:44.523" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:44.495" endtime="20250205 13:17:44.523"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:44.523" endtime="20250205 13:17:44.523"/>
</return>
<msg timestamp="20250205 13:17:44.523" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:44.523" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:44.493" endtime="20250205 13:17:44.523"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:44.523" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:44.532" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:44.533" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:44.533" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:44.533" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:44.532" endtime="20250205 13:17:44.533"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:44.534" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:44.534" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:44.534" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:44.533" endtime="20250205 13:17:44.534"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:44.536" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:44.536" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:44.571" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:44.572" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:44.535" endtime="20250205 13:17:44.572"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:44.572" endtime="20250205 13:17:44.572"/>
</return>
<msg timestamp="20250205 13:17:44.572" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:44.573" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:44.523" endtime="20250205 13:17:44.573"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:44.575" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'TAGS.NAME'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:44.580" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:45.280" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:45.286" level="TRACE">Return: {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:45.286" level="INFO">${RESPONSE} = {'seconds': 0.70324, 'status': 200, 'reason': 'OK', 'body': {'id': 1738750664, 'category': {'id': 100, 'name': 'CATEGORY.NAME'}, 'name': 'NAME1738750664', 'photoUrls': ['https://abc/001'], 'tags': [{'...</msg>
<status status="PASS" starttime="20250205 13:17:44.574" endtime="20250205 13:17:45.286"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.286" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:45.286" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:45.318" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'TAGS.NAME'}]}</msg>
<msg timestamp="20250205 13:17:45.319" level="INFO">${RESPONSE_PAYLOAD} = {'id': 1738750664, 'category': {'id': 100, 'name': 'CATEGORY.NAME'}, 'name': 'NAME1738750664', 'photoUrls': ['https://abc/001'], 'tags': [{'id': 200, 'name': 'TAGS.NAME'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:45.286" endtime="20250205 13:17:45.319"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.319" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:45.319" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:45.346" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:45.346" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:45.319" endtime="20250205 13:17:45.346"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.348" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:45.348" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.348" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.347" endtime="20250205 13:17:45.348"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.348" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:17:45.348" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:17:45.374" level="TRACE">Return: 1738750664</msg>
<msg timestamp="20250205 13:17:45.374" level="INFO">${PAYLOAD_VALUE} = 1738750664</msg>
<status status="PASS" starttime="20250205 13:17:45.348" endtime="20250205 13:17:45.374"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.374" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.381" level="TRACE">Arguments: [ '"1738750664"' | '"1738750664"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.381" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.381" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.374" endtime="20250205 13:17:45.381"/>
</kw>
<msg timestamp="20250205 13:17:45.382" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.374" endtime="20250205 13:17:45.382"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.383" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.name' ]</msg>
<msg timestamp="20250205 13:17:45.383" level="INFO">Get value from JSON with expression: '$.body.name'</msg>
<msg timestamp="20250205 13:17:45.406" level="TRACE">Return: 'NAME1738750664'</msg>
<msg timestamp="20250205 13:17:45.406" level="INFO">${PAYLOAD_VALUE} = NAME1738750664</msg>
<status status="PASS" starttime="20250205 13:17:45.383" endtime="20250205 13:17:45.406"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.411" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.412" level="TRACE">Arguments: [ '"NAME1738750664"' | '"NAME1738750664"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.412" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.412" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.411" endtime="20250205 13:17:45.412"/>
</kw>
<msg timestamp="20250205 13:17:45.412" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.406" endtime="20250205 13:17:45.412"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.412" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.category.id' ]</msg>
<msg timestamp="20250205 13:17:45.416" level="INFO">Get value from JSON with expression: '$.body.category.id'</msg>
<msg timestamp="20250205 13:17:45.440" level="TRACE">Return: 100</msg>
<msg timestamp="20250205 13:17:45.440" level="INFO">${PAYLOAD_VALUE} = 100</msg>
<status status="PASS" starttime="20250205 13:17:45.412" endtime="20250205 13:17:45.440"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.443" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${CATEGORY_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.444" level="TRACE">Arguments: [ '"100"' | '"100"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.444" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.444" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.443" endtime="20250205 13:17:45.444"/>
</kw>
<msg timestamp="20250205 13:17:45.444" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.442" endtime="20250205 13:17:45.444"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.445" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.category.name' ]</msg>
<msg timestamp="20250205 13:17:45.445" level="INFO">Get value from JSON with expression: '$.body.category.name'</msg>
<msg timestamp="20250205 13:17:45.472" level="TRACE">Return: 'CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:17:45.473" level="INFO">${PAYLOAD_VALUE} = CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:17:45.445" endtime="20250205 13:17:45.473"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.474" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${CATEGORY_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.475" level="TRACE">Arguments: [ '"CATEGORY.NAME"' | '"CATEGORY.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.475" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.475" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.475" endtime="20250205 13:17:45.475"/>
</kw>
<msg timestamp="20250205 13:17:45.475" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.474" endtime="20250205 13:17:45.475"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.photoUrls[0]</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.475" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.photoUrls[0]' ]</msg>
<msg timestamp="20250205 13:17:45.475" level="INFO">Get value from JSON with expression: '$.body.photoUrls[0]'</msg>
<msg timestamp="20250205 13:17:45.502" level="TRACE">Return: 'https://abc/001'</msg>
<msg timestamp="20250205 13:17:45.503" level="INFO">${PAYLOAD_VALUE} = https://abc/001</msg>
<status status="PASS" starttime="20250205 13:17:45.475" endtime="20250205 13:17:45.503"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.505" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PHOTOURLS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.505" level="TRACE">Arguments: [ '"https://abc/001"' | '"https://abc/001"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.505" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.505" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.505" endtime="20250205 13:17:45.505"/>
</kw>
<msg timestamp="20250205 13:17:45.505" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.504" endtime="20250205 13:17:45.505"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.505" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.tags[0].id' ]</msg>
<msg timestamp="20250205 13:17:45.505" level="INFO">Get value from JSON with expression: '$.body.tags[0].id'</msg>
<msg timestamp="20250205 13:17:45.535" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:45.535" level="INFO">${PAYLOAD_VALUE} = 200</msg>
<status status="PASS" starttime="20250205 13:17:45.505" endtime="20250205 13:17:45.535"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.535" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${TAGS_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.535" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.535" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.535" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.535" endtime="20250205 13:17:45.535"/>
</kw>
<msg timestamp="20250205 13:17:45.535" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.535" endtime="20250205 13:17:45.535"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.535" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.tags[0].name' ]</msg>
<msg timestamp="20250205 13:17:45.535" level="INFO">Get value from JSON with expression: '$.body.tags[0].name'</msg>
<msg timestamp="20250205 13:17:45.565" level="TRACE">Return: 'TAGS.NAME'</msg>
<msg timestamp="20250205 13:17:45.565" level="INFO">${PAYLOAD_VALUE} = TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:17:45.535" endtime="20250205 13:17:45.565"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.565" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${TAGS_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.565" level="TRACE">Arguments: [ '"TAGS.NAME"' | '"TAGS.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.565" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.565" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.565" endtime="20250205 13:17:45.565"/>
</kw>
<msg timestamp="20250205 13:17:45.572" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.565" endtime="20250205 13:17:45.572"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:45.573" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:45 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.70324,
 'status': 200} | '$.body.status' ]</msg>
<msg timestamp="20250205 13:17:45.574" level="INFO">Get value from JSON with expression: '$.body.status'</msg>
<msg timestamp="20250205 13:17:45.605" level="TRACE">Return: 'available'</msg>
<msg timestamp="20250205 13:17:45.606" level="INFO">${PAYLOAD_VALUE} = available</msg>
<status status="PASS" starttime="20250205 13:17:45.573" endtime="20250205 13:17:45.606"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:45.607" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${STATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:45.607" level="TRACE">Arguments: [ '"available"' | '"available"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:45.607" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.607" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.607" endtime="20250205 13:17:45.607"/>
</kw>
<msg timestamp="20250205 13:17:45.607" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:45.607" endtime="20250205 13:17:45.607"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:45.607" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:45.607" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.607" endtime="20250205 13:17:45.607"/>
</kw>
<doc>Test Description:Create pet with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:17:44.183" endtime="20250205 13:17:45.607"/>
</test>
<test id="s1-s1-s1-t2" name="TC_POST_pet_02" line="115">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:45.613" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:45.613" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_02' ]</msg>
<msg timestamp="20250205 13:17:45.617" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create pet with valid JSON payload having no id field'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:45.618" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payl...</msg>
<status status="PASS" starttime="20250205 13:17:45.613" endtime="20250205 13:17:45.619"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:45.620" level="TRACE">Arguments: [ 'Test Description:Create pet with valid JSON payload having no id field \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:45.620" level="INFO">Set test documentation to:
Test Description:Create pet with valid JSON payload having no id field 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:45.620" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:45.619" endtime="20250205 13:17:45.620"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:45.621" endtime="20250205 13:17:45.621"/>
</return>
<msg timestamp="20250205 13:17:45.621" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create pet with valid JSON payload having no id field'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:45.622" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payl...</msg>
<status status="PASS" starttime="20250205 13:17:45.613" endtime="20250205 13:17:45.622"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:45.624" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:45.624" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:45.624" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:45.623" endtime="20250205 13:17:45.624"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:45.627" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:45.627" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:45.627" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:45.624" endtime="20250205 13:17:45.628"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:45.629" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:45.629" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:45.630" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:45.628" endtime="20250205 13:17:45.630"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:45.632" level="TRACE">Arguments: [ '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:45.632" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:45.632" level="INFO">${REQUEST_PAYLOAD} = {'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:45.630" endtime="20250205 13:17:45.632"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:45.633" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:45.634" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:45.634" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:45.633" endtime="20250205 13:17:45.634"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:45.635" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:45.636" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:45.636" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.636" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:45.636" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:45.636" endtime="20250205 13:17:45.636"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:45.636" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:45.638" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:45.638" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:45.636" endtime="20250205 13:17:45.638"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:45.639" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:45.639" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:45.664" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:45.664" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:45.638" endtime="20250205 13:17:45.664"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:45.664" endtime="20250205 13:17:45.664"/>
</return>
<msg timestamp="20250205 13:17:45.671" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:45.671" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:45.635" endtime="20250205 13:17:45.671"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:45.673" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:45.673" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:45.674" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:45.674" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:45.674" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:45.673" endtime="20250205 13:17:45.674"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:45.674" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:45.675" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:45.675" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:45.674" endtime="20250205 13:17:45.675"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:45.675" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:45.676" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:45.706" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:45.706" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:45.675" endtime="20250205 13:17:45.706"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:45.706" endtime="20250205 13:17:45.706"/>
</return>
<msg timestamp="20250205 13:17:45.707" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:45.707" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:45.672" endtime="20250205 13:17:45.707"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:45.709" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:45.713" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:46.267" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:46.267" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766780,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:46 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5600689999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:46.267" level="INFO">${RESPONSE} = {'seconds': 0.5600689999999999, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766780, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0...</msg>
<status status="PASS" starttime="20250205 13:17:45.708" endtime="20250205 13:17:46.267"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:46.267" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766780,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:46 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5600689999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:46.267" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:46.305" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:46.305" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766780, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:46.267" endtime="20250205 13:17:46.305"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:46.305" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766780,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:46 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5600689999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:46.305" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:46.332" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:46.333" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:46.305" endtime="20250205 13:17:46.333"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:46.335" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:46.335" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:46.336" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:46.334" endtime="20250205 13:17:46.336"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:46.337" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766780,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:46 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5600689999999999,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:17:46.337" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:17:46.361" level="TRACE">Return: 9223372036854766780</msg>
<msg timestamp="20250205 13:17:46.361" level="INFO">${ID} = 9223372036854766780</msg>
<status status="PASS" starttime="20250205 13:17:46.337" endtime="20250205 13:17:46.363"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Arguments: [ 'Should Not Be Equal As Strings' | '"${None}"' | '"${ID}"' | '\\nERROR: ID is missing in response payload' ]</msg>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Arguments: [ '"None"' | '"9223372036854766780"' | '\nERROR: ID is missing in response payload' ]</msg>
<msg timestamp="20250205 13:17:46.364" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:46.364" endtime="20250205 13:17:46.364"/>
</kw>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:46.363" endtime="20250205 13:17:46.364"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${PET_02_ID}</arg>
<arg>${ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Arguments: [ '${PET_02_ID}' | '${ID}' ]</msg>
<msg timestamp="20250205 13:17:46.364" level="INFO">${PET_02_ID} = 9223372036854766780</msg>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:46.364" endtime="20250205 13:17:46.364"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:46.364" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:46.364" endtime="20250205 13:17:46.364"/>
</kw>
<doc>Test Description:Create pet with valid JSON payload having no id field 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:17:45.612" endtime="20250205 13:17:46.364"/>
</test>
<test id="s1-s1-s1-t3" name="TC_POST_pet_03" line="148">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:46.373" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:46.373" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_03' ]</msg>
<msg timestamp="20250205 13:17:46.378" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
             ('Type', 'Negative'),
             ('Description',
              'Create pet with payload missing mandatory field [name]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:46.378" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_03'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Pay...</msg>
<status status="PASS" starttime="20250205 13:17:46.373" endtime="20250205 13:17:46.378"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:46.380" level="TRACE">Arguments: [ 'Test Description:Create pet with payload missing mandatory field [name] \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:46.380" level="INFO">Set test documentation to:
Test Description:Create pet with payload missing mandatory field [name] 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:46.380" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:46.379" endtime="20250205 13:17:46.380"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:46.380" endtime="20250205 13:17:46.380"/>
</return>
<msg timestamp="20250205 13:17:46.381" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
             ('Type', 'Negative'),
             ('Description',
              'Create pet with payload missing mandatory field [name]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:46.381" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_03'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Pay...</msg>
<status status="PASS" starttime="20250205 13:17:46.373" endtime="20250205 13:17:46.381"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:46.382" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:46.383" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:46.383" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:46.381" endtime="20250205 13:17:46.383"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:46.384" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:46.384" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:46.384" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:46.384" endtime="20250205 13:17:46.384"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:46.384" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:46.384" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:46.384" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:46.384" endtime="20250205 13:17:46.384"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:46.389" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:46.389" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:46.389" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:46.384" endtime="20250205 13:17:46.389"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:46.391" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:46.391" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:46.391" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:46.391" endtime="20250205 13:17:46.391"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:46.393" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:46.393" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:46.396" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:46.396" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:46.396" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:46.393" endtime="20250205 13:17:46.396"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:46.396" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:46.396" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:46.397" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:46.396" endtime="20250205 13:17:46.397"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:46.397" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:46.398" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:46.434" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:46.435" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:46.397" endtime="20250205 13:17:46.435"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:46.435" endtime="20250205 13:17:46.435"/>
</return>
<msg timestamp="20250205 13:17:46.436" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:46.436" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:46.393" endtime="20250205 13:17:46.436"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:46.438" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:46.438" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:46.438" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:46.439" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:46.439" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:46.438" endtime="20250205 13:17:46.439"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:46.439" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:46.440" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:46.440" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:46.439" endtime="20250205 13:17:46.440"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:46.441" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:46.442" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:46.463" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:46.472" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:46.440" endtime="20250205 13:17:46.472"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:46.472" endtime="20250205 13:17:46.472"/>
</return>
<msg timestamp="20250205 13:17:46.473" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:46.473" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:46.437" endtime="20250205 13:17:46.473"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:46.473" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:46.473" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:47.054" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:47.069" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766781,
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:47 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.591442,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:47.069" level="INFO">${RESPONSE} = {'seconds': 0.591442, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766781, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'statu...</msg>
<status status="PASS" starttime="20250205 13:17:46.473" endtime="20250205 13:17:47.069"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:47.069" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766781,
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:47 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.591442,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:47.069" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:47.132" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766781,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:47.132" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766781, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:47.069" endtime="20250205 13:17:47.132"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:47.134" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766781,
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:47 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.591442,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:47.134" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:47.155" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:47.155" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:47.133" endtime="20250205 13:17:47.155"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:47.161" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:47.162" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:47.163" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:17:47.165" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:47.155" endtime="20250205 13:17:47.165"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:47.167" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:47.169" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766781,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:47.170" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:47.170" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.170" endtime="20250205 13:17:47.170"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:47.171" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854766781, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:47.171" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.170" endtime="20250205 13:17:47.171"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:47.173" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:17:47.173" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.172" endtime="20250205 13:17:47.173"/>
</kw>
<msg timestamp="20250205 13:17:47.173" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.167" endtime="20250205 13:17:47.173"/>
</kw>
<msg timestamp="20250205 13:17:47.173" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.167" endtime="20250205 13:17:47.175"/>
</kw>
<doc>Test Description:Create pet with payload missing mandatory field [name] 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:46.372" endtime="20250205 13:17:47.175">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s1-s1-t4" name="TC_POST_pet_04" line="174">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:47.176" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:47.176" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_04' ]</msg>
<msg timestamp="20250205 13:17:47.182" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
             ('Type', 'Negative'),
             ('Description',
              'Create pet with payload missing mandatory field [photoUrls]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:47.182" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_04'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Reques...</msg>
<status status="PASS" starttime="20250205 13:17:47.176" endtime="20250205 13:17:47.182"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:47.185" level="TRACE">Arguments: [ 'Test Description:Create pet with payload missing mandatory field [photoUrls] \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:47.185" level="INFO">Set test documentation to:
Test Description:Create pet with payload missing mandatory field [photoUrls] 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:47.185" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.182" endtime="20250205 13:17:47.185"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:47.185" endtime="20250205 13:17:47.185"/>
</return>
<msg timestamp="20250205 13:17:47.185" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
             ('Type', 'Negative'),
             ('Description',
              'Create pet with payload missing mandatory field [photoUrls]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:47.185" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_04'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Reques...</msg>
<status status="PASS" starttime="20250205 13:17:47.176" endtime="20250205 13:17:47.185"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:47.191" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:47.191" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:47.191" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:47.185" endtime="20250205 13:17:47.191"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:47.194" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:47.194" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:47.195" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:47.192" endtime="20250205 13:17:47.195"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:47.196" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:47.196" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:47.196" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:47.196" endtime="20250205 13:17:47.196"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:47.201" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:47.202" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:47.202" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:47.196" endtime="20250205 13:17:47.203"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:47.204" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:47.205" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:47.205" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:47.204" endtime="20250205 13:17:47.206"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:47.207" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:47.207" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:47.207" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:47.207" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:47.207" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:47.207" endtime="20250205 13:17:47.207"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:47.207" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:47.207" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.212" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.207" endtime="20250205 13:17:47.212"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:47.213" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:47.213" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.242" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.212" endtime="20250205 13:17:47.242"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:47.242" endtime="20250205 13:17:47.242"/>
</return>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.242" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.207" endtime="20250205 13:17:47.242"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:47.242" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:47.242" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:47.242" endtime="20250205 13:17:47.242"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:47.242" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.251" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.242" endtime="20250205 13:17:47.251"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:47.252" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:47.252" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:47.280" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.280" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.252" endtime="20250205 13:17:47.280"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:47.280" endtime="20250205 13:17:47.280"/>
</return>
<msg timestamp="20250205 13:17:47.280" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.280" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.242" endtime="20250205 13:17:47.280"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:47.282" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:47.284" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:47.870" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:47.870" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766782,
          'name': 'doggie',
          'photoUrls': [],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:47 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.596954,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:47.886" level="INFO">${RESPONSE} = {'seconds': 0.596954, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766782, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': [], 'tags': [{'id': 0, 'name': 'string'...</msg>
<status status="PASS" starttime="20250205 13:17:47.281" endtime="20250205 13:17:47.886"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:47.886" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766782,
          'name': 'doggie',
          'photoUrls': [],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:47 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.596954,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:47.886" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:47.914" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766782,
 'name': 'doggie',
 'photoUrls': [],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:47.915" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766782, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': [], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:47.886" endtime="20250205 13:17:47.915"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:47.915" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766782,
          'name': 'doggie',
          'photoUrls': [],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:47 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.596954,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:47.915" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:47.942" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:47.942" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:47.915" endtime="20250205 13:17:47.942"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:47.944" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:47.945" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:47.945" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:17:47.945" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:47.943" endtime="20250205 13:17:47.945"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:47.945" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:47.945" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766782,
 'name': 'doggie',
 'photoUrls': [],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:47.945" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:47.945" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.945" endtime="20250205 13:17:47.945"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:47.953" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854766782, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': [], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:47.954" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.951" endtime="20250205 13:17:47.954"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:47.955" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:17:47.955" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.955" endtime="20250205 13:17:47.955"/>
</kw>
<msg timestamp="20250205 13:17:47.955" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.945" endtime="20250205 13:17:47.956"/>
</kw>
<msg timestamp="20250205 13:17:47.956" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.945" endtime="20250205 13:17:47.956"/>
</kw>
<doc>Test Description:Create pet with payload missing mandatory field [photoUrls] 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:47.176" endtime="20250205 13:17:47.957">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s1-s1-t5" name="TC_POST_pet_05" line="200">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:47.958" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:47.958" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_05' ]</msg>
<msg timestamp="20250205 13:17:47.962" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
             ('Type', 'Negative'),
             ('Description', 'Create pet with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:47.963" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_05'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  ...</msg>
<status status="PASS" starttime="20250205 13:17:47.958" endtime="20250205 13:17:47.963"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Arguments: [ 'Test Description:Create pet with payload having invalid id \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:17:47.965" level="INFO">Set test documentation to:
Test Description:Create pet with payload having invalid id 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:47.963" endtime="20250205 13:17:47.965"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:47.965" endtime="20250205 13:17:47.965"/>
</return>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
             ('Type', 'Negative'),
             ('Description', 'Create pet with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:47.965" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_05'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  ...</msg>
<status status="PASS" starttime="20250205 13:17:47.958" endtime="20250205 13:17:47.965"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:47.965" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:47.965" endtime="20250205 13:17:47.965"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:47.965" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:47.965" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:47.965" endtime="20250205 13:17:47.965"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:47.973" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:47.973" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:47.973" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:47.971" endtime="20250205 13:17:47.973"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:47.976" level="TRACE">Arguments: [ '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:47.976" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 'invalidId',
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:47.977" level="INFO">${REQUEST_PAYLOAD} = {'id': 'invalidId', 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:47.975" endtime="20250205 13:17:47.977"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:47.978" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:47.978" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:47.978" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:47.977" endtime="20250205 13:17:47.978"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:47.978" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:47.978" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:47.978" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:47.978" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:47.978" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:47.978" endtime="20250205 13:17:47.978"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:47.978" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:47.981" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:47.981" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.978" endtime="20250205 13:17:47.981"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:47.982" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:47.982" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:48.008" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.008" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.981" endtime="20250205 13:17:48.008"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:48.012" endtime="20250205 13:17:48.012"/>
</return>
<msg timestamp="20250205 13:17:48.012" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.013" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:47.978" endtime="20250205 13:17:48.013"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:48.013" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:48.013" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:48.013" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:48.013" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:48.013" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:48.013" endtime="20250205 13:17:48.013"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:48.013" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:48.013" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.013" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.013" endtime="20250205 13:17:48.013"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:48.013" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:48.013" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:48.051" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.051" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.013" endtime="20250205 13:17:48.051"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:48.051" endtime="20250205 13:17:48.051"/>
</return>
<msg timestamp="20250205 13:17:48.051" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.051" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.013" endtime="20250205 13:17:48.051"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:48.051" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 'invalidId',
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:48.051" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:48.625" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:17:48.625" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:48 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.57427,
 'status': 500}</msg>
<msg timestamp="20250205 13:17:48.625" level="INFO">${RESPONSE} = {'seconds': 0.57427, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:17:48 GMT', 'Conte...</msg>
<status status="PASS" starttime="20250205 13:17:48.051" endtime="20250205 13:17:48.625"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:48.625" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:48 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.57427,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:48.625" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:48.663" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:17:48.663" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:17:48.625" endtime="20250205 13:17:48.663"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:48.663" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:48 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.57427,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:48.663" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:48.692" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:17:48.693" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:17:48.663" endtime="20250205 13:17:48.693"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:48.694" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:48.694" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:48.694" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:48.694" endtime="20250205 13:17:48.694"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:48.694" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:48.694" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:48.694" endtime="20250205 13:17:48.694"/>
</kw>
<doc>Test Description:Create pet with payload having invalid id 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:17:47.958" endtime="20250205 13:17:48.694"/>
</test>
<test id="s1-s1-s1-t6" name="TC_POST_pet_06" line="226">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:48.701" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:48.703" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_06' ]</msg>
<msg timestamp="20250205 13:17:48.706" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
             ('Type', 'Negative'),
             ('Description', 'Create pet with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:17:48.706" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_06'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{...</msg>
<status status="PASS" starttime="20250205 13:17:48.702" endtime="20250205 13:17:48.706"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:48.708" level="TRACE">Arguments: [ 'Test Description:Create pet with payload having invalid status \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:48.708" level="INFO">Set test documentation to:
Test Description:Create pet with payload having invalid status 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:48.708" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:48.707" endtime="20250205 13:17:48.708"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:48.709" endtime="20250205 13:17:48.709"/>
</return>
<msg timestamp="20250205 13:17:48.709" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
             ('Type', 'Negative'),
             ('Description', 'Create pet with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:17:48.709" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_06'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{...</msg>
<status status="PASS" starttime="20250205 13:17:48.694" endtime="20250205 13:17:48.709"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:48.711" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:48.711" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:48.711" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:48.709" endtime="20250205 13:17:48.711"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:48.713" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:48.713" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:48.713" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:48.712" endtime="20250205 13:17:48.714"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:48.714" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:48.714" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:48.714" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:48.714" endtime="20250205 13:17:48.714"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:48.719" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}' ]</msg>
<msg timestamp="20250205 13:17:48.719" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:48.719" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:17:48.718" endtime="20250205 13:17:48.719"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:48.721" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:48.721" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:48.721" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:48.719" endtime="20250205 13:17:48.721"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:48.723" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:48.723" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:48.724" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:48.724" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:48.725" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:48.723" endtime="20250205 13:17:48.725"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:48.725" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:48.725" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.725" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.725" endtime="20250205 13:17:48.725"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:48.725" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:48.725" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:48.756" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.756" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.725" endtime="20250205 13:17:48.756"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:48.761" endtime="20250205 13:17:48.762"/>
</return>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.762" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.722" endtime="20250205 13:17:48.762"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:48.762" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:48.762" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:48.762" endtime="20250205 13:17:48.762"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.762" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.762" endtime="20250205 13:17:48.762"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:48.762" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:48.762" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:48.796" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.796" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.762" endtime="20250205 13:17:48.796"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:48.797" endtime="20250205 13:17:48.797"/>
</return>
<msg timestamp="20250205 13:17:48.797" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:48.797" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:48.762" endtime="20250205 13:17:48.797"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:48.801" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:48.803" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:49.395" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:49.395" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766783,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'invalidStatus',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:49 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.59311,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:49.395" level="INFO">${RESPONSE} = {'seconds': 0.59311, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766783, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': '...</msg>
<status status="PASS" starttime="20250205 13:17:48.798" endtime="20250205 13:17:49.395"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:49.395" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766783,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'invalidStatus',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:49 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.59311,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:49.395" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:49.427" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766783,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:49.427" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766783, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:17:49.395" endtime="20250205 13:17:49.427"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:49.429" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766783,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'invalidStatus',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:49 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.59311,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:49.429" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:49.456" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:49.456" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:49.429" endtime="20250205 13:17:49.456"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:49.458" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:49.458" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:49.458" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:17:49.458" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:49.457" endtime="20250205 13:17:49.458"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:49.464" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:49.465" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766783,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:49.465" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}" ]</msg>
<msg timestamp="20250205 13:17:49.465" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:49.465" endtime="20250205 13:17:49.465"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:49.465" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854766783, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}" ]</msg>
<msg timestamp="20250205 13:17:49.465" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:49.465" endtime="20250205 13:17:49.465"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:49.472" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:17:49.472" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:49.471" endtime="20250205 13:17:49.473"/>
</kw>
<msg timestamp="20250205 13:17:49.473" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:49.465" endtime="20250205 13:17:49.473"/>
</kw>
<msg timestamp="20250205 13:17:49.474" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:49.463" endtime="20250205 13:17:49.474"/>
</kw>
<doc>Test Description:Create pet with payload having invalid status 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:48.694" endtime="20250205 13:17:49.475">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s1-s1-t7" name="TC_POST_pet_07" line="252">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:49.476" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:49.481" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_07' ]</msg>
<msg timestamp="20250205 13:17:49.484" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
             ('Type', 'Negative'),
             ('Description', 'Create pet with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:49.484" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_07'), ('Type', 'Negative'), ('Description', 'Create pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:49.481" endtime="20250205 13:17:49.484"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:49.484" level="TRACE">Arguments: [ 'Test Description:Create pet with no payload \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:49.484" level="INFO">Set test documentation to:
Test Description:Create pet with no payload 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:49.484" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:49.484" endtime="20250205 13:17:49.484"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:49.484" endtime="20250205 13:17:49.484"/>
</return>
<msg timestamp="20250205 13:17:49.484" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
             ('Type', 'Negative'),
             ('Description', 'Create pet with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:49.484" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_07'), ('Type', 'Negative'), ('Description', 'Create pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:49.476" endtime="20250205 13:17:49.484"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:49.494" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:49.494" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:49.494" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:49.492" endtime="20250205 13:17:49.495"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:49.498" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:49.498" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:49.498" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:49.497" endtime="20250205 13:17:49.498"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:49.499" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:49.499" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:49.499" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:49.499" endtime="20250205 13:17:49.499"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:49.501" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:49.502" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:49.502" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:49.501" endtime="20250205 13:17:49.503"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:49.503" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:49.503" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:49.503" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:49.503" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:49.503" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:49.503" endtime="20250205 13:17:49.503"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:49.503" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:49.503" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:49.503" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:49.503" endtime="20250205 13:17:49.503"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:49.503" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:49.503" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:49.536" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:49.536" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:49.503" endtime="20250205 13:17:49.536"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:49.537" endtime="20250205 13:17:49.537"/>
</return>
<msg timestamp="20250205 13:17:49.537" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:49.537" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:49.503" endtime="20250205 13:17:49.537"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:49.540" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:49.541" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:49.541" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:49.541" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:49.541" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:49.540" endtime="20250205 13:17:49.541"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:49.542" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:49.542" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:49.543" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:49.542" endtime="20250205 13:17:49.543"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:49.544" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:49.544" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:49.569" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:49.569" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:49.543" endtime="20250205 13:17:49.569"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:49.569" endtime="20250205 13:17:49.571"/>
</return>
<msg timestamp="20250205 13:17:49.571" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:49.571" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:49.538" endtime="20250205 13:17:49.571"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:49.573" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:49.573" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:50.112" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet HTTP/1.1" 405 None</msg>
<msg timestamp="20250205 13:17:50.112" level="TRACE">Return: {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:50 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5474260000000001,
 'status': 405}</msg>
<msg timestamp="20250205 13:17:50.112" level="INFO">${RESPONSE} = {'seconds': 0.5474260000000001, 'status': 405, 'reason': 'Method Not Allowed', 'body': {'code': 405, 'type': 'unknown', 'message': 'no data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:17:50 GMT', 'Con...</msg>
<status status="PASS" starttime="20250205 13:17:49.573" endtime="20250205 13:17:50.112"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:50.128" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:50 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5474260000000001,
 'status': 405} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:50.128" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:50.155" level="TRACE">Return: {'code': 405, 'message': 'no data', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:17:50.155" level="INFO">${RESPONSE_PAYLOAD} = {'code': 405, 'type': 'unknown', 'message': 'no data'}</msg>
<status status="PASS" starttime="20250205 13:17:50.112" endtime="20250205 13:17:50.156"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:50.158" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:50 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5474260000000001,
 'status': 405} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:50.158" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:50.183" level="TRACE">Return: 405</msg>
<msg timestamp="20250205 13:17:50.183" level="INFO">${RESPONSE_STATUS} = 405</msg>
<status status="PASS" starttime="20250205 13:17:50.157" endtime="20250205 13:17:50.184"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:50.186" level="TRACE">Arguments: [ '"405"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:50.187" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:50.187" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.185" endtime="20250205 13:17:50.187"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:50.189" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:50.189" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.188" endtime="20250205 13:17:50.189"/>
</kw>
<doc>Test Description:Create pet with no payload 

 Expected Result:405 

</doc>
<status status="PASS" starttime="20250205 13:17:49.476" endtime="20250205 13:17:50.190"/>
</test>
<test id="s1-s1-s1-t8" name="TC_POST_pet_08" line="272">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:50.193" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:50.193" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_08' ]</msg>
<msg timestamp="20250205 13:17:50.197" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
             ('Type', 'Positive'),
             ('Description', 'Update pet name and status with formdata'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:50.197" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_08'), ('Type', 'Positive'), ('Description', 'Update pet name and status with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:50.193" endtime="20250205 13:17:50.197"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:50.199" level="TRACE">Arguments: [ 'Test Description:Update pet name and status with formdata \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:50.200" level="INFO">Set test documentation to:
Test Description:Update pet name and status with formdata 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:50.200" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.198" endtime="20250205 13:17:50.200"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:50.200" endtime="20250205 13:17:50.200"/>
</return>
<msg timestamp="20250205 13:17:50.200" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
             ('Type', 'Positive'),
             ('Description', 'Update pet name and status with formdata'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:50.201" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_08'), ('Type', 'Positive'), ('Description', 'Update pet name and status with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:50.192" endtime="20250205 13:17:50.201"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.203" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:50.203" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:50.203" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:50.202" endtime="20250205 13:17:50.203"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.205" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:50.205" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:50.205" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:50.204" endtime="20250205 13:17:50.205"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.207" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:50.207" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:50.207" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:50.205" endtime="20250205 13:17:50.207"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>mysession</arg>
<arg>${BASE_URL}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20250205 13:17:50.210" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2' | verify=True ]</msg>
<msg timestamp="20250205 13:17:50.211" level="INFO">Creating Session using : alias=mysession, url=https://petstore.swagger.io/v2, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20250205 13:17:50.211" level="DEBUG">Creating session: mysession</msg>
<msg timestamp="20250205 13:17:50.211" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000027252235A88&gt;</msg>
<status status="PASS" starttime="20250205 13:17:50.207" endtime="20250205 13:17:50.211"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${files}</var>
<arg>name=NEW.NAME</arg>
<arg>status=pending</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:50.212" level="TRACE">Arguments: [ 'name=NEW.NAME' | 'status=pending' ]</msg>
<msg timestamp="20250205 13:17:50.212" level="TRACE">Return: {'name': 'NEW.NAME', 'status': 'pending'}</msg>
<msg timestamp="20250205 13:17:50.212" level="INFO">${files} = {'name': 'NEW.NAME', 'status': 'pending'}</msg>
<status status="PASS" starttime="20250205 13:17:50.211" endtime="20250205 13:17:50.212"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>mysession</arg>
<arg>${BASE_URL}/pet/${PET_02_ID}</arg>
<arg>files=${files}</arg>
<arg>expected_status=any</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20250205 13:17:50.214" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2/pet/9223372036854766780' | files={'name': 'NEW.NAME', 'status': 'pending'} | expected_status='any' ]</msg>
<msg timestamp="20250205 13:17:50.215" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:50.777" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet/9223372036854766780 HTTP/1.1" 415 102</msg>
<msg timestamp="20250205 13:17:50.777" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet/9223372036854766780 
 path_url=/v2/pet/9223372036854766780 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '261', 'Content-Type': 'multipart/form-data; boundary=7d0f6d147c07d856025832558e7ca523'} 
 body=b'--7d0f6d147c07d856025832558e7ca523\r\nContent-Disposition: form-data; name="name"; filename="name"\r\n\r\nNEW.NAME\r\n--7d0f6d147c07d856025832558e7ca523\r\nContent-Disposition: form-data; name="status"; filename="status"\r\n\r\npending\r\n--7d0f6d147c07d856025832558e7ca523--\r\n' 
 </msg>
<msg timestamp="20250205 13:17:50.777" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet/9223372036854766780 
 status=415, reason=Unsupported Media Type 
 headers={'Date': 'Wed, 05 Feb 2025 10:17:50 GMT', 'Content-Type': 'application/xml', 'Content-Length': '102', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body=&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt; 
 </msg>
<msg timestamp="20250205 13:17:50.777" level="TRACE">Return: &lt;Response [415]&gt;</msg>
<msg timestamp="20250205 13:17:50.777" level="INFO">${RESPONSE} = &lt;Response [415]&gt;</msg>
<status status="PASS" starttime="20250205 13:17:50.213" endtime="20250205 13:17:50.777"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE.text}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.777" level="TRACE">Arguments: [ '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' ]</msg>
<msg timestamp="20250205 13:17:50.777" level="TRACE">Return: '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;'</msg>
<msg timestamp="20250205 13:17:50.777" level="INFO">${RESPONSE_PAYLOAD} = &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;</msg>
<status status="PASS" starttime="20250205 13:17:50.777" endtime="20250205 13:17:50.777"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE.status_code}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.792" level="TRACE">Arguments: [ 415 ]</msg>
<msg timestamp="20250205 13:17:50.792" level="TRACE">Return: 415</msg>
<msg timestamp="20250205 13:17:50.792" level="INFO">${RESPONSE_STATUS} = 415</msg>
<status status="PASS" starttime="20250205 13:17:50.777" endtime="20250205 13:17:50.792"/>
</kw>
<kw name="Convert To String" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE_STATUS}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:50.795" level="TRACE">Arguments: [ 415 ]</msg>
<msg timestamp="20250205 13:17:50.796" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:50.796" level="TRACE">Return: '415'</msg>
<msg timestamp="20250205 13:17:50.797" level="INFO">${RESPONSE_STATUS} = 415</msg>
<status status="PASS" starttime="20250205 13:17:50.792" endtime="20250205 13:17:50.797"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${RESPONSE_STATUS}"</arg>
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:50.799" level="TRACE">Arguments: [ '"415"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:50.800" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:50.801" level="FAIL">
ERROR: Status Code is missing or incorrect: "415" != "200"</msg>
<msg timestamp="20250205 13:17:50.802" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "415" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:50.798" endtime="20250205 13:17:50.802"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:50.805" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:50.805" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}='&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' | ${RESPONSE_STATUS}='415' ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:50.805" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:17:50.805" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.805" endtime="20250205 13:17:50.805"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:50.812" level="TRACE">Arguments: [ 'RESPONSE PAYLOAD : &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' ]</msg>
<msg timestamp="20250205 13:17:50.813" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.811" endtime="20250205 13:17:50.813"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:50.815" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 415' ]</msg>
<msg timestamp="20250205 13:17:50.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.813" endtime="20250205 13:17:50.815"/>
</kw>
<msg timestamp="20250205 13:17:50.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.805" endtime="20250205 13:17:50.815"/>
</kw>
<msg timestamp="20250205 13:17:50.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.804" endtime="20250205 13:17:50.815"/>
</kw>
<doc>Test Description:Update pet name and status with formdata 

 Expected Result:200 

</doc>
<status status="FAIL" starttime="20250205 13:17:50.191" endtime="20250205 13:17:50.815">
ERROR: Status Code is missing or incorrect: "415" != "200"</status>
</test>
<test id="s1-s1-s1-t9" name="TC_POST_pet_09" line="296">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:50.821" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:50.822" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_09' ]</msg>
<msg timestamp="20250205 13:17:50.825" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet name and status with formdata using non-existing pet id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:50.826" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_09'), ('Type', 'Negative'), ('Description', 'Update pet name and status with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), (...</msg>
<status status="PASS" starttime="20250205 13:17:50.821" endtime="20250205 13:17:50.826"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:50.829" level="TRACE">Arguments: [ 'Test Description:Update pet name and status with formdata using non-existing pet id \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:17:50.829" level="INFO">Set test documentation to:
Test Description:Update pet name and status with formdata using non-existing pet id 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:17:50.829" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:50.827" endtime="20250205 13:17:50.829"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:50.829" endtime="20250205 13:17:50.829"/>
</return>
<msg timestamp="20250205 13:17:50.829" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet name and status with formdata using non-existing pet id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:50.829" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_09'), ('Type', 'Negative'), ('Description', 'Update pet name and status with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), (...</msg>
<status status="PASS" starttime="20250205 13:17:50.821" endtime="20250205 13:17:50.829"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.832" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:50.833" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:50.833" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:50.831" endtime="20250205 13:17:50.833"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.835" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:50.835" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:50.835" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:50.834" endtime="20250205 13:17:50.835"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:50.838" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:50.838" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:50.838" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:50.837" endtime="20250205 13:17:50.838"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>mysession</arg>
<arg>${BASE_URL}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20250205 13:17:50.839" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2' | verify=True ]</msg>
<msg timestamp="20250205 13:17:50.840" level="INFO">Creating Session using : alias=mysession, url=https://petstore.swagger.io/v2, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20250205 13:17:50.840" level="DEBUG">Creating session: mysession</msg>
<msg timestamp="20250205 13:17:50.840" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000027251D55448&gt;</msg>
<status status="PASS" starttime="20250205 13:17:50.839" endtime="20250205 13:17:50.840"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${files}</var>
<arg>name=NEW.NAME</arg>
<arg>status=pending</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:50.841" level="TRACE">Arguments: [ 'name=NEW.NAME' | 'status=pending' ]</msg>
<msg timestamp="20250205 13:17:50.841" level="TRACE">Return: {'name': 'NEW.NAME', 'status': 'pending'}</msg>
<msg timestamp="20250205 13:17:50.841" level="INFO">${files} = {'name': 'NEW.NAME', 'status': 'pending'}</msg>
<status status="PASS" starttime="20250205 13:17:50.841" endtime="20250205 13:17:50.841"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_ID}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:17:50.843" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:50.843" level="TRACE">Return: '74640c46-e3aa-11ef-bd4f-744ca1d2e576'</msg>
<msg timestamp="20250205 13:17:50.843" level="INFO">${NON_EXISTING_ID} = 74640c46-e3aa-11ef-bd4f-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:17:50.842" endtime="20250205 13:17:50.843"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>mysession</arg>
<arg>${BASE_URL}/pet/${NON_EXISTING_ID}</arg>
<arg>files=${files}</arg>
<arg>expected_status=any</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20250205 13:17:50.846" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2/pet/74640c46-e3aa-11ef-bd4f-744ca1d2e576' | files={'name': 'NEW.NAME', 'status': 'pending'} | expected_status='any' ]</msg>
<msg timestamp="20250205 13:17:50.848" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:51.401" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet/74640c46-e3aa-11ef-bd4f-744ca1d2e576 HTTP/1.1" 415 102</msg>
<msg timestamp="20250205 13:17:51.401" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet/74640c46-e3aa-11ef-bd4f-744ca1d2e576 
 path_url=/v2/pet/74640c46-e3aa-11ef-bd4f-744ca1d2e576 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '261', 'Content-Type': 'multipart/form-data; boundary=564df73310b34e9a980feea2eabd28f9'} 
 body=b'--564df73310b34e9a980feea2eabd28f9\r\nContent-Disposition: form-data; name="name"; filename="name"\r\n\r\nNEW.NAME\r\n--564df73310b34e9a980feea2eabd28f9\r\nContent-Disposition: form-data; name="status"; filename="status"\r\n\r\npending\r\n--564df73310b34e9a980feea2eabd28f9--\r\n' 
 </msg>
<msg timestamp="20250205 13:17:51.401" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet/74640c46-e3aa-11ef-bd4f-744ca1d2e576 
 status=415, reason=Unsupported Media Type 
 headers={'Date': 'Wed, 05 Feb 2025 10:17:51 GMT', 'Content-Type': 'application/xml', 'Content-Length': '102', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body=&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt; 
 </msg>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Return: &lt;Response [415]&gt;</msg>
<msg timestamp="20250205 13:17:51.401" level="INFO">${RESPONSE} = &lt;Response [415]&gt;</msg>
<status status="PASS" starttime="20250205 13:17:50.844" endtime="20250205 13:17:51.401"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE.text}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Arguments: [ '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' ]</msg>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Return: '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;'</msg>
<msg timestamp="20250205 13:17:51.401" level="INFO">${RESPONSE_PAYLOAD} = &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;</msg>
<status status="PASS" starttime="20250205 13:17:51.401" endtime="20250205 13:17:51.401"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE.status_code}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Arguments: [ 415 ]</msg>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Return: 415</msg>
<msg timestamp="20250205 13:17:51.401" level="INFO">${RESPONSE_STATUS} = 415</msg>
<status status="PASS" starttime="20250205 13:17:51.401" endtime="20250205 13:17:51.401"/>
</kw>
<kw name="Convert To String" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE_STATUS}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Arguments: [ 415 ]</msg>
<msg timestamp="20250205 13:17:51.401" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Return: '415'</msg>
<msg timestamp="20250205 13:17:51.401" level="INFO">${RESPONSE_STATUS} = 415</msg>
<status status="PASS" starttime="20250205 13:17:51.401" endtime="20250205 13:17:51.401"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${RESPONSE_STATUS}"</arg>
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:51.401" level="TRACE">Arguments: [ '"415"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:51.401" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:51.416" level="FAIL">
ERROR: Status Code is missing or incorrect: "415" != "404"</msg>
<msg timestamp="20250205 13:17:51.419" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "415" != "404"</msg>
<status status="FAIL" starttime="20250205 13:17:51.401" endtime="20250205 13:17:51.419"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:51.421" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}='&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' | ${RESPONSE_STATUS}='415' ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:51.423" endtime="20250205 13:17:51.423"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Arguments: [ 'RESPONSE PAYLOAD : &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' ]</msg>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:51.423" endtime="20250205 13:17:51.423"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 415' ]</msg>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:51.423" endtime="20250205 13:17:51.423"/>
</kw>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:51.422" endtime="20250205 13:17:51.423"/>
</kw>
<msg timestamp="20250205 13:17:51.423" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:51.420" endtime="20250205 13:17:51.423"/>
</kw>
<doc>Test Description:Update pet name and status with formdata using non-existing pet id 

 Expected Result:404 

</doc>
<status status="FAIL" starttime="20250205 13:17:50.815" endtime="20250205 13:17:51.432">
ERROR: Status Code is missing or incorrect: "415" != "404"</status>
</test>
<test id="s1-s1-s1-t10" name="TC_POST_pet_10" line="321">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:51.436" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:51.437" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_10' ]</msg>
<msg timestamp="20250205 13:17:51.441" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet status with formdata using invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:51.442" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_10'), ('Type', 'Negative'), ('Description', 'Update pet status with formdata using invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Paylo...</msg>
<status status="PASS" starttime="20250205 13:17:51.436" endtime="20250205 13:17:51.442"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Arguments: [ 'Test Description:Update pet status with formdata using invalid status \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:51.443" level="INFO">Set test documentation to:
Test Description:Update pet status with formdata using invalid status 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:51.443" endtime="20250205 13:17:51.443"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:51.443" endtime="20250205 13:17:51.443"/>
</return>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet status with formdata using invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:51.443" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_10'), ('Type', 'Negative'), ('Description', 'Update pet status with formdata using invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Paylo...</msg>
<status status="PASS" starttime="20250205 13:17:51.435" endtime="20250205 13:17:51.443"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:51.443" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:51.443" endtime="20250205 13:17:51.443"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:51.443" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:51.443" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:51.443" endtime="20250205 13:17:51.443"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:51.452" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:51.443" endtime="20250205 13:17:51.452"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>mysession</arg>
<arg>${BASE_URL}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2' | verify=True ]</msg>
<msg timestamp="20250205 13:17:51.452" level="INFO">Creating Session using : alias=mysession, url=https://petstore.swagger.io/v2, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20250205 13:17:51.452" level="DEBUG">Creating session: mysession</msg>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000027251D42E48&gt;</msg>
<status status="PASS" starttime="20250205 13:17:51.452" endtime="20250205 13:17:51.452"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${files}</var>
<arg>name=NEW.NAME</arg>
<arg>status=invalidStatus</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Arguments: [ 'name=NEW.NAME' | 'status=invalidStatus' ]</msg>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Return: {'name': 'NEW.NAME', 'status': 'invalidStatus'}</msg>
<msg timestamp="20250205 13:17:51.452" level="INFO">${files} = {'name': 'NEW.NAME', 'status': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:17:51.452" endtime="20250205 13:17:51.452"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>mysession</arg>
<arg>${BASE_URL}/pet/${PET_02_ID}</arg>
<arg>files=${files}</arg>
<arg>expected_status=any</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20250205 13:17:51.452" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2/pet/9223372036854766780' | files={'name': 'NEW.NAME', 'status': 'invalidStatus'} | expected_status='any' ]</msg>
<msg timestamp="20250205 13:17:51.464" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:52.042" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet/9223372036854766780 HTTP/1.1" 415 102</msg>
<msg timestamp="20250205 13:17:52.042" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet/9223372036854766780 
 path_url=/v2/pet/9223372036854766780 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '267', 'Content-Type': 'multipart/form-data; boundary=9e4e2adc2e467b88c123ff58a5d5b046'} 
 body=b'--9e4e2adc2e467b88c123ff58a5d5b046\r\nContent-Disposition: form-data; name="name"; filename="name"\r\n\r\nNEW.NAME\r\n--9e4e2adc2e467b88c123ff58a5d5b046\r\nContent-Disposition: form-data; name="status"; filename="status"\r\n\r\ninvalidStatus\r\n--9e4e2adc2e467b88c123ff58a5d5b046--\r\n' 
 </msg>
<msg timestamp="20250205 13:17:52.042" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet/9223372036854766780 
 status=415, reason=Unsupported Media Type 
 headers={'Date': 'Wed, 05 Feb 2025 10:17:52 GMT', 'Content-Type': 'application/xml', 'Content-Length': '102', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body=&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt; 
 </msg>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Return: &lt;Response [415]&gt;</msg>
<msg timestamp="20250205 13:17:52.042" level="INFO">${RESPONSE} = &lt;Response [415]&gt;</msg>
<status status="PASS" starttime="20250205 13:17:51.452" endtime="20250205 13:17:52.042"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE.text}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Arguments: [ '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' ]</msg>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Return: '&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;'</msg>
<msg timestamp="20250205 13:17:52.042" level="INFO">${RESPONSE_PAYLOAD} = &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.042" endtime="20250205 13:17:52.042"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE.status_code}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Arguments: [ 415 ]</msg>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Return: 415</msg>
<msg timestamp="20250205 13:17:52.042" level="INFO">${RESPONSE_STATUS} = 415</msg>
<status status="PASS" starttime="20250205 13:17:52.042" endtime="20250205 13:17:52.042"/>
</kw>
<kw name="Convert To String" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE_STATUS}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Arguments: [ 415 ]</msg>
<msg timestamp="20250205 13:17:52.042" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:52.042" level="TRACE">Return: '415'</msg>
<msg timestamp="20250205 13:17:52.042" level="INFO">${RESPONSE_STATUS} = 415</msg>
<status status="PASS" starttime="20250205 13:17:52.042" endtime="20250205 13:17:52.042"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${RESPONSE_STATUS}"</arg>
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:52.052" level="TRACE">Arguments: [ '"415"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:52.052" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:52.055" level="FAIL">
ERROR: Status Code is missing or incorrect: "415" != "405"</msg>
<msg timestamp="20250205 13:17:52.056" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "415" != "405"</msg>
<status status="FAIL" starttime="20250205 13:17:52.052" endtime="20250205 13:17:52.056"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:52.056" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:52.056" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}='&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' | ${RESPONSE_STATUS}='415' ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:52.061" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:17:52.062" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.056" endtime="20250205 13:17:52.063"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:52.064" level="TRACE">Arguments: [ 'RESPONSE PAYLOAD : &lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;apiResponse&gt;&lt;type&gt;unknown&lt;/type&gt;&lt;/apiResponse&gt;' ]</msg>
<msg timestamp="20250205 13:17:52.065" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.063" endtime="20250205 13:17:52.066"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:52.067" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 415' ]</msg>
<msg timestamp="20250205 13:17:52.069" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.066" endtime="20250205 13:17:52.069"/>
</kw>
<msg timestamp="20250205 13:17:52.069" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.056" endtime="20250205 13:17:52.069"/>
</kw>
<msg timestamp="20250205 13:17:52.069" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.056" endtime="20250205 13:17:52.069"/>
</kw>
<doc>Test Description:Update pet status with formdata using invalid status 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:51.434" endtime="20250205 13:17:52.072">
ERROR: Status Code is missing or incorrect: "415" != "405"</status>
</test>
<test id="s1-s1-s1-t11" name="TC_POST_pet_11" line="345">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:52.078" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:52.079" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_11' ]</msg>
<msg timestamp="20250205 13:17:52.082" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
             ('Type', 'Positive'),
             ('Description', 'Upload pet image with formdata'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:52.082" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_11'), ('Type', 'Positive'), ('Description', 'Upload pet image with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:52.078" endtime="20250205 13:17:52.082"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:52.084" level="TRACE">Arguments: [ 'Test Description:Upload pet image with formdata \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:52.084" level="INFO">Set test documentation to:
Test Description:Upload pet image with formdata 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:52.085" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.083" endtime="20250205 13:17:52.085"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:52.085" endtime="20250205 13:17:52.085"/>
</return>
<msg timestamp="20250205 13:17:52.085" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
             ('Type', 'Positive'),
             ('Description', 'Upload pet image with formdata'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:52.086" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_11'), ('Type', 'Positive'), ('Description', 'Upload pet image with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:52.077" endtime="20250205 13:17:52.086"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.089" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:52.089" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:52.089" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:52.087" endtime="20250205 13:17:52.089"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.091" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:52.091" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:52.091" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:52.089" endtime="20250205 13:17:52.091"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.093" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:52.094" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:52.094" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:52.092" endtime="20250205 13:17:52.094"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>mysession</arg>
<arg>${BASE_URL}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20250205 13:17:52.095" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2' | verify=True ]</msg>
<msg timestamp="20250205 13:17:52.095" level="INFO">Creating Session using : alias=mysession, url=https://petstore.swagger.io/v2, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20250205 13:17:52.095" level="DEBUG">Creating session: mysession</msg>
<msg timestamp="20250205 13:17:52.096" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000027252015C08&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.095" endtime="20250205 13:17:52.096"/>
</kw>
<kw name="Get File For Streaming Upload" library="RequestsLibrary">
<var>${file}</var>
<arg>${EXECDIR}/puppy.jpg</arg>
<doc>Opens and returns a file descriptor of a specified file to be passed as ``data`` parameter
to other requests keywords.</doc>
<msg timestamp="20250205 13:17:52.098" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg' ]</msg>
<msg timestamp="20250205 13:17:52.099" level="TRACE">Return: &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;</msg>
<msg timestamp="20250205 13:17:52.100" level="INFO">${file} = &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.097" endtime="20250205 13:17:52.100"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${files}</var>
<arg>file=${file}</arg>
<arg>additionalMetadata=abcde</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:52.102" level="TRACE">Arguments: [ 'file=${file}' | 'additionalMetadata=abcde' ]</msg>
<msg timestamp="20250205 13:17:52.103" level="TRACE">Return: {'additionalMetadata': 'abcde',
 'file': &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;}</msg>
<msg timestamp="20250205 13:17:52.104" level="INFO">${files} = {'file': &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;, 'additionalMetadata': 'abcde'}</msg>
<status status="PASS" starttime="20250205 13:17:52.102" endtime="20250205 13:17:52.104"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>mysession</arg>
<arg>${BASE_URL}/pet/${PET_02_ID}/uploadImage</arg>
<arg>files=${files}</arg>
<arg>expected_status=any</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20250205 13:17:52.105" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2/pet/9223372036854766780/uploadImage' | files={'additionalMetadata': 'abcde',
 'file': &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;} | expected_status='any' ]</msg>
<msg timestamp="20250205 13:17:52.107" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:52.942" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet/9223372036854766780/uploadImage HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:52.942" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet/9223372036854766780/uploadImage 
 path_url=/v2/pet/9223372036854766780/uploadImage 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '69276', 'Content-Type': 'multipart/form-data; boundary=f1c677c39b4c6eebf9ea3bcd77a9f468'} 
 body=b'--f1c677c39b4c6eebf9ea3bcd77a9f468\r\nContent-Disposition: form-data; name="file"; filename="puppy.jpg"\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00\x84\x00\x06\x06\x06\x06\x06\x06\x06\x07\x07\x06\t\n\t\n\t\r\x0c\x0b\x0b\x0c\r\x14\x0e\x0f\x0e\x0f\x0e\x14\x1f\x13\x16\x13\x13\x16\x13\x1f\x1b!\x1b\x19\x1b!\x1b1&amp;""&amp;18/-/8D==DVQVpp\x96\x01\x06\x06\x06\x06\x06\x06\x06\x07\x07\x06\t\n\t\n\t\r\x0c\x0b\x0b\x0c\r\x14\x0e\x0f\x0e\x0f\x0e\x14\x1f\x13\x16\x13\x13\x16\x13\x1f\x1b!\x1b\x19\x1b!\x1b1&amp;""&amp;18/-/8D==DVQVpp\x96\xff\xc2\x00\x11\x08\x02\xc7\x03 \x03\x01!\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1d\x00\x00\x01\x05\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x03\x04\x05\x06\x07\x08\t\xff\xda\x00\x08\x01\x01\x00\x00\x00\x00\xf4\x99g\xb1nR\x8a\x16R\xcb4\xb3H\xf1W\x8d$r\xd8\x98\x9a\xbd`\x14\xe7%\x99^*\xf1\x839\x9d\x99SW\xa7\x14h\xe4\xb3i%\x05Xbe5\x93`\x8f:\x84HNi@\x04sr\xe1S[\x98\x061\xde\x9e\xc5\xa3z\xc0\xd2I,\xd3\xd85\x0c\x00\xc9\xe4\x96y\tW\xaf\x109I-\x89PW\x85\x84\x9eI\xa7M\x1d\x1a\xf1\xb1Kb\xd4\xa9\x05h\x00Y\xe5\xb2\xcc\x10f\xd3\x89I%\xb2\x8cB,\xcc\xc1Gn@\x85\xa2\xe9\xacNcXT\xb2\xcb&lt;\xf6\t\xe0\x80\x05\xdc\xe6\xb1#\xaa\xd0D,G5\x99Y\xa0\xae,\xe5,\xb3\x12\n\x94\xe0\x15%\x8bV](*\xc4.\xa5\x9c\xd9\x82\x9eeh\xdeK6X\x00b\xc8\xcb\x17\xb1nH\xa2\x10\xebd(`O$\xd3OjWPD\x02\xe4sX\x91\x9a\n\xd1\x0b\xbc\x93Y\x95*\xf0\x03#9\xa7&amp;U\xe8W\x89\x14\xb7-\x9b!\xad\x04i\x1d\x89\xd2\x18\xb3\xf3\xab\x0b\xcdv`\x01\x081\xf3@\xac\xdfp\x88#\xeb\x9e\xa0#9\xe7\xb3&lt;\x84\xabF\t&lt;\x93\xceN\xd5\xebB\xceGb\xc4\xac\xa3\xad\x1b1\xc94\xc6\x94t*B%,\xfa\x06\x9d\xa1\xad\x10\xa2\x96\xcc\x82\x9a\x1c\xca\x101Y\xba\xe3\x18\xb5l:1\x95\xcb\xc8"\x10\xe9\xaa\x89\x1c\xd3\xcfjg0\x80\x01\x13\xcb,\xee\xed\x05\x18E\xe5\x9a\xc5\x89R\x8e\xbcL\xc5,\x96\r!\xa9B\x08\xdc\xec]\xb0\xe9\rX#g\x96\xc4\xee\xc9\xaa\xe6S\x81\xa4\xbbl\x04B:\xb8\x94B[\xb7X\x020\xd7\x13\x92[6-\x1b\x9cp\x801\x9c\x93\xc8N\xd0g\xd7Ds\xdb\xb2N\xe3V!r\x92K\x06\x92\xafB\xa4bs\xdc\xb6I&lt;\x15c\x89I5\xa3L\x9a\x8emX\xd4\xf7\xa6\x11\x08\x82\x8e-6\x92\xfd\xc1\x8e6\r\x13\x9a[6\xe63Q@\t\x19\xcb9\x9a\x18)T\x17\x9akv\xe4H`\x80X\xa4\x96\xc4\x89(\xa8\xd0\x84\x0ek\x97%I5Z\xf13\xcdfvIG\x9bJ\xa8Kf\xe9\x0cq\x8cT1 \x1b\x17l\x8c@\x83Jk\x16-Hd\xf5\xe1\x14e,\xb3\x92O\x05\x1a\xd1\xb4\xd3\xdb\xb9"u\x05pJIlH\x99\xc6\xa6uX\xcakW\xe7I \xa9\\\x1c\xe7\xb2I\x99C\x95R\xb3\xcfz\xd0\x83F\x11fdV+\x1a\x06 ,:\x96.Nf\x9a\x08\x19I$\xb3Li\xd4\x14+\x02\x92{\x96\xe5N\xa2\xaa\t\x14\xb6%N\xca\x0c\xcap\xa9l\xdf\xb8\x92v\xafV&amp;3\xb32d\x86\x9e]@;:\x12\x88\x88\x0499PIgE\xc6 M\xb5ng3\x8e\xa4l\xf2\xc9&lt;\xf3\'v\xadN\xb0\x11\xd9\xb5nT\x9c+D(\xa4\x9e@R\xbcY\xf9\xd5X\xe7\xb5\xa9)\xa6AV\x00G5\xa4\x930g\xe6\xd6i/h\x10\x03\x00C\x8b\x96\x13\\\xbc\xd1\x88\x83tg!\x1cU#c\x92k\x16\r\xdd*\xd5+F\xf3On\xd9\xbb\xa6\xab\x1ch\x88\xe3\x0c\xdc\x9e\x8c\xf0(T\x07\x9ei\xefK&gt;\xec\xcd^\xb4BgjD\xc9\x9a\x1c\xba\x10\xabZ6\x90\x08\x83V\xc4\xce\t\xef\xdc\x08\x98@zC7\x8a\x9c\ni\xa6\xb39\xb1\xa5^\x84\x11\x9c\x93\xdd\xb4i\xd2\x82\x18\x93\x94u1j\xd0\xc8\xb3\xa2\x9a("\x92V\xbe\xa2\xd3\xe9\xb4\xebW\x04s\xd9L\x99*\xb9\x15#;\xda3\x08\xb00U\xc2\xcekZ3\x80\x83\x00t\xa6\xf0\xd0\x89If\xcd\xb9\xdd\x9d*\xd4 \x07\x9e\xcd\xbbN\xe8\x940F,\xa9\xe0\xd6\xa7\x81\xc0u{6\xed\xb4\x14!\t\x8d]k/\xd1t\x04\x0f5\xa3I\x935\x0c\xaa\xadcB\xf9\x0b\x08 \xa3\x85A\xae\xe9\xcd\x10\x03\x08\xf4\x8d^\xa4M&lt;\xf6oJ\xe9;U\xa1\\N{\x17,\xa2D\xa2\x80+C\x97\x9b\x98\x13by}\x8e\x9f\xa0\xb9z\xae}Z1\xd9\xb1eX\x90\x83g\xb32\xb1i;3\xa8\xf2\xf3\xeb\x1d\x9d;L(XG;\n\x8a\xbf\xad$Q\x80\xb0\xef\xd3\xaa*kV\xaeJ\xe8\x98k\xe6\xd6\x13\xb3j\xe5\x84N\x90\xd7\xa3\x06^\x1e52\x96?$\xc7\xef\xfb-9\xb3\xabC\x00\xe6\x96\xc6\xddz\x16f\xb6W\xf7\x8bSQ\xdd\x92hq\xe9E%\xfd#afv\x1c\xbc\x1ae\xa3\xacQ\x0cL\x03z\xa29m]\xb5+\xa7MW6\xa8If\xe5\xd9\x9d\xd3\xbbW\xcd\xca\xc0\xa5\x91\x90\xa5&lt;O5\x97\xd1{\xf9\xf3\xf3 \x8a\x193\x95\xde\xcb\n\x94\xda\xb6\xe9\x9d\xa0\xeb\xf5\xef\xd8N-O&amp;\x98\xd9\xd1\xbe\xe0)\n\x1c\x8cJrki \x01\x00\x08\xdak7.Z4\xe9*\xd9\xb4\xc0\xed\xdd\xbb1\'t\xa0\xa9\x8d\x8d\xceeg\xe7\xc5v\xcf\x0f\x85\xda\xf7\x17 \xadJ\x08\xab\xc4\xc3{\xa4\xc2\xcd\xbbf\xf8GZ\xb7u\xb1\xa9\xbde&lt;y\xd95\xde\xde\xc5\x80aL\x94x\xb8\xb5\xe6\xd8\xd0Q\x8cb!FK\xb7\xb4\xa6&amp;D\x95\\\xdaqKn\xed\xe9\xd3\x92J(*\xf1&lt;~\x15\xc8V}\xfc\xccl^\xcb\xba\xceg\x05\x97N\x9c\xaf\xd1W\xce\xa9\xa4\xf6o?\x1f\xcdu\xdd\xd6\xafQ\xd2\xce\xa1\xc9\xcd\xaf.\x86\xb4\x88E\x99(\xb12+[\xda\xb6"\x00\x0c\x14/_\xd0\xb0\x9d"\x1a\xd9\xb4\xa3\x9a\xcd\xfb\xd3;\x9aO\rq\x0f\'\xe5"\x8a\xfdl\x9e\x93\x99\xc1\xc0\xf5M\xaaJ\xec\xd0fQ\xa5^\x1e\x8e\xad+o\xa5~\x1a&lt;\xbe\x15\xcfE\xd0\xdb\xeez"\xaf\x8b\x9d\x1d\x9d]$\xcc\xcc\xc9W\xc2\xc9\x8e\xee\xe4\xe0\x0c"\x03_OFfH\x92\xad\x99N9m_\xbf3\xb994U\xe3x\xfck\x8b\xa7\xadd-\x1f\x1b\xc9g\xfb\'C\xac\x18x]&amp;&gt;L9V5L,X\x1a\xd3\xb6/\x12\xbb+\xda=o\xa2oA\x8dE\xafl[d\xcc\x85*\x98\x19\x91\xe9\xed\xc8 ",\x16tdN\x92U\xf3)\x0c\xb6\xb4/\xcc\x9c\x9d\xde:\xd11\x8f\x80r\x87\xb3lc\x87\x8c\xe5\xbaoU\xec2\xf8\x9f?\xd2\xed\xeds\xf9\x94\xe7\xbfr\xc6\xa5xs\xaaM\x8f\xc5kts\xbd\xee\xdf\xd2/eV==i\x13$\xc8U\x1e\x7f5\xf5\xf6\\@\x19\x80veL\x9d\xd5L\xea#5\xcb\xf7\xa5rwt\xd5 G2\xf0\xdeZW\xd2\x86&lt;~\x0e\x9f{\xea+\xcf8|\rn\xdf[(\xf3\xae\xad\x1d\xb89M\x91\xc5\x8f\x1b\x07\xa2\xbf&lt;\r\xd3v]\x95\xd8\xa5\xd7\xd0t\x85\x99&amp;\xce\xe7\xb3\xe6\xda\xd8\x8dF\x0c\xcc\x1bn\x99\xd2\xad\x97P\'\xbb\xa1vGDI\rj\xad$\xf6$\xf3\xcf4\xa9j[\x90p|\xa5\x0e\xef\xd0\xfc\x97\xca4-a\xfa\x8e\xf1n\xe6j\xe2\xd9\xd6\xe78\x8b\xfe\x83{\x92\xe7p\xba\x89d\x81\xb5\xba\xae\xbf\xa8\xbdcf\xd0\xa6\x14\x99\x9b3\x9f\xa3c\x7fI\x80A\x84Cm$\x95l\xaamf\xee\x85\xc2\'rN5j\x04\x96g\xb0X\x1e)Z\xdd\xb8)\xf9\x95\xda\xdd\x06\xaf\x9dy\xf4&amp;\x1dW\xa0\xe9\xe9\xa9\xf0\xb2\x87\x82\xe7{&gt;\xd7{\x1b\x91\xe5;\x9a\xf3\xd2\xb3\xa5\xb3\xd0v=&amp;\xd6\xb9\xa0t,\x90\xe4s\xf5ntW\x01\x81\x0bF;I\xd9T\xcb\xa2\xd6\xae\xe8\xdd7N\xe4\xca\n1\x1c\xf6mH\xcd\xe3\xbc\x94\xd7a\xe3\xb8\xee\x93W\xaa\xb5\xccx\rl\xed\xafO\xe9\xad\xdb\xd7\xa9\x8f\xc6p\x9cwE\xce\xf6~\xab\'\t\xc4\xfa\x1dK\xceS\x8fA\xd3u\xfd\x8e\xf8\xa4\x98]\x90b`A\xa3\xd1X\x10\x16@\x01\xb4\xee\xd4\xf2h+\x1a:w\t\x124\xed\x05*\xe55\xbbR:\\\xe7\x8a\xc9\'?\xc3\xfa\r-\x8e\x8a\x95_8\xf3\xd9\xfb\xce\xc2\xf0Z\xecx\xdc\xec\x1f\x1e\xe6m\xcfS\xd5z\xde\x17\x0b\xa0\xb1&lt;\xa0a\xa5\xd3w~\x91\xa0\xc9\x93;&amp;\x8b\x03\x0c5z\t\x04XXF=\xb7jX\xf4T\xfa:\x97\r:2v\x8a\x8df\xb1f\xdc\xa9\xd2n;\xc7r\xf9\x8fs\xca\xca\xb1\xb3G\x1dU\x8ff\xfc\xf1lv~{\xc9\xe3\xf9\xb7\x99\xcdb\xc7\xa6\xcf\xcd\xc1n\xfc\xf6#:\xba}\x0f\xb1w\x892\x12B\xed\x079\x86\xb7w\x08DY\x9a6\xdb\x1ay\x14\x1a\xc6\x96\xa5\xa7\'swx\xe9Si\xed[\x91"N\x87\x88\xf0?\xa3\xeb\xf1X\xc1\xd1\xd3\xa6\xd6\x82\xfd\xd9\xf5\xb7\x8f\x85\xe5\xb2\xf8\xff\x00&amp;\xc0\xbf\xeaZ\xb8\x19\x92\xe6oGl\\!\xe8~\x88\xea\xc5\x99$\xc9\xc6\xb71\x87\'G\xb4\x90\x88\xb0\x88lT\xc7\xa264\xf5,\x93\x93\x93\xbaT\xe8\x0c\xd6m\xcc\x93\xa4IAO*\xae\x17;[\xa6\x92\x94\xb5\xb4z\x9d\xb7\x8579\xc2e\xe1\xf3T\xe7\xd1\xb1J\x95Nc\xa1\xb9^zo/q\xf45\xc1L\xc92J\x8f-\x8b7Y\xa8\x99\x84XX,\xe3PV\xb4\xf5l\xa7rDN5\xa8\xc5%\xab\x93\xb2N\x91%\x0e&gt;\x06\xbe_5\x99\xd7L\x19\xf4}\x0b`#\xc2\xd6\xbf\x9f\xc8r\xbc\xf6.i\x1d\xd3\xa5\x9d\xc6\xf47B\x18\xe7\xb9\xef=\xdaB\xc92IgrY\x17\xba\xbd\x16L"\x08G6\x88\xdc\xd5\xd3\x9c\xd1;\x92u\x0e|\x07n\xdc\xee\xc9\xd3\xa7M\x9d\xcc\xe7\xf4r\xf29\x9dS\xc5\x8f\xd4v\xb4\xf1\xb0\xb9\x0e\xb1m7\'\xc2c\x9eu\xad\x13\x86\x86\x16n\x8a\x8a{}\x97\xb6^fd\x99\x93&amp;\xcc\xe4\xf2\xf5z\x9bi\x85\x85\x98G\x9c{z\xfar\x91;\xbb\xbax\xa8WV\xaeYN\x92t\xec\xf50r4\xfa:&lt;R\xd4\xb8\'\xd8\xac/\x0c\xf1\xeeW@=o\xd5\xf5\xf8\x8c\x0b\x15\xe6\xb2\x0b&lt;\xfc\xe3f)f\xe9\xbd\x97\xa4\x94S&amp;L\x936G\'Ko\xa6\x912aaa\xe6\xee\xeb\xe9\xc8Nn\x9d\xd3\xc7B\xb3Z\xb7m\xd2N\x9d%\x16W;/Yw\'\x8c\xcf\xd6\xd7\xbf\xa5v\xb67\xcd\xbf&gt;\x04Su^\x93\xec9\x1c\xf6\xac\xf3&gt;k\xe6\xeft\x7f;\xea\xde\xea\xfd+\xa7\xd5I\x992L\x90\xe1\xf2\xd5zm\xf6L)\x0b\x08\xe4\xec\xe8\xca\x88\x9d\xdd:\x1a5\x1a{v\xc9\xd2t\xe9&amp;\xcf\xe7\xe0\xd8\xda\x92\x9f%\x93k\xa9\xb9}\xf3\xeax\x17\xcdt\x85t\xbf@\xf6\xfc\r\x0e\x93KC:\xa44{\xff\x00I\xe0\xbc?\xd8\xae\xe8t\xb7\x99\x93!I\x9cG\x9f\xe5\x97U\xae\x85\xd8Y\x84X\xb4\xa4w\'D\xee\x82\xa5\x06\x9a\xe5\xc2N\xee\xc8\x93*\xb88\xba\xbd\r\xe2\xad\x8d\x8dWc^\xd5\x1apx\xaf\xcc\xf4D=\xbb\xda`\xe3\xa9\xf4\xda\xd7\xa8\xd4\xc7\x9b\xb1\xee6y\xccz\xdb\x9d\x1c\xac\x99\x0b\xb3$\xc1\xcc\xf3g\xd7i\xb3!d\x02\xc3\xa8n\xe6\xee\xee\xe9\xaaQ\x8akwH\x99\xd3\xbawPcr3u\x17\xa4\xb2\xa8\xe3\xd7\x8bvl\xccz\xde{\xe3|j\xec}\xe6L\xbc\xba\x9d\x86\xac\x14\xb32\xb5:.\xaf\xa7\xc7\xc0]6\xc1$\xe2\x99\x932\x8b\x96\xe7\xaeu\xd6\xd9\xd9\x84XDu\x9d\xcd\xdd\xdd\xddW\xcf\x86Kv\xe6N\x91$\xe9\x0eg%\x81\xbd\xd3Kq\xca,\xfa\xb5\xac\xe9S\xe7\xb9\xfe_\x13\x90\xea\xee\xdb\xd4\xe4\xe4\xd1\xed!\xa1\x0f:\x1b\x9a\x1b}\x85\\[\xbdM\xf1I\xd8Y\xd9\x92\x83\x94\xc6\xd4\xea\xa4I\x84XDCT\xc9\xc9\xdd\x12\x86\x8c/r\xdc\x8e\x93\xa7t\x9d\xaas\\D\x9d\x9e\xb62\xdd\x98 \xabX\xad6\x1f+\xc0y\x9e&gt;\xff\x00o\xae|N\xaf\xa1l\xe4\xd5\xa5GU\x97K\xd4\xaa:\xfd\x1c\xa2\x93\xb2fI5NS\'\xa0\xe9\x1d30\x80\x88\xb6\xab\x93\xbb\x92x\xe9\xc0Vn\x1b\xa4\x98\x93\xbb&lt;X|6/S\xd8\xac\x9bS]\x81\x83:\xb1=\xc8\xb1\xb2r\x86u\xe7\x1es\xeb\x9e\x81B\x9e%-\x0b\xf9\x12n\xf6\x06\x1d6\xc3\x82N\x99\x92I\xa8\xf2\x19\xbdO@\x99\x0b0\x80\x88\xeb#D\x89\x06}im\xda\x95\'I\xd3\xa4\xe3\x9b\xc6\xf1\xba\xfd\xbfCC\x07\x17G\xa7G\x1e0\xd3\x10\xbd\xa4l\xce\x18\xfc\x86\xcc\x19\xd5\xc3\x1c2m[\xd7\xeb\'\xbb\xd3\xddf\x14\x93$\x92l\xfe\';\xb6\xdbqd,"\r\x1e\xcb\xa7wp\xce\xce\x9a\xf5\xe9S\xa7I;\xb1*\x9c\xb7\x02\x1d\xcf]w\x0f\x16\xe5\xebC\x1c\xb9\x19r\xc4F\xac!\x82\x85\xa3\xabV\x8dH!\xe7*\xc7&gt;\xff\x00U\xa1\xb3\xd1\xca"\x92L\xc9$\xb2x:\xbd\xe6\xc90\n\x14"\x03\xae\xe8\x9d\x9b?!\xaf\xeaX$\xee\xce\x9d:xp\xfc\xfb\x0b\xb0\xeeub\xe5\xb1\xb5.KzQ\xc9\xe7\x15\xe7i\xa7\x8c\x152%W:\x89\xe0s\xf5ljht\x9a\x9df\xca\x01I\xd9\x92I,?&lt;/A\xd6L"\x84X@u\xdd\xc96~\x14z:\xd7\x1d\xd2$\xe9:v\xca\xe2x]\xff\x00B\xe8%\xad\xc9Aj\xdd\x9b\xea,\xfev#9/\xb1;P\x8d*\xb5\xa4\xa1\xcac\xde\xab=\xbe\xc7\xa2\xebn0\x0b\'fI:nw\xce/z5\xf4"\xcc\x98@\x1b]\xc9\xda\x8e\x05K\xfbW\xc9\xd3\xbb\xa7LIT\xe4\xbc\xd8\xfd\x17\xae\xbb\x15^r=I\xe76\xabO&amp;\xb0\xbc\xd7\t\x13g\xd6u\rj\xb9\x9c\xa9G,\xeb\xb2\xed:yD\x05\'d)\xd3\x87/\xe6\xdd\x0f\x7fq\x0b33\x00\x80\xed:z\xdc\xfe]\xdd\xcd)\x12$\x9d\xd2N\xa2\xe7\xbc\xd3\x9c\xf4\x1e\xf7V:\x91\xe5Y\xb8j8\xd5l\xba\xd1\xc6v,U\xb0\xf5+Vz\xe0\x1c\xb6qGc&gt;\xd7o\xdfo\x90\x03\x8aN\xcc\x92x\xb8\xef8\xec\xfb\xc9\x90\xb3 B\x02;.\xf1`\xe2\xcf\xbd\xacn\xee\x93\xa7N\xec\xd9|\x07\x98u\xde\x9d\xd1,\xd2l\xab\xd6\xd3\xbd`\xc6\x86*\xc6\xe6y\xd6\xac\x05ih\xaaY\xfc\xden\xb0\xe6enu\x9e\xab\xb6\xc2\t\x9d&amp;I3\xc1\xc1\xf9\xef\xa2\xf6\x86\xe2\xc0\x85\x98D6\x90b\xe0\x9e\xf6\xc4\xae\x9d\xd2wI&amp;\xab\xc7y5\x7f\\\xednQ\xcb\x95\xeb[\x99V\xb3\x10e\xd4\xa2\xd3\'\x86\x84\xf2\xcf\x13GV8y\xfa\xb4\xa1\xa5,\xfb\xfe\xd7\xa8\x84S:d\x9d\x99T\xf3\xbe\x13\xd6:\x87qaB,\x0c\xdb\r\x93\xcc\x96\xee\xdc\xc8\x93\xbb:vt\xa2\xe7&lt;\xb3\x86\xf5\x1fH\xda\x8f\x1e\x85\xc8r7\xed\x04\x91`\xd8\x97.\xb4DR\xd7\xaf,\x90\xcb\x14Ti\x1e=Zu\xe0\xb7w{\xd6\xf5P\xb2gI\x85\xd3*^]\xcbz\xf7B\xec"\xe2\xcc\x08\x03b\x8f+Sw\xa2\xb0\xe9\xdd\xd3\xa4\x92C\x97\xe6\xfeA\xdb\xfa\xcfM=\\*\xda\xb43\xeei&lt;\x15c\x8dA\rh\xa7*RGn\x92QA\x9f\x9d\x9d\t\xc5P\xae\xe9\xfa\x7fd\x98Rgd\x99&amp;\xce\xf2\\\xef\\\xd7t\xc2\x90\x8b\x02\x8e\xe75\x97\xad\xd3\\t\xee\xe9:N\x93U\xe3&lt;T}\x9f\xb6\xb8\xb3q \xdc\xa1\xc8R\xeb\xaf\xc4\x12d\xda\x85\xb2\xe3\x9e|\xeb\x11\xdd\x86\x82\x8e*\x99\xf941\xb4\xec\xd9-/C\xed\xac\xb3;;&amp;d\xc9dx\xdc\x9e\xbd}\xd93\xb0\x8b\x08\x0e.^\xa7I\xa0\xe9\xd1$\xee\xce\x92\x8f\x9c\xf2&gt;\x07\xd9=#P\xa1\xc2\xc6\xbd\xbb\x91\x99\x9b\x7fBF\xa3\x95\xa9\x0b\xe3#2f\x94`\x89T\xc6\xc0\x8a\x8a\x9a\xf4G\xa5\xdaz-\xd3I\x99!I\x93`xOI\xeb\xd6\x99\xd9\x9d\x08\xa1\x00\xe34:\xad\x12\x12D\xe9:I\xd0\xe5y\xb7\x8f\xfa\'\xac\xf4\x125&gt;r\x1d],l\xbc\xe9\xb6\xec\xc3O2h-\xd0e^\xccV\xa8\x9b\x00\xe3\xe3sT\xf4\x0e\xdc\xd2Z\x9bg\xd1\xf6\xa5I\x99\x93$\x99\xb9\x7f\x9d\xbd\x17\xd7l2avfa\x10\xe5\xba\xadd\x93\x92D\x93\xa4\x95&gt;#\xc4\xf5\xfd\x9b\xac\xb0\x873\x9d\x87KO\x94\xadJ}\xdd\x83\xa7\x92\xf9\xf3\xc54R\x8cV)\xb4sR\xe4y\xeaW\xf5z*\xf93\x80\xde\xf5\x8d\xb9S\xb3&amp;L\xce\x9b\x8e\xf9\xbf\xda=BAB\xc8P\xa6\x10\xaf\xb4i\xd3\x13\xbat\xe9(\xf9\x7f\x17\xe5=\xd7\xbe\xba\xee\x18\xbc\xec0n\xe4\xd4T\xce\xed\xebV(\x04J!\xd0\xab\x1d\xa8"\x8a(ry\xf9\xb6u\xa3\xcd\xcdP\xd6\xb9\xea\xbd&lt;\x8c\x92d\x992n\x17\xc0=\xef\xbb!\x06fd\x84E\xafJ\x92t\xe8\x92t\xce\xd9\x1eS\xe2\x9e\xc9\xeb\x9b$\xea.w\x06\x9c\x9b\x199\x11\x85\xad\xe5SF\xdcP(\x82\xdd(n\x85qY\x85\x15\xbb5G;\x1f&gt;\x94w}\x9b\xa7\x95\x92I\x92I\x83\xcf&lt;\x1f\xe8\xce\xbd\xc4\x18P\xb3\x802\xd1$\x93\xa4H\x92d\xd58\x0f\x9f\xf7\xfd\xef\xae\x95\xd2\x87\x98\xe7\xa1\xbd\xa7\x8d\x9b\x99\x0e\xd4\xf5\xf1\xf5w.I\x14q\xd8\xa9R\xca\x11\xaf\x04\xd6\x99\x9b\'\x91\xa3M\xa4\xbb\xeb\xbd\x94\xc9$\xcc\x92w\x87\xc9\xfcc\xe9\xce\x95\x90\x8b\x0b!\x10f\xd4I\xd3\xa7wI2\x8b\x92\xf0\xae7\xe8oH\xba\xe9\xd4\x1c\xbf,{\x16\xf1\xf2\xf3\xafG\x17?\x9b{\xb4\x9a\xc4\xba\x10KV\x95\x95Zh\xdeL\xbc\x0c\xb9\x96]J\xb6\x1a\xdf\xabw\xf32vfqD\xabx\xa7\x0f\xf4\x9e\xb3&amp;\x10fH@C]3\xbaN\xee\x85%\x83\xe3&gt;+\xee&gt;\xc7\xb4i\xd2\x8b\x9e\xe2\x9f\xa3\x9b\x9f\xa3U\x06pV\xcd\xd5\xdeWm]\xb2\xab\xbbS\x94\xe0\xc7\xe7\xb9\x1b\xd7\'\x939\xe2\xab\x7f\xd2}.vt\xc9\x92gz\x1f;\xc5\xf4M\xe4\x80E\x93&amp;\x00\r\x84L\x9d\xd2N,T\xbc\xcb\xe6\xdf@\xfa\x0b\xa87N\x99\xb2&lt;\xf1\xba\x0b\x1c\xc62\x87\x9b\xa3a\xa9\xedt7Dom\xddQ\xd6\xce\x80s\xa0\xc6\xc5\xae\xf5\xf4-\x9dEc\xd0\xfdBWL\xe2\xe9\x92|\x9f\x96:o\xa2-33\x0b!B#\x1e\xbb\xbaN\xee\x93&amp;\x8f\x90\xf9\xd3\x99\xfao\xd0\xec\xa6D\x99g\xf09=5\x8eR\xd4X\xf9\xd5\xa3\xbf[7sL\xa7iz\xa6\x8a\x9edy\x95\x16v\x15\xd9\xb2.:p\xbd\xdc\xfau\xa7I\x93\xa4\xce8_&amp;\xfag\xbc\xce\xcc\xc8P\xa1`\x00\xd8&amp;D\x89\xd2\x14\xd8~%\xe2\x7fDz\xf6\x8b\xa4\x93\xa6\xa9\xc6s]\x05\xbes\x02\xb9\xcfR\xa4\xf7\xe9A\xa5\x1d\xbb\xb5zk0A\x9c\x1c\xf4W\xa8\xd1|jS[R\x14\xdd\x97\xaa\xdc2\x14\x89\xd98\xf2\xdf\x1f\xfb\x8f\xb9\x1a\x14\xc2\xcc\x81\x08\x06\xc12wH\x99\x95/-\xf9\xaf\xd0\xbe\x92\xe8\x13\xa6t\xec\xf5\xf00\xb5\xf3\xb9\xaa\xd9gJ\xbdr\xbdi\xaa\xd5\xd3\xd6S\xda\xb5\x15\x0c\xdc!\xd1\x96\xa5&lt;\x91\xcf\xb59=\xde\xe3\xd0\xf4%$.\xe9\xdd\xdb\xce\xfe9\xfa\xaf\xd7\x12ff\x14,\xc0\r\xae\x9d\xd1:vh\xb8O\x9aq~\xa9\xf4SI:I&amp;\xa3\x8fo\x90\xc4\xc9\xa5J\x01&amp;\xb5r\xeeu]\rY\x18o\x05\x0cLkw\xa7\x92\x841R\x81\xedn\xf4=\x1fA\xa1#\xa4\xee\x89;\xf9\'\xc9_e\xfa#3!d(D\x18v\x1d\xdd\x12IG\xcf\xfc\xf3\xe2\x7fM{}\xf0I9$\xcc\xd0\xd1&gt;/\x9c\xcf\xcc\xa6a;\xa9ujL\xebF:\xa8+bg\x9c\xba\xb6\x9a\xf2\xad\x01\xedn\\\xb3\xa5x\xc8\x9c\x88\x9d8\xf8\x7f\xcc\xdflvl\xe2"\x90\xa0\x06h\xf6\xdd\xdd\x89:\x0c\x8f\x1c\xf9\xbf\xd2\xbe\xa1\xe8\x93$N\x99\x02\x08j_\xe6\xb9ZY\x99\xf5\xa3\x9aI$\xb3N\xc5\x95$\x95kCG\x0f,b\xe8:\x0b\xb7\xac\xce\xf3Z\x9eY\xac[\x9aG)dtE_\xe6\xaf\x1d\xfbo\xa3d\xcc\xcc.\x0c\xc0\xc1\xb2i\'&amp;h&lt;\xef\xe6\x1c\xef\xad}\x12AH\x9d&amp;\x15\x1cT\xdbPj\xd2\xc6\xe5\xb1\xa0\xb8\xacA\x8d\xc1o\xf4\x05p\xa1\xa3C\x0b\x9c\xc9\xa1\x9f\xd5{\x1e\xa9\xdb\x9c\xecZ9\x10\xdc\x9eY\x0eY\x1c\x88\xaa|\xa1\xcc\xfd\x9d\xa4\x92a\x06L\x08\x19\xb7]$\xee\xd1\xf3?7x\xf7\xd3\xde\xebi3\x11$\x85\x08AY-\x11\n41\xea\x15h\xf3\xbc\xa3\xc6{\r]\x0e\x92\xfd~;;+#.\x1a\xfd\xcf\xd0Z\x13Kp\xac\x199),O!\xc8R\x1c\x8b;\xe3\xab\x7fa[I\xd9\x80\x1cE\xa3\x11\xe8]$\xe8hx\x8f\xcd=\xdf\xd6\xfd\x1b\xb2D\xee\xcc\xce\xd0\x84Y\xf1t5\xe2\xa7Z\x9c5\xaa\xc5G\xc0\xfc\xb6\xe5\xad\xadK\xf9\x9c\x9c4\xa6\x81K\xe8~\xe7v\xe3\x94\xe4lv\x18\xac\xc9$\xb2\x1c\x8eE\xce\xfcC\xea\xbfT\xc8\xc9\xc50\xb3\x03\x087B\x89\'Qy\xbf\xcax\x1f`\xfa\xa9\xa6D\xee\x98S\xa1\x06\xa9\x06\xcc\x14`\x82\xbepW\xafO\xc48\x12\x96q\x88qc\x82ebn\xdb\xdc-\\\x19Zd\xa6\x9e\xc4S\xcb$\xb2Hh\xdf\x8e\xf8\x87\xe8\x1f\xa4H\x13\xb330\x8b\x007F\xeci\x0f9\xf2\xf7\x8b\xfd\x17\xf4\xae\x82d\xe4\xe9\x90\xbaL\xcdV[\x95)V\xa5P*\xd6\x8e\x97\x98\xf2\x11E\rj\xf1\xd3\x81\x9eI\xad?\xd0\xfa6g\x94\x80&amp;\x92\xc5\xa8\x1eid\x9c\xd1\x11y\xd7\xc5\xdfR\xfb\xaaL\x85\x90\xa1\x10a]\x1a\'MC\xc1&gt;k\xec&gt;\xc9\xea\x98S\x93\xa4\x85\'L\x80f*\x95\xa8\xd3zu)\xd7\xa9\xc3dU\xafZ\xadZ\xd5\xe2\x07R\x17\x13\xf4\xf6\xf5\xbb6gd\xa4+u\xdey\x0eY\x08\x9c\xbc\xd3\xe3?\xb0=i\xd2`d,\xc0,\xc3\xd3\x13\xa6\x8f\xcd&gt;J\xc2\xfb\x13\xd8\r\x93\xa2vH\x1d\xd9\x9d\x08I$ua\x8f2\x95*5+s\xb4j\xc1^\x95j\x95\x82 \x8d\xf2|\xef\xdf=KJ\xdc\xe6M!\xa9\xa1)$\x96bs%\xe2\xdf*}\xbf\xdc\x92ff\x16L-\x1b.\xa1;\x0f5\xf2\x97\x95{\x07\xd7\xda)\xc5\xc9$\x93:d\x90\x8a\xb1\x145\xe2\xa1\x9f\x9fB\xbd\x1a5kE\x05\x1a\xb5\xea\xc3PB&gt;\x17\x8e\xec\xbe\xa1\xd3\xb6e!5\xab\rH\xa6V%\x91\xcd/\x9b|\x1b\xee\xce\x84\x9d\xc133\xa0\x10q\xe9\xc8U\x0f\x9a|\x1fo\xed.\xdc\xd9\x92$\x99\xd2I\x93\xb0B\xda1\xd4\xadV\x9e^}hjAV(b\xabZ\xa5Z\xd5a\x8e\x97\x94ev?Rj\xd8)\tX9\x8e\x9a\x9aI\xcc\xd9\x98&gt;L\xe1\xbe\xe2\xd6qt".\x99\x93F\x1dX\xb0y/\xcb8\xdf`\xfb\x04\x84\xc9\xd1\'H]$\xc9\x0e\x1d\xed\xa8\xeb\xd3\xa7\x99\x9b\x9e\xd1\xd3\x82\x08\xa1\x8a\xbdZ\xf5+V\x82\xaf;\xe4\xf1\xfa\x8f\xd0\xfa\xd2\xbbZ\x05fK%H\xa5\x94\x89\xc5\xa8|Ew\xed\x9d\x02pt \x80\x10\xa1\x8b\xae\x15\xcd\xfc\x7f\xc2\xfa\xc7\xd8\x17\xcd:N\xe9\x9d"d\xc9(y\xae\xc5\xab\xd6\x86\x96}A\x82\xb6\\P\x040E\x05j\x90A^\x0f8\xf3\xa9=\x9b\xdb7f\xaam-\x8b\x93Oj\x9d\t\xa5F\x85\xf2&gt;\x1b\xef\xbe\xbe\x9aFd\x99\x0b\x02\x10Q\xf5#G\xe6O\t\xd2\xfbs\xbeD\x9d\x9c\x92@\x8d\xd2I\r-\tY\xa3\xa7\x99\x05\x04\xd9\xd8\xf5\xe2\x82(\x9a\x18jG\x1c4\xfc/\x9c\xd8\xf6\x7fR\xe9kX\xcd\xab&gt;\x9e\x8bJsT\x92ru\x1b\xf3\x7f\x11{w\xd2\xb6Rd\x99!x\x81\x08\xf4\xc3\xe2\x1f6\xe2}o\xee2\xa6t\x9d\xd2qrd\xee\x9a,\xbdz\xaa\x080\x1f/l)\xd6\xc3\xa3\x1cE\x12x\xe0h\x97#\xf3\xe4\x1e\x91\xe9\xfd_R\'\x83\xb7\xad\x1f5\xd7]\xcf!\xb31\x92\x88|\xa7\xe5\x8f\xa3\xbd\xc2\xf2\x06\x16d\x94l(\x07\xa9\xe1\xfeR\xe1\xfd\x9f\xeb\xabI\x12H\x913#I:!\xce\xf2\xefX\xcd\xd2\xb1\xe7\xd3\xdf\x83\x16\xe49\xf8U\x0c\xdd\xcc\n5\x1b\xf8\xdf\x91E\xf4\x86\xcc\xdd\xb5\xf9x\xfe\xae\xd4\xb8z6hT\x9b^iMVo\x02\xf9\xf3\xea?b\xb2\xa3t\xa2vaB\x02:?/y\x05\xef\xba\xba\xd3N\x93\xb9$\x92\'d\xee\xa2\xf3\x1f\x18\xfa~\x9e\xbd\x8f/\xee\xb2c\xc9\xcb\xd3\xa1\xccGb\xd4\x93\x1b\xb8\xb0g|\xeb\xc0t\xdfR\xc1\x9f\xd0\xea\x9f\'\xd9\xd5\x0b\x99\xd7)r\xfa\xfd\xa4\xf3\x98W\x1f\x9a\xfcs\xeb\xafK\x91\x867L)\x81\x99\x9a/.\xf9\x96\x87\xd4\x7fE\xc8\x9c\x93\xa2N\xec\x89:t\xedK\xe4\x1e?\xe9\xed-\xa9r\xb6q\xa8\xd0\xcd\xb5\x9d\x87\xa7\xa3fy\x8c\x94M\x1e\x0f\xca8^\xf7\xedA[/\x9di7\x82\x86\xeeT!K\xd0:[\x12\x13V\x1f\x8e\xf8\x0f\xb6\xbbb`\x14\x81\x0b!a8\xfe*\xe5=+\xedMRI\x9d\xdc\x9d\xd8\x92H\x93\xbc~u\xf1eO\xb1\xa1\x18\xad]\xa1S\x0f\x1e\xb4\x9dF\xfd\xf9\xe7va\x10\x87\xcf~X\xa9\xf5\xa7|\xd2\x15l\xbc\x8c\xfa\x9c\xc6\xf4\xb6\xbbm}I\x8c\x92\xad\x07\xc3\xf9\xdfhu\xa6\xc0\tFL\xa3f\x08W\xc1w\xbe\xf5\xeaM\xd31"\x91\'cqbrY\xdf%\xf8\xbf\xb8}oO\x17\xcf\xd6?/w^\xe6\xb6\xfd\xb9\t\x13F \x03S\xe7\xdf\x0c/\xb9\xaf:\x91\x08\x93\x84\xd2\xbd\xb3\x98Q:\xaf\x9b\xf0m\x1f\xbev\xc4E\x93\x80\x80\x88(\xd8~\x0c\xfag\xe9)\t\xdcR"4\xee\x93\x939!\xf2\xbf\x910\xfe\xf6\xed#hB\x08\\\x13\x88\x84ba\x12\x89\x87\x94\xf9\x0f\x9b\xef\xbe\xc8\x01#g\x8c\xcc\xcd\xcaR0r\x02\x8b\x96\xf8^\xd7\xe8\x04\xcc\x02\x81\xd9\x84D@#o\x8f\xfe\xed\xban\x92DI\x1a7I\xd3\xa6\xaf\xf1\xd7\x93\xfa\xb7\xd9\xa8\t\xa3@\xd1\xb3\xc6!\nA\x0bD1\xf9\x17\xcb\xd9\xff\x00V\xfa\xf2cN\x82S7"$,\x9d\x10y\x8f\xc6\xde\xaf\xf5\x94\xe2\xcc)\x81\x84Y\x81F\xd5\xfb\xa9\t\xc9\x8d\x8d\xd3\x11$i\xdd\xd9\xbc\xdf\xe3\x8c_\xbd{Wd\x02,\xe0\x9a0\x18\xd8b\x06\x8d\xab|\xb7\xe3\xb3\xfd\xe7x\x1c\x93\xbaDdc+\x88\'I\xbcC\xe5?u\xfay\xa3\x12\x16Q$\xd1\x83\x04a\xd7\xd826DN\xe9\xd27NI\xd5?\x92\xfc\x8b\xd4&gt;\xc97&amp;`\x14\x98E\xa3\x08\xc5\xc6\x05\x1cT&gt;\x1f\xe6\xbd\x17\xec\xc2\x18\xd0\xce\xecjC\t\x130\xa4\xef\x17\x81\xfc\xc3\xf4W\xd11\xa4\xca"\x8d\x98E\x80\x04;)dt\x8d\xd3\xb9&amp;3gvE\x07-\xf1\x87;\xf6\xff\x00\xa01\xb1\x10\x88:h\xc1\x81\x85\x0cl\x03\xe4\x1f\'\xe6\xfd[\xee\x02\x00\xeaG7cN\x90\xb2L\x90\xfc\xdb\xf3\xa7\xd4~\xd4\xec$\xa3\x10d\r\x08\xb8E\xff\xc4\x00\x1a\x01\x00\x03\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\xff\xda\x00\x08\x01\x02\x10\x00\x00\x00\xecR\x04\x92\xdb\x99N\xc5#\xa1C\xaa&amp;]R\x15X\x86\r\x8f2P\xd4+BCd\xaah\x13\xa6\xa0\xa69uM&amp;\xc652\x01\x12\xe8R\x16\xe2J\xa2QV\xa6Kb\x0b\x1a\x06\xc6)@,\xe8\xa5(\xa6\xe6J\xa9\x95UD\xc1l\x81\xe8\xc4\r\xb4&lt;\xc6)\x96\xda\x91\xd0\xa0,PU\xb53M\x92\xaa\xd8\x81\xb0fc%\x0c\x14\xd3iAT\xa6K\xb0\xcdU\x12\x8a\xab$*\x90&lt;\xd8\xa4`\x90\xd8\xa1;S#\xbap\xa6\xad)um&amp;X\xc4JR\r\xa9N\x82$\xa6B*\xd92\xad\x935UI7`\nRC\x05%\x01\x12\xe8R\x1a70\xd52\x19v!U\x82\t\x94\xc0%6\xc8\x81\xd1\t\x9aQ\x10;\x14\x95T\x80v\x00\xa5\x00\x12\x8a\x1a\x89)\xa9\x8a|\xee\xed\x8e\x9c\'Ur\x81\xd8\x81\xcaM\x90\'BS4\xc8\xe6\xf3}\x1f\'\x9d\xe9\xd9\xdd\xd2\xe9$\xde\x8eSU`\x81\x03&amp;A\xb1J\x9b\x0e?\x17\x8bZKj~\xee\xd6\xa4f\x8ee\x8fA\x03\x91\x8aPSP)\xb3\x97\xe7p\xeb\xc4\x87\xa8u{\xbaJ\n\xd0\x98m\xe8\x00$\xc5"\xa6\xe1K\x0f?\xc2\xe5\xed\xdb\x19\xce\xb5\xbc\xaf\xd3\xf4U\x85Y\x12\xdd\xda\x06K\x14\x01mBJ|\xef\x1b\x99\xfb\xdc\xbc\xf0\x8d{8u5\xf4\xbb\x02\xedD\xb2\xed\xa5BjR4d\xe6#\x83\xc2\xca\xb4\xf6x\xb9!\x9aw\xf0S\xcb\xd0\xf554\xa8\x90.\xdc\x8cd\xc8\x1a\n%\x0b\xc0\xe0\xab\xdb\xb7\x87\t\xab\xbe\xde9\xaa\x9f[\xb6\xb4&amp;\x01\xdd\x88\nP\x87TD\xcak\xe5\x04u\xf5y\xfc\xd3\xb6\xda&lt;\x9d\xf4qo\xee\xde\xa4H;\xb4\x985"v\xcc\xa5\x0c\xf9a\x1d\x9b\xf9q\x17\xae\xb0\xa7n\xdeNo\xa0\xeb\xd0\x89at\x02*F\xa9\xb8\x89\n_6\xb2=\x03\xcd\x94\xf6p\x9e\xbd\xf8\xf0v\xfb\x9b\x19\xa4=i \x1c\xb4\xdd,\xe6[\xa8\xf9\xf8\xcbN\xfeO?\xa63\xe9#=o\xbf\x0eI\xfa\x1e\xd39\x19\xad$\x00\x82\x99\x13 \xdc\xfc\xeeS\xbfw\x9b\x8f\xb3\xc3\xcb\xbc\xe3w\xafo6\x07O\xb7\xa6`\x1b\x04\xb0@\xe8\x98\x94\xe9\xcc\xfc\xfe\x13\xbfw\x99\xecz\xfeG\x94\x18\xf6N~\x97&gt;\x0f\x9b\xda\xf4\xa5\x0c\xd5\xa42YA0\x93\xb2\'\xc7\xf3\x8e\xbb\xe5\xf7;9|\x1a\xa3\xd5\xe1\xe4\xf5\xb9\xa20\xec\xf7\x10\x87\xb1#NJ\xa5*\x10\xedB\xe0\xf1/\xb28\xfd\x7f[\xcc\xf27\x9e\xdfW\x0f\x03\xd6\xc7\x9cQ\xf4m\x05jH\x06uc\xc9&amp;\xae\xb3\x95\x1f7\xa7V\\\xbb{\x9e\x1e\x1e\x8f7g\xad_;\xdd\x96\rG\xd1\x82\r\x9c\x00\xd1U\x19\x80\xb43I\xf8\xf1|\xdc\xcb~}\xbd\xaf9\xfb\x93\xe1\xf5\xc6\n\xb5\xf6@\x1e\xa40sT\xa2P:\x99A\x11\xc7\xc5\x87;\xd7\xd8\xf4&lt;\xae\x0fw\x93\xcf\xebx\xaa\xec\xf4@\x1e\xf3 9\xa73)\xab\xac\xe4\x18\xf8|\xcc\xb0\xd3\xdb\xea\xbe\x1f\x1b\xa7\x18\xea\xdb\x9a\x9f\xa7\xd44=\xd4\xa1\x85\xac\xd2\x02\xd4 \x1d\xf1y5\x87O\xad6\xfc,\xa5\xef\xd1\xce?v\x80+e\x03\x1bq\x08\x07P\x81\x15|\xfeEsz\xfa\xcd\xe9\xe6\xf9S[o\x89\xa7\xbc\x80+R@u0\x90\x9d\x99\x82\x1d&gt;\x7f=_\xa1\x1d\x87?\x1f\x89\x9e\xbb\xf4s\xafG\xd1\x00+G \x17\x9a\x94\xc7S"\x07Q\x9f\x11\xb7T\xea\xf1\xe1\xf2\'m;\xf0^\xe4\x83E\xd8\x90\xca\xc8Bvf\x00\x9d`r\xbd\xf5(^w\x975\xaf\xab\xbe\xee\x01\xa2\xed$\xc6\xa0\x04\xeed\x04\xd9\x8b\xe6]\x1a\x94g\xe7p"\xfd\x0fKY\x80M]\x12\r\xcaH-\xe6\x02\x1d\xe7\xcb\xb4e\xd3yo8\xf1\xf14\xfa}m\xa2@F\x95(\x1b\x94\x80\xd2`\x01;\xc3\x9fc-\xaak\'\xcb\xc8V:\xfb\x1d\x19\xa0\x03G(\xa6L\x88w\x98\x00\xa8\xc3\xce\xf4\x14h\xe7y\x9c8\x95b{]\x10\x80\r+0\xa0\x80E\xa9\x00E\xae^&gt;\xc2\x13\xd4\x8b\xc7\x88X\xcf\xb7\xd4\x92\x06\xb5y\x8cd\x89\x97\x08\x04:|^W\xa3\xa4LtZ\\1Y`{\x9d"C\r\x1e`S\x81\x16\xf3\x00\x06\x9f\'\x1fj\x8c\xa8\xb8\x82V\x1c\xeb\xdb\xeb\x00\x03G\x98\xc6\xe1\x15q \t\xd1&gt;o7u\xc7/B\xa9\x8dg\x0c1\x9fw\xa5R\x18\xae\xa168\x0b\xac\x90\x02n\xf1\xe0\xc3\xb3L\xb8\xf5\xd2\x9emg\xc7\x9a\xf7:\x86\x99/G\x986\xe1V\x93\x08\x01Z\xac8+w\x97;\xd6\xcc\x83\x0e \xf6{@\x04j\xf3\x07D+\xbc\xe4\x00VG&amp;[R\x9cc[3\x83.\x1b\xbf[\xa9\xb1\x01\xb1\x9am\xbc\xcd\x0c\x80\x01\xad9\xb8\xebrs\xc4\xb1\x92sq\xe8\xfd&gt;\xe6\xc1\x06\x8f0\xa6\xa6\x9c\xc8\x00\xaeo\x93\x87~\x892\xc5\x92\xb4k\x9f\x83w\xdf\xe8\xd2hU\xa1\n\x86E\x90\x80\x13\xb2&lt;\xfe{\xed|\xf5\x88\xe5\x8e9\xb9v^\x97\xa0\xd3\x11Z"F9\xd2!\x0c\x06k\x87\x9f\x92\xedy$\x9ec\xac\xfc\xe7k\xaf\xd7b\x18\xf5P\'No\x10\x00)^&gt;k\xe6\xe8\xeb\xceL\xdev\x11\xe7].\x9fd\x00u\xa2\xcc\x03I3i\x89\x8c3\xf2\xb7\xe6\xae\xec\xe2\xf0mR\xc7\x89\xba\xd7\xdbh\x03KP\x98[\xceZ`5\xae9\xf9\xbd\x1c\x8b\xd1\xce\x08\x13+\x9f\x95T\xef\xedX0\xb1 \ny\x80\x02\xb4\xe7\x0f;\xa3\x8e=e\x8c\xb4\xe48\xb1\xdc\xcb\x7fgD\x14\xac\x94\xc0\xa2\x00\x00\xaa\x89\xc7\xcd\xdf\x0c{uR\x98\xf3\\\xab\xbb\xcf\x9d\xbd\x9d\x00\r\x14\xa1\xb1\xc8 \x06\xb6\xc4\xe6\xf3\xb7\xe6\xcb\xb6\xe9\x0eiFz\x9c\x92{\x96\x00\xe9\xe62\x82A\x00i\x15\x077\x9d\xb7!\xd1\xcd\xdb\xa2\xac\xe8\xcd\xdc\xf1\xc5{Z\x8c\x0b\x99\x18S\x80@;!,&lt;\xedx\xe5O^\x9bVmMa\x84S\xf6\xb7\x13\x0b\x94\r:\x81\x00T\xe9\x98c\xe6k\xe7^&amp;\x9b\xed\xd5\x9dE\xf2s\xc5\x87\xb5\xd2\x00Z\x92\x84\xdec@\\^l\x8f*\xfc\xbaEt\xdfF\xf3\xcerD+=\xbe\xa4\xc4\xd8\x86\'P\x80\x06\xe4\x08\xf2\xb4\xf3b\x1d\xf4o\xa7nX\xcf.RY\xecv\x00\x8a\x10\r\xd6h\x01\xc6\xd9\x81&gt;M\xf9\x8e,\xe9\xde\xbb\'\x1c\xe3\x8b\\\xd5z\xdd\xc0\x03\x10*/4\x00\xe6\xe4\t\xe4\xe7\xf3\x9c\xddo\xa6\x9a\\Lr@\x1e\xb7h\x01I\x00:\x84\t\x8d\x02\x0c|\xce\x1b\r\xba\x1e\xcbX\x95\x87 uz\xda\x80+I\xa67\x12\xc1\xc6\xb0\x02q\xe4\xf9\xee\xd6\xfd\x8e\x8a\x9c\xaar\x8a\xf4\xf6\xd5\x02)9ld \x1a\xa9\x01\x0f\x83\xc7\x82\xfa\xbb\x9bDM\'u\xb6\x9b\t"\x84\xa8l\xcd\x03n\x00M\x99\xe5\xe6p\xef\xdd\xd3iH\xef\x07Zi\xa6\xa1(T\xe6\x80\xac@q\xac\x00\x01\x9b\xcb\x9a\xde\xe2\x87TsS\xbb\xd3f\x945NJ\x07\x90\x17\x96\x92\x02\x11$D\x9b\xb9T\xdc\xe1J\x9e\xfa\xb73QR\xe8c\xc51\xb9\x01\x08D\xc2\x93bJ\x05\x04\xd3\xdft!\xe7H\xa1\x8f$^z\xe6\x00\x89\x1c\xa9\x87a4\x95H\x9dk\xbbHy\xd0\xc0fH\xa8\xb9\x04\x08Nd\x83D\x91&amp;\x8a[\xab\xe8\x1c\x8f+\x18\xc5X\x82h\x04\x02NE\x06\x8a\x10\x8d\xe1*\xaa\xe8\x002\xd0`\xd3\xc5^Z\xc0 \x10\x9c\x93\x15\xac\xc2\x12\xd9AF\xda\x80)\xb1\x80\xccB5\x80\x04\tT%\x9e\xba(\x99\x1e\xd0\xa4\xd3M\x00\xa9V\x98\x03\xc2\xa6\x92\x00@\x81L\xce\x9aL\xa5&amp;\xd2\xa5\xd6\x9a\xb4\xdc\x16\x0c\x03\x1a\xcbD\x80\x04\x12I.\x99"F\x99\xdee\xde\xb4\x15\x050\x18b\x95\xc0!\xa0\x110[jA7\x17\x8c\xebw\xb0\xae\n\nM&lt;\xf2\xa0@\t0\xces6\xa2A\x951X\xdct.\x81\xd4:\x00i\xe7\x9d\xca\x00\x04\x04\xe4N\xa0\x147\x11\xb6-3\xa2\xa9\xe7clC\xc2nA\x02\x015\x85\x0cl\xaa\x12\xcf\\\xcc\xd3\xe9\xd0\xac\xf4\x19B\x0e{H@\x80I\x984\xcb\xbb\x02D\xb9\xf5\xe6zu\xd5^:\x0ccO\x9a\xe4\x04\x00\x92\x1f*\xd7;\xde\xa8ft&gt;u\x9dt]\x97\xcf\xb1I\xaa\x0e]\xb3\x10\x00"[\xe7\xcbW\xb5\xb2\x91\x96\x89*T\xaa\x9b\xc3q\x8d1\xf3\xd2\x96\x84\x02\x13\x1a\x18\xc6\xc9\x9dT\xa6\x052\xb0\xe9M\x80\xcc)"A \x8a\xa0C*h\xac\xcb\x12\x13,o\x1d\xca\x04\xc31\nA\x08E \x06\x16&lt;\xcbs,t\x8ax\xf4&amp;0j\x12\x14\xa0\x02[\x10\x9b\n\xa37D\x80R\xb0\xcbv\x0c\x07\x9c\x84\xa11\x11`\x90\xdb\x0bQT\xa4sM\xb1F\xe3`\x07\xff\xc4\x00\x1a\x01\x00\x03\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\xff\xda\x00\x08\x01\x03\x10\x00\x00\x00\xe4\x06&amp;\xd9!NPY(v\xa6]T\xa4\x02\x00L@\xa8\x06\x0c@\xed@UJET\xcav\xe1&amp;\t0\x04\t\xb6\x866\x93)\xcc\x8e\xcc\xc6S\x89*\xd4\xa0\x1c\x80\x02\x00l@\xdasW2*\xb8I\xdb3N\x9aR\xd8\x92`!\xa0`\r\x88(R:\xa8\x96hL\xa2\xdc\xc8\xe9\x12\x98&amp;\x9a\x06\n\x86\x93l\x94X\xe0.\x94H\xe9\xa8m\x8aP\xc4\x00\r0h\n\x12\x1d\xb9\x91\xe8L"\x9b\x84SD\xa0\x00\x101\x80\x03d\x85\xb2\x13\xd1\x91)\xd8B)\xa2P\x00\x8460\x13lBv)\x1e\x82\x89\x1d\xb5\t\xd0L\x8cB\x00\x1842\x9a\x80\xabp\x9b\xb1d\x9d\xd99\x8e\xd2R\x00\x00\x86\x03@\xe8\x94;n%\xe8\xc5\xb9\x19\x84ILP0\x10 `\x00\xdbR\x17d\xca\xbe\x9e\xde_O\xa5e\xcb\xc3\xcf\x12\xdd%\x00\xc1\x00\x00\x98\x149C\xba"__\xad\xd46g1\xe1\xf3\xa7@@\x00\x80\x00\x01SjB\xdd(:\xbd\xdd\x87:\xd6j9|,\xa9\x8ea\xb15,\x10\xdaN\x99(z\x04\x9d\xfe\xcfL@my\xc1\x1eW\x9cK\x99E $\x00\x00\xb6\x94\x86\x97#\xef\xf6z\xd7\x97\xae\x9a\xd5O\x1fF+\x97\x83\x98Y\xa2\x84\x12\x02m\x0e\x99\x08\xabb\xec\xf7;\x1e&gt;WN\xfb\x0c\xe0\xea\xc1\x9ew\x9f\x99\x9a\xa0A \x03\nb\x94iM/k\xd5\xd5srto\xa1\'\x0fL\xca\xc7\xcc\xe32)\xb4\x92\x04\x01M\xa8\x15\xdd\t}G[8\xf9\xbb:\x07\x18\xce\x99\xe5;q\xf8\xd3\x91L\x08@4P\xc5)\xe9C\x85\xf5\xba\x87&amp;\x1e\x95N\x93\x95\xceq\xcb\xd3^\x07&gt;E1\x12\x81\x82\xa0\x12Wt(\x7fWV\xb8N\xc5\xadJH\xcb\x8b\xa3\xb3\xcc\xf1q,\x02\x10\xd0\xc6\x04\xa7\xa52b\xbe\xa7J\xcf\x8b\xa7zV\x94\xc5O\x06\xfd\x91\xf3\x9cm\xb0P\x03\x15\x00\x91Z0\xcc\xbf\xa5\xdc\xcf\x8b\xba\xbc\xde\xee\x84\x94\xc1\xc7\xbe\xe7\x9f\xe2\xe7m"\x00`\xc1!\xdd\x8er\xad}\xfe\xc9\xcb\x9b\xb7\xcb\xf2=of]r\x87\x1e\xdd\x03\xf0\xfc\xfa\x04@0\x18$\xed\xd3Y\xab\xd3\xd7\xf4\xa7\x19\xeb\xf0\xf8\xba\xfe\x834x\xfd\xfby\xfb\xedU\xe6x\xec\x11\x03\x13\x1bR=\x1bs\x93\xd6\xbb=\xdc\xb2\xad\xfc\xcf+\xd8\xf4\xf0|\x9e?G\xb7\xe7\xe9\xd2\xdf?\x81"\x08\x18\x05\xa4\x96\xb4\x0f8\xbd\x1e\x9fD\xb9\xde\xf3\xe4\xfb\xb5\xc3\xbf\'\x8c}\x17\x1d\xee\xcc~}\x00\xa0`\x172U\xd1S\x91\xad\x07\xaf\xd1\xc9\xd1\xd3\xaa\xbc&lt;\xafB\xbe~\xfd\xceu\xd1K\x8f\xc5\x00P4\xc5\xa4#V:\x8c\xabV\xcb\xd3n\xddz\x9e~_\x9d\xea\xf6\xf8\xdd^\x8f,n\xd7\x9d\xe6\t\x93\x0c@\\\x15\xa3\x1b\xc66\xb0\x1e]\x9e\x95\xf4/\x1f\x9a;\xfd5\xb1\xcf\x96\xe2\xf1\xf9\x00s\x90\xc0\x1c\x9aXT\xe3Z\xb0\x0c\xba\xfd)\xe8\x8f*\xf3~\xbfU\xe5\x8e{\x8b\xe7P\x06p0\x10\xafPfq\xa6\x808\xc7\xab\xd1]&gt;|o\x1c\xde\x87\xa5\xa6\x19\xce\xe77\x83I\x86p\xc0\t\xab\xb1\x86\x06\xec\x07\x8a\xe9\xec\x1f\x17O2\xdb_^\xb1\xcf.\xc7\xe3\xf04\xc50\x02\x05\xa5\xb1\x99\xc5\xea4\xd6\x1a\xed\xd4\xa3\x0e\x8eU\xbe\xfe\xa4\xc4\xf0z\x13\xf3\xf6\xc9jd\x00N\xecb\xc9mCD\xe7\xd2t\xceq\xb6Q\xa7g|\x19\xf9\xaf\x8au\x04\x11,\x04US\t\xcd\xec\x03Y\x9b\x9a\xbc\xe3l\r\xba\xfa\xf3k\xcf\xe3\xc6\xf4\x003\x96\xd0-U\x0c\xc9k@\xc5\x8e\x9d9\xbd2;yK\xdf\xab\r\x1f/\x9d\x8e\xb4\x023L\x13Z\xb0\xa9\xc6\xb6\x01\x93\x8e\xfd\x19\x8eN\xb5\xd1\xcb\xb5\xa7\xae\x1ef\x1aSB2(\x126\x18\xf3\xcf[\x01\xbcg\xa7\xbf\x8997\xcfY\xd3GT\xbc\xac4m\x01\x92\xb1!l0\xc8\xd8\x06\x18.\xbe\xceT4U\xab\xd2\xee\x9f\x91\xcf\xaab\x0c\x8a\x12\rFNz\xd0\xd3\'\x17\xd9\xe8q\xe4\xe9\xe7\x0c\xea\xb7\xae\xd1\xe4\xf3\xe8\x08\x16j\xdaH\xd5\x86+\xa0\x06\x9eQ}]&lt;\xf2h\x94\xbbwZ\xf4\xcf\x91\xcf\xa4\x89\xa39\xd5!\x1a\xb23\xbd@a\x82\xdb\xb7\xa3\x97\x1a\xdf5.\xa6\xf4\xea\xda&lt;|nZ\x03\x17bH\xd5\x99F\xf4\x03q\x89\xd1\xd7\xb76o\xa2s\x95\xa2\xa7\xe8\\\xf8\xf99hf\x0fD\x92[\xb8\xc6\xb7\x00\xa3\x08\xd3~\xa5\x81Z\x99\xca\xd5V\x9d\xe4\xf9\x19\x08\x01dZ\x14\x9b\x91\x96\xba\x00\xc3\x05\xb7F\xd8\xc8\xf4\xb8\x95t\xba:\xd2\xf22\x10\x01\x89\xa4\x89-\xccM\x98\xc0\x9cN\x9e\x97\x8c\xba\xd4D\xb2\xbaz\xa2\xbc\xaet\x80\x16.\xd0\xa4\xde3\xd3@`e\x9d\xf5ug\x83W\xa0R\x91\xef\xd8\x97\x9d\xc8&amp;\x82rzJB\xdf%\xb3\x18\xc9\xc5k\xd7\xd0\xb9\x15\x97Si\x1ao\xd0O\x9d\xc8\x00\x89\xca\xb4\x81%\xa6w\xab\x00##~\xad\x8e|\xed\xbbT\x85}\xed\x1c^x\x02\'+\xa9\x10\x9coE\x00\xb1\x9a\xdf\xb1\xed\x1cm\xadgIe\xf6\xeb\x9a\xe3\xf3\x80\x05\x19\xdd\x04\xa4\xafQ\xb0F\x06\xb7\xdf\x96\xef\x89\xdc\xe8\x026\xed\xd2\x17\'\x96\r\x06y\xdd\x04\xa96\xa1\x83S\x91\xbd\xf6\xe1\xd1|\x15j\x98\x07Gr\xcds\xf9h\x00\xce*\x84)7\x06\x0c\xc5V\xb7\xdb\x8fS\xf3\xe7`\x1a\xb9\xf47\xe54\xc7\xc9@\x06q\xa3D\xb9\xad\x00``\xb7\xad;\xb2\xdbNLK\x07\x16\xfa\xe7\x93\xb6\xf3\xf2P\x02\xcdj\x84\x89\xd2\x80a\x10\xb7zwg\xd1|\x99E5y\xd5Vgf\x87\x8d \x06KT\nV\xa3\x06,\xd3\xd5\xeb\xdf\x97M\xf3W4\x05\xc8\xd4k\xdfq\xe2\xcahy\x1a!J[\xa1\x80b\xb6\xa7\xa7v}u:r\xf3\xe6\\\xb1um\xba\x9f\x136\x80\xc9\xd8\x92Kt\xc0"gv_\xa1\x1d\x8a\xc3\x8a0\xa1\xcfOcA\xe3b\xd0\x19U\nD\xb7\x00\x0c\xd5[\x1f\xa3&gt;\x83\xb5&lt;3\x86f\xd5\xd1\xd1\xa1\x07\x8b\x88\x80\xcd\xd0\x91+f\x00d\xb6\x18\xfd\x05\xd9z\xc2\xe4\xc69\xabk\xdf\xa5\xb4\xbc|\x10\x06UD\x89-\x982$\xd0c\xf4\x17\xa0\xc9\x8c1\x9eg\xae\xb5\xd5n\xa7\xc7\xe6\x13\x0c\xad\x89"w\x003*\x86=\xfa;\xdb\x9cr\x8c\xb3\x9d,\xea\xdfE\x1e?0\x03\xce\x98$\x96\xc0\n\'a\x83~\x8fqQ\xcf\x82\xc4\x8b\xd2v\xec\xd2x\xfc\xa8\x18(\xb6$\x92\xd9\xb1(5L\x03\xd0\xf4\xaeg\x9b\x9ae*\xd1=5\xcf\xcf\xc7*\x1bR\xe8R%\xb8\x04+ch]^\xae\xb7\x97\x1f*\x91\xde\x99\xb5\x11\x9eY\x83\xa16A"\xe8\x07*5\x18!i\xafwf\\x\x04\xd5Lj\xa63\xcf \xa2\x93d\xc8\x97@\x12N\x83\x01\x1aM\xee\x96n\xe5\xcc=\x94DFB\xa66$\x93\x9e\x80 \xa66\x80\xa0\xd1\xb8V\xe2Uk\x04\xceY\xa0e\xcbHB\xe8\x02U\x8d\x89\x80\xdbm\x8dB*\x91+,\x90\x06\xb0\t\x01\xb3%\xc6\x83\x01\x80\xc7EQ2\x9c\xd8\x92\xcb\x10\x13\xd71\x00\x1b2)P\xd8\x00\xc66[ 2\xd0Js\xcd!\xad\xb3I\xa6\x1b5%\x83\x00`\xc2\x98\xec\x80\xcbF\x94F"b\xdb\x11\x80\x1b9q\xa00\x18\x0ctK\xa1\x0f+\xa4\xa7,\x98\'\xa6@\x00l\x81h&amp;\x00\xd3c\xb9\x97@(\xb1\x91\x9eh\x13\xbc\x9a\x06-\x874\xc6\x004\xdb.%\xd3\x05\x16T\xcc\xe2\x84Ud\xd3C[*\x8d\x01\x8a\x84\xd5\x03r\x14\x0eU+S\x19\xc0*\xac\x98\x86\x8dXP\xc11\x8a\x98\x08\x1bU\x05\x1a^\x11\x19\xa1S\xcd\xa0\x03K\x9b\x01\xa6\xc1+\xad\x0c\x93\x06\x19\xd5\x9a#\x03\x15%\x90\x80\x1a\xbds\xd0\x1a\x1b\x057\xa3 \x04\x04\xd5\xc6\x91Ra\x12\xed@\x00\x1a\xd4\xd00(\x12{C\x02I\x02\xaet\x8b\x0el\x91\xa4\xc0!\x8fh\xb0`1\x89\xd5\xcd\x04L\xa6\xa9\x9a\xf4\xe1\xb2\xc3\x9a$\xd7$\t\x81\xd1\x9d4\xd8\x14\x13W\xb9\x9e\xb9`\x90\x96\xb2\x9e\xee\xe7\x9b9\'\xa3\x02X&amp;o\x9d\x83`\xc6\x90\xf7\xd39\xc2Bh\xd7&amp;0R\x92]&lt;\xc2`\x83im\xb6\x0c%\xb4$\x84\xd2+\\J\x04\x92\x12\xe9\xe7H\x004\x19C\x189`!\x10\xdc\x97x\x8d\x88\x12K\xa7\x98@\xc0\xa2\x9b\x18\xc1\xcbnA$\xe5\x1a\x19\x8d\x89\xc8\x85\xbf;B\x01\xb6\xe9\x83\x18&amp;\xc1\x04\x84%\xbc\xc2l\x12\x12\xad\xf9\x80@\xd51\xd8\xc6\x13I\x8cI"Q\xbep\xc0$\x11[\xf2\xb4\x98\xc5\xff\xc4\x00#\x10\x00\x02\x02\x02\x02\x03\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x01\x02\x00\x03\x04\x11\x05\x10\x12 0\x13\x06@\x14\x15\xff\xda\x00\x08\x01\x01\x00\x01\x02\x01\x13B\x01\xa1\xd1}\xfa\x00&amp;\xba$\x9fA\x00\x03\xb2w\xe9\xa0\x00\xe8\x9f]@;bO\xa0\x80z\x18a\xebZ\xd0\x1d\x98\xf0\xf7\xad\x05\xf1\xf1+\xe3\xe3`+\xe3\xe2\x14\rkZ\x80\x00\x14\x08In\x87@\x00\x00\x1a\x84\xfa\x88\x00\x1dl\x93\xed\xa0:0\x937\xde\x80\xed\x89;\xecA\x00\xec\xc3\xd1\xf4\x1d\x1e\xda1\x87\xb1\x00\xe8\xf4e\x90\xf6 \x10\xfa*\x81\xa8X\x9e\x84\x00@\x00\x9a\x84\x9fm\x01\xae\x89\xdf\xa8\x03\xd0\xfb\x08\xa3\xd1\x8bC\xd8\x82(\xf40\xfah\rz&lt;0\xf6\x00\x9a\xf42\xd8z\x10A\xe9\xa8\x07E\xba\x10M\x00\xa0\x0e\xc9\xf5\x10\x00:\xd9\'\xd8@;\'\xb1\xd6\x80\xf4hO\xa0\x8a\x07\xa1\x86\x1fQ\xeac\xc3\x0f`(\xf5id#\xa1\x040\xcdk\xad\x96\xf5\x00\x0e\xc9\'\xdbZ\xebd\x96\x9b\xef@va\xf6\x03]\x98\xd0\x9e\xc4P\x07\xa3\x1fMhz\xb4x{\x10@=\x0cyd=\x08\xb0\x08f\x8fE\x89\xec\x00\x00\x03\xb2I\xf6\x03\xd0\xb1m\xf4 \x80k\xb2w\xd0\xeb@\x01\xd9,I\xdfB\x00\xa3\xd4\x9d\xf6\x00\xf51\xa3C\x0fB(\xf6x\xf0\xf4"\xc1\xecO`\x00\x00\xf4\'{\xdfz\x03]\x96f\xde\xfa\x10\x00=\t\xf6\x03\xd0\x96$\xf5\xa0\x14\x0fV\x87\xb1\x04\x10{&lt;0\xf4"\x80=\x0fVG\x86iB|t\x00\x01}\x0bo}\xeb@vI,\xc4\xf4 \x00\x01\xe8Oz\x00\x00=\tb\xc4\x98 \n\x00\xf5&gt;\xcb\xecc\x92{P\x07\xb5\x91\xbb\x11}\xf5\x00\x00\x0e\xf6[~\x80\x01\xafF,\xc7\xa1\x00\x01@\x1e\x8cO\xa6\x80\x1e\xcc\xccw\xd0\x8a\x15}L&gt;\xa0\x0ff\x8eOb(\x1e\xc6Y\x1b\xad(Q\xd9\x10\x80\x00U\xf4\xd9;\xec@\x00\xf5b[}h*\x80=\t\xf6\x03\xd4\x96$\x93\x04\x01F\xbdL&gt;\x80\x0fw,I\x82,Q\xd9\x9a\x86Y\x0fB(\x03\xd9T\x0fBI\xf4\x10\x00=K\x13\xde\x80P\x07\xa1$\xfa\x89\xb2\xca\xfd\x12\xecl\xfd&lt;\xfc\x83#\xa9\'\xd0\xc3\x0fb\x01\xecc\x93\x0fB(\x1e\xed\x1e\x1e\x84Q\xeaz\x1e\xa4\x96\xf4\x10.\xbdI\'p@\x00\x00\x0fR}\x04\xf2\x17\x1b\x1e\xc5\xc99v\xe4\xbd\xff\x00\xa7\x92\xb0o\xd0X\x1dol\x9a\xb2\xd5\xfah}@\xf61\xc9\xe8\x05\x88=\x8cidn\x94,\xd7\xc9\x89b`\x80\x00\x14{\x16$\x9e\xb4\x00P=\x0c&gt;\xba\xf3{\x1d\xdb-\xef{\xab\x7f\xd0\xb4\xd7\x99o0\xe1\xbfB\xe5\xaa\xc9\xa7+f\x18{\x00{\xbchz\x11B\x83\x0fZ\xed\xe3\x93\xd2\xc5\x1f"\xc4\xf5\xa0\x02\x85\xf5\xdb1m\xf4\x00\x00{\x12N\xfa\xf2k\xac\xb1K\xd9nE\xd7\xe11\x159\x85\xcb\x17.\xd6y)6\x87\xf2\x9et\xe6+\xf6\x00\x1e\xc6&lt;h`\x8b\x10\x01\xee\xf1\xe1\x82,_\x9310M\x00\x14/\xa9\x8c\xc4\x9e\xc2\xa8\n\x07\xa9\xec\xb1\xb5\xb2^\xf3p\xb7\xcb!\x86@4\n\'\x8e\xf7\x0c-\xe6\xa7\x1c\xba\x01[\xf9\xed\x8e.J\x99\xb5\x83\xdc\xc7\x87\xa1\x14(\xf7"\xc8\xf0\xc5\t\x07Z\x86\x1e\xf6\xceO@\x00\x14\x0fS\x19\x99\xb7\xd0\n\x02\xfb\x12c1\xb2\xcb\xac\xb3\xf4kGMg%zL*\xd2\x81S\xc7r\xf6\x16k  \xe2\x1a\xeb\xc8\x84\xc5\x84,\xa6\xe4\xbdmW\x1e\xed\x1e\x13\x04P\xbf\x1b#C\x04H;\xd7f3\x13\xd0\x01U@\xf6fbL\xd0\n\xa0{\x92\xf6Y{\xdan\xb5\xccB[\xcf\x93\xc8v\xa2\xace\xa4\xb0g6y\x12\xa4\xb4\xaaSe\x12\xf6\xf3\x0e\x086\xba\xbf\xebM\xf4\xd8-C\xea\xf1\xa1\xe9b\x0f\x81\x96G\xe8J\xc0\x9a0\xfa\xf9t\x00\x01@\xf6ff&amp;\x08"\xa8\x1e\xe4\xb35\xb6\xe4=\xaf{Zaj\xdc\xb9t\x98\xd2\xb7c\xfb\x16\x01\xe7\x9065\x87\x15\xb1\x95\xae\xc9\xb4\xbdMU\xad\x91\xb4\x97_Fe6\xad\xc9z7f9=\xacQ\xf0iln\x96W\xf2\x01B\xa8Q\xecc311B\x85P=\xc9\x8e\x96\xbeFG\x98\x02\x18\xf2\xb5\xcf-e\x97aS7\xa3\xdb\x08KJ\x1b\x14\xa5\x8c\xc24\xf2\xa8\x01d\xca\x86\xfc+\x92\xca\xef\xa2\xf5=4\xb2\x1e\x96 Q\xf0iln\x92 \xef^\x82(UU\xf61\x99\xdc\x98"\x85U\x1e\xe4\xf4\xd3.1\x0e\x19\xdc\xc6\xab\xc71r\xae\xc6\xb3\x16\xc8_aD\xd1\xe9\xd4\xb0)b\xb3@Uk\x1a{l\x99\x14\x03\x83\x91]\xca\xd4\xdd\x8dph\xe5\xc9\xe9b\x0f\x8b\xcba1"|QQT{\xb33\xee\x00\x02\xa8\x1e\xecOns\xec1\xec\xc7Z\xa7\x82\x0f1o+n\n\xe3\xd7Z~&gt;W\x9a\xf2\xc4+\xb7g\x88\x18\xe8\x00\xa2h\xba\xc2\xeel\x15\xc4\x7f\xd2\xbb\xb1\xb2\xf1\xf2\x96\xc7/\x0c\x11"\x0f\x8b\xcb!\xea\xb8\xbf\x15@=\x8c,\xccH\x00\x05U\x0b\xeeI=\xbc\xcc\x96YN9\x8f\x1a9\xb5\xe9|\xe9\x84)J\x92\xfc\xbc\x8b\xb2\x13\x12\xcal`\xd0\x9bJA\x15U\x02\x16eu\xf2g\xba\xdb[\xc3}Un.E\x05\x8bC\x04@\xa3\xe3d\xb2\x18\xb2\xa8\xbf\x10=\xd9\x99\xf7\x00\n\xa8\x07\xb9$\xf7\xaf\x0eJ\x95\xaah\xa0P2\x9f\x02X8\xf9@\xcb\xbf#\x93\xb7\x9c\xff\x00\xd4\xc5\xca\xc7\xbb\xf4{\x11\x1eh\xc5\x88-\xb5\xf2)\xba\xca\x9a\x11p\xf2.\x87\x7f\xa26=\xd8\xf95\xe5M(\xadu\xf1\xb2&lt;1eC\xfc\x0c\xce\xc4\xc0\x15U\x00\xf83n\x08\x00\x1a\xe5\xe8\xb6-5\x95\n\x82f\xcc^\xb8\xebFG-\xcb\x12\xd3\xfej\x9f\x07#\xce\xa5\x02\xc4\xb9\x1aT\xff\x00\xaeFNFF.M\x19v\xa5\xb4\xda\xe2\xd6\x18\xd75\xad\x12V\xd4\xdbE\xd5&lt;H\xa3\xe2e\xb1\xfaY_G\xd4\xfcY\x9d\xf7\x00TT\xd7\xb9\x8cOB\x00\x00\x13&gt;\x9bkh\x05T\xbc\xb1\xb9;\x85oN.3`\xf2\xf8\x95\xa3\xd3\xe1\xe1\xc6\x84\xae\xa5\t]94\xe4U\xb7\xc8\xcc\xcf\\\x9cL\xda\xc5S&amp;\xbb\x9c=\xa3\x1c\xa1A\xb9[\xd1u6Vk\x83\xe4e\xb1\xfaH\x9fvgr`TU@=\xccbL\x11`\x80w\xc8\xe33*\xb3yr9|v&gt;\xd6\xa4\xaagQ}\x1e%h\xaf\x1b\x17\xf1\n\xb3\x1a\xab\xcd\x87$\xe6\xe5D\xc5+\xc6g\xd5m\xf3%&amp;p\xc7\x88\xa6\xb4}\x8b\x15\xe8\xb2\xab\xa8o\x91\x96\xc6\x82W+\xfa\x98\xce\xeeL\x01UW\xe2\xc5\x8fZ\x00\x0fNO\x10!&gt;VZ\x95\xdbZ\xadh\x03B3\xf8\xcf\xfc\xa4\xe3p\xb0V\x8f\xcc\xa5iV=\xf3WW\xc8\xd5?\x15M\xe0\xe4Xn+_ \xf3\xc6x82\xb7\xa6bJ&gt;m.\x8d\xd5A~\'\xd1\x9d\xdc\x98\x15\x11T\x0f\x81\x8c\xdd\x00\x00\x1e\xdc\x8f\x1c\xefu\xd4W\x89\xc4\xd8\xa5i\x9apc#c\xae"*\xa7\xe5\xff\x00&gt;67\xe3\x94\x8c.\x1c\x95L\x12\xd6\xc8\xc5\xa4\xd0n\xbd\xf1E\xe7[3v-n\r\x16q\xb8\xe0|\x9e]\x18\x89H\x10\xfc\xd9\x99\xc9\x01UQW\xe2K\x1d\xc0\x00\x03\xe1\xcb\xf1\xbcW\x13\x8d\x89t\xb6\xb6\x08U\x19J~\x7f\x97\xe6\xb5\xad?\xf3U\x8dUd\xe6+\x0b+\xcc\xa3\'\x07\xfejpp\xf1\xadSS&amp;0\xae\x11X\x13\xc1\xa5\x8bL\xa2q\xd5k\xd7^\x8f.\x8d\x16R&gt;\'\xa7g}\xc5TE_\x93\x12`\x00\x01\xf1\xb5\x02XCZ\x96\xadu\xa22xh\xca\xb1\xea\xc5\x15x\xb3)5d\xd1h-z\x9aE?\x92\xcf\x16\xa9\xa9\t\\0\x8d\x08\xca\xc4\'\x15\x8bX\xf9\xd9.&amp;W*\xf9\xbb\xbb\x92"\xaa"\xaf\xc9\x98\x98\x00\x00|\x98\xda\xe5j\xab%mZ\xd6\x94\xd2\xd7t\xaecc~{vaT&amp;\xc5\xbf\x1e\xfckg\x83\xd7\xa0\x88\x85]\x00\xc8\xac\x84O\x08k\tM\\f\x10\xfa[.\xea\xa9W\xc8\xc7r@UDU\xf931\x82\x00\x07\xc8\xcb\x1a\xe7Z\xe9\xa3!\\\x1a\xeb\x0c\xc4\xd88\xfcH\xee\xf7_\x9a\x9f\xd0\x7f\xd8\xbc\xa8\xb9\xec\xc8\xba\xd6\x8c\xa0**x\xbdh9||{\x15\x164\xf1\xae\xbe7\x0e\xb5\xf9\x99l\xb3\xaaEc\xd3~\xa4\x88\xaa\x88\xab\xf2%\x8c\x10\x05\x1f7kl\x02\xbcTL\x81a\x02\xa8SU\xe3"\x99\x92\xd9\xfc\x9e_$r\x0f&amp;\x9c\x8e\x0f;\x85\x9f\xfa\xe4\xac#\xc0U\xe1\xe0C\xadIv8\xb1\xe3\x89\x8f\x8f\x8dJ\x8f\xa5\xd2\xce\xa8\x0b\xf3\x01\x11+\x0b\xf2%\x98\x9d(\x03\xe6\xc6\xc6\xb2T\x95$\xb9nT\xb6\xab|&lt;)R\xc4\xda?\xaa\xa0\xb9m\x82\xb9\xfcE\xd4\xcc\x92es\xc0!S\x0cy\x84\xbc\x8f\n\x8b\xe4\x8bG\x15Uu/\xd0\xcb\xcd\x90J\x14z\x9fdD@&gt;F3\x12 \x00\x0f\xa3\xb5\x8c\xb2\xb0:u\xba\x83+\x95\xb3\xc4\x8cX\xcf\xe9\xf2\x9e\x10\xb3\xcb\x8f\xc6\xe2\xb8\xff\x00,\xbb\xe9z\xca\xc1,\xe9\xca\xd7\xc7\x8a\xe7\xf4\\\x17\x07\x83\x8f\x83*\x15\x8f\xa1\x97\xc7\x89(\xfaWX\x1f#\x19\x89\x80*\x8f\xa35\xd6yUek\xd3\x8b\x15\xa9\x15\xd2\xec\xc0\xb1\x17Z\x7f\xa2\xc5\xb2\xb6\xe8\x0f\xe7x\xe4\x17_}\xc9+\xa9\x04tj\xd8\xd6q\xda\x87\x06\xca\x1c\x89J\xa8\xfa\x19\x91\x1aT)\xfa\x01\xf3f&amp;\x00\xa0}\x18\xdbe\xb6\xd4\xd5\x8f!\x7f\x99\x8c\x1e\x10\x00s-qu\xcf\xc8]\x95\x8fv/\xfc\xbc_\x16\x85E\xe8k\xf1\xc6\x1af\x8di\xbe\xb9Q\xc7\xb3\xca\xe6h\xb2\xa5\x1fW\x97\xc6\x94\x8a\xbf\xce\xccL\x00(\x1f2l|\x8bD\xa2\xaa\xc7\xea\x0e\xb6\xdd4\xf1H\xadae\xb7*\xec\xdb2ro\xc2\xc1\xb6\xbf)mb\x8a\x01\xaa\xd7[l\xb6\xd3]K\x14\xd4\xf5\xddl2\xa1X\xfa\xd9.\x86P\xa8=\xb5\xf6$\x98\x00\x00}\x1d\xb2-\xb6\xca\x8d\x15\x91p\xa1\x81\x11\xa1\x8f6\n\xb3\x0bj\xc8\xc2\xcc\xe1\xad\xc0\xff\x00\x93\x1e\xdc~IE\xf6Y\x95\x8f*\xa9m\xa6&lt;z\xff\x00$\x06#T\xd5Fo*B\x8f\xad\x92\xde\xa8\x1f\xe5$\x99\xa0\xa0}\x18\xddfM\xa0cWZ\xbb\xbb"\xe8\x12\xd0\xcdo\xcb\xccX\xf4\xbd6\xe17\x168\x8a\xf8\xd3\x85\xc9c\xaa\xf1\xb8\xc2\x10\r\xce"c\x10\xf2\xb9IG1\x05\n&gt;\xd6\xcb\x8a\xcc\x7f\xf2\x92\xcf\x04P\x07\xd0\xcb_*\xf6lz\xe9\xadE\xabeON8\x08\xcb\xa2\x1e\x12z\xd2X\xb6h\xd5\xf9xx\xdc\x9f\xf9e&lt;4\xc9\xe2\xf55\x8eP\x04\xa2W\t\xaaV&gt;\xd6\xcb\xcdg\x1e\x0f\xf1\x93c\xf9\x08\xa0\x0f\xab\xb6E\xb7\xdbRc\xd3Z\xcbm1UD\xdfV\xa8\x1dh\x8d\xc2\xfem\tBA\x02\x15+\xa7\x8e\x02\xb1\xad\xab4\xc0(U\x1fk\xe5\xe6\x99G\xc7_\x13,\xb0\x98\x81W\xea\xc6\xfb2\xaeQ\x8dEU\x81d\xb2\x02\x96\xfe\xab\x00\xd4\xba2\x07\x0f\xe5\xbd4\x10Mh\r\x93\xa2\xc6\x13y{\x04H\xb0\x1a%b\x85\xfb\xe4K\x9b\x1eP?\xc2e\x8e\xce"*.\xbe\xb6\xbeU\xec\xd8\xd4\xd1R\xacx\xe8\x15D\x04B%\xd0\xae\xb5*\x02?\xa3\xf5\xb8\xc1\x8bKNGFx\x00\xa7\x1aT\xb5\xaf\xd8\xcc\x93y\xc4\x14\x8f\xf0\xd8\xf6&lt;E\xad\x07\xd9\xdb&amp;\xfc\x8b\xb1\xeb\xc6\xa5\x16\x13ax\x83\xcc\x00\x90\xcf\x17\x8e\x9d\x18\xb0\x1e\xccy\xb9\xb0Lv\xbc\xbc\x13J\xbaY\x85(\n&gt;\xc6e\x9bN\x10\xab\xfc.\xd6\xdb\x11k\xac\x0f\xab\x1b\xed\xcc\xc9A\x87EH!m\xd8?1\x01\xf3,#7W\x18H\xe9N\xd9\xf7\xb6\x1ai\xb7\x822X\r\x85\xff\x00So\xfd\x15]\x86\xd4\r}\x9af\x1b\x0e\x10O\xae\xbacm\x84\xa2WX\x1fkl\xcc\xc8\xb2\xcc*1\xeaP\xc5\x99Y\xc9*\xdb\x9e$\x18&amp;E\x90\xcd\x817\xe5\xe5\xe6\x1b{\x85#Wj\xd9n\xabfGUJ\xa6+c\xff\x00\x81\xe6so\tG\xdc\x9b\xadfAU@}\x9d\xb2\xaf\xcd\xc9\xc5\xa7\x12\x8a\xd6;1Il\xac\x82\'\x8c\n\xd1\x98#BD0\xf4b\xc1\x04%\x80\x8cY\xfa\xbd?\x18\xd9,T\xa8\xc3\\q\xf7\xb2g\xb5s\x0c}\xb7m\x8c\xea*\xadW\xec\xc7"\xdeC*\xb1\x85\x8fM`4s+\x97:%hD\xdbYm\xd1\x8b\xcd\x0e\xccx\xb1&amp;\x95\xbax\xd0\\\xec\xe7\xf4w\x9a\x08\xa3\x1d\xe8?{g q\xa6(\xf4?+\x1e\xd7YUh\xbf{\x9f;&amp;\xebx\xfc\\jTK#\x9d\xd7-/rf\x0b\x8b\xf9\xb1\xf0\xd81\x81$\x88\r\x86\xb2\xa6[7\xbf7\x96B6]kd\xfc\x95DC\xc6X&gt;\xf7\xceA\xb0\x97\x18}]\xee\xb6UR\'\xdd\xdb.\xfc\xfc\x9c\x1clLj\xd3\xab\x19\xca\x9a\xc5\xf2\xd0\x94\xd5Z\x87tGo%\x1bhJ\xc2zX\xc2\x11\xa36K\xb2\x9b\x0b\xa1\x08\xf0?\x8dc\x01\x90\xfd\xb2\' \xdct\xa4|\xf5/\xbbuW]\x7frrn\xe4\xb3)\xaf\x03\x16\xaa\xfack\x93Z(\xb8\x92\xcdSy\x05ba\x80\xacqa\x01%\xaf\xa4\x96\x04g\x84\xc2\xac\x18\x96v\xf2*\xb1#\xc4t\x98-Y\xfbe\x1eF\xce*U\xf6\xdd5\xd7X\xff\x00\x05\xd6g\xe5;q\xf8x\xf4\x81\xd5\x86\xc2%hc\xc6\xb0\xb0Tm\x14\xb4\xf8\x98!fB\x04U\xd2\x08\x03B\xa0\x19}\x96\xd9\xe6\xae\x0f\xe4\x10\xa2O\x0f\x1cYQ\x1fl\xc3\xc8\xbf\x10+\xfbT\x95W\xfe\x07|\xcc\x9c\xfc\xae;\x13\x16\x84^\xed.w[\x96\xb0\x97\xfd\x83T\x03\x12\xca\xeaa\x0c\x19c@\xa6$\xd3\x08\t\x96\x1c\xa9\xbf\x1f\xca\x9a\x17\x1e\xda\xfc\x04h&amp;3P\xcb\xf6\xcf9\x93\x8a\xadG\xd6\x9a\x80\xfb\x93\x95w\'\x9d\x85N\x0e5i\xd9\x97\x16%\xff\x00T[\x13\xf3\xfc\xf6/\xaeyWo\xe6\xf3\xc1\x8c\x11\xe6\x87B8\x9e 4\xbe\x96\xc7\xaf\x16\xbca[#\xa7\x8e\x9a\x1b*|8&gt;\xa6r%\x87\x1a\x83\xeb\xa5\x1fs/\xb3\x92\xcc-\xc6a\xd1X\xf4cyh\xcf\\\x06\xc9c\x86aUi\x1ay\xd5y\x8f\x18\x11\xbd?j\xcd\xe8!\x9f\x92\xd4c7\x93\xbb\xde\xd6\xfer\x93\x85\x07\xd4\xceQ\xa8&lt;x\xff\x00u\x8f\x9d\x95\xc9eqXX\x94(\xf4i|f\xd2F\x8d\n\xb1B\x08\xb1\xf2\r\xb4\xd9\xfayB\x1e,\x10\x8d\xc6\xed\x8cT\x9e^r\xd3~Q\xb0\xb7\x90\xb2\xbb8\xeb\x07\xd5\xa72\xfcp\xc2_\x99\xeb\x7fv9\x97\xf2\xbc\x86\x05\x1c~-i\xea\xd3&amp;\x12%R\xc2c\xb9@|,\xb1\xf2NEYX\xd7\xbd\xf5X\xb78\xd2\xfa&lt;\xde\x98*\xf9Z\xf6d\xff\x00\xdc\xb9e\xdd\x7f\xe5Y\xa5:\xe2\x9d~\xb6\x1er\xce\x16\xbcQ\xfe\xdc\x9b\xb9\\\xe18\xbc\x0czG\xb1\x99\x0bd\xaeT\xd6\xc7o\x06\xb1mkK\xc2\x7f*\x0f\x8dLl[\x95\xc7EHa\xbf/&amp;\xb2\xcb/\xb5\xb1\xebRR\xd7\x10\xd9\xad$\xe2\xca\x8f\xa5\xc7\xfa+x\x01G\xd8\xfd\xed~K/\x90\xcb\xe1x\xfc\\e_|\x81x\xae$\xb1\xad%\xd5.k\'\xe6\x85\xa9\xf1\xa9\xa8\xb5\x9c:":\xb2\xc3\x1eY\x1a1,\xd6\x98M\xd9;\xf0\xfc\xd2*\x1a\xcaig\x12\x17\xeb\x94\x7f\xa4\xb7\xf9\xe1W\xfb\x18\xe6ds&lt;\x87\x17\x83\xc7bV\x9f\x0bFB\xa9\xa4\xdc\x19B9rA\xad\x14\x0b*\xf0FX&amp;\xcc\xa2\xc5\x8d7a0\x9b]Y\x85\xd3\xf2Tx\xf7+\x97\x16\x9b\x7fT~&gt;\xd4\xfa\xe6\x1e}\xbf\x9f\x15\xff\x00\xb3"\xee[\x90\xadx\xae&gt;\x9a\xbe6L\x84\xf0\xc7\x99%\xa5\x8c+\xd0RY\x91\xd68UV.\xad\x0c\xa6\xd0In\x9aXV\x12\xca\xcb2\x19\xe5D\x1f\x10D\x13\x00\xd6~\x99\xef\xcc\xd9\xfc\xfa\xaf\xfa\xed\xb3\x92\xcd\xe42\xf8.;\x12\x9f\x93\x0b\xab5W]\xec\xd1\x9d\xecSe\x8eIf\xc7x\x05\xa4X\x90@U\x92\xc2\xc5\x98\xd8\xee\xea\xc8c\x034\xc3A\x84\xd6\xab\x18\x89Q\xdf\xcf\x98{\xec\xe0S\xea~\xacs\xf2\xf9~G\x8a\xc4\xe3p\xd4|\xdc\x15\xf1\xc8\x8e\x8e\x9e\x05\x84$\xc7\n\xd5\xb1\x84~u\x95#\xa0\xc1\x8b\xb3\xda\xe4\xa1\x16\x061\x80G_\x1f\xc8"%x\xb5b\xd6\xb5M\xcd\xfc7\xce\xb53\x86_\x9e\xfe\xa4\xe5_\xcd\xf25\'\r\xc7S_\xd1\xa1V\x17\x8b\x1c\xbd\x90(X\xc0\x80\x17\xad\x05\xf0\x1d&lt;\xd8f{Y\xc9&gt;A\xd4\x98\x14!\xab\xf1lD\xc6\xab\x1dQT*A7\xbe\xb7\xea\xd3\xfa;x\xe9\xc4\x8f\xb1\xf9\xdfo)\xc8\xe7d\x7f?\xc6a\xd1\xf4\xdb\x1d\xeb"\x87\xc7|v\xa5\xdf\xf3v\xf10*\xacgW\xe8BOLmw\xb0\xd9\xfb\x7f\xd1\x8f\x91\x15R,+\xe0\x10(\x1a\x100m\x83\xbd\x83\xb9\xbe\x9c\xff\x00Uw\n\x9cr\x7f\xa1\x9b\x92\xca\xe4\xf38\xac./\x05G\xd0\xc65\xf4T\xd2\xd8\xf6\xe2\xd9\x8a\xf8\xe9\x8d\xff\x00:\xd1\xf9\xf8\xe4\xddf}\x19"\xef\xdb\xf4\x0e\xccmkn\xbe\xcc\x96\xc9l\xa6\xca\xe2r\x15LI\xa8\x00\x83\xd3jw77\xbfK\xa7\xf5M\xfc\xe2\xe2\r\xff\x00\x9f3#\x99\xe4\x80\xe0\xb8\xea\x93\xe8z!O\xeb6c\x06\x0c?2\x854\xe3\x9f\xb9n\xc7\xcc9\xd4\xe5\xd5\x93\xfbY\x93w s_-\xac-\xe4g\x02\x00Q\xe2\xb0@`\xeb\xc8C\x07[\xdf\xa0;\xdeK\x7fIw\xf2\xc9H\xff\x00=\xd6s\\\x86U\xfc\x07\x1d\x85\x8f\xf63VJW\xa2Z4\xd1S\x1a\x10G\xf4\x04"F\x942\xda2r/.\xcd\xe5\xb9\xaf\x0e\x02\xb8\xa2\x11\xb0\xddl\x10\xc6\x0fA\xef\xc8?-g\xf2U\xa7\xae\xe6\xe6\xf6{?\x12y\\\xdeK\x90\xc4\xa3\x85\xc0\x03\xef\xa7\x15W\xa3\x1d\xc4hc\xbbB#N~\xbf\xc3\xf2\xfc\x90\x13\xe7a*T.\xbcB\x85\xe1\xd9{`\x1b\xad\xf9\x08!\x82\x036=\xf9g\xcd?\xc8\xa7\xf9\xb7\x99\x93\xcfr\x93\xf9\xce"\x8a\xbf\xc2E`\xc6\x8d\x0cv"1i\xb6\x9c\xaa\x1aM_\x99C_\x87\x89O\x0f\x0f\x0f\x00\x81q\xaf\xa4\xa9\x11O\x8fZ\xe9}\x07c\xd3s\x9c7\xcf\xe4\xeb\xf7\xdf\xa6\xfa&gt;\xf6\xd9\xce\xf2y\x16p\\o\x1f\x89\xfe5\x84\x90U\xc7\x8bMFm\xb1\xbdMF\xa3SVk(k)\xe1\xe1\xe1\xe1\xe2\xc1\xad\xc1\xb4\x11\x04\x044 u\xb8z\x1dlzn\x7f@\xec\x7f\x98\xaf\xe3\xb8~D\xf2\xfc\x86~mI\xfc\xff\x00\x1a\xa3\xfc`\xc3\x0c\xd1\x8e\xac\xae\x1a1h\xcaP\xa7\xe6P\xa1\xab\xc0\xa7\x87\x87\x87\x87\x8eS\xb1\xe02\xab\x9aS\x02\xb2\xef\xb1\x0f\xa2\xf4=\x7f\xa7\xc9I\xc0!\xebc\xfcY\xd9|\xdf$g\xf3\\N5?\xe4^\xb4D\xdd\x92\xd6x\xc4\xc6\x85\n\x95\xf1(T\xa9O\x0f\x02\xbe&gt;:\xe4,\x9c&gt;F9\x10\x8f-\x87(\x02\xcd\x11\x07c\xb17\xb3?\xab8\xe3\x8b\x1e\x87\xd7p\xfco\xb7\x9e\xe5m~/\x8f\xe2\xb0?\xc8\xc6\xa3\xa2\n\xbc=;\x12a\xe8\xc2\x08\xd1]\x15*\xc0\x8d\x10e\xa7)\xe7\x13M3J \x9a\xeb}\x10:\x1d\x03\xd6\xe37\xf5Y\\UX\xaa&gt;[\x9b\xde\xfd\t\xe79\x1c\xbb\x91?\x9e\xe2\x94\x0f\xf2e\xdb\x84\xb0\xc2\xd1\xa5\x91\xe1O\x12\xb0\x82\x0c0\x824C\x02\x08 \x8c\xeb\x18\xce\x191\xe0\x11J\x9d\xf9\x08 \x822t=\xf2\x1b\x94\xb3\x83\x14\x8e\x8f\xa1\xf7=\x1e\xb73\xf2\xb9~I\x9f\xf9~2\x8a\xbf\xc8\xc5\xeaE\xe9\x84\'\xc4\x85\x0c\x1a4=\x90a\x84\x10A_\x12\xa5yf\x880\xd3\x12,\xf1\xdc\xf2\n\x95\x84\xf1\x10K\x12\x0e\x87F\x1e\xb2\xcel\xfeQ\x04\x1e\xbb?K\xed\xe79k\x1b\x07\x0f\x85\xe3\x7f\xcbaA\xbe\x8cu1\xcd\xa4/\x8b\x07\xe8\xcd\xcd\x9e\x88#\xc7\xc0\xad\x93&gt;\xf9\x85UK\x86\xdeo\x91\t\xfdTWq\xb1N\xff\x00_8&amp;\xfb3\\\xa5\x97\x9f\xe3\xea\x04C\xef\xbd\xef\xbdt[\x9f\xe5/\xb9S\xf9~\x10\x0f\xf21\xf3\xd9\xb7\xf4h\xd7&gt;j\xbf\xfd\x15=\xa5msi\xf2-\xbe\xb5\xadx\xf8\xf8\xf8r\x96Xg\x0b\x8b\xe1\x80\xfa\xfc\xf4Z\x8a\x16_\x88\xb6\xd2\xc68C\xb1\xd6\xb5\xad\x99\xfd\x06RO\xe6*\xaa\t\xa3\x0c\x1d\xeb\xd3{\xf2\xdc\xe63\xf3\xf3\x19\xbf\x91\xe2k\xaf\xfc\xb7&gt;\x07!\xbf4\r9W\xe3\xf1\xed&gt;(\xea\xe60\xb9\xc3u\xad\x01\xe3\xe3\xe0W\xc3\xc3\x9c\xbe\xc2\x8b\x81[W\x8aP\xa8\xd2\x85\xe9Nr\xd3\x0bZk\xb7\xccA\xd9\x824\xfe\x92\xd5\x1c-U/G\xa1\xd9\xef~\x9b\xcd\xc8\xe69[m\xc0\xc4\xe20\x07\xf9Z\x7fC\x9d\xfc\xdd\xff\x00\xa5n\x1d\x9f\x91\xab\xc5\xe0l\xa9\xc5\xbb=\x8f\x90S\xa0&lt;B\xf8x\xf8\xf8\xf8\x95\xbd\xf9\x9b\'\x13\x8c*j\xf5M\x89x\xbe\xe3\xfa\xa3\xdbs?\xee,{\x1b\'\x12\xd1\xd0\xe8\x95g\x9f\xd7E\x9c5\x00z\x9f\x9f\xf4|\xa5\xd6\xcf\xe38\xc1\xd6\xff\x00\xc5\xbb_\xfaNK\x86\xcd\xaf\x91\xa6\xd4\xb5\xef\xf2\xba\xd1c\xd9{\xf0\xa5\xed\xfd\x19\xabP\xa1Bx\xf8\xf8\xf8\xf8\x91\xaeFe\xd9?\x8f\xc7\xf1(h5]\x9d^e\xb9c)\xae\xb77\x1e\xdc\xabFcd\xa6\x1e&amp;(\x03\xb2\x164\xfe\x9a\xe0xD\xf7\xd7\xc7?:\x7f;\xc2c\xe3\xfc\xf5\xf1\'\x9e\xcc\xc9\xb2\xa4\xc6\xe0\x7f\xe5|\xf7\xcd\xa2\xcc\xeb\xab\xc9\xb2\xfc\xac\xbcNK\'6\xa6\xa7\x19(Z\xc5~\x1e:\xd6\x80#_\xd0dZg\xf3X\xda\xd6\xbcZ\x83\xc6\xff\x00\xe37\tg\x0fo\xf3\xb5\xe3d\xe1\xe3\xf0\x94\xe0-\n\x9e\x9a\x84\xf2\xf6`\xb7\x10\xbe\xda\xec\xf7\xfay\xee\x13\x8b\x8f\xc5q\xff\x00\xe6\xb2\xcf\xe8slo\xe2x\xad\x14\xbf\x8f\xc9\xfeo\x17\x16\xf74\xa7\x188/\xfc\n\xf8\x85\xc3\x14~E||u\xadk\xc6[9\xfc\xe3+J(\xd4\x03Z\xf0\xf1\xf1+\xf9\x85\xd2\xae\x80\xf5\xd6\xac\xb3%\xa7\x1f\\=\x01\xeb\xbe\xf7\t\xf2\x9f\xc4qc\xe9\xbe\xf7\xed\xfd\x1f!\x99z\'\xf3\xfcq\x9a\xd6\xb4k\xfc\xbf?\x00\x9e: \x82\x04\xd1]t\x16r\x96\xe7\xe4\x99\xfc\xbe#Mh\rt`P55\xafMkQ\x97\x96\xb1\xce5*\x9a\x9a\xd7{\xf5\'{\xdf\t\xc4\xd1H\xf9\x8f\x96\xecn\x7f=\x8f\xf1|g\xa1\xe8\xf4f\xa6\xbb=\x98f\xa1\x9e?\xd2d]\xd7\xf1\xfcH\x1a\xd6\xba3Z\xd6\xba\xd4\xd7\xbf\xf56\x99\xfcu&gt;3}\x98f\xcc\xd4\xde\xf7\xdf\x07\xc3\x8f\xbe\xfd\x89\xe7\xb9+\x9c\xce\x03\x89\xf4\xd7z\x9a\xec\xf5\xae\xb5\xa9\xab\'\xf59\x16\x1cLlj\xb5\xef\xae\xb55\xae\xf7\xe9\xfd\xad\x86\x7f\x117\t\xebZ\x83\xb3\xd1\xec\x83\x14tz\xdf\xf8]\xbf\xa2\xe4\xac\x9f\xc6\xf1\x00\xfc\x88\xf7\xd7{\xb1\xb2r\xd8\xff\x00#QR&lt;|`3Z\xd6\xb4F\xb5\xde\xa1\xf4\xfe\xea\xf9\xfcu&gt;\xc3\xadv;&gt;\xe7\xe6=\xdd\xf2\xef\xca\x8f?\x99\xe3&amp;\x84\xdfG\xa3\xf1\xd1\x1e\x82\x7fM\x9a\xfd\x7f\t\x85\xa6\x04x\xeb\xc6hM@5\xed\xb9\xe5\x0b\x7fh\xf3\xf8\xd4U\x84k\xbdjop\xf4I;\xff\xc4\x00D\x10\x00\x01\x03\x01\x04\x06\x08\x04\x05\x03\x03\x03\x04\x03\x01\x00\x01\x00\x02\x11!\x03\x121A\x04\x10"Qaq\x13 02@\x81\x91\xa1B\xb1\xc1\xd1\x05#Rb\xf0\x14r\xe13P\x82$C\x92\x06S\xa2\xf1`\xb2\xc2\xd2\xff\xda\x00\x08\x01\x01\x00\x03?\x01\xeb\xf1\xec\xb8\xf6\x1b\xbc.:\xa7_\x0f\x15\x8fV\xbdN\x1a\xf1\xeb\xe3\xd8\xc6\xa3\xaf\x8f\x85\xe1\xdaG\x81\x1e\x1b\x97S\x1dTX\xf5\x0e\xbe=\x84j\xc7\xfd\xbbw[\x0e\xcb\rY\xf5wj\xc7\xaf\x9fV\xbd\\\xff\x00\xd93\xf0\xd5\xeb\xe1\xd6\xc7\xc1p\xd5\x92\xe3\xd8\xf1\xeb\x01\xaauS\xc2q\xebWW?\x1e;\x11\xdb\xf1\xed#\xa9\xbf\xab\xcf\\x&gt;:\xa3\xff\x00\xc0\xbf\xce\xba\xeb\xe1\xd6\x8c|!\xecOe\x8fS\x87iO\t\x8a\xf2\xd5\xc3\xabD&lt;-:\xd0\xa35\xc7\xa9Q\xe1q\xaf\x85\xcf\xb2\x95\xcf\xc1\xf2\xeaG\x85\xc7^\x1e \xff\x00\xb4\xd3\xb5\xc1G\xfbq\xf0\xd8\xd7\xab\x87_\x8e\xac\xf5\xe5\xe1p\xf1\x13\xd4\x02\x15\'pA\xd8\x1e\xabw\xa6\x91(\x1eH\x06\xb8\xee\n\'\xf9\x82\x15TC\xc3W\xb2\xa6\xa8\\\xfb\x1c;\x0e\x1f\xec\x01\xb9\xa1(\x1a\x14j\xd5\xd0\x9d\xe0G\xb2\xb2moQ\x06_\xce(\x9e\xea^E\xe6\xa4\xd4.\xff\x00/\xa24\xfe\xda\xaa\xe3\x9c"\t\xaav&lt;\xd65\xc4\xa7tp33TC\xa3:\xa1{h\xefA\xc3\xc5\xf0\xf1\x91\xd7\xe3\xe0\xda\xca\x13\x1c\xd4\xd5\xa6\x88V\x08\xfa&amp;0~`pn\xf0/\xb7\x9a\x17K\xda\xf0\xf0;\xcd\x18\xc1\xcc!m\x048\x19\x11\xcc9\x1b\x8c\xae`W\x85\x11ug\x8a&gt;rJ\x8f/\x92\x8b\xd5C\xfe4Gk\xc8\x95.b\x12j")\xe4\x84&gt;\xb8a\xff\x00$\x18)\x10\xd8\xf3S\xe4\xefUvQa\x15\xa5h\x99i\x8e8\xfa*v\xdcuOR\x9d^\x1e\x12{i:\xf8\xa3\xab\x8ff\x10\xde\x9b\x06\xbf\xe1\x13I\x9f\x9a\xb4\x15\x08c(\t,\xb7-&lt;\xe9\xe6\x16\x91\xd2\xb6\xd2\xe48\x0eHtCjZK\xb8D\xe4\x89\x16\x82w8\x1e(\xb8H\xe2\x15D`\xa6\x08\xccUwx\xd3\xd1c\xb8\xac9/p\xaf8\xd7z\x06\xf4~\x92V\xcd\xdf?T`\xab\xd8gOEw\x89\xcc\xe0\x8b6A\x92qP@q\x9a&amp;\xbc\x08\xdd\xe00\xec\xe8\xb7vU\xd7\x1a\xce\xb3\xd8\xc7S\x1e\xd6\x13rr \xac\xefG%9\xcf\xf3z8]N\x8e\xe8\xf3(\xb5\x85\xc1\xe4\x7f\xc4\xb8#h\xe2\xe3l%\xa3\x0c\x07\xf8N\x90\xe6\x89\r\xda\x8cHL-s\xac\xbb\xa6L\r\xfb\x91t\x03\xde\x02\x861\x1b\x8a\xe8\x9fz\xb7\x1d\x15\xdcW\xbf\xb1PMTL`O\xba\xd9&lt;\n\xa0\xe6\xb6\xbc\x90\x8f\xf8\x94\xe2\xf73{]\xee\x13E\xb1\x03\xba\x1c\xd1\xe7\t\xc5\xdcM\x10\xc4`\xdd\x96\xfd\xd1\x11\x99\xfa\xaa\x01\x8e\xfe(\xd0\x93\xca=S\xda\xe8 \xc9\xc9\x07\t\nP\xde\x81\xec\xb7k\xc3\xb7\xa7`\x16=n\x1d\x84)\xd5\xc3\xb5sx\xf3S\xdd\xf4\xcd\x1c\xf7U^\x98q\xf9\x14\x7f\xee\x1a\xe5\x12\x84\xc02~I\xe6M\xff\x00\xaa\xb4\x15i\x9e8\'\x0ck\xbe]\xf5Vo.\x05\xa4\x80j:B\xe4\xc7E\xa3\x03a\xbf\x15X\xe6\xf3\x89\x05Y\x98\xd9\rp\xcaAa\x9c\xd8~\x89\x8dq\xbc.\x17z;\xf9\xbdP\xef\xcf\xee\xa0"\xd3\xe7\x81S[\xca\x92\xd8\n\x97\xa3\x1a\x14.\xd3:\xa0IRZ\x9am\xdb\x95U\xfbgMn\xe1\xfd\xc75t\x96\xb4\xe1I\xdeU\x19f\xd1\xfe\x02\x046\xb0\xdc\x95\xe2I\x1b84( \x91.4h\xdf\xfe\x13\x98\xc7\x19\xade\xd9\x05&amp;&amp;\x1a\x14\x0ex&amp;\x9c\xf1\xf7W\x95;N\x1d\xb7\x0e\xb1\xf0&lt;V=h\xec\\0l\xf9&amp;\xe7h\x07\x9a\x8c\x1c\xdfXE\xd8\x99\xe4\x8e\xf1\xfc\xe4\xa6\xf1}8\n\xfa\xa67\x00\xe7pNu\x04\x9c\x07\x0f%kK\xf6\xf7g\x00*\xe2\x9c\xd6\x9b\x0b\x12\xf6\xce7b|\xca\xb5\xb2\xc4\x07c-1\xeeSK\xbaK6\x10\xd9\xc6\xca\xd0\x870\xff\x00iW\xe0\xc6\xd6O\x02\xed\xef\xee\xcaV\xc8c\xc4V+\xf4*\xe4A00\xfd\xb3\xf4S,;.\xf6r.\x05\xb2~\xc5\x19\xee\xd6\x93\x1b\xd7xe(\x06\xc8\x03\x19P\xcb&gt;\x05\x00\xe7"\xe7\x85\xd1\x16\x98\xa8\x13\xea\xba\r\x1d\xd6\x8e\x1bnp\x00/\xf4\xdb\xb8\x17;\x89\xdc\x10h\x97fh8\x05}\xe5\xc7\x0c\x93vK\xa3\xf6\x8e\x08\x00m\x0bj\xfa7\x88\xfa\x05x\x86^\x0e1\\\x80\x1f@\x833&amp;\xb4\x113\xc5P\xbd\xc7\x97\x05$I\xa9\xa2\x02\x17\xf2\x17&gt;\xc7\x87\x82\xe1\xab\x87e\xf2\xeb\xc6\xa9\xed\xdd\x93}L(\x93|\x03\xb8\x15\xfb\x81\xf2\xaa\x9f\x80\x0ey!P\x1fOE\x1d\xd0O\x17b\xadmH\'a\x9b\xe5\x06\x89-\x05\xbf\x08.&gt;\xe9\x9d\xdb\xd5\xfd,\x14\x1ek\xa1\xb3u\xa8d\x1eu%^\xb3\xbe\x19$\xf1\x93\xea\x9e\xf7\xb6\xe9\xb4c\xa6\x98\x1f\xff\x00el\xcf\xf5I\x96\xf1\xda\xf4\x15\t\xb6\x83\xf3X\xe3\xfb\xe3\xe7\t\xac\x14\xc1\x13;\xc2\x0e\x1c7f\xd5&amp;dO\xcd\x1a\x1c\xb3\x05Hv\xe2\xae\xb1\xed\xe6\x89e\x94f=\xc2\x01\xd6\xab\xbcQ\xb5\xb4\xda\xc2k\xe4\xba[\x8d\x1f\xac\x86\xad\xd8M\xd09"\xd8l\xd72\xa4\x12vX=\xd5\xe7\xf4\x8e\xe4\x1b\xf4U\xefm\x1a\x13\xbb\x80MkC\x8eu\x03\x13\xcd\x13\x83]\'7\x1az\xa9\xa0p\xa6\'\x1fM\xca\xca\xc8\xdcm]\x9eg\xcc\xfd\x91#\x8e\xe0\x9a1\xd5xvxxi\xf1\xb7\x85m\x1c\x14Mi2+\x875\\\xc9\xe0~\x89\xc6A1\xc2$\xab\xb4\x17\xa4\xefRkS\xfc\xf6D\xdd\x93&amp;&amp;\x9f \x807\xf7\xf7G,\xcc&amp;\xb5\x85\xc4\xb8\xfc\xbd\x13\xd8\xc0\xd7\x1a\x9f\x86b\x07\xee(\xb1\xc1\x97C\xa0m\x98VV\xef\xda\xb7x\xcab\xa15\xc1\xa4Z^\x8c\t\xb3\x00y\xa7\xb5\xbf\xea\x07S\x92\xb6\x15\xa1\x19\x83U\xf1\x06\xc1N5\xba\x11\x99\x85\xb1y\xae\xa6!~\x98E\xc0qiTmrSta!\\\x04Md\xb8\xf9(m\x9f\xea\xb4\x97r\n-\x8f\xec\x04\x00\xbf2\xf4\xf7E\x14\xbaF\xff\x00\xe1M\x86\x84Z\x05)\xbbz4s\xe7\x92\xbfx\xc53\xff\x00%6&gt;\x18\xdd\x8a\x11\xb5u\xa23;G\xfe-C\xbbg\x88\xdf\x80\xf2VO\xc1\xd1\xe6\x9b\x13\xd2\xca\x1f\t\x1eTB\xb2|\xb1@\xeb\xa7Z\x83\xb1\xa7V\x98v\\5G^\x9dL\x15T\xf6\xb2\rc\x8a`{\xda\xd1\xb0\x0e\xe9Vm\x891\xfbq\'\xd1:&gt;!5h\x9c\xbfQL\x14s\xaf=\xd4\r\x12c\x9a6l\xa0\x02h\t\x10\xad\x19G\xbe^@\xa7\x0f,\x11\x15\xa1$\x86\xceC\x83Fi\xc5\xc1\xa2\xd2\x03q\x8c\xb8\x95\xd2\xe9\x0ckN\x1bN\xa6\x01&gt;\xc6\xc6\xd5\xed\xbdx\xeeZA\r-c\x9cx\xd3\xd1i\x10\xd0\xeb!\xff\x00\x95Q\xc6G\x19\x11\xf2C*\x11\xba\xaa\xfe&gt;\xad\xa2\xb4\x07\xbd{\x83\xb3T\xee\x9e!C\xa4w\\\xae\xf9\x12\xab&gt;\x8a\x8d\x9e!\x06\x81\xc0,+\x8a\xb9\xd1\x93\x94\x05.\xb7\x7f\x12}S\x9dtf\xfa\x94+\xc3\xf9\t\xf2\\\xe9\x95\x10Kk\x92\x93\xb6d\xfe\x9c\x82\x04\xc4\xb7\x96&gt;\xc9\xef\x9a\x16\x88\xf3L\x1d\xfbP(h\xd3\xf3%\x0b Z\xc2\xd6N$\xc9\xf9\xe2\x98\xcbW0Z\xde1\xf16\x9eI\x8f\xef]\xf9\x142\xbb\xff\x00\x92p5 n\xa2\x106\xfc\x90=~\n\x9d\x8d\x15{n\x1e2\x1aN*--\x8b\xdd\xdd\x9aq\xfb"A\x07fr\x19\xab\x97\xdc\xfb\xcd\x9c\xb1qB\xcd\xae\xb4t\xcb\xb0ng\x89\xe0\x9fh]mh\xe6\x88\xf4o\xf3\xdd\x1d!\xff\x00\xb6}\xcak\xad\x9aD\x0b&amp;\x03t\xe2]\xc9\x12]\r\xc3\xccN\xe0\xbf6\xd5\xad\x97\xba@s\xa6\x9b\xca{\r\x9b\x1a\xf3\xfa\x8ae\xad\xa0&amp;\xe5\xec\x8bd+H\x18\xfd\x13\xdd\x1b\x00W\x82\x00m5\xb2\x15\x8b6vq\xc0\x95f*\xcaru\x13\x8d\xa4\x1e@\xaa\xc6\xf4n\xe3\x9a\xa7\xfc\x90\x97\xeej&amp;\xcc\x01\x8e\xf57\x7f\xb2P\xb4u\r$!t\xefs\xbd\x94\xbc\xbb3\x03\xc8+\xa4\x06\x8f4E"\x8a\xd2d\x9f\xbaww\xdb\x14`Cc\x89L\xa8\x91&gt;n@M\xdb+Bx\x00&gt;_t/8=\xdd\x13I\xcc\xb4\x93\xebU\xa3\xb3HkD\x93\x18\xc8\x8feYk\xbc\x8a\xa6\xe3\xe8\x9c\xc2\xa1\xc2\xad\xf9\xa0@\x9c}\x10u\x07\x80\xc7]V\x1e\n\x14)\xea\xca\x8e\xd4\x86:7g\x87\x9a\xfc\xc7\x82\xe9\x00\xe3\xbf\x8cqRMH\x19\xc7\xd4\xa0\xc7t\x8f"\xf1 \x06\x8c\x87?\xaa\xbdQ\x106\x8b\xcd|\xfe\xcb\x0b6\r\x96\x88\x03&amp;\xf1*X\xcb6a\x9dqP\x00o\t\xcb\xd7\xec\xae\x82\xc6d\xca\xf1M\x02\xd6\x80\xedO\xd98i\x8375\x8c\xfb\xa1j\xed\xa6\x81\xbd\xd0*\x83\xc3j\xf2\x85\x93fc\xceU\xd1\xb2J\xb5\xb4\x99$\xf3N\xaf\xe6\x16\xa8\x86&gt;+\x98W\xae\xd7\xf8\x14\x02O\xea*A*\xf5\xfe"\x15\xd2G\x05\xb2\xf3\xc9mS$M\xe1\xc5\x17:\x05\x05\xe8X\x02r\x9a*\xddck\xbf\xec\xbf^&gt;\xa8\x81\xdf\xba\x15\x93s\xa7\x1a\xfc\xd1\x81\xb6\xdf7S\xd1?\xe2{c\x81m\x15\x97H \x97\xb8\x9c\xcc\xa75\xac\xb4\r\xa086\x1a\x85+\xe4\x9b\x84\x8e\x0b\xa354D\x18`\xf7O*\x98z\xb9\x02?\xdbyv\xb7\xb1\xc1\x16\xe9\x16\xc5\xc2\x1am\x10{\xa9g\ro\xc4i\xe8\x13[3^\x03.h\xda\x90\x08"\xa2)\xeeS\\M\x98\xee\x83\xb7\xcf\x89Nm\xfb@*\xec&amp;\x80\x05\x0e\rmZ\x0e\xd3\xbe\xdb\xc9F\xeb\xa9u\xb1\x107\xee@\x98\x8d\xa9q\x1b\xaa\x9a\xfbw\xbbyQvY\xcaB\x11.i4E\xad\xc69-\x1e\xc2C\xad\xeb\xc5X\x99\x87?\xc8@A\xee7\xa68\xa6Z8\xb6y(.\xdc\xa8\x15be4\x96\xf3&gt;\xcbl\x0213\xea\x800w\xcf\xa2\xbb{\x88G\x01\xb9\x01x\x94\x18\xd8n\'\xd9Z^\xba\xd3\xcc\x95h@\x8bA\xe4\x13\x8doO2\x9e\xc7\x19-j\xb41P\x9c&amp;l\xd9\xe6P\xbc&amp;\xd1\x8d\xae\x17o\x15\xd1X\x17\x7fN\xd7o$VT\xd80\xc6\x1d\xd8\xdcrM6q\xf0\xe5\xbd\xaa\x05\xdaH\xf8sS\xb4\x1aN\xf8[\x8c\xf3QB\xdfC\x82c\xb7\x03\xcd^\x98 \xae^#\x87iU(\xae\x1e\x06\x90\xbf0Z\x01\x80\xa5\x15\r\x9bi\xfc\xcd1\x82\xfb\xdc\x0f\x94\xfa \xd2^\xe0LW\x94(m\xd2~\xc4\xa2D\xb9\xd8\x89s\x8e\x00 \x1e\xc3w\xbcf7N\xfe(\x0b7\xbd\xd35!\x11a\x7f\xd1\\\x9a\x8ex&amp;\x96\xc9\xa6\x18+;6\xc9\x93\x8d0\xf3RH`\x1c\xd5\xf7\x92\xf3\xc4\xad\x01\xadd\x17\xb8\x9cF\xe5\xa1\xda\xe8\xef{-\x83m\x1a\xd9\r\'\x14l\x9e\x1d\xb9t\x8c\xaa\xc5_u\x17r\x9f\t\x956\x96\\J\x8bg\x85t\x89P\xe6\xa0\x05\\\x86uO{\xb1\xe4\xad\xec\xc8\x9a\x84\xd7\x81\'\xd4&amp;\xbc`&gt;h\xb3\xbaDsM`\xab\xab\xc9Y\xbd\xff\x00\xeb\xd7\x8e\x08;Gq&amp; )\xb0\xac \xc0g\x08\x92\ne\xa4H0&gt;1\x91W\x1cH5\x1eaT\x9e\xe9F\x94\xe7\x08R\x0f\xba\xe5\xe4\xa7\x92\x9e\xde\xaa\x83\xb3\x9e\xb4\xf5\xa3\xb0\x1d\x8b\xad,\x1e\x1b\x8d=\x93\xa9\x11\xff\x00\xf9\x1b\xf9\xab\xbd\x15\x9f\xc4\xef\x87p\xc8 \x05!\xc7\xfc\xa0\xf6\xdf\xb72" g\xc3\x926\x8fk\x0e\xf9,mG\x9ah\xe9)\xbc\x17N\xfe+\xa6\xb6\xfe\x96\xccT\x98w\xedh\xc9\x00\xc6\xb2\x80\nB\x98N,\x96\xd0fB0A~\'\r\xe8\xd95\xb1g\x9e(\x17\x96\x1f\x8b\x05\x1b\xd3,\x81.\xa9\xc9l\xb5\xd9\xbaL"A\x8c\x95\x0bsP\xdc0*\xbeJ\xfd\xabg\x7f\xb2=#\x9cp&amp;B0\xe7\x01\x9c\x05ve\\l\xefD\x1b\xad\xc5\x16\x99\x8c\xd3-\x0e\xd4\x13\xbaaY\x91,\x95"\rF\xe5v\\\xda\xb7\xdd0H-&lt;\xdb\xf6(6\xd6\xc9\xdd!"\xf0\xca\xea\x04Z\xb4\xd3d\xc8\xe4\x89\xb1 \x89\xa0#\x91\xc4)\x96\xbe.\xa7Y:\x06#\xff\x00\x90[d\xe1J\x8d\xea\x0c\xd7\x9e \x84N\x06\xa0\xef\xf9&amp;L\x11\x1b\xf7&amp;\xe2\x0c\x1e)\xa7j\x1b\xc6\x13w\x8f_\nu\xe3\xdbG\x82\x92\xba\r,\x83\xdc}\xd2\xd3\xe5T\xc6[\xde\x9a\xb9\xb5;\x82/p\xben\xb7\xbcZ?HN\xb4\r\x02\x8d4\x11HVV\x02\xe3\x00\xae\'8\xde\x83\x18\xe67\x1cS\x8d\xfd"\xd2\xf4\xbb\xcd5\xcf\x80|\xa6&gt;h9\xf8\x9cwJ\x0c\x17\x80\x13\xbc\x08\xf5Do\x8f\x92\xb3\xb4\xb3}\xe1\x8eq*\xe5\xa3\xac\xdf\xb3\x07d\xad&amp;(\xe6\x90\x9f{i&lt;\x9a\xb6f\x82\x88XY\xf1*\xf4\xefR\xd8\x08t\x84\xa0M\xa3\x8f \xaf[\x13\x80\x88[4\x1f\xda\x0f\xcd\r\xa84\x18\x9d\xe5\x16\xec\x82\xaf\x1ekE\xb6\x10\xcbb\x0cb\xf8\x12S\x9a\x9df\xf0\xc7\x94\x0b\x87\xf2\x11\xba\\\xcf0\x8b\xa4\x8fDE\xa8\x18\x82\xe1\xeb*,\x9e\xeaI\xa1\x1c\xd3\x9bv\xb9\x08P\x0b\x9avsn\xe4\x08\xae\x02\xad0\xa2\x01\xa1\x1e\xeaH\x03u\x16\xd7?\x9a\x98&amp;e\x11\xfc\xaa\x9aCL/\xd4\xc7\x03\xfd\xaa\x9d\xb5V\x1d\xbc\xf5aG\x84\xfe\xabG\xd8\xef\xb2\\\xdf\xaa\xdb\xa8\xddC\xec\x9c\xe6\xbbq\xefo(\xddu{\xa7\xd5\x06\xb5\xd6\x84\x83\x90;\xd5\xbf\xe2\x9aP\xb1\xb3\x14\x15s\x95\x96\x8e\xd1d\xd7\x8d\x9ao\x9fDOy\xb27\xc1\xfa\xab\xae\x0ep\xa4\xe2\x17\xe8u\xf1\x9d+\xe6\xa0c\x14T"r\xc4`\x8d\xb9u0\xcdiW\x88 \x01\xbc\xab@\xe1;I\xcc\xba\xeb\x87\x85S\xc5\xe3p+\xb8SxN\x81\xbdma\x8a\x16vD\xe4\xa6\xd6\xd2\x94\xc9\x13.V\x1d\xe7:NM\xdc\xbf4\x9b\xca\x1c\x14\xd4:\x8b\xf5`\x14=\xc4dU\xf6\xb6T\xb7\x1d\xa0\x8d\xe3R\xd5\x7fI\xb2\xd9\x17\xaf\x8c)\x86\xf5 7\xf7-\x96\x11\x88\x15\xe2\xa0^\xf3WvF\x06\xb0\xa9\x8d1\x05\x01\x1b9H\xaf\xc9_h}\x089n+\xf6\xac\xefF\xe3\x97$\xf2\xeb\xad\xcb#\x82\xd9\x03\r\xe2g\xb3\xa6\xacDk\xa7Z\x9d\x98\xf1==\xdbK\x16\xfehp\x1c\xc2,\x9b:\x876\x04qiB\xcc\xbe\xf3\xbb\xadux\x9a-+\xf1\x8b[=\x1bEi\xb8\xde\xf1\xc9\xb3\xc5X~\x1d\xa2\x06\x9b\xae\xb4#l\xc7\xb2\xdc~\xde\xca\x05&gt;\xc9\xc0\xc7I\x13\xc6\x9ei\x8e\x186r!\x11R\x81\xc4\xf2\xde\xb3p\xa0\x1c\x95\xeb\xa4\x8a\xefM\x90\xe2\x14\x7f\xda0\x81\xee\xb2\x16\xf0\x8eJv`\xef@1\x01z\x02\x15\x15\xe0\xa8n\xb6&lt;\x82\x0fh9\xfa(0\x8bhD\xab\xc2\x8c\xae\xf4m\xad\x1a\xd1\xbd\x0b7PE"\x16\xc8RL\x04\x7f\xa8\xb1\x81\x9c`\xaf\xe9\x96T\xc0\x17+\x8cq\xdc\xe4\xf0\xfe-_\x13A\xc6F\xe5\x84\nqB0#&gt;-\xe4\x9b\xd2Z2\xd2A\'!B\x88\x120\xdc\xa6\x0b]4\xda\x06\xaa\xcf\xa3i\x83\x84\xb6\xbe\xcb\x87i\xc3W\rT\xff\x00kf\x95\xa3Z\xda\x81v\xda\xcd\xafsH\xce+U\xa5\x7f\xea\x171\xef\xbda\xa20M\xa5\xa6n&amp;\xb7Z\xb4_\xc3\xf4v\xe8\xfa-\x88c\x07\xa9;\xc9F\xe9\x81\xef\x08\xc9\xd9\xa7\x92\xbb\xddw\xaa\x17\x85\xeb1\xcd\xa6\xe9QV\xbe\xbf\xbb\xf9Tp\xb9S\xb9mR\xce7\xab\xfd\xe1\x9d\x16\x07 \x15\xea\xa2T\xe4\x9d\x18(\x1ft\xc6\xe5T*\x9a\t\x81\x8amP85_k\x81\x01E[\xe8\xad\xbfB\xb5y\x00\x82\x15\x9d\x83h\'}\x15\xe1\x88[\x95\xd1Z\x7f8!\xd2\x07\x01\xdd\x12\xbaM*\xd9\xc0\xd0\x08\xfb\xa9\x02\xb9(|y\x99P\xc2\xd9\xce\x88D\x8d\xe8\xd2\x1d\xc9^\x01\xed\xa1\x9fB\xb0p\x18\xe28\xeeRE\xc0]\xc3&gt;I\x96VV%\x9d\xc7\x8f\xfcJ\xe1\xdac\xa8J\xa7i\nW\x1dr\xa3\xb5\x9e\xd7\xa4c\xdb$^\x05\xb28\xab;\x1b6YY\xb45\x8c\x00\x008Q\x13\x80\x9e\t\xe7\x10\x84\x92"=\nt\xe4\xa4\xc3\xa2\x99\x8a"\xc1\x9atf&lt;\x94\x98\xda&lt;\xc4\x04,\xe2\xbeY\xa7;;\xa1ILm`&amp;~\x90\x80M\t\xb2\xa0\x94\x08)\xc1\xd8B?\xa98\x82aI\x90\x9b\xb4.\xa6\xb4\x82\x1a+\x821\xbbU~\x8b\xf6\xda\x0ex"\xc2c\x92\x1f\xd5[1\xdf\x13\x90\xbe\xdd\xdd\xd4\xdaD\xd0H\xe4\xa6w\xd58TA#\x11\xbcoMt\xc4\xc7xp\x95\xb2\xc18\x9a\xa2\x081 \xfb\x90\x9foigp\t\xef0\x9c(\x81\x12\x05\rH\xe3\xdab\xaa\xaa\xa7V\x1e\x03\x0f\x19\x08\xda\x1a|\xe18D\xd7\xcc-\xa2U\xea\xcf\xb2\xda\xee\xf9\x92\x88\x06&gt;\xbfU\x8e\xcc\x0e&amp;\x13M`"\x0e\xcb[\xcdm"\x00$\x94\x14\x18TW\x9d)\xb0%\x04\x08D\xb9\x16b\x14\xe2\xa6\x99\xa2\xd7N("3!\x10N\x1c\xca\x11\xde\x9f*#\x06\xed\xd1\xc3$\xf1\xdek\xa3\xc9\xc3\xd9t_\x885\xed\x82\x1e~k\xf2\xd91AS\x91\x92\x81m\xf00\xfeB \xfb\x85r\x089\xe6\x89\x05\xdf\xa4\xd7\xcdL\r\xfbM\xe6\x9cz\x11]\xdc\xb3CE\xb2h\xbb\x83\x8cp\x9e\xd7\x15R\xaa\xab\xdac]|&lt;u\x17\x14\xe7\x9f\xf4\xefO\x14\xcb1\xfe\x99T\xc96\xb2\xea\xad\xa9\x0f(\xdd\x06\x9e\x8a2g\xcd\x07\r\xe3\x85\x11t\xde\xc0d0@\xfek\x80\xe1\xaa\xealqV\x16,.s\xe8\xb4G\xda5\x81\xd8\xab+0\x1c\xe7\x80\x15\x81tt\x82\xa9\xaf\xa8pMke8\x83\xf9tA\xd9.\n\xb1w\x11D\x05\x1d\x97\xba\x8c\x8a\xa5O\xc9n.\x94\xe0(8\xef(;h\x1c3\xcf\xcd\x1e\x85\xb6\xc0T!h\xd9i\xa3\x9by6x\x13\xe8\x89\r\x93Y!;b\xf6\x0f\xa1\xe6\xba2\x0eD\xd7\x87\x04\t\x0c5\x8a\xcf$\xf7ZY[F\xc8\'\xd5\xab=\xfe\x02\xaa;\x0c\xba\xf1\xdba\xdbB\xe6\xaf\x9a\xfc\x93g\xbd\xec\xae\xa6\xc6h\xb4\xd0\x129+\xd5\x87r\x88+\x00&gt;\xeb=\x99W\xa9zy`\xac\xed_\x17h\ra5\x8d\rh\x805l\x95k`m \xf2V\xb6\xed\xab\xf1Fd:\xabH{.\xbd\xe5Z\xb0\x82\xd3\n\xd1\x96@Z\x92\xac\xb4\x9b\x10\xe9M\xb5\t\xac}0U\xc75{\x10\xb7\xc2\x1f\xa6\xbe\x8b\x89\xf5Mu.\xa0\x04\x077\xe4\x13\x9ad\xb4\xc8\xc0\x8cG\x9a\xe9\x83\xac\xed\x1b\xb2\xe1\xdeo\xd4+o\xc24\xa3ch6f\xfbN\xf6\xbb4\r\xe88\x9aqFwI\x05\x17\xb3\x92$q\xbc\x13\xed\\\x00\x06\x90\x99f\xdb64Q\xbf\xc9P;Z*\xeb\xa7i9(\xf1\xdb\x95j\xc2\x81#b|\xd4\x01\xaaA\xa2\xdc\x1b&lt;SD\x879\x9eF~K\xf42\xd4\x8f\xed\x81\xef\t\xee\xc9]\x150\xae6\x9ej\x17\x15x\x14\xeb\xad}\x98\xa0\xc5U\x14u\x07Y\x86\x96\xe0\x9c\xe9h\xc1\x10\x06\xf8Be\n\x95\x84\xc1\xa6*\xbb\xe5\x0e&gt;\x88\xdd\xa5\xdfX\\\x0c\xa3\x13&amp;\x11q\xd9qn\\\x11s\xdb\xdd\x04\x1cj\xdfp\xac\xbf\x14\xd0\xcd\x9c\x0e\x91\xb5c\xa6k\xe6\xad\xf4K{M\x0fI\xb3\xb9md\xec\x0ea^!\x12]\x89\xdd\xf2V\xae\xb4\xfc\xed\x90\x1c\'zcD4Eg\xb7\xc7P\x95\x87m\x1e:\xf1\xe2\x9c\rk\xc1\n\x12\xd8\xf2\x842\x07\xc9;p\xf3?dN/&gt;TL\xac\xb3\xcd\xc6\xf7\xcd\x01\xb2\xd3NH\x08\xbc\x1a\xe3\xfd\xd5\xf7W\xdbOT\x00\x00J\xba\x04\xa0Q\n\x84\x92\x8d\x93.4P\xa0\xf9\\Vh\xa3\xa5\xda5\xa17F\x0fr!\xa6B\xdb \xe0\x80"\xeb\xa4&amp;\xbf\x07A\x19"qmQ\xc5\x13\xf7\x14B\xb2}h\x98#\x10x\xd5K\xa4\x80y\x94\x19\x12\xdc\xf2\xaa\x14\xa2\x1f\x8bXt\xb6\x10\xcd6\xc4~S\xbfX\xfd\x05[\xe9\x9aie\xb3\x0b\x1bf\xd7t\x80\xe2\x0bi\x1e\xaa\xcbD\xb3\x86\xb6\xb0\x04\x9ch\xaa\xe3\xc7U\x07\x80\xafm\x1d\xbf\x0e\xde\x11\xcd\xae#\xf6\x94?K\xfc\xcc\xa6\x8a\xc7RTV\xb3\x95J8\x99\x03\x8a\xb3\xb3\x8b6\xd7\x99\x94\xfa@A\xc18;\xbd\x00+\xd3!\n\x12\xba{+\xe3\x14\xe6\x12\x08TT\x08\x92\x9d=3\x84\x04\x1b\xc9Y\x86w\x95\x83\xaf5\xf0Je\x0b\x1b\xf4VV\x81\xa6\xadpO\x06\xeb\xa3\x81\xde\xa7\x1a(3w\xd2\x8b\x84\xee\xa1N\x07\x0c3(\x9a\x90=\x14`\x89\x02\x9c\xb5Y\xb7Hv\x92\xc1\x0fs.\xbf\xf7qR\xa7\xb7\xa2\xa2\xaa\xaa\xa7i\x1e\x02{s4Fv\xac\xcbS\x0c\x10*\xa3(L\xcc\xa6\xfe\xa1\xac\r\xff\x00\xcd\xc9\xc7\x1cN0\xae\xbe\xf5M|\x93\xa9\x02\x88\xd4\xcf\xa2x\xe0\x83\x8cHT\xc6V\xc5\xc3\xf1`\xaaAmS\x86H\xa6\xdaZ\xb5\xcf\xc0UY\xd904R\x88\x1d\xa5bJ\xb1t\x92\x02{^\xdb\xb6W\x9b*\xca\xd8l\x9d\xac\xdaq_\xf6\xed\x05~\x123D\xd0\xfb\xaa\x11 \x8d\xc9\xa2\x97\x8f\x10\x9f0\t\xe1$\xa2\x7fG\x91WaUR\xba\xe7\xb2\xc7\xabMU\xd5\x87\x82=XU\x08\xee\xf0\x10\x0e\xa78\xe6\x13\xc7\xc2\xae\xe5\xee\x9b1)\x8e\x15o\xaafB9!\xaa\xb8\xd1\xbf=\xeb\x8eh;\x8a\xe1\xc8j\x91\x82m\x987U\x8d\x9fyhO"\xfeK\xf0\xb96\xaer\xfc:\xda\xd4\\\xa2\xd1\x9c\xcb\xc0\xdeCGs"\xcc\xa7\xb9\xc0L)\x10]\x14W\x8b\x80\xb5"\xabg\xbd\\\xf8\xa2^\xdaKFI\xaf\x87Am\xa3Q\xb4\xb3\xbas\xee\xba0&lt;T\x8b\xd1\xc1\xcc9\x14\xd2(\xe1\xf3\xf9"\xfa\xb9\xe6\xe8\xca\xec\xb5Y\xcc\x029I\xfa \xc8\xd8\xff\x00\xe5\xf7_\xb4z\xa2\x0e*\xfb{\xcb\x8a2\xaa)\xe0\xaa\xa9\xfe\xd3\t\xc5\xd49\xabI\xa5S\xa97\xbc\xd0\x18"\t\xaa\xaf\xfa\xa0n\xfe\x14\xfc\xe3VB\x93D"\x80B\xfd\xa8\x92?\xc9Q\x82\x1b\xea\xaf`S\xce%\x07\xd1\xc8\xc1,V\xd2\xe0AV\x9b\x96\x97\xa3\x18c\x8c+{]\x972x\xa7w\x9d\xbdE\x93\xa1\xd0F\t\xe5\xdb=\xe2\xad\xedn\xdan\xc4+\xad\xe9l\xab\xbd\xa8\x16\xdd-\xd9\x1b\xcdPkm\x18_7\x1d\xe6\xae\x92h\xe1\x91\x07\x19\xc9\x0b\xd3elM\xea\xc6\xff\x00T\xf7T\xb5\xff\x00\xf2g\xdd\x01\x89a\xe5\xb3\xf2M=\xd8\xff\x00\xcb\xee\xa0\xf7\x909\x8cU1GxN\xcc\xa9\xdf\xe0*\xab\xaa\x9a\x8f\xfb4)W\x8a#/0\x88\x18\xa07y\xab9\xab\x10\xc5\x8e&amp;\xaa\x0e\xd5\xa1\xf2M\x18\xae\x0b?\x9e\xaf\xdc\x800\x8e\x00B\xbb I)\x86\x8eW\xb0\\\x13\x1f\xf0\xa6;\xe1\x85b&gt;\x05d\xc1\xb2\xd8N\xf2ZKm\x1d\xf9n,\xde\x9e-\x9f2*\x9e\xe6\xd9\xbe \x1cWD\xd0w\xe3\x92\xda\x04Q\xd2E\x13\xfaw\x96\x9a\x960\xd7~\x19\'^2\xc0\xd2EhH\xe6\x13\xad\x89h6p\xf7|7\x9b\x07q\xe6\xba:8\x03\xce\xd54\t\xba[O\x86HA\xd4\xbc\xe7G!\xf3[\xac\xfd\x10\x91\xde\x07\x8a\xa62\x10\xa5\x15eDv\xf4X\xaa\xac\x15&lt;$k\x9f\x01\x01b\xa4\xaa\xe1\xad\xb9\xa2f\x1d\xefUj\xd1KW0qNou\xb7\x9d\xfa\xddD\xd8\xfe\x1d^K\x8a\xdcG\x98R\xde\xeav@}\x13\xbf\xfaN\xc0`1)\xcc&amp;\x0f\x14\xd7\n\xa6\x14\xc4\xcc\xd5\x90\xcdY\xa6Z6\xe8\x14*\xc0\xbc\xbc\xb0(\xb2\x86\xe4(\xa5\xa1\xbf\xb4)\x8c\x9f{\x92\x7fL\x1d0n\xc5}U\xeb\xdf\x98\xe1\x149\xa8|\x98 \xe61\x07x\xac+6\n0\x0ft\xcbCV\x8f\xeeh\x1f\xe1n&gt;\xb0\x99\x93Zk\xbdE \xfc\xd4\t\x94T\x9c\x07\x80\xa1[J\xaa\x9f\xec\xf1\x9a\x89\xaa\xbe\xe2\xaf\x9d@d\x80\x0b+\xa8|Q\x1b\xc2\x07\x03D\x07\x1d[\x88\xf2_\xc2\xa5\xb8\xa0fO\x92,;\'\xc8\x85\x9c{+\xd8\xbb\xc8+\xd0\xd8C\xcb\x12\x8f\xaa\x82J0\xcf$Kfr\x9fE7Q\x90y\xfbj\xe2\xb3\x1eh9\xbc\x8e+\xf3"\xd1\xbce4\x10\xe0\xef\xfb\x91^P\x9c\xd8 \x0b\xdc\xbd\x91\xa4\xdd\x07\x9c{+2\xe0/\xda\x03\xfb\x0f\xdc&amp;~\xbfR\xa2 \xfd\xfdQ\xff\x00\xe9\x1f\xd4U+\xab\x03EN\xde\x8a\xaa\xa1a\xe1!O\x81\x85\x01M%^r\x98Q\xabg\x04N^\x85\x16\x92}\x90\xa5j\x89\xc1\xa5\x032=\x14\xea\x94@*\xa4\xbe\xbe\xbfD\xc1\x9c\x0e%0\xe0e\x19\x81\xeb\xbf\x92\xbdM\xc5R\x99S\xcdS\xc9Q\x85c\xca=U\x07\x05\x07\xceT9b3T\x91\x96(:HNiq \x8aqR\xd6H\xc0\xb4\xc8!c\xb3\xf2\x95j\xd6\xc3X\\&amp;\xb1\xdeo\x91]-\x0b\xde\xd3\xba\xd2A\xf5\n\xd9\xb3.&gt;\xa8\x9c\xfc\x94\xfa\xe3\t\xa0\x04b\xaaHT\xf0\x14UR\xe5O\t*|\x0c(\x94^V\n\x06\xb9\n\\\xe9d\xa7\xde\xa5\x8c\xf2\xaa9\xd9}W\x1f$Fr\x89[\xd0\x1b\x90\xdfU\xc6\xa7\xd5\x1c\x8a?\xa8\xfa\xab\xa0\xc6&amp;\x8b\xe6\xb6|\xd4\xb7\xd5AQ\xee\xa0!&lt;\xd5\x04\xac\x10\xa5c\x8a\x9f\xba\xda\r \xfdPvY\xab&lt;\x08\'\x81\x1fd\xc7\x0e\xe11\xf0\xcb\x81\x1eE4\x92da\x9dS6\xa9&lt;\x8a\xdc#\x9a\x7f\xea%\xabk\xf8\x15"\xf6HJ\xe1\xe0(UT\x95O\x05\nT\xea\xc3\xb7\x85\x00\xd5_$"\xe3*\x00\xa2\x8d`7\x14\xe7|oO\x11\x16\xb6\x90\xad7z\xa2\xe4\x05Q\xdd\xaasC\x04L\xa1\x90*U\n\xa7\x9a\x90\x16\xcf\xaa\xee\xea\xa1\xe4W\xf3\x8a\x85\x1f\xccTrM9\xacL\x9eWU\xa0\xe2\x15\xf6\xd6\xcd\xc6\x94p\x87G&gt;\x08\xc0\x00\xfba\xc753?\xcf\xb2\xa8\xc7\xe6\x80\x14\x99P1\xfa\xa2\x08&amp;#\x92\xda\xc0\xaa\xaax\n\x15\xb5\n`\xaax\x18S\x9a\x95:\xa3\xb6\xa2\x89X\x80Q{\x96\n"\x8a5\xd1Y\x17R\xa4nX*`\x82&lt;\x11\xc4\xa9!\xab\x8a\xa9\xe4\x80\xf8i((\xc0J\xacf\xa2\xea\xae\xaa\xb7\x9a\xfb\xea \x94\x1c\n{+2\xdf\x92\x9c&gt;\xe1oL~\x04O\x04\xf6U\xa0\xf2A\xa6\xf5\xd2\xd3\xc3`\xf9\xa2]\x84\x9e\x05\x1cd\xa6\xce\xd3\x9f\xc8\xe0\x9a\x062\x9d\xfaX9\x04\xec\x9f\xe8\x9ay\xf8*\x15\xb6\xa8\x15&lt;\'\x0f\x01\x13Ut\x14m\x1e\xa6\n\x80:\x81\x1f\xe0V\x93KOE\x93\xa4\x94\xdaP\xa9\xca5\xc4\xc7\xaa\x999\x05\x00\xb1\xb8\xbb\x13\xb94W\x18\xcdEK\x90nU\xf9*UVT4\xaa\xa3\xee\xb1R\x81\x90Q\x06?\x81\x04[QQ\xbb\xec\x9a\xecJ\xa1\xa8+IkOGhi\x85h\x9di\x05\xc3hz\xf9#\x85\xecr\xc4{\xa3\xbc\x14\xcf\xd0Bf\x14Ngw\x0eh\xe6\x07\xa2\x82\xdc&lt;\r\x15\n\x97\xaa\n*\x0f\x01\x92\x95:\xa3\xc0D\xab\xce(\xda:\xa1]\x8au\x86eS\x10&lt;\xaa\xa9F\xfb\xaf\xda\x11\xdc\xa4\xc4\x18\xf4[\xc7\xcfSC\r\x16dT\xaa\x80\xb7o@Vk\x97\x15\x90&lt;\xd6Cr\xcf\x92\xa1SE5\xd5\x9e\xa2\x8a\x15\x1d\xd7\'\xb8I\xd9;\xe2}Q\x13#\xff\x00\x1f\xb2c\x88t\xa1\x1f\xc2\xad,\xa7jG\xaau(\x1c\x16W}\x16wj\xad\r\x0bS\xaf\xb5C[\xcb\xc0QP\xd5M\xa0\n\x81a\xaf\x8fi\x01L\xa9\xe5\xe0aB\x8b\xd5F\xd5\xea\x82\x8a\x02\x8e\xa9\x03$\xe9\xda&gt;\xe8P\xca!o\x95\n\x9f\xe1&gt;\xd0\xddf\x1b\xd1\x908I\xe6V&lt;\x914T\x98\xe4\xa27\xfc\x95\r\x14\xfa\xfc\x90\x17\x97\xcdJ\x06\xf7\x15^x\xaa\xddr\xe3\xc9\x14EG\xa2\xbf0\xadl\xbe\to\xb2e\xa3d\x18\xe3\x9b\x0f\x14\xf9i\'\x19\x066\x82`\xc4\xc1\xf4Mq\xda\xc7x0\x8bf\xf3`\x1d\xeb\x9f\xcd\x13\x00\x9a\xe4\x9e\x10\xbf\xe6\xaf4\x11\x87\x80\xa2\xc5M\xaf\x9a\xa0\xed\xc0\x08\x92T\xa9Q\xe0.\x85vS\xad\xad!\x1a+\xa0QGS\x8a\xe0\xa1\xd8 \xd3W\x81\xc34\xd8\x8f\xf2\x9aSr*\x93\x97\xa2\xa5TIP\x1d\xc9R8\x80\xaa\\w\xaa\xc0\x85\x15\xc7j\x9fu\xdd\x1f\xb9EqT\x039\x9dU&lt;\x94ZsD(t\xc74Pu&amp;\xb9"\x0c\x15\x10B\t\xa0\x0ex\x84rt\xf0*;\xce\xa6\xfcD+\x1bQ\x1b%\x0b&gt;\x1c\x0e\n*\x04\xb7v*\xf6\xfe0\x88\xde\x88\x8a\xfd\xd1,-w\x80\xa1U*m\x15\x07m\x08\x9a)*N\n&lt;\x04+\xa0\xab\xee!:\xd1\xd2B\x02(\xa3\xa9\x8a\x93EJ\xa9\x9c\x93~\x16\x97\x1feZ69\x04\x18 T\xe7*\x04\x96\xa8\xc1\x92S\xe6\xf3\xf2@\x0c\xd7x\x9f-[UQ\xcc\xd5Ew"J\xee\x0f\xe4\x05\x12\xa4\x13\x14\x9a(z\xaf\xbf%*\xf0\x14\xd5xVFr\x15\xecbw\xefNeB\xd9\x91QB\x83\xefG?Ut|\xd5\xeb\xce\x08\x03I\x04cD\xfc\x1c\xdb\xc3\xdf\xc8\xa76\xa2aN.\x90\x9d\x83\x81!\x06\xa1\x10\xa9\x87o\xb2V\xd1Rel\xf6\xd9"T\xa8\xf0\x10\xae\x82\x8bsN\xd2-$\xd5]h\xa2\xba\x07R\xaa\xf1Cz\x80\xa7$\x000\xc5[\xd5\'$@\xdat\x8fD_\x82\x8cTe\xf4D\xab\xd6\xb7r\x1fEIY\xff\x000X\x9e\x10\xa0:\xa7%\xfc\xfa\xa9&lt;7/\x87T\xb8\xf14R)\x90*\xf0\x075\x1bC\x043\xf5P\xa7\xf9\xb9l\xa8\x17p\x87\x02\xd3\xcd\x16\xb8&gt;\xcc\xee\xa2\xe9,\xdc\xe0M=\x93\x99XFf\x90Sdb\xa3\xba\xe9\xe0\x9c\xd3\xddFy\xfb\xa8W\\%\x03\xdb\xc3J\xfc\xd8R\x1a\xb6GkEyJ\x85\x1e\x02\x01P\rS\xb4\x9bU\x11!]\x01GT\x12\x133B\xeand\xab\x16\xe3x\xf0\xc1\x07\x9d\x80\x1b\xee\x867\x87\x9b\x96\xce \x04r\x03\xcd\x19\xde\x8c]\x18\x9aJ\x00Sz0TZ\x81\x91\x80\xb6\x8e\xe6\xa9w\xa2\xbdyC\\\xe8U.\xcebV&lt;\x16\x11\xbdRx\xab\xaepP\xe0PF\xb9\xaaU\x06\x80\'*\x15\xb0\xf21\x10\xef%\xe8Bu\x9d\xa3\x86\xfa E\x04\x8c\xda\x8f\xc3\xb4\xde8\x8ek\xff\x00\xa41h\x84\xe6\xe4\x13P\x10\xbf0b\x150\xed\xf6J\xfc\xfcs[\r\xa2\xa0\xeb\xf0\xeb\xca\x8c\x94x\x08P\nu\xab\xee\x82\xa6\n\x00`\xa0u1\xd63B\xe9\xaa\x82`&amp;gg^i\x981\x80\xfd\x15\xa18z\xa8\xab\xbei\xbb\xfdP\x8cP\x8a\t+\x0b\xcb\xd1g\x99Uw\x1f\xa6\n\x1a\xbb\xa7z\xc0q\xf9*5P\xa8.\xae\xe5\x17\x9a\xa0\x82\xa9\n\x16a\x11$G\x0f\xb2\xee\x99\xa1j"\xc8\xc8\xa0\xd8&lt;\x8a\xa1\x11\xbb\xcdt\x91O\xe7\x14d^o\x9a\x02\x15\x9bD_\xbb\xec\x9e\t8\xa6\x9e{\xd4}a\x06\x89\x058Z\x0eh\x10\x15;m\x97+\xfaQ\xe6\xa1\x8dT\x1d\xb4B\x8f\x01\x084\x15\x01\xc2Q\xb7\xb4\xbcU\xd0\x14u\xc8\x08\x92\x9c[$\xa3&amp;\x86\x13\xcc\xec\xf9&amp;\xb4U\xc0rA\xb5n;\xddUN\xf9w\xee*O\x14A\x9b\xc4\xf2\xff\x00*hM}P\xc7\x14M}\x15\xd4\\g\x01\ns\xc4)x\xa6\x12\x8d\xf6\x85\xf2S_\xdcV\xd9\xf4\xf4S+\x1d^\xea)\xe9\xcd\x00\xe2!6\xd0F\xfa\x83\xcd:\xcc\xd4H\xcf\x8c\xac\xa6\x88\x0c\x90\xde\xa2bHN\xa8\xc4qWp\x90\xa7\x1fd\x19\x9a\x07"\xb6\x84\x0c\xd3K\x1b\xdbb\xb6\x1e\xafi^j\x18\xde\xde&lt;\r\xd0U\xd0\xea\xa7izE0P\x02\x80\x14u(\xab\xaa8\xa9\xf8O\x92\xa6h\x95m\x10\xc2=h\x8c\xd7i\xde\xc9\xee\x154\xde\x98`\x97\xd3 &gt;\xab&amp;\x88@\xe2e\x00F\xc9B\xa2\xa9\xa4\x08\xcf\xe4\x8c\xae\xeca2Tbh\x80\x82\xa5\xe1{\xad\x97q\x95S\xc0\x8fu\xdf\x19\xaa|\x97sq\n\x87\x82\xbc+\x9a\x1f\x14\xf3G\xe1\x85{\x81\xfb(P\x9c\x0f\x0fe\xc0\xa9\xe3\xf3@c\xeb\x08;sx\xe4\xa3\xb8\xf9\x94\xfc=\x91\x04Lb\xbf,S\xb6\xa2\x86;\x15\x7fK\xf3[\x03\xc7\xc0WA\xaa6\xd6\x97\x1aT\xc2\xba\x02\x81\xd6\xc7T\xa8\xf8\x91\x84H)\xd8\x06\x1f#\x82\x16T\xef;\x9d\x13\xad\x1c+x\xfb+;,]y\xf9\xa7\xb8I!\xac\xe0\x9a\xcc=N*\xd5\xe7`{\xc2"\xe5\x9b\x88m6\xa9\x8a$\x9c0\xcb\x14F8\xeeMu\xde\x0bi\xb3\xcd\x05vy)\x85\x88R\xe2T&gt;\xf2\xd9\xe4\xe2W\xf8U\x07}\x15\xd2#\x89A\xd8*\xd5\x01+\x82f\xfe\t\xa74\x1a\ta\xfa+9"\xd6\x98\xd5\x032\'\xf74\xaa~\xa1\xf2Q\x80\xa2\x19\xb4\x9a&amp;H\xc5M\x90\xed\xa0(\xb3\x7f$]\xa5y\xa8`\xf1\x9c5B\xba\n\x8b\xc2S\xb4\x8bK\xee\xde\xae\x86\xd1]\x1dj,T\x15*7\xa8\x12P\xa9!3\x00H\n\xcf\xe1\xb3$\xa6\xb0\x1az&amp;\xd1\xd6\x83\xfe*\xe8\x92\xe2\x87\xc2\x0b\x8aw{\xa3x\x84^\xc6W\x13\\\x85\x17J%\xe2?\xc2\x9aJ\x11\xf4\xe0\xa4\x9f\xe5\x15\xe0=\x94\xca\xc3\x92\x9b\xfe\xaa\x1d\xff\x00(U+d\xf9-\x93\xcf\xd9ly\xa2U\xd40^\xb9&amp;\x03u\xce\x87\x1f$\xe32\xd3\xe4\x9d$\x1a{\'\x10d\xd3z\xda-x\x90\x8bF\xc3\x8cb\x13\x9ap\x84\xf1PW\xf3\x05T.\x00\xa9\xda\xc3T1\xca\xf5\xa5\xe5\x0c\x1e:\xe8\xc5\x06\x03T\xfd6\xd8n\x95t6\x884v\x18\xa8*Jl\tM\xdc\xbfp\xf4\xa2\xfdMg5d\xd9\x05\xd1\xbe(\xac\xa2\xfbl\xdd\x03\x02h\x9a\xda\x9cy+\xe6Ii\xf3Y\xdc\x1fD+.j\x02\xeb\xa4D#5u\r!e!\x16\x98\xe0\x83c\x05y\xc2\xef\x92\x91\x86x/HX\xac|\x94?\xcdc\xcd4\x11\xc57\t\xa2\x18\xd1\x0fur}\x93\xad\x9b!\xd1\x07\x01\x9a}\xa5\xa0.\x9ey\xa76\xee\xdakfO\xaa\xb1v\x0e\x08\\\x82\x01n\\\x15\xc9\x8ay\x82\x81\x9b\xd4\xaa~\xf9\x08\x8c\x96\nM\x15;Xj\x86\x95@V\xc0\xf1\xb7B\xb8\x1dT\xeb{R\xc6\xe6\xa8\xd2Z\xae\x80\xa3\xb0\xa2\xdaUB1\n\x98 \xd9\xa1O~\r\xf5DU\xd1&lt;j\x88\xcc\xb8\xabRj\xe3\xf6N\x19\x9e3\x82;\xcf\xaa\'\x14\xfb&gt;\xe9\xa6\xe5#\xee\xae\xd0\x85\xf1J\xbf&gt;\x89\xed}\x1c\xae\xd7\xd4 A\x8f\xe7\x05U\x8d\x16\xd0\x1c\x15#\x82\x97\x12\xb0\xe4\xae\xfd\x91\x0e\xd9@\xcb]\xcd\x0b\xfd\xe0\x9c\xc7\x06\xc0\x99\x85h\xf8\xf6N\x8cS\x81\x91\xf2Om%qN\x18A\x10\x9c?j\xce\xbeH\xe6T&lt;\xa3\xda\xc3\x0f$d\x85\xb2\xd9[&gt;2\x02\xba\rab\xd0S\xad\xedC\xdd\x99A\x8d\x14\x18+\xa3\xb1\xa2\x82\xa0\xa9\xc4-\x9a\x14f\x86\xf1P?0\x86\xf3V,\x12^\x98\x06\x1f\xe5EsT\xaa\xbb\nA\xe4\xa8\xd2\x00N\xb32\xd4\x1c\x05&lt;\x90\x8a-\xf1\xa8oP\xea\xeeSw\xdf\xc9m\x15x\xca\xae*\xeb\x9a\xa2V\xe3\x82\x0c\x13\x9a$\x02U%m\xba\xd1\xca\x83\xec\x83@*\xeb\xa2\x15\xe1\xb3\t\xe2a&gt;\xb9+^+\x82\x9cT&gt;\x9b\xd1 Ok\xb2T\xdbG\x15\xb0\xd5\xb2;Jx\x0b\xa0\xab\x81\xd5N\xd3t\x9c&amp;\xaa\xe0\x14W@\xec\xa8\xb1F\xf24\xd5\x12b\x13\xafP\x92x\xa7\x93&amp;\xd6\xaa\xef\xee+2\xaf9\xf5\xc0*\x8d\xc8\\&amp;&gt;$\x1df\xb1\x85\x12F\x08\x81(\xd5N\xa2\xdc\x15\x04\xee\n\xf2\xa1\xe6\x85\xc5\x04r\xd5U\x99\xd5:\xa8\xafl\xfa#t\x15-\xc3Q\xef\x02\xa6\x137\x15\xb8\xa8xT\x9e\xd6\x18U\xfd(\x0e(\xf4l[#\xc5\xdd\n\xe3]T\xed"\xd0\x80sX\x12\xae\x00\xa3\xb2\x9dU?%Dr\x80\x815\x1e\xe9\x8c\xa0\xba9\x94\'\x19\xfe\xd52L\x01\xba~h\xc7\x0f\x9a\xba\xd0\xdfU\x9a\x8b\x18\x9a\xbb\x14nB\x9az(QQ\x0b\x8a\xcdQV\xb2\xa9\x8a3\n\xf5p(\xc6&lt;\x96\x05WT\x99%I\xc7V:\xaf:\xb9,\x91i\xa2\x98\x95\x15\x0fW\xfe$\x10F\x94T\xedb\xcd\xd5\xc9t\xba\x7f\xfc\x97\xe53\xc5\xc0(Y\xb5\xd5E\xeesAN\xd2mC\xdc\x10\xb3kh\xae\x8e\xd4^WX\xaf\x13Z\xf3T[\xa3\xd9;31\xc7\x048\xbc\xfb\'\x17^1\xb8"elB\xa0E\xa1\xb0\xaa\xe0\x81\x13\x92\x99\x19"\x11\nF:\xa2\x90\xa1\xcaG\x15\xecP\x00\xd7\x15\x8e\xb8\xa6\xaa\x1dX\xf3\xd5\x12\n\xcd\xbe\x8a\r\n$\xc4\x0ea\x17\x01T\x04MPlDv\xdf\x92\xf5{N\x07\xf7\xa8\xb1g/\x16\x18\xd3U\x01\xc0\x14\xed.\xde8\xa1f\xd6\xec\xa0\xd6\xf6\xc1l!%8\'\x1c\xfd\x93\xb3Ny\xee\xab\xc6\xa6\x80+\xd0}\x14\x01\x82\xa6*\xbfE\xb5MU\xd47"\n\x95\x9a\xef(\xae\xe5\x19\xea\xa6\xbc\xa5qR\xa5RV\xe52!p!L\x82e]\xc5pCwmE\x16\x0fW\xb4\xc6sQb\xde^*\xe05W\x03\x84\xa7[\xda\x9e%\x13u\xee\x18\xa1f\xd1N\xb0\xecd\xa9ljq=\xc4F*\xb8/\x85\x8c\xfa\'\x1a\xb8\xab\x87+\xd8#I\xd5\xec\xab\xaa\xe9\xc5TsAW\xa9\x8a\xa9\xaa\n\x85\x04\x10\x0eA\xf9\xea\xa2\x90\xb8&amp;\x98\x13\xae\x14\xe4\xa3=@u8\xf6\x1b%~[\x84\xab\xfa[U\xdb!\xe2@\x05\x06\xb4\xd5^{\x80)\xda]\xb8ym\x17D\xc6\xd1@\xed)\xae\xba\xa5\x04\x0e\t\xb0\xa2n\xd9\xabla\x16\xc4\xd4\xefN\x85U\x8d\x14!d1R\xe8\x07\x04\x1c&amp;P\x8cP9\xa9UX \xa6\xb2\xb1\xe2\xa347\xa3\x08\xa3il\xd0V\x01Q]^\x8bz;\xb5\x11\xd4\xda\xed6\n\x93\x12\xafi5\xde\x14Y7\xc4B\x0ci\xaa\x92\xe6\x82\x9d\xa4[5\x832\x85\x9b\x18KU\xc0&lt;\x05\xd5%\x14\x17$\xd5f\xdc\xa4\xad\xf4U\xa0\xa9@Q\x0e\n\x87Q\xb3`\x82\x9d2\xa0D\xa2\x1d\x8a.\xf8\xa8\x85*\xab2\x84L\xad\xa3\x05M%e(\x992\x8c\xea%N\x94\xa8\xb0Y\xa8\xa2;\xa4&amp;\xea\x83\x1a\x80R\xa0\xf5\xb8\xf5\xa2\xcc\xab\xdaE\xd56\xd2\xa2\xcd\xbc\xbb/\x97S\x87d\x18\xd2\x83\x01\x13Tm\x1e\xe9(\xda\xdat\xae\x0b\xa2`\x11\xe0H\x08\x17\x02\xa9\xa8\xa9:\xa2K\xbd\x02s\x8c\x9a(\xa228,u\x1b\xe5\x9a\x8bQ*\x02\x82\x8e\xf2\x8c)\'UQ\xeaE\xb9r\xa0]\xdd\xc8a\x91SD\xe1\x81\xf2@\xf3BpX"\xa7\xad\xc7\xb0\x8b\x12U\xfd2\xd2\xb8/\x89C@\xec\xf0\xedE\x8b\x1f\\\x8a6\xf6\xae\xaav\x97n\xd6\x01L\xd0\xb1\xb2m\x14\x0f\x03D\x03\xf3\xd47\xa1\x96+2\x9c\xfe\x01\x06\xa2Hh\xc1\x11\xcdS\x15\n\x9ej\xf6\x93\xab\x86\xa8\x1a\xab\x8a\x9e\xa55\xca\x0c\xb6\xba\xb6|\x96\xca\xc5\x18\x90Q)\x872\n\xa0_\xc9[\xd4\xea\x1d\x9d\x10m\x8b\xd5\xed&amp;\xd4\xf1G\xa3\x07\xc4\x0b6\xba\xaa\xf9,iE\xce\xe6\xa1\xad{\x9bT,\xda)\xe0\xe3-ApM\x19\xa3\x92qA\xb9WV\x1b\xf5\x8bK@\xee\xbd#\xafE\xd1ilR\xd1\xcbT!\x81^\xaaF\n0U\xc35\xc1p\\U;O\xfaw\xd7%\xf9\xb6\x9c\xd4h\xec&gt;\x1c1\xa4\xab\xa1\xcd\x05\x1bG\xb8\x94\xed*\xd9\xaf-\xa04M\xb1\xb3\x14\xf0\xd3\xa8\x8c\x02\xde\xa0(\x08oY\xea\xc5\x12\xf3\xa8n\\\xf5p\xeca\xa5]\xd2Zw\x15~\xc1\x86r\xd4\x17\x15B\x81\t\xba\xca\xe2\xa9\xd8q\xea]\xd1\x9f\xc9^y;\xca\xbb\xa2\xb3\x97o=x\x15M\xb1c\xb6\x93\xb4\x8bSZ\'[\xda\xb1\x8d\xc4\x94\xdb\x1b\x16l\xa8\xf0\xc7%\x14\x08f\x16\xe5Q\xbda\x05E&amp;\xaa5b\xa4\xf5\xb8.\x1a\xf8u.\xb0\xa9t\xae\x92\xc0\x02p\na`\xa5VrU\x90\xa6\xab\x8e\xa1\xaa\x9d\xa4X\xb9\x92\xb6\xd9\xcc+\xba\x1d\x9d2\xf0\xcd\xb1a\xaa6\xef-\x0f\xa4\xeau\xad\xa8\xb6{P\xb2`\x1e\x16uJ\x08d\xab\n&gt;\x8a\x1c\x1b\x9a\xacf\xab\xd4\xe0\xb8v\x1c5\xc2\xcbS\xec\xed\xae\x0c\n\xfc\xb6\xf2\xd5\x81U\x85\x86\xf5T\x08\x90\xa1\x14\x16\xe5U\xc5q\xea\xe7\xafd\xf2E\xb3\\\x95\xeb{!\xfb\x82\xb9\xa2Y\xff\x00h\xf0\xa2\xcd\x84\xab\xc5\xd6lr.$\xabM:\xdd\x9b;3T\xcd\x1a\xc5\x94\xf0\xc5\xda\xe5E\x1a\x17F\xde9\xa8\xdbw\x92\x00O\xc4\xe5S\x10U\x14\xeb\x1d^\x1dA\xaa\xaa\xebJ\xbdhu_\xb6i\xe2\x80kG\x05\x9a\x91\x07\xc9\n\xab\xc3\x15z\xb0\x9c*\x1c5o\x84r\x82\x8e\xe5^\xa8C\xa9\xb3+\xa4\xd2E\x9f\x9a\xe9t\xdb!\xc5]\xb1`\xe0;N(u\xe1tLp\x0eN{\xc9\'4m^\xd64U\xc6\x134{\x06\x12\xdc\x94`&lt;-\xc6qG\xa2\x04\xe7\xac`\x14\x9cT\x98W\x8c\x0c1\xd4d\xf1X\xd2\x9d\x9f\x1e\xa8e\x9b\x94\x93\xa8\xb6\xeb\xb8\xa9cwB\xa7\x9a\xa0\x08(q\x84\x0cd\xa2\x8e\x1eh\xe4V\xf5\xc1qR\x14.\x1d\\uqW,m\x0f\x04mt\xcbb\x7fRy\xd3\xec\xee\x85\x16m\x9e\xb9\xea\x1e\xc5\x966D\xceI\xd6\xdaC\x84\xab\xcb\xfa\x9bn\x9d\xe2\x99!d\xc6\xb4\x0f\x0bEk\xa5Z\x80\x040bP\xb3h\x03-E\x18WD\x05C\x07\xcdV\xf21\xc5\x08\x1c\x91\xad\x15\x15u\xf3\xd5\xc7\xa9\x86\xae\x1a\xe0F\xa9p\x1cU\xcb&amp;\x85\xf96\x7f\xcc\x11\xae\xa3\x18f\xaf\x01*S\x9c\x8edj\x8cN\xa0\x86#V\x1a\xc6\xb0\xa7G\xb4\xe4\x87\xf5V\xdf\xdc\xa7O\xbc\xa89u0\xebOTu\x05\x93\x0c\xa7\xb9\xcfc\x1dDK\x89*\xd3N\xb7e\x93\x06u&lt;\x13t+\x0662\xed#\xb2\xc9]h\x1a\xc2\x08\x1c\xe1A\xba\xa8\x9f\x02\x05J\x86\x89\nA\xa2\x00*\xea\x1a\xeb\xa8,5NK=A\x8cs\xa1t\x96\xcf\xdd:\xbaKf\xd1CB\x9655\xa2\xb2\xb6\x83@\xe7\xc1\x0b\x8e+\xd1K\xc8\xb1\x1c\xd5\xbdf\xd3\xc9\x11\xb2\xe2\x8e(\xbd9\xa8oR\x14\x9e\xb5W\x14\xdb-\x12\xdaNJ\xfd\xb5\xa1\x1f\xa94\x12\xf2\x81\xd7\x86\xaa\xeb\t\xba\xc6\xbf\x96\xb8\x12U\xdb\xd6Lw5|\x94\xebG\xb5\xac\x12Jf\x8db\xd7\xbd\xbbf\xa5G\x86\x06\xd47TJq\x14\n\xd0\xfcJ\xe8\x8a\xa2\xf2\xf02\xdc\xad\x03$\xe2M%Z\x83h_\x84\xd2\x10\xb5\xda\n\x1cn\xe0rN\x8a\xe4\x83\x94k\xaf\x9e\xaa\xf5xk6v.\xae!K\x89\xd4\xe36\xb0\xb0Y+\xc5VB-\xb3xOx\xc7\x17!f\xc1NJ\x89\xba@i\x0e\xb8\xf1\x9a\xb7\xd1\xed\r\x9d\xb7\xa8W\xaa3B!7\x15+i\x0c:\xb5[\x97\xfd;\xec[\xde\xac\xa9M\x16M(\x10J\x08j\xdd\xabqG\xa8QE\x14Q\xae\xaf\xe9lL\x14^\xf7\x17\x19%J\xfe\xaa\xdf\xfa\x87\xb7dP&amp;\xd9\xb45\xb8\x0f\x0c\x18\xc7\x14\xdb\x7f\xc4m\x9b{\x0c\x16\xca\xdb\x805Q\x1b6w\xee\xde\xa2k,[M\x9f\xe5P.\x9c\x80C\x18\x8a/\xe9\xed\xb2\x87.\x92\xf9\x1b\xd7\xc5\n\xec\x8dS\xd4\xa2\xe1\xd4\xdd\xab\x82\x01\xd7\x13I\xa2\xbc\xe6\xb7yL\xb1\xb0\xb2\xb2\x03j%\x01Ev\xd0\xac\xe9@\x8a\x93\x8eH\xb4\x96\x13W\x15\r\x88\xc1\x0cQ\xe6\x87\xe5\xbc\xd3\x88[(\xaaH\xc5\x1a)r\x08k\xa22J\x86\x95ga\xa2\xbe\xe9\xdb\xb5\xa6\xa1c\xa3\xb2\xb5\xb9&gt;\xaa\xed\x9b9j\x1dy\xd4QG\xa9\xfd=\x8d\xe4\xfbw\x10H\x84^\xe2\xad4\xed&amp;\xce\xc1\xa3\x13T\xcd\x03Ee\x9bF^\x1f\xfa]\x18\xc1\xc5_\xfcI\xe4I\xa2\x86-\xa3\xec\x86\x03S\xb4\x8b{&amp;~\xa7\xc2\x0c\xb3\x0cou\xa2\x04j\x80\xd9\xcd\x0e\x89\xce\xc8\x05\xd2h\xc5\xd8\xd4\xa1\x99B\xaaN\xf4\n(\x84V\x1dJ\xeb\xe8\x9a\xe7\x1f\xba\xe9m\xa7S\xf4\xad6\xc9\xad\x19\xa8\xc0aMW\x1d0\xafG\xc9\x00\xef4\xdb\xcf\x12\x88\xfcX~\x9e\x8c\x11\xe6\x9ap*p\xa2u\x9e\xd7$\xdb{7\x11\x056\xc8\x06\xbc\xd0\xe0\xaf\x0f%\x00\x95t\x9a\xae\x94\xa2\xb1\xd7M[\'\x92\x16}\x03&gt;#\xf2A\x7f\xd3Yfn6z\xfcz\x85c\xae\x8b\x1dQz\xc1\xa7\x9a6\x8e5\xd4\xdb;#\xa4\xda\xb7i\xf8xp\xc6\x97\x13\x82:M\xbb\x9a\x0e\xc8\xa0_\xd1\xe9\xcc~F\x89\x8f\xee8 s[PJ\xbb\x89\x80\x81\xb7\xb3\x7f\x1cS@$\x91\xbd_l\x9c\n\xc1\xd9+\xd6\x0e\xb3\xde\n6z5\xab\x1d\x8b\\U\rsC}U\xf7*u2\x8duU\xd7wE\xb4#r.\xb4uu~^\x93o\x1c\x01T\xd4\x0eJ\xd6\xca\xac\x12\x8d\x93\x8d\xe6\x11\xe4\xbashY\x92c\xed\xda\xf2plJk\xb1p\xc5\x0b?\x8b\x02\xac\x9c\xd2:D,\xc1\x97w\x8f\xd10\xddaw$\xcb\x1b \xdb\xf9G2\xbaAu\x9eJ\xdd\xc6I\x80\xae\x01U\x1a\xa9\xabz\xe0\xa4\xd1\x1bO\xc5m\xeb\xdd\xa0E\x11a9S\xd4\rec\xd6\x1a\xf8\xea\xe3\xa8\xa3oihg\x13\xaa\xd3\xf1M)\xa4\xb7\xf2ZjU\x9d\x85\x9b\x18\xc6\xc0h\xf0\xe3G\xd1m+XE\xefq%:\xd6\xd2\xc9\x8d\xc4\xb8\x00\x85\x8e\x89f\xd6\xb8\xf4\x91R\xb4\xad\x1c\xb9\xcf\xa8M\xb3-\xbdC\xc5\x0b`\xc8x\x90|\xd6\xd6\x8e\xc9\xac\xca"B\xfc\xb2N&amp;\x81I\xbb4\t\xb6\x7f\x12\ru\xaboD\x94l\x9c\x18*N\xe5\xa5[\xfc\x04\x04\xeaQ\x1d\xca:\xf5\xd7\xd1h\x8e\x8c\xe9*\xba\x8d\x8f\xe0\xf63Cho\xae\x1a\xf1Vo\xc5\xa0\xab\x03z\xe8\xbb+E\x18\x12\x9aoE\xa3\xab\x9a\xd2&gt;\x1d+\xd5iN7\xbf\xa8\x93\xc2\x8b\xf1;3ey\xb7\xee\x88\xa2\xb7\xd3v:76\xe9Q\x17\xce\t\x96`\x08\\\x14!\xd5\xc8\xacLrF\xd7\xf1\x1d-\xc7\xff\x00p\xab\x16\xe9\x9a+\xad\xcf\xe5\x8bV\x97\xf2_\xf4Vv\x97\xa7\xa5.x\xe4T\xd6z\x86\x88j\x8c\xf59\x1f\xd4\x86j2\xea\xcb\x89N\xd2\xb4\x8b+\x16\x03/p\n\xcb\xf0\xed\x12\xca\xc6\xcd\xb9W\xc3\x86\x07\xbbr}\xb6\x92\xed\xad\x90\xa4\xa6\xe9zU\xa6\x99k\xdc\xb1\xa3DbP\\\x16\x8fl6\xac\x82c\x8c\xd8\xb8\xb4\xabm\x180\x16\x12Z"V\x91\xd3\x87\x1b7\x9b8\xc8f\xbf\x13\xb5|\xb6\xce\xe8\xc8-=\xe3i\xc7\xbd%9\xf5\xb5$\x98V\x1b\x88Vl3%\xc7\x8ac~\x15\x08n\xecNj\xe0&amp;\x8al\x1de8\xbb\rF\xd1\xec`\xc5\xce\x00y\xa6\xe8\xb6:&amp;\x8dR[f\x1b&lt;\x97\rU\xd5:\x82\xe1\xac)Y\xea\xc7W\xaa\x01qCTLy\xa6Y\xde\x9c\x98\xf7z\x04_ol\xe3\x89y:\xba/\xc3\xbf\x0e\xb2\xcd\xba-\x9f\xb8R\x174k\x8e\xbez\xb1G\x04\xed\xeb\x8ez\xf8\xeb\xf3\xd4\xeb\x96\xbam\xb5\x85\x1d\xfe\x93\x8f[?\x03\x8a\x1a\x1e\x85\x00\xed\xb8\xfb+Kw\xb9\xe59\xeekZ\xd9q \x003%\x1f\xc3?\t\xd14{A\x16\x916\x9f\xdcz\xcd9\x04\x13r\xd4\x06\xaa`\xa8\xb8j\xf9\xa0\xb8*\x15\x86:\x80\xc0/\x92\x16:5\xab\x8d\x1a\xc1%\r"\xdd\xefd\xdd\xf8gW\xf5\x7f\x8d\xe8-\xbb-c\xbaW\xf2eT\x97\x1d\xfa\xb1\xea\xd5p\xd4:\x94\\uq\xeab\xa4\x8a.\x87\xf0\xdf\xc4-0\x1d\x0c{\xa9$\x9c\xd3\xad\xed\xeclZ\xd2\xe2\xfbF\xb4\x01\x9c\x94\x06\xceA\x8dh\x1c\x96\xe9U\x11\xa8\xefTCz\xaa\xe2\xa9\x8f\xba\xaa\xc9\x1d\xc8\xeeB\xab\xf6\xe4\x84&amp;\x9f\xfe\xd5\xb7\xe3\x1as4v\r\x91\xb5h\xed\xccV:=\x8d\x9d\x8d\x8bn\xd9\xb1\xb7Z8\x0e\xc4\xf6\xd0\xd4t\xcd)\xe4\xe0\xc9\x02\xaah\n\xb4\xd3\xbf\x17e\xbd\xdf\xca\xd16\xdc\x7fw\xc2\x11\xf3\xd4w#\xd5\xe3\xd4\xaa\xe1\xaf\x86\xa2\xb1\xd5\xf2^\x9a\x9a4B\xcf\xfd\xdf\xa2\xae\xabM\x07D\xfe\xba\xd1\xdbZ]\x96\xcbc\x06N&gt;j\x9a\xe3\xe4\x8e\xae:\xb8\xea\xe1\xaf\x02\xb1\x84w\xeb\xa8\x19,\xd7\x1dX\xae\x8b\xf0=+\xf7\xda5\xaa\xab\xa4\xfcQ\xf6\x8d\xbb~\xc7Gu\xa3\x0b\xb0\x06\xf0g\xd5T\xe4\x01\xa5b\x02;\xd1\xde!\x1a\xa8\x9dX\xa2\xbeH\xfe\x90\xa3%\xc1oC4\xdeK\xf7\x15\x94\xa6\xd6H\xc7r\xd1\xff\x00\x08\xd0\xdbb\xc6\x8e\x9d\xed\x1d=\xa4\xf7\x9d\xaf\x8d;\x02\xb8u\xa7\xa8P\x00\x92S4=\x1a\xd1\xb7\x88\xb46t\x8c\x93\x9c\xaa\x87\xe0\xdf\x86Xh\xa6:S\xb7l\xed\xef?o\x05\xc7\xa9B\xb7oP3\xac\xa3k\xa76\xc1\xbd\xdb6G2V\xd1V\x9af\x93a\xa3YE\xfbW\x866L\tr6:-\x85\x9d\xeb\xce\xb3\xb2\xb3aw\xea6m\xba\xb8\xe5\xae\x99\xaa\xae=n:\xb1\xea\xd5a\xabr\x89\xa2\xbb\xa0h\xd6u\x83h\xf7\x7f\xe2)\xf3\xd4\x19o\xa5:\xe9&amp;\xd7\xa2\xd1\x87\x0b\xf3k&gt;\x96hc\x99\xe2\xa8\xa4\x84*\xb1\\\x16:\x86\x03,k\xa8\xea\xa2\xcd\x15\xbdpY*\x0e\xdc\xef\xd4z\xd0q\xf2\x84-\xf4\xbbp\xdc\x0e\xc3\x1d\xfb\x18TAG\xf1\x1f\xc4\x99\xa4\xda\xd9\x83\xa3\xe8\xbbn\x9f\x89\xff\x00\x0bT\xd7\xb4\xcbT,k\xab\x96\xbe\x0b\x82\xa2\x00\t\x9f\x9f\x0c\x93[\x0f\xa9kl\x9c\xea\xf0\xac{\'[\xdbt\xd0\x01\xbc\xe7Nf\xf1\x958\xa1k\xff\x00\xa8\x7f\r\x0e\xb3\x0fhs\xdeA\xc3e\x84\xaa5\xb8\x82&gt;J\x86\x17\x14i\xb4T\xe6\x85V\x1a\xcee\x0e%WV\xf9\xd7\xc5q\xe4\x8d*\xa9\xab%\x8d\n\'%u\x9a%\x98\xef\x16\xbaO\xf7\xea\xb36,y\xb6k_\xfdE\xbc0\xce\xdd\xcb\x1b\x9e\xdd"\xa74"d\xf1Xb\xb7\xa1^Z\x86\xfd]\xea\xfcZ\xa70\xa2\x17$\xe0\x8f4Q\xdcz\xd8#\xe5\xacv\x9c5\x06\xb4\x9d\xc2U\xb5\x98\x16L\x8e\x9e\xdc\xdc`85\xc7y\xe0\x9f\xd2\xdbt\xad\xbal\xbf&amp;\xec\xe0X`\xa1\xe4\x02?\x84\xfe\x0fab\xff\x00\xf5\xadOOi_\x89\xf8\x0fMF\x80u\xe0\x14z\x87\xa9\xbfX\xf4\\3\\\x17\xc9\x7fO\xf8}\xa0i\x87[K[\xf5P\xdfMA\x9a\x06\x91\xa6]\x17\xed\xadM\x9d\xec\xc3\x19\x14\xf3%W\x90\xf9\xaeK\x05\xee\xa1a\xd5\xcbr(\xea(\xa2\x88X\xa2\xbdP)\xbb\x90\x05\xa0\xf2\xf3\x89L}\xa5\xbe\xd9\x96\xf4\r\x88\xc7\x13\xa8\x8b\x0b\x02\xd3\x1b\x1aS\x8f\x1b\xefc?\xfeQ\xa5O\xb2\xa0\xa9\xd5\x10\x8e\xf2\x8e\xf4x(\x85\x06\xa4zj\x9c\x16\xe0\xb1\xd5\x8a\xe7\xab\x8a\xff\xc4\x00\'\x10\x01\x00\x02\x02\x02\x02\x02\x02\x02\x03\x01\x01\x00\x00\x00\x00\x01\x00\x11!1AQaq\x10\x81\x91\xa1\xb1\xc1\xd1\xe1\xf0\xf1 \xff\xda\x00\x08\x01\x01\x00\x01?\x10\xe4\xe3\x88{9\xe4\xf3\x05\xbdr\xc3\xe4\xcean"\xaf\xfd\xb9t"\xea\x01\x83bY\xbc\xf8\x97nY~s\xf9\xb8U&gt; :}y\x8d\xa4\xf5\x05\xae\xfc\xb3\x93\x8b\xdc\xec\xb9|\x94\xeaR(\xc6q\xc1{\xf8\xc6w\x89\xe6\xb7\xff\x00f\x16\x0e\x085\xa2hE|\x01ES\xafQ\xdcn_\x828f\xf4x\x8e\xf2\x12\xf3\xbfI&lt;\xd0\xe6\xbcz\x94\x7f\x8e\xa1lW\xe9\xf8)-\xe3\x97\xcc\xd5N\xad\x94\x1fVE\xc9UVLwT\xdcu\xc6x\xd4\xa1\xbb\xa6g+n\xf6\xf2A[\xa702\xc1\x02W\x04\xd9\rgr\x81\x16\x16\xda\x8b\xc4l\xad\xc0u\xed`o\x12\x8b\xbf\xdc\xf1j\xb1\x02\xb3\xff\x00bd\xdb\x89\xc6\xdcL\\~b\xdd\xee\xdf3.O\xf1\x13vT\xa7\xfb\x86\x9cg\x86\x1eF\xe6\xa7\xce\xe5&amp;eVi\xa2o\x88\xfcq\xb4\x8a\xf2\x87\xdfn\xa3\x90|\xc2\xff\x00\xc7\xdc\xd2\xa8/\xa69\xa7\x8d\xc9\x9e\x7fs\x17\xd0fj\xa7\x83\x11n\xb0\xf1\xea;i\x8d?\xd6\x96c\xf2\xb3q\xd5\xc6w\x1b\xad\x96\x9fP\xdf\xeb\xee\xa6Dj\xee\xabQ\xea\xb0\xc5!X\xdf\xef\x98\xe1\xa7\xab\x8a\x1b\x0f\xb9\xc3\x1cq\x11\xe4\xe4\x82V,\xaa\x8b\xbe\xfe\xa3\x18s\xb8\x07\x10\xa76@\xda\x8f\x0eb5/Gu\xd5A\xfb3\x03{\x81I\xa1\x13\x96\xa2qZ\x98l%\x1b\xb2Y\xab\xe7\x0ca8"\xb7\xfe%\xeb\x012\x93\xcb\xac\xec\x94\xbf\xfbK\xee\x07\xe0\xc9\xb8c\x89U|\x13\xdbo\xb9\xc7q\xcbi\xf2\xe3\x15\x14u^\x86sCyaxt\xb0=B\xc1s\x83\xd3\xa3\x12\xc3\xc4\xf1\x8d\xcffY~b\xbb\xdex\x8a\xa3x\xb2V\x08\x1e\xbe\xb1w\x01\x86\xcf\xfe\xb3S\xc9\x03\x1e\xa6jV\x0c\x93%\x1d\xf3.\xdcU\x0b.\xfb\xa9\xb2\x96\x19\xc9]u\x05\xc3za\x08\x93\x9c\xd7\xc2\xaeo\x1cD]_&gt;\xa3Ty\xe0\x99]\x84\xa2\xf8\xde\xa5]cOZ\x95ukp9\x81W\xe2\xe0\xba\xf7\x88\x85\xb5*\x90"\xda\xd7sv;z\x8bZB%w\x0c\xd5m\xd4/\xc8T\x03M\x8f\xf7\x1bxi\xfd\xcc=\xf2G\x17[\x98t1\xeb\xdck\xf70\xbe5\xf9\x8a\x85\\E\xe1\x0e\xe5\xdd\xb7~\x8e\xa5h\xbc\xb9\xd1\x10\xaf\x1cb]es3\xc6\x93\x18\xfa\xe6.\xbc\xb1Q(Z\x8d\xe9\xdd\xde\xb3+&amp;\xbf\xf2\'\x18\xfeeWUu\xc6s)h\x84\xaa\xb7\x04 a7B\xc4G\rx\x8f\xb7\nq*\xfe\xf5\xd4\xb5\x9e\xeb\xec\xc4\xd3\xa7\xea\x0fS$p1\x9fp\x01\x00w\xc6\xb1\r\xaa)Uq\xa9\xaa\x99^\xa6Z\xde\xb1\xe6ty\x08\x19\xba\x9as^\xea\x02{!\xe1\xc7\xc1\x81\xa3\xdc\xccx\xb8\xad[\xb8\xf9\xff\x00\xc4\xf2\xbd\x1dn9\xe8\xc4\xb6\xf9k\xcc\x08\x18o\xc4\x07Y\xb87\xaf\x8a\xdf\xa8\xb5\xf8\x8b\xd1Y\xf5\x16\xff\x00\xd4J\x1e\xf7\xf8\x97\xff\x00\xa7\x99YC/\x8d\xd4.\xc6\xb3\x03,\xcd;\xdc\xacQ\xc4\xfb\x94\xf0G\xc2jm\x162\xc4\x1fz\x8b\x7f\xc4ZV\xef;\xf5\r\x19\xae\x084\xff\x00Z\x81\xed\x00\x08k\xd4vG\xdcZ\xcc}\xc5\xac\xe3\xf3&gt;\xf9\x95\xc0\x1bh\x94m|Y2\x0e\xab\x99gmCv\xbdY(\xfcx\xb9W\xe6Tp"\x8a\x86\x9e%\xefM\xf7\xff\x00fd\xa63\xbcL\x96\xca\xde&amp; \xa3.\xc8qz\xf2\xf8\x82\xab\xf5\xc4M\xd3\xc4A\xbf1\xaf\xab\xab\rG&lt;\xbd\xe6T\x1aj#"\xb6\xea\x0c\xe6n\xb7\x9f\xb9\x90u\xcd\xff\x000\xfe\xfb\xdea\x12\xc6v\xc7,~\x9e3\xc1\x13\xc3A\xbcD[\xd5b\xb3q7\x8cL\x9a\xfc\xe7\x10\x1c\xdb\x89u\xd36\xd6\xc2]\xad\xb6s\x98^+}\xdc\xff\x00:\xaca\x84\xe2\x15\x0c^\xa2n\xbb\xe6[W(\x98\t\xb8\xb4]\xea#\xf8\x8ev\xfb\x1d\xcb\xbc4\xc3a\x8cV\xa5j\x9a\x95\x83$\r\xfe\xe5\x87\xb2QL\xd5\xc3\x9a\x8d\n\x12o5\x871\xbf\x9c\xb7\x17qk\x06\xf7\xc4\xaf\x19\x18_\x0b\xa8\x1bSp7\xbc\xdc\xd2\xf3\xc4\xf15\x15\xb2n.5\x92\xfd\xe67KV\xcam\xc4\x19\xcdo2\xb1Ni\x86D\xd6@\xc3d\xe7}\xe2Ub7N"\xe7\xa9\xf8\x8e~\xa2\xf1fe\x8b;\xcf\xbd\x90\xbb\xe6\xe1\xbb\xf3\xb9\xa2\n\xcaWP\xbd_?\x0b\xb8\xb9Y\xa2~\xd8\xdef\x1ct\xfa&amp;o\x93\xc9\x00\xf3\x8c\xc1\xac,\x00\x95\xff\x00\x12\xb3*\xb8\xcc\xd5\xf4\xd3-m9\xb9\x8f&gt;&amp;\xdagu\x99Ug\xaa\xb9g/\xed\x94q\x89X0\xdfq\x1d\xe5h\x88[\xfd\xad\xc4\xac\xe6\xdf\xd4E\xcd\xdf\xbcn\x17\xad3\xdb\xccC\xd7\xab\xdc\xde\x02\xff\x00\xdc\x0b\xf7\xfc0\xe6\xf3I\xcf\x88P&lt;L\xef+\x81\xf2[\x1bg\x92\xde\xa3\x91_\x97$Gu\x91\xbfP\xe1\xe66=_{\x88\xef\x9a\xfd\x18\x96\x8d\xbbak\xaez\x95i4\xdc\r\xdf\xaf0\x13o36&amp;s]T\x00\xab\xab\xaf\xe2\x01\xfek\x89\\\xff\x00\xcc\x00\x9e|G)\x9f\xdd\xdc\xc7\xb2\x9ee\xf0\xbdsP\xe0\xa8\x107\xcf7\xdc\x0e\xf1Fn\x14.\x99\xcb\xeb\xd4\xdb\xfd\xdcAqO&gt;&amp;C\x7f{F(\x8e&amp;\xeb\x8a\x1c[7w\xcf7\x03j\xa8\x1f\x8d\xf0C\xb23&lt;;\x97\xe6j\xdd|\'\xdf\xb8\xab\xc7qM]\xc7\xf5\xacJS^\x19\\Y\xe6\x06\x0b\x992\xe6\xbdB\x86z!U\x9f\x86\xa2\xe2\xa3\xc8V`h}T^\x92\xfcL6g\x98\x0bd\x17-\xae\xb1\x883\x15\\V\xbc|;z\xbdGY\x80;\x8b\xc0\xff\x00~%\x97x9\x96\xa9do\x17\xd6\xf8\x82\xa7\x1cj\xe1f\xbc\xdc\x1dT\xac\xd9\x12$\x1b\xea\x009\xf3qo+5+\xbb\xfa\xee5\xc1r\xac\xe6\xbf\xe2\xe0\x10|z!\xc9\xbf\xb9Uf\xaa\xf4F\x8c\xad\xb1\xady\x95u\x9b\xc4L^u\xf8\xf76k\x9d1cn\xe2\xb6\x0b\xcde\xf1:R\xafr\x98\xcfZ\xf1\x06\xb8\x0f\xdd\xccB\xc4j\xb25\x05\xdd\tz#k\xa3&gt;\xe57\xcbq&lt;Q\xc6\xe7\x19|E\xbc\xc3#\x89\x9d\xf1\x8c\x9d\xb2\xb7H\x96\xf7\x13\xce\xbd\xdc\xc4\x1e\x05\x9c\xed\xe3\xee\x1cb=\xef\xc6\xb1\tJr\xab\xef\xdc\\\xf3,\xbe9\xf3\xb9\x9d\xae\xf9\x95fo\\C\xea\xea\x01\x86\xf5\xd1)\x94\x11\xc5\xe2b-5*\x1aff\xb0z\x8d\xd2\x95\xc7z\x97\xefL\x12\xea\xca0N\xd5s#\xf4y\x89~\xf4\xc3\xa2&gt;\xa5\xfe\xa3\x8b\xdc\x03:\x88[\xf5/\x9b\x96h_]\xcbY\xcc4u\x9f\x15\r!&lt;\xdc +L\xd4\xd3\xc4w\xcc\n\x98\xd1\xd4&amp;\xf5\x1b:\x9b&gt;\xa1\x96\xbf\x19\xcc:)\xf5/J\xfan\xc9\xe1\xe7\xb8\x15\xe9\xf8\xeeq\xc4pe\x97/\x11[\x0eH\xbf\xf6\xf59\xff\x00\x10\xab\xab\xcdj\x06\xcey\x86{\x87\x15/\xae\xaa~I\x81\xce"\xbb\xde?\xa9\xe1+\x83\xef&lt;~&amp;\xd6;!V,:\x1f\x17\xc4\xc5\xb0\xbb\xcc0|&amp;]DuY\x8e]\x9b\xb9\x8c\x99\xcf\x9e\xa0\xafuS7\x17\xdf\x0c\xdd\xceX\x14\x95\x06\x06\x97;\xd7\xe3s6\xff\x00pW\xb3\x99\xc5\x113\xaeqx%\x16i\xe8#Y\xad\\3\xc6t\xbdy\x8a\x8b\xe5\xfdF\xf7\x8ck\xdb\x0e\xdb\xb7\x9d\x905u\xb3s\x00\x07\x1e\xa1\xb4Fs\xea\xd8@\xac\\7P/\x89`\xad\xe2\xa5\xca\xf48\x8a\x18\xae\x7f\x9c\xce\x1c\xcb\xef\xd5\xb9\x9a\xe3\x10;\xdf\xa8Z\x9f\xb3\xe0\xe4\x13\x95\xb7/\xe7\xe1h\xdf\xe5\x84\x18\xa9u\x97\xee;_Lc\x9f\xafp\x14\xdbP]+\xcf\xf1=o:\xdc\xa2\xb4O\xaf\x1b\x87\x12\xcb\x8bT]fY\x17\x17[\xfe\x19v\xf1\xf9\xf8U\xa8\xc0\xd9\xf5\x02\xc7\xa6x7\xe73\xb5\x95\x86_\x9a\xfe%\xd1\xa8\xe4\xb3n~\x0b\xaa\xfa\x9b\xf1\x0bo\x0b\xbf\xa9\xcc\x9f\x089\xeaf&gt;\xc9\xec%b\xa2\xa3]\x957C\xd6\xe3\x9b_y\x9a\xa7y\xc1&lt;\x98\x96\xaa5\xb8O9\xdc9\xd4;\x8f\xf7\x99Y0Y\x865N\xea5\xf7|\xc5\xbc-\x91\xf98\xe2\xb7\x1f\x96\x99U\xba\xdfpj\x8cj"\xd1\xba\xe2n\xfe\xd9\xfe\xea%U\x0cs(;\x9a.j\'\r\xc23t2\xd7\x9eY\xb3\xa9\xec;\xb6\n\xb5\x07\x18\xae\xb1\xf7Ps\x96\x9fd\x0e\x8e\xf9\x89g\xefl\xabw\xd0\xc4\xddo\xc4K\xaf\xd7\x81\x94ru\xeaW\xfc\x951\x9dA\x1e\x1a\x9c\x95uU4\x87O\xd9()}\\\xc5u\xde\xa6J\xe6\xc8T\xd5\xdca\rtG\xcbwM\xcbqpG\x9b\xce\xe6]\xf2\xc0\xe6\xb5P\xe4\x7f8\xb8e\xd2|\x06s\xde\xf3&lt;_,\xcd-\xb0 \xf6@19\xfaK(\xd3\xfd\xcb\xe3:\xa4\xd6e\xdb\x80\xdd_\xa8\x04/&lt;F\xc57\n\xff\x00\x98ep\xce\xfdM\x93\xd3\x14\x0eLK\xf4\x9b\xa8\xa2\xbf\xf2F\xc7\xab\xc93\x9b5\x0b~\xc9\x83\'\xc0Y\xe6\x1f7\x98\x06\xbe\x89\x8c\x18s6[,jw\xd6\xf58\rY*\xbdv\xc3\xb1Z\x94\x19\x9fS\x8f\x8ab\x81\x1f&gt;\x18\xf7\x8f `\xa9\x92\xbdN^1\xa5\xe2\x17\x88e\xe6\xe0{.\xa7\x1b\x97\xb55\xcf\xc76u\x1d\x153\x7f\x9cL\xd8\xbcE\xda`\xbb\x86+\xb8\x07\xbc\x19\xb9b\xd6%pj\xcf\x11\x8dt\xb2\xbc\xfb\xe3Q\xac\'?ly\x7f\x83\xb8\xd5y\xc2\xc5b\x17){\xc7U\x1a\xba\xb7\xe9\x9f\x9df\x0b\xe1\xd3\xdc\xcf&gt;*\xf7\x1co\x8c\xe5\xd4o\xddy\xc4\xc7\x8d\x9b\xcc~\xb1^Jf\x97Z\x8f\x05q\x0f/L\xe6\x06F\xfe\xdf\x11\xec\xc5\xdb\xcc\xc7x\xea\xf7\x03g\xcc\n_\xc2\x18\xfe\'\x8a}\xb0\x8e\x9f\xabe\x97\x17{\xe6\xe5\xb7\xac\xcc\xeb\x10\xe0\x946]Q,\xdc\xdd\x8e!L%\xec\xaa\xa9\\\xc7-\xdc\xac8\x8df\xf7+\xc3\xfc\xf7\x11Z\x88q\xac\xfd\x11\xcb\x93\xc3\x02z\x9a\x81\xafP\xabMJj\x8dw\x0c\xc4\xba*\xf1l|\x91\xf7L\xfcK\x0e&amp;\xbb\xa2\xf9\xcc\xe7\x12\x98\x00\xfa`\xb1d\xe27Pqp\xa9\xeejo\x88\xb49\xf8\x9dL\xb7\x1c\x1d\xc5\xac\x89\xbe\xe5\x01\xd9\xd6e\x9d\x99f\x9b&amp;\x89XlLNg\xb7\xd9\xf1\xa3?\xa8\xdc\x97\xc4\xa4o\n\xe6\xbd\xc7\xaa\xd49\xc8uW\x00_2\xe6\xa0\x98r\xcb7\xa8\xbb\xea[\xcb?\xc6\xf6\xc7\x86\xdf|2\xce&gt;\xbcD\xde\xc9x\xbbpC\xc5n\xb5\x03\x8d\xee`\x1c\x16\xc0qQ\xc6#\xfe\tJ&lt;\xe7\x86#Z\xd9\xee\xe2;\xcf03;\xb4y\x9c\xdbL\xcdu\xd4\x05"\x0e_\xb8\xf6n\xee`\x7f7\x12\xb8\x94\x99\xac\xf7u*\xb5\xde?\xf6Qv\xf8\xcf\xf5S\xbcL\x995\xca\\g\xc4\x13Esa\x98%\xb5\x0ci\x97\x9d\xc0\xcd\x7f\xb8\x0e\x1cf\'.}b[y\xee(\xbc\xee\xa5\xb7\x8a\xd4\xdd\xbd?P3U\x8e \xd9\x11\xe7Z\x9d\xd7P\xb3\xa7\xea\xe1\xb3\xc4\xbdq3\xc3\xc7\xea=\xfb\x94\xf5\xe6\xe3+\xc4|\xbf\xe2]\xf5\xea\xe5c\x19!\xc1\xdf\xee]\xc7\x9e\xb5)\xf1n\xaefJ\x95H\xdc\xd3\xaf\xea\x01\xc2\xfa\xf8\xa8\x8b\x9eca\xc0\xf0\x91\xcd\xd3\x9e*V\xb1\x8b\xfd\xc0\xa7\x8dz\x81u\x8a\xfb\x94s:\x98\x8cwX\xd4\xbe\xe3\x06\xddK\xef1\xb5D\xe4\xbc\x7f\x92\x19|\xfb\x83|\xf9#\x8akE\xd3l\xafX\xa7\x1cB\x81S\x05\xc4\x01%w\x7f\x0e\x06?\x19\rDc\x110\xe0\xae\xa6I^f\x03\xa8&lt;`\x9b\xb3\x9b\x9fl\xe4\xe7\x7f\xb9L^s\x16\xae\xad\x80^x\xeeX\xa3\xf6\x96\t\xfe\xa7\xbf\xd4\x0e\r\xd47^\xfb\xd5J\x0c8\xdd\\M~\xab\xceX\xe5#|\xd2\xd6~\xfa\x9b.\xe23\xee\xb3(\xac;fc\xc1\x97\xee\xab\xeaWG\xbb\xa3\xc6\xa5e\xefns\x98uN\xeee\x02Uc\'\xf3:*\xc8\x86\xac\xcc\xa7\xbc\x91\x06\xee\x8c\xfd\xc4;=\xc4\xdf\x9d\xc7\x85\x0bp\xb1Z\xc3^\xb4\xc3&gt;\xf3U\x0e,\xce\xab\xdc=\xc1\xf0\xd73%\xe7\x7fp\xc1\r\xd3-w/9s\x04\xe2\x99\xfd\x1c\xb0\x152\xf8\xe6\x01\xaa%\x9fH0+\x99\xd9~\xa7\x1a\xc3/\xa7\x9b\x8bD\xcd\xb8\xeb\x88\xb9\xad\xd4\xdf\x1c]n\x17\xb5\xac\xc2\xd4!\x9b\xa9\xc7_\t\x84\xa8SU:\x9d\\\xaa\xee\xf5\x1a\xf3{\xd4t\x8e8\x8e\xe8\xc5u&lt;\xaa\x97\xf5\x00\xc4:\xbf\xa81\x8a\xef\xa9gM\xd7Ya\x8a\xdc\x89\xea\x0e8\xaf\x10\xd4\xb2\xbd\x1e\xe1\x96=Y\xea\x059\x07y\x84\xbc\xb0\xa6\xf3p pj\xba-\x94\xacM33\x01H\xfd\xd7\x04$\x1aP}\xb4\xccH\xb8\x10\xbb\xd8\xf0BS\xe1\xb7\xaa`\x1c\x99e\xe6\xaew\x99[o\x13\x9d\xcf\x08\xb3\xe9\xc4\xf2\xb8\xf7N\xa1M\x97\xc9\x01\xa4\xbf\x14\xcb\xaa\xf7\xac\xc3Y\xbe\xe3W\xfefb\xf2z&amp;1\xcee\xb8cB\xe5_\xc4x\xb5\x9d\xccV\xa1\xb69\xfc\xcc\xca\xae?\x9e#\x882\xd4c3\xf2\x7fS{\xadq+W\xab\xd4\xaa\xad\xe0\x89T\x05j&gt;\xcb1\xea\xe0D\xd5\x91\xe59\xf1SsS-\x9d\xaa\x1a\xc3\xef\x18\xc4w\xec\xe3\x10\x06\xde(\xc3\x1f\xd7R\xb0\x15u[\x95m\x8d\xd4o9\xad\xe30\x19\xbf\xcc\xf08\xee\xa0\xd3\x8f\xbc\xc2\xb3&lt;\xaf\x19\x9a\xb8\xb9\xf2~w+\x0c\xf2\xd7\xfa\x88\xaf\xf1\x15\xe1{\xab\x96\xde\xdd\xfa\x99\xe6\x9fx\x87?\xaa\x80\xdd\xb8\xab\x8d\x8eaA\x81\n\xc1\xac\x9c\xcd\x1b\xd4\xa8\xb5\x9b\xe5\xdc:\x7f7?\xf3\x8d\x9e\xe74\x97\x05\xf0O\x052\xfb\xed\x98\xdb\xb4\xbfX\x94\\\xba\xd3\rc\xe3\xd4_\xfd\x9d\xd5\x1e9\xcc1\xce\xab\x04\x0b\xddX\xfb\x85]P\xf3PR4\x9cD\x16\x93\x1bp2\xc0\xaa\xa7#\xa7\xd4\xad\xc4\xa8\x1c\xdb\xd4P\xd4\xaal\xab\x1e=\xc7F\xf2\x15|+\x8c\x948\xe7\xc8\xff\x00\x86\x07\xa2\xd1u\xb8\xa5\x11x\x13\x90\xce|\xcb\x86\x82\xbf\x93\x10Ny\xca\xb3\x85\xcb\xf8e%\xabYq\xf7/\xad\xf0\xd3\x8eV\x00Uj\xd7z\x823\xd6\x9e/l\xde\xa5\'\xa2\xb1\xf9\x82\xb2Vf\xc5\xc4\xc3m\xaf6\xc4\xd2\x80\xbb\x9d\xd68\xdc\x01[\xa7\x13\x9d\x1a\x9f\xfb\x88\xb8\x8b\xaa\xd6*]d\x9a\xfc\\3\x82\xf5\x88\x05\xb2\xafW)g7_s\x1e"\xd7s\x925\x98\xdc\x83\xcc\x0c\xe3\x8b\xb8\xee\xf2\xb5\x929[\x1d\xb3\'&gt;x_0k\xdd\xcaMs(\xean\xab\xc4E;\x065wn\xf6\xc3\x1a\xe4d\xe3\x1a\x94u\xbe\thC:\xa3|bm\\W3L\xea\xb8u+w287\xa8o\x87\xd3\xe7r\xd4\x95\xfa\xd4O\x157\x9a#g\xe6\xc9\\\t\x8e\xbdM8\xdf\xe2&amp;\xf3_\xe6\x07\xef0/\x18\x80=\xb7n7\x99\xf8\xd3\x04%\xd7\xb9\xb3?\x87\x88\x16\xe8\x82\xab\xc0~\xa7\x87\xd7\xc1w0zj=T\xa3\x18\xfe\'\xda\x1a\x87v\xc6\xbf\xe7\x88u\xb1\x97\xef\x84\xc9\xaef\x12\x9a\x81\xfc\x18\xcc\x06zeaD\xd5\xb9]3y&gt;9\x87\xdf9\x8b\xb7\xdcY\xfc\x91t\xde\xbc\\qv\x13uo2\xb9\xb8S\x9e\x7f5\x179-p\x82\x00\xbbW\x9fp\n!\xbb_\xc8\xadL\x80\t\x9a7\xab\x1a\x8f\xa7CE\x19;1\xd4\x00\xa6\xf2Ui?Lu\xc6\xec\x1c7J\nH\x80wqW\xaa\x91\xd5\xa4h\x85\xb4\x90\xe77O\xab\x9d\xb3UW\xab?\xd6\xe3j\xa9\x97&lt;\xe5\xaf\xd45\xf9\xaeFI\x93v6y\xf7\xeaX\x0f\x00\xe2\x1e\x8a\xc1\x1f\xbdY\xeb\x89\x8c\xb0\x11\xe5\xa2\xe2\xdf\xf2;W\x7f\xa9G*\xf2\xd6\x03\xa8,4\t\xb6\xf9\xfc\xc2Q\x05\x15\x9b*\x87&gt;X\x84&amp;\x9c\xc5l[\xcc\xfe\\0\x1d\x86op;O\xce\xe5\x99\x82\x8a%\x12\xae\xa6\t\x9b\xd7\xa9Y\xbe\xe3\x9b?3\x96\xd1[\x87\xfe#\xb5\xfd\xca\xc5\x90e\xcf\x0fp\x94\xc7USk\xc4\xe5\xf9\'\xb3r\xa9\xb3\x85\x8e\xd6\xaf\xd5\xc4\xde\x1flM\x967\xc4G\x81\xae\xa5N|\xf73o\xea\xb7\xee\x1d\x05\x19\x7f,3h\xb7\xb8\x07!\xceH\x7f\x8a\xc9(\xc6"\x19\xce=\xd4N.\xbd\xcax}D9=M\x18\xba\xf5\x88\x8es\x03)\xdb\xee\xd9\xdd\xaf\xa8\xa0R\x9f\x95\xfef\xf3\xfb\x9cz\xa8\xaa\xb9\xcb\x0c\xb9\xed\x86\xea1\xad\xf7\xe9\x9a\xb15o\x10\x03\xfd@\xd6\xfcO[\xf7*\xa24\xee4\xb9E\xe2.\xcb\xadF\xd5\x1fm@q\x95\x99\x1dO\xc8\xe2?\x0785/yw\xcc\x0f\xbf\xae\xa5O\x10|\xe2o\x8f\xa8\xe2n\xf5\xb9fq)\x9ax\x97\xd6\xeb\xd9\x04b\xe3Z\xd3N/3\x17\xb6r\x17~D_\x85\xf4?\x9b\x82(\x96\x8a\x02*\xe2\xf1-\xd1\n\xf0^\\5\xe6\xe0\xb5\x92\x94\xb0x1\xe1\xee5\xc6\xf4\r\x8b\xd5\x9b\x13O\x0cz7ae\xb6\xb9k$T\xd2\xf3\x97\xa6~\x9b\xa8G\xa9\r\xd2^\xce\xa6,\x10d\xc3IK\xf9 \x01\x01\x81\xf7\x9b\x85\x99\x90/\xd4\x17\x1c\x15\xe3\x13\'\x95\x11uEQ(\xa6\xf2\x9espdM\x07\xb6\xf3\x05\xed\'\x14\x88\x8c0Z\xf7\xb3\xb7\x8fs:\xb7\x05\x15\xb5\x96\x05-\xc6:\xa5Y\xf1\x02\xc1\xad\xc2\xd1w_\x98)\xc3B\x1a7\xa0\xef\x82+]\x96\xf9\xfc\xf1\x16\x1d\xad\xbcQ\x1f\xbd\xb8\xe2\xe5^\x96\x05\xab\xf7\xdc\xf0c\xae!cQ\xe3S\'3\xea#S\x92\xf9g\xa9\xa3\x88\x9f?\xd4\xf6\xc4\xc2\xf1\xc4\x07\x02\x0b\xac\xe8\xe2x\xaf\xf9\xa9\x82\xd0\x8eGs\x9cG\x8b\x89\\{"Q\xef\xbdG\x9f$J\\;c\xae\x9a\xa8\xf7L\xceU\xb9\xc70\xebp\xf8\xccL93\xf7\x98\x9d\xf8\x8f\x07\xfc\x12\x9cY\x89X\x1d\xcd\x8c\xff\x00\xb8\xdf\xf1\x0b\xc6t\xf7\xc7qN_\x05\xf7\xbf\x16K\xb0g\x12\xc9\xbb\xc1\x8a\xb8q\xb7]EP7\xb9w\'\xf1\xb9P\xca1\xeam\xe7\xd9(\xc6\xb56T\xb2\xb0\x97\\\xc5\xb9Sl\xcf^\x98\xb7\xfaf|\xdf\xad\xc0\xca\xce\\\xb37\xd7\x1dKk\xb9^+\xee\xee{7&lt;\xa7\x98@\xf3\xf2\xea\x88\xfb\x8e3\xb8\x17owe\x7f\x11zl\xbc^q\xe2?\x13\xc5\x96d\xfe\x18J\x84\xfb\xb0{\x8fk@\xbc\x9f\xc5\xaa!h\x03k\xa3\xf1\x05\xb1Gy\x98\x8e`r\\V\xafLT\xda\x19\xa8\x1bi\xfc\x8e"\xcb$W{U\xd8\xf0\xe9\x97\x13q%\x87A\xb1\x8a\x9a\xe66\x1e#\x92\x05\x0b\xb2\x19[\x05\xc6\xa58\x1ex\xe1O\xec\x89\r\xa9\xbb\xf1|\xd4W\x10H\x99\xd4&amp;\xceO|\x91\x87\xad\xd7\xd5\x10I\x07;\xec\x85%\xa8\xa67\x92%\x95k\x9dYQT\xb5t\xecU&gt;\xaa\n\xca\x02&lt;+\x7f\xa9d\xc9p8\xb4\xe1\x02Q-\xa3@&gt;\xbc\x11\x15\xef*}\xf6\x93(j\xc0\r\xff\x00\x81.aE\xedC\xa3\xfb\x87Pl\xcfp\x04\xa6]\xfa\x818\x85\xf7\x0b\xaa\xa9D\xb1&gt;;\xf8\xd5\xf9\xea{gW\xd4\xe5\x9d=\xea&lt;\xd695)\xd3\x8a\xbe\xd8\xd1\x06\\\xb8\xde`X\xaf\x01\xeaj\x89\xc5q\xb8\xfb\x9b\xa0{\x8dZx\xd4\xaf3\x92e\xe1\x80\x15\x8d\xf36[-\xe6d\xfb\x96\xb3\xfd\x19\x88pk0\x17\xfb?\xa6\x1a\x16X\x117\x9c\xa5K\xe7\x1b\xd5nW\xd9\xfcA\xab\xfe \xad\xa6\x99[\xa5\xf1\x8a\x98\x88\x18\xea\x01L`\x96\xa8\xfa\xa9\x8bu(\xbb\xc1\t\xd9\xb2m\xc7\x10\xdd\xf4jW\xb9R\x9e=Y\x19\x93\x8f\xa9]\xdaE\xb6\xff\x00R\x84\xd8,b\xae\x85\x83h\xc1L\xd1\x89oU\xc9*0\xc2 z\xe3\x86V5R\xaeq\x89\x88\x06\x98\xf0\xe3\xf7\x14\xc1\xe9\x82\x9d\x8f?q\xf8\x95\x0e\x9fQ\xc32\xe8;hc\xcc`\xaf\xe4,\x00\xf7Y\x8d\xe0(i#a/q\x1c\x17\x98cc\xc1J\xdf,\xc3|^\x15\xdb\xd5\x92\xc4\xb3M\x02\x87\xb4\x81s5S\x16?U\x112\xdc\x06\xafj\xa3\xbb&amp;\x18Y\xb2Gl\xd2\x9e`\xfd\xef\x0be\xdc]w\xc0\x95\xf0\x9d\xab\xf1\x18-Ua8o\xba\xe2`\x9a\x1dA\x81m\x8d\x96\xf3\xd3(n\x18\xd3T\xec  \x00x\xa5\x97Z\xd2\xde\x88\x92\x1c\x07\xe6W\xb4\t\xbe+\x1c\xc7p\x06\x97\x9b\xc6\xa3+i\xadajW\xa2Q\xa9\xb6\xdd\x98[\x8b\x90\xdd^h\xed`\xea\xa5\x08\xc3Fl{b\x0e\x02T\xce\r\x85\xee\xe3\xd0\x94\x0em\xe3\xa1\x08\x16\xb7\x80\x12\xba\xca7y\xa0\xd5\xbd\xc4\x0e\x0c\x03\xb6(Z\\+\xb7)\xe3\xa8\xd5,\xf4\xadx\xbb\x88\xa6Z\xe5|s,se\xcf\x17\xf3\x81\x9c1\xd5_\xb8\xb3\xc11d\xe2\xe6\x14\xc0\xf3\x96\x1c\xe8\xb3l\xbd*\xcc\x18\xa9\xe6\x88\xf1\xee_4n8\xc0w5\xac\x03?\xf2q\xfec\xac6\x9a\x94&amp;\x17\x97\xa87\xba\xba\xce%WW\xd5@\x1e\x17\xa8u\xb2\xf3Q(\n\xc6\x18\x99\xc90\xac5(\x0b\xb37f\xae \xe0\x1f\xf3\x10\xdc\xfe\x9c\xea\x1esU\x9b\xf52\xe2\xc8sF\xeeP\xa9[9s0_\x83\xea\\\x88~\xb52\xf9\xaa\x9aq\x00\xeb\x9bg\xd1\xa9\x8e\x89Y\xc8\xff\x00\xe4\xcd_=\xc5\xab\xc7\x1fY\x82P\xc3\xad-\xa8\r\xeb\x1a\x9br@c_\xe6WEO\x0f\x98j\xe1\x8cN\xfc\x19\x95\x97\xc4&amp;919\x18\xe9|C\xbbx\x99\x87\x15\xb7\x0f\xa4\x95)\xf34\x02\xbcd\x8a\xedY\xb2\xcd\x9f\x0c\xb4Q\x98/\x15m\xff\x00\xad\xf8\xae\xe0\xfd\x91\xce\xbc\xba\x84/\x84R\xe7\x9by\x8b\xa9FF\x8c3\x97\x88`!\xa5{\xafC\x10\'[\x8d\xfb\xe6\xbfZ\x98[\xd1\x02\x8d\xe2\xd3k\x0b\x02\xe5\xe6\xc8\x18\x05\x96y\xa1\xde\x95\x82\x02\xd1\x08\x82\x87\x9c\x16}@ V\x0c[\xe8^a\xf7\x89C\xc1\xe2\xe5\x02\x83\xc5U\x1dA\xc8\xc3\xd9\x98QhR\x8eF\xa9\x98(V\x9c[\x84\x85~\xac\x0b\xdd\x8d\xccY\xaa\xaa\x0b(q\x1d\x16\xb9\xcc\xb4\xed\x91\xf2\xa0n\x0b\xc6\xd0\xb9\x95\xee\xa5\x9c#\x8fE\xc1&lt;\xc9\x16\x9e\xc69\x8a-\r\x14f\x80\xe0\x82Gd\xaa~\xcdK\xc8\x92\x0e\x1eo=\xac\xa8Et_\xac PS]M&gt;\xe7\xf0K\x81t\x9a\xa0\xe6\xbb{b\xd6\x10\xa5:=\xc3\x9bWZ\xb5\xfc\xf3q\x03;\xda4b\xa5\xd6[\xb6n\xb2\xc0\xaf\xf7\xf1\xcc\xd6b\xa1h(\x8e\xb9\xe6\xbb\x9fj\xea\xa1\x97+\xcdA\x8d;\xeaYVC\x07\x9f\x11\xf5\xe2u\x8eu\xa9\x8c\xcd\xe29\xcd~\xe5w\xa9F\xd2\x1ck\x14\xc7\x86mM\xb5\xc6\xe6\xf0\xado\xff\x00\'Wl\xfc\x19\xb8(7Q\x1czp\xd34u\xcb\x96\r\x8f\x0b\xee&amp;\xda\xb8\xd5~\xf1\xe6&lt;\xf8{\xb8\xe9\xd7\xdcS\x7f\x9c\xf9\x96\xaf?\x88\x1d\x91\xe9+\x15\xc4y}!\x14\xf8\xcc\xe8K\xd7\xd4\xcdM\t\x9f\x8b7u\x16\x993\x04\xa8\xff\x00\xfa\xdd\xcbV+\xe5\xbd\x90Uk\xfd\xf5\x0e\xad\x18\x8abQL\n\xac\x9a\x86g3\xeeu=1@\x81oGx\x82\x1c\xb8\xd8\x7f9\xa7\xe0\xa8\xf8\x83\x8c\xbf\x16\x0f\xb7P\x1d\xac\xcb\x9f\xe4\xac\xd1Q\x9b\xaf\xc0\xaa\x82\xdb\xd4\xc0"\x1f\xa0\x80\xb0\xba\xbe\x8b}\xf8\tte\xa7k\xcd\xd2\xb7\x04\x0ci\x9eP^\xd0\x83jKE\xceou\x05\xc2\xbeR\xbe\x9a\xf5\x03\x97P\x86\xfa\xe6\x81L\x0cY\xa9\xa0S&gt;O\xa1\xa8\\\xceh\xaf\x19\xe1a\xb1UL\x06j\xae\xc8\x085\xa3:G\r\x9ebR\x8a*\x1c\xa7\xf6D%\x82\x9b\xc0N` \x19\x18W\xf6v@]l\x85\x13;\xdc\xc9\xd9\x11\x9eB\n!\xa3;m\xb8\x01v%\x94V^b\xd2\x02\r\xd1\xebQ\xb1d\x0e\x15RA9@4\xbc\xb2\xda\xdf*\xe4\xfeV\xc6SM\xb6\xbd\x11\x0c\x81\x1f?\xfa\x80\x87a\xa0\xbe`\x9bY\xd2t\xdc\x91\x9b\x9d\x81J\xe5\xdb\xefQ\x8a;\x03S\xd1\xd9\xbe\x89\xba\xc0\x01\x0bW\x1c\x01\x04\xd9\x8b\x11\xb9\xe3\xfaD\x12("\x90\xc8G\x0eZm\xbf\xfc\x81\x8a\x0e\xc6\xdf\xc1\x0e\xd6\xb3\xc5:\xfb\x98\xdc\xeas4\xd6\xf7\x08\xd0\xdc~\xe2\xee\xea\x17\x93\xebW\x0e\xb1X\x95V&amp;\xa9S\xbc_\xc5\xf1\x1e\xca\xdc\xceT\xbf3\x86\x98\xee\xe2\xc3\x17\x9fDyq\xc3\x1bi\xbc\xbc$5\xa5\xcc\x17YxO\xf8\x86\x0e\xa3U\x8a\xc7\xdc\xbd8\xd5\x92\xb1\xacOt\xce\xf1|\xa5\x01\x1ee`~\xf1\nX\xce\xf1,w\xf7\x99y\x80\x81\x8b!j\x01\xe0\xf8\xbd\x1f\x1d\xc3\x8e\xe2\x0c\xc09\x96.+\xd6e\x9cc\x86^E\x83\xf7\x7f\xea\x0bF.\x82&amp;\xdc\xe2\xf55\xca*\xbe\x10\x9a\xac5\x0f\x15S\x1ec\xeapD\xb6\\Pn\xb0\xd4z\x9b\x00H\x00\xeb\x03\xf52\xcb\x01o\x83\xc2\x0f"\xf6\x8a\x866\xd5\xb7\x02\xea\x9bC\x17\xe7&amp;\xe5\x00\xd7\xddZ\xde\xf1\xc0\x95H\xa8@\x0cy5\x16p\xb4\xe9\xd6\xcd\x95x\x8b]\xbc(\xd5\\\x06\x19\xe8\x88`\xdfFOe\xfdF\xda\x8d\xc1\xb3\x80L\x0f5\x10\x99\x0bg\x0e\rS\xf7\x10\rE!/V`W\xcc\r\xb6\xbdXA\x08;\xc6\xfe\x92QE\x16j\xef\x7f\xe60\x01\xae1\x81\xf1q\n\xa5/\'I\x1c\xe42\x17\x8a\xd95\xa9Ye\xf3\x16\x9bA\xf4\x9d\x91L\xdb\xc8\x7f\\K&lt;\xc9\x07\x1c\x04\x10FKm\x07\x08w\xda\\\x9a\x1cL\xaf`\xcf4\xdb8}\xd1n\xddT5\xb5\xaa\x05?)\x88_i\xb6\xbbxjX\xb0\x06\x06U\xd0\xcb\xe3\xd2\xcf~\x0b\x8e\xcb\x13\x9e8\xd7\x01\xe8\x88\xa2\xc0+c\x8e\xf5k\xe2"\x8b%F$\xd7 L\x82Z\x04\x02\x07R)]wY\xfd\x1a\x86\x18^[\xfa\xc3\x0e\xef[\xc1\xb3x\x19\xc8\xa4{a\xe2;\xce\xe73^\xaa\xe2\x86d\xcf\x88\xb2\xe2\xe2o\x10[,[\x7f\x104\x07&gt;\xa0\x1a\x98\x89{&gt;\x98\xfa\x9f\xe2 T?S\x19\xfb\xd6\xe2\xe0\xd7\xd7\xf9\x8bY\xd6\xa3\xce\xe6WZ\x08*\xb5\xd0y\x98\x9a0\xae;\xe27q+\xdaM\xaf\xf6J\xd5w84\x1f\x99\xe6Q\x9c_\xdc6~\xea\xba\x8b\x83\xfe\\,c\\A\xc1\xeaV*\x99\xbb\x96n\xba\xd4\x1c\xcb\xe8\x96]8X\xa9A-\xd4ErAt\xf9\x96^\x00\xdc6(e-K\xafP1\x88f\xc2\x18\xcdC\xd5T\x0b\xe6\x06\xe9\x9eC\xe3Y\xcfqug\xd3\x1a\x80\x13\xa9\xbc\x18h\xd7*\xc6\xb1\x8b\x8c\x04\x054\x14\x1e&lt;\xbb\x8e6]B0\xb7HX~%*)P\x07\xb4\xd5\xf9\x99w\x934Qo\x96PQT\xa08~\x06!\x8d\xb0\x96\x8dni\xcb\xcb\x12a\x05\x0bt-M\x11h\x8ag\xc4\x1ce\xe5\x8c\x89\xd3\x95=\x18\x96\xec&amp;n\x97v\xae\x07R\xed\x1f\x85\xb8\x8e##\x16\xeff\xd5Q{\x82^\xe3\xea\r\xd2\xa6\xab#_\'01^\x01\xe8y1-\x90\x15\x9bn\x8a\xe1\xe6\xa0L\xaf?\xa5%\xef\x87\x00\xfef4\x81v\x04i`_\x82\\x\xb8iw\x82\xe5(\xd6\xd9\xc3\xb8\x8f\x13\x9b\xc1\xbc{\x89cvk\xdde\x05\x8d\xe6\x0e\x83\x04\xa7L\xe8\xd3\x82\xb4;b\xc4V\xc5h\xae"e\xe9\xa3V\xfd\x10\xaa\x85ZbD\x15\'\x1bG\xad"02\xb9D^\xaf\xa8;W\xa2\x8et\xe5C\xf6\x04\x1d\x83\xd5.\x11\x1b\xec`y\xa3\xb2\x19\x9b\xbcf\xe0f\x9e\xaa]\xdc\xbc@c\xf7[?\x98\xea\xa8\xb5\x92k\xcd@Zq\xee\xe5\xdd\xd6s)\xfd\xdc\xf1}\x19\x8e\xad\xb2\x1eB\xb1\r\x8675\xe9\xe6\xa0\x11xg\xa7\xef\x99\xde3Z\x9a\xae\xbf3\xf9\xfc\xcf\xbdq\x1b\x8b\xd4\xb6\x9f\xc4[#\xbfQ\xaf\x7f\x8cba5}x\xb9\x9d]\xcd\x06\xa7\xdb\xf4\xd5\xce\x0f\x12\x8a\xa2Qx+\xd1\x16\xdd1,\xff\x00r\x8b\xd6\xf7\x1e7\xf7\xa8\x8d;\xcd\xde\xa1\x95\x86i1(-ncA0\xb9\xf8\xb0r\xddT\xa7\x830\xe2\xa2\xe3\xfdc\x12\x81H\xae\xb5\xea*\xda\xfb\xc5\xcc\xa3g\xb2Q|\xd4\xbf@\xd3\xf8\x86T\xaf\x12\xb8&gt;=\xc4\xf13&gt;\xa3D\xa2\xe8c\xcf\xdf\xc1UcR\xac\xd0\xbd\xd6\x0c\xfd@=2mm\xb7\xe0h\x8a\xda\n\xdc\xf9\xe7)\xbfP\x920\x0e\x7f@\xff\x00\x15\x08Uc\xa8\xcdQ\x82\xda9\x9d\x11\xbav&lt;x:\xda\x9a\xeb\x19\x1a\x01\xe0\x1a\xdd\x19z!\xd0IM\x9d&gt;\x9d\xb0\x06UkJ\xa1\xa4\xf1\x11\x13N!d4r\xb5\xdf\xa2\xc3\x82P\xf96\x16_\xe2\x05)\xe9G\x10%\x14\xe4[\xb3\xd4,=C\x19\xf5\x9b\x8ev\x9f\xf0+/na\xa0W\xd49\xaf\x10"\xaa\xd2\xb8\xf7\xfd\xc6\xe5f\xe3\xc6u\x12\n\x14xo\x0c%ed\xf2\xd9\x15h\xda\xd1\x84"\xb0\xd5\x19\xbc\xaf1\x86\xe1k\x80\x82=\xa7GF\t\xb6(Q\xa8\x08\x9d\x06_\x1d\xb9\xe5`*\x10\x98\xc6V:\x9b(Q\xa1\xd1\xa2P\x00\x80\xe48Wi\xcc\xab2C\x0f\xf0\x10\xc395_\xa0\xc4\x1c?\xea\xc7\xc1v\xfd\xda)\x16r\xe3\xf3fP\x03\xb4\xa6;\x86\x06R\xd5\xd7U\xc4\xa2\x9a\xc5\x9c\x10\xf8Z\x1b,\xddG\xa3\xe2[\xc3\xb47\x05\x90\xd3\x16a\xee]\xd1\xe5\x88\x0f\xf3\x13\x9c_\xe8\x89\xfe\xb3(\xd0f\r_\xb6V\r\xeb\xb3\xf9\x9dj\xbae\xe2\xee&lt;o\xe3\xccn\xf5\x1e/\x8c\xd4k \xeb1\xe6&lt;r\xeel\xe2:\xe3I\xb2\x8b\x86AW\xebP\xdb\x00L\xef\x1c\\s\x17;\xe6b\xee\xbb\x89\xd9\x13tz\xcf\xf9\x9dQq\xaf\xe5\x8f\xd5\xd6.U\xc4\xc6\x9f\x1d_\x13\x8cN\\\xcdq\x0c\xd6\x98\xb2j\xa6g0\xec,\xb37\x11O\x1aM\xcc\xe4\xc5\xc6\xb9\x9dk\xf7?B\xa6/\xd3=\xca\xf8\xfc@\xd6\x08O$\xb1cy&amp;s\x8c\xf5\x03&lt;\xee\xc65\x81w\xa3\x0bV\xd7D{\xf1\xe6&lt;\xee\x9b\xf8\\j\x97\xf4^\xef\x80\xe7\xc4*\xa0\x0f\x94\xdfB\xf9Y\xa8A\x80\x169\x17@:\xe0@7\xc0\xb04f\xaeU\xcf2\xe8\xbb\xac)\xb5k\x84\xd8E\xcd\x9cn\x17\xb6\x8bl\x0e\x04@\xcaP\xf6\xdb4qG,e\x18=\xea\xef\xa7\x1e\xa2\xbbBJ9\x1a\xb5C\x8f*L\xdb\xbd\x17+\x84\x16\x02-\x9e\\T\xbb\x9eNP\x92\x0b^\xc5\x08\x92\xb4&amp;\xa2\xda\t|6}\x913kx\x94\xd6"\xbb\x05\xa2\xfd\xed\tfo\xfc\x909n\xf7t\x04J4\xddx\x98\x02\x93.5\x1a\x13m~\xaf\xb8\xe9\x84T\xdf8\xab\x81\xd1\x9a\x0e&lt;\\E\x9468\x02\xd9\x83\x11oD5\xd9\x02[\x8b\xe2\xd2\xcbj\xd3\xb7\xe8Jrm\xe3l\xc2\x14#w\xe5\xc0\xa5\xa0p\xd1\xc2\xe8T\xca\xac\x0c"\xfani`1\x03\xd0N\x89\xb5Q\xe1\n\xb3\xc4\x19`\x04\x1c\x97\x1c%\xc5\xad\x939\xe0\xab\xe1\xf1\x15\xa7$\xc0\xa0\xc3)3\x8d/\xec\x88\x95yr\xe7\x10* \xba\x07\x03\xe8\xb9}\xa3\'\x9dD\xf1W\xd9\x98:!\xb4\xbdQ\xe6__\xcd1\xba\x8d\xed\xee\xee/\xdb?\xcc\xfa\x8e\x9c\xeaj\xcco\x15\xa4\x9b\xc6~\xa3\x9c\xf8~\x17\x12\xb6\x95\xbf\xb9\xce\x8fP_\xeb\xd3\n\xa5\x9cJ\x01\xcc\xcf\x1eq\xee?\xf8D\x95W\x1e*\xae%c\xae\xdbg\xe0y\x89):+\x04\xca\xbe\xfa!\xab\xbf\x8e\x14\xc6#\x94\xe3\xeeqLt\xce\x863\xcfq\xb6\xb8\xbd@\xb7\xf8;\x99{\x16]\xc0\xe2T\x05\x17+\x01&amp;\xb8\xf2\xad@\xc5N\xb1\xf1\\\xceBk\xc6%\x1b#\xb7\x9c\x91n\xce\xb77p0\xd3\x8e*\x10\x83d\xa6L`{\x96lwun\xf7\xea\'Z\x80"\x8a\xcaq/\xe6\x18\xd4\xa3f\x02\xe5\xe5\xff\x00+5K\x85\xd9p3\xd7\\\xb0\xe2U\xaa\xf1G\xd1\x9f\xd4\xc8 #\xb7\x03P\xea\xc9\n\xd6\xb6\xf2\xecK\x19\x85IWK\xa9\xbcU1!:]h\xe1~Xh/\xc07D(,Q\x83Y}Tpl\x12\x8d\xea\xc2\xb8\xa8\xa8\xa6\x8bKs\xe5\x95\xb6\xde\xb8o\xd4u=]\x12\x07\xb87\xcd\xc5Q\x95\xf8Z1\x9as\xdd\xccn\xd1\xd9\x85e\xcc\xa5\xa0\x18\xaa\xdd[\x9ev\x84\xbbd^\x05{\xf3*K\nXp\x0b.#\x02+-\xbcLO#\xaa\xf2\xc3i-\xd9\xe3\x88\x88\x1d\xeb\xbau\x9e\x08,P8\x08,\x14\xa5\x91\xa2ZY\xe5I\t\x19/\xfb,"\x84\xe8\x1a0\xf9\x8f6\xde\xe8s\xd8\xcb\x10\\\x0c\x8b\xe0\xaa\x97\x9d\x93d\x07`\x92\x86eKj\xecD\xaa\xb9\x97\x8a==2\xeb\xaf\x1d0\xd3G\xf8\x97*o%\xddx\xc6N\xa54\xa8\xc6\x00\x0f\xf8N\xa5##H\xc2\xbb\xc4,\x13\xc8_\xdcPp\x8a\xad}\xb1\xab\xbbM{\xf0]L\x9a\xebp\xc3r\xb6s5A\xa9\x89S\x17\x96Q\x8dM\xe1?\xdc\xf1\xe0\xf8t7\xe6\xe7:\xc6j\xb0E\xbc\xcc\x9f\x0c\xe6\xae\xbd\xc0\xaa\xcc\xc4I\x8a\xfa\xfdO\xcf\xd6\xe2f\xb1\xe8\x88\xc3\x8c^H\x9aV\x1b\xcfS\x0b\xff\x003~\xe7\xddG\x19\xa9W\xb0\xfb\xc4\xb0\xba k\xd5\xe6\xe2\xa3\x9a!(rnl\x95\xc7=\xcdl\xca\x12\xfe\xd0\xb1\x81h\x86[[\x85\x1c\xc3\xebST\xca\x0f\x8dV3\rE\xc5\x13\rq\x1b3*c\x8b\x82\xd9\xa2\xc8\x1b\xa8\x8bA\xd5\xf0\x89\xb5]\n\x1e\xd8\xc1\x94\xe5Qn\xf9\xb6v\xc3\xc8\xed\xabT\\`\xe2;\n\xf4Z\x00\xc5\x98\xcb\x13+,kBF\xbc\xe7s2\xee\x02\x11|k\x1cB-\x16x\x1a\x1d\x11\x9f\x11\xb2{\x01KV\xf5z x\xb5V\x81\xbf\xf3L\xa6\xf0S6\x15\xe7P\xe6[\x85\x96\xeb\xc4\xbdO\xa5\xe8&lt;\xab\xe2^\xa1\xba-\x19\xdd6\xf3\n\xd4\xd2ez[\x0e\x82\xb1&gt;\xcfpi\x87\t\\\xaa\x1d\xb1\xc3d\xd8\x16j%\xac\x05s\xf5ls=({\x86\x8c\x05%\xb9\xab\x9a\xb1\xb0\x0cp\x91\xda[\xbb\xc0\x93-\xb4\xc0\xbf\xea\n`2\xbc w\n\xd9Z\xb8\xf5\xafD\xc3\xf8RY^]\xd7U\xb9o\x05\xec\xb8\xfa\x89\xcb\xfcW\x1c\x89\xcc\xc5.\xce\xb3&gt;\x9e%\xa8\x8ezc\xd8\x91\xd6\x02\xe0\xa2N-\xb9j\x91\xb8\xce9\x9c\x01\x8ax\x13Q*\xc2\xe0\x03\xfe\x18j\xa0\xb0\xbb\xb3\x9a\xd1\xcc\xb1\r\x94\xad\xd8\x9b]\xd3-ib\xd27i\x81\xeaV\x0f\x80)u\x18X/W\xb7\xdb\xba\x84\xe2\xe9h&lt;\xd7\xc1\x1a7f\x19J\xa8D5F?\\J\xccjj\xee\t\xb9s\xdb\xf1\xb1\xcf\xa8\xd5\xfej\x17W(\xeb\xf14pi\x8b\t\xbc1\xe5\xc7&gt;\xf7/4z\xc7\x8e\xa1\x1bV{\xb8a\xc2\xd5\xcbV\xd8\xe3\x8f\xf558%\x18\x13z\x80\xbd\x1dL\xef\xaf\xe2U\x00\xf8\x94Vi\xf7)\x1c\xb3\x18\xadr\xce\xb1\x84\xfc\xcf\xf1\x1cj\x97\x9b\x84^%\x8a*6\x80&amp;|\x91\xde?\xb9e\x7f\x12\xae?U\xb8\x1e\x13\xd3\x0fd\xfejV\xa7\xf9\x9d\xf5.!\x0c(\xe0\x8a\xddj\xa7\x10R\x153R~b\xff\x00\xc4\xa2j]\x9d\xaaP\xdbk\xfe\xe1\x04\x01\x90)\xc0\xd3\xe4\xb8\xf335\x94(A\x12\xfd\x9d\x91\x1dm\xd1\x82\x97\xdb\xf9\x8b.i(s\xdc\xa8$\xa3z\xc0\x1a\xfapC\xb3\xa8[\xca\xbd!\xda!\xd4\x1f\x01\x87B\x17\x8a\xa3\x91\x80\xdf\xdc\ry0\xa6\xe0\xc6\xcd\x81\xbdc\x116&lt;\x94\xb5~\xd8\xe3^v\xb7A\x15\x90\xd9]Ez\x13&amp;T="r0\xf8\x00\xc3\xa0\xe5i\x05\xdb\xa6=E\x05k\xd1\xf5\x1e\xab\xb0.;\xc1\x19\xf4l\xef\xa4\x0f*\x87\xf1\x13L\xa1\x83\xa2\r\x0c\x10\xb4\xe4\xa8K|\xdc\xbb\xad\xc4\xf4\xe1\xbe\xa1\xd5g&amp;\xe3`\xabiS\xd4\xbfx4\x0evE@\xfe\xf1\xea#\x08\x97w\xc2\xff\x00\x88B2\xaa\xc1N\xafy\x1d\xa1uT\xb5\xa3s!Pl\xc2\x8b&gt;\xe5\xcd\x80\x15wt,\x93\x05tS\x8d\xbf\xa9\xdc\x0b\xd8\xf3G\'0\xb5kTA\xc0\xeb\xc9\x00c\x8d\x8b\xb1w(\xb2\xf2\x12\x1em/\xac\xef\x1d\'[\x81D\xa3\x9a)\x9f\x08\xc5\x00\xbc\xa4\\j\x9e\x8e\x10\xd1\xbe#Y\xc4\xe7\x9e\'_\xc4\xdejWD\xed\xee\xe5\x16\xfb\xaa9\xa9\x8d\xd1\x1d\xea:\x1f\xb3\xb8\xca\xde\xee\xa2\xf3\x8d\xf5\x88\xee\x9e\xe1\xb7\x15p\xddb9_\\\xea&amp;\xfbs\x1c\xc6\xdeo\x88\xf6+\x1a\x95\xa8\x9e8\x1e\xc8\x86\x9ecM\x93\xd5L\xb3\xeaseE\xa3/\x1e\xe1\x98\xbf\xf3R\xc5\xdf$GK\xdes\x0bY\xaa\xcd\xb3\xb3\xf5\xbc\xca\x8c\x10-5\x87\xe2\xaad\xcf\xb8\x15*\xeaW2\xd2\x91\xa9\xbef\xf4~`z\x81x`\xf0pJ\r|\xe8\xe4\x9a\x18\x1e\x89\'\xdd\xca$\xa8_\x83\x9ev\xc3\xccHERi\xe9eAff\x80Z\xaf\xe6.\x16\x97".J\'(B\xd7\xa1\xce\xb8\xa2\x1e|\x86\xd1t\xea\xc2XRl2c\xc6)\n \xbb\x15\xd7\xa3o\xb8P4#\x9e/\\\x89V\x19\xab\xf3Hq{\xa0\x00zYv\xdc\x9aqR\xca\xd6\xa8l\xd7\xdc{\xcdyn\x0e\x1d\xd4\x0bT/EdT\xd1\x00)\x8aX\x95\x98\xef\xbbW\x08 \xb6U^l MH\x8b\xcec\xa0\x80I\xeb+.\xe4\xd9\xfc\x95\x02\xa6Z\x9f\x1c\x14^\xe2F\xb6\xaa+j\xe5oq\xa8\xa2\xa6\x10\xe8\xe9\x94\x0f\xec\x8bE\xbc\n\xe1:e+\x8b1\x9d\xa1V\xe8\xed97P6\xea\xd4]&gt;\xabL\x1aS\x82^M\x18\xeea\xb0/j\xd5\x0b\xd5\xf9\x948\xa8\xeaM)\xf6\xb9\xaf#\x1e\x8f\xe8\xee\xc6\xa2\x82\x86\xca\xd2\x0b\xd8\x9cy\xe68\xed\x1c\x14g6C\xc6\xc4\x06\x050\xea\xe1\xa0\xa1F\n\x18-a\x0e\xf0C\xba\xce;\x81Eq\xcdY\\\x97\xc4eB;\xaa\xdf\x9d\xb0\xac\n\xaa\xe2.s\xf8\xf1*8\x94\xcf\xab\xf7)\xddF\x89\xec\xf3\xf8\x8e\x08\xd0\xdc{\xf2\xcc\xdf\xee\x0f\x0f\xd1\xdf\x88l\x15Y\x81\xac\x1d\xd3\x1db&lt;\xdc\xcdk&gt;\xc2\xbe\xa7\xf0N?\xc4n\xcb\x8a\x14\x1fQ\xa2?\x9a\xc4\xe7\x8b\x9e6A\xbawQWO\xc5cg\xa9\xe9\xdaf\x14\xdcv\xff\x00y\x971\xc1\x87\xbc\xc0\x8e\xa1\x0b\xc7L\xcf\xeb\x10\xdc\x03\xe1\\\xde \x86\x7fr\xd7\xcd\xdc\\\xa9{\xe2\x03\x97\x1eZ\x87\x84ba/U=|w\xad\xcb\x88\xd4\xbe\xb9va*\x18\x9c)\xa6\x8c\xd3\xdd\xe2\xe2\xb2Q\x8a\x13#\x82\xf4\x13\x01\xc66\xda\\\x85\xc6z)\x8dv1\xae\xe2\xf1Q\xe1.\x9bz"\xce\x83\x03$r\xd3\x98\x8d\xa84\x0bs\xad2F\xba1!Y|\xb8\xb9\x85\xc6\xbc\x94&lt;%\n\x8d\xa8\xa0\xd5\x9d\x91\xb67\x91X\xfbbau4\xecm\x80\x9cZ\xc3\x7fP\xe4\x96\xd8A\xef(\xc9\x84,\xb3\xc7,\xa8LWp%\x17\x95\xbcjc&amp;\x0e\xac\xe2\xf9#\xc0\xcb\x8e_2\xb8\xa2\xf5m\xa1\xb8]\x01\xac\r`:\xa8\x95\xa7\xad\x86\x0f\xa2QYY\xa2\xa63,\x89@\x15-K\x06f\xf5\x88\x03o\x05\x91\x04(\xaa|=\xc7T/v\x1db\xe6\xe5\x1b\xab\x07\\=\xc3e\x97\x14h\xaf\x0eb\xbco\xd1\xa7U\x15o\xd1\x14\xcf\x96e\x14^P\x9a\xd7\xf6A\xd0\x12\x07^\xe9\xec\x87\xa0Pp1\xd0\x06\xea\x99\t\xca%\x8bT2\x0b\x1fzX\x8f"\xf6d\xc9\xc4\xb5\xb4\xb3og\n\x04\x92+\x15i\xbc:\xf5\x02S\xc3j\xa3\xe3\xc3*&lt;\xfa\xcc\xcf\xeet\xdc=\\\xdf~g\x1cJ\x98\xbd\x17-\xc3\x88\xcbg\x8c\xc5\x8c\x18\x97\xba\x1e\x0fPs.tqP\xd7\x87Q\\W]\xd4[\xe6)q^\xcf\xc6\xe6&lt;o\x9ea@\xa2r\xd5\x9c\xc5\xc6\xe6P.e\xa0\x8b\x8d\xea\xb7\n\xb8s-\xb2\xfb\xe6_\xc8\xd4\x06\xf19\x80\x9c\xcc\x05\x9f\xeaWP\x02R`\x9a\xddN&gt;+\x8b\x95\x02j0\x1c\x92\xce\xf7\x178\x81o\xde.a\x9e9\x8c\xc7\xd11\x83\xff\x00\x9e\x1d\xebq\tG[\x04B\xff\x00\x18\x96FAXD\x88\xc7+E\xbb\x17\xe5\xf4\x10\x8c\xce\x80\xc6\xa8\xbe\xcd\xc4\xa9\x92\xa5)\xd0\xb9]\x95\x16\xeb\x1fR\x06\xfb\x1d\x8a\xfaf\xf1\x1b\xe8\xe4\xb4\xa3\x90#\x0bK\x15\xf4=W\x13x\x0f\x08\x96Wc\xcc\xa2\x81\x92\x83\x85^\x08\x8d\x11\xc0*\xa3z\xf2\xc2\x14"\x90\x17\xbbg\xaf:\xe6\xccB\xdb\x00\xa5uP+\x02\xd8\x8b\x1a\xd5u\xb4\xad\xc5\x06\xe3\x7f\xae\xf30ZZi\xc90i\xeb\xb2\xa1\xc0\x86\xe9j\xd8\xab1\x1c\x0ek\xb68t;\x1a\xe5\x89\xa1{\x0b\x0ex\x8e\xd4\xd3\x01@8\xf1(\x034\xb6k\x15\x8895\x92\xf1\x13\xe4\xaa\xc3\x8a\xe4\x8b\x96\xcc\x19s^\x18\x14u2\xd3ez\x99P\x8a\xb3\xa0\xca\xe2)\x8b\xe8\xb1\xf5\x16\xae\xaeGt\xb51\x03@\x85\xc0\x94E\x009j\x83\xcc\x18\x80\x02\xd0\x8a\x0eIp\x16\r\x84K\xb5\xf0\xe6U&lt;\xb5\xb3\x98S\xab\x84\x1cn\r\x8c_\x9e\t]\xca\xd0\xc2\xab\xe0\xdb\n\xe6\x1b\x8a\xaa\xbf-\x1cB\x03\rT\xea\xf3\xf1\\\xca*\'\x1d\x13\xaaH\x91;\x99\xcc\xe4\xf3\x16\'8\xb3;\xb5\xf1\xf73\xd7)ejj`\xab\xc4\xce39|\xca\xf0ZJ\xa3\x15\x99A\x8f\xccG&gt;\xe71\xe7%\xe6\x1cqovE:\x86_\x96\xee2\x99\xcf1\x13\x92"\xe4\xc7\x9c\xcb\xaa_X8\xe2\x18\x18\xf5\x004N\xff\x00S\x03\x8fs\x06q8\xe3]\xdc\xaf\x1ba\xbc~\xb3\x02U\rT\xa0\x97\xf3\xdf\xacF\xde\xa1\xe1\x1c\x1c\xcb9u\xb5\xa9\xbf\x1fZ\x87\xb9\xa3\xe3|q\xf3Y\x890"\xbc\xc3C\xb9s5\x1f:\x8b\xd1J\xb7\x87_\xb79fA\x8e\x9f\x7f\x9c\xb1;\xad\xf6\xfbWS)\xd8^4\x8a\x1a\xae\xb2 \xfa\x8e\xb9\xb7\x9d\xb7\x17\\\xcaNi\xd1\x0f\x19\xaf\xda\x0b2\xe0\x10\x17\x05\x03\xba\xad\x03\xd2\xcaQ\xba\xa9\xe9\xe0\x94\x15\xa3\x81\x9c\xf4\xcb\xf4\x1c\x1c\xcc\x13n\xa5\xd2\xd5\xf8\x8a\xd1i\x9d\xef1\xdd\xb6\xf7\x86a(d\xcb)as|0\xe4f\x8cS\x91%\x96d\xd9\xac\xc0\xca\xee6\xe2_m\x15r\x88U\xb4q|L\xee\x93\x88\'(\xa1"\xa8\x8f\x84\n\xad\xac,\xe2[\xa5\xaf\xc1-&gt;\xcb\xbcc\x88\x1b\x9c\x96\xa4`\xc8+\x16\xf6\xe1\xfa\x96\xc5\x97\xcb.\x1b#Qr\xe4\xe4.\xaec9\xde\xcf\xf5.cM\x943w\x94\xccF\xf5"&gt;\xaf\x1e\xa0\xb9\x19\x14\xe8J\xa6\xf61\xd2eP\xb7%s\xe4&lt;M\x186\x07Wf_\xa6(-\xc6\x9c\xf6\x85\xe7\xc34!\x1616\xa4\xa9\xe6mR\xb1\xa3\xfd\xb2\x8bu\xf1X\xf2\xca\x87;\xccci\xb3\xb3\x8c\xcb\xb6\xe2\x8e\xe6\x03\xfc\xe2\x06\xa5\x19\xf4D\xc9\xeeQN0J\xdb\xea5\x94\xcfy\xa9\xaa4g\xd0M:6\x1b\xd4uX\xdbW(V\x0f\xfd\x8bF\xa0\x85\xf12\xa9\xe6&lt;\xc8\x0c\xf5\xbd\xcb]S\xeeZ\xcee-q(&amp;\xdf\xa9\xd4?\xd4&amp;~=\x92\xc8\xa0i\x98\xd9g\x15\xde`r?\xb9\x90\xf7\x9a\xc7\xc65\x92\x1e\xb71\xcb7\xf2x\xaf\x9a\x9b\x1e\xb6\x04\xadY5s\t\x80\x10\xf3f\xd4\x1c\xcb\x1b\xaa\xf6`8\xe6\x19\x04\x845\xf9"\xda\x1a\xbdc\xef\x98\xe5G\x80\x08\xfd\xc2\x17\xb2\xe5\xd30\x85\xb7\x82\xe8/&gt;"m\x01wd\x17\x1348\xe7ve\x87\x0c&gt;\xd8\xe6\xb9\xc7z\xf1*-7\xf5+d1Z"G\x18\xf5+\xed/\xf6\xc6S\xb8M*\xd2\xf5\x18\xa9^\xa2\xaby\xe0:\x8d\xe1\x8db0nV\xb5\t\x87\x19\x1cn\x14Au\x82\xb1\x88\x01\x82\xd63\xf5L\x18\x9a\x06\x90\xc5;\x86\x03V[\xa2\xb1\xab\x95*\xbema\xce\xaa2\x85\x05\xd6o\xf1+\x15\xad\xe4\xceB,\xf5\x9a\x82\xa2\xe2c\xae5\x14\xd9\x82\x9a\xcf\xbfZcM\x94\x1c\xb0 \xff\x001\xae\x01\xbd~#*7&amp;\x8ey&amp;\xe9\nQ\xb6\xb4\xfb9#\x8a\x91h\xe0\xd5\x1e\xc8\x16\x82\x1b\x12\xae\x9b\xf1/\x94\xca6j\xdf\x9e\xfe\x1cJ\xd4\xba\xbf\x8f\xb6fQR\xb6\xa4\xf3X\x89\x16)\x87\xc4+eC\xd5$Eu\xeed\x0f!\x8e.\x1c\x15\xbb\x81\x80\xf5931\x86!z\x9co1\xe1j\xe7\x80?q\xf1N1\xd4v\xe64YD\x03\x93\xf2M\xf5~8\xd4u\xe3nK\x81\xbdg\xce\xd2\x04\xcf("\xb5\x0b\xc6\'\xeeS+x\x8d}J\x98\xcc8\xc4\xbf9\x9b\xe9?\x89}Ls\x0e\x8f\x8e\xb0\xc1\x98\x155\xa9\xb8\xb3\x19\xa7p\x80\xb3\x1ee|S^\xe0\x8b\xbe%\x1e\x8ej\xaa\xe0"\xf9\xb9Q\xbf\xa5\xfc\x12\x90"\xa3\xbb7\xdb\xcc3a\xea\x91\xcc\x1a9\xa0\xe7\xea\x0e\x05\xca!\x86\xef\x04\r\x05\xd1sk\xf7-\n\xa0\xed\xb0\xfb\x8a\xb1\xb4;\xb0/v\x82\xdc\x90\xcb\xac\xd5T\xab\x04\xc4\xa41g\x88\x81b\xaf\xdd\xcb\xac[\xcb(j \xc6c\xe6\xac\xbd` V\xb5\x03c&lt;\xef\xf8"\x16\x14\n\xb7\xfc\xc2\x9c\xcf\x11\xe0\x1a\xd2j\xefP\xa0\x01\xb3\xeb\x8b\x96\xd3R\xed\r\x99\x96\x00\xf9U+3\xeam\xba~\xd7\x15\x10\x87aG\xdc\xa3`\xb6\x8e*)P\x9b\x10\xc1\xd9\xd9\x04\x89\xa0\x85\xd69]\x92\xe4\x11\xb5?5\x9d\xf0\x91F\xc08\x18o\x8f\xb8\x1f,\xcb0\x9c"%D"\xdd\xe9\xa4\xee:8\x88\x04\xd1i*\x1e\xdf`\xc8\x16z`\xa1\xdc\xc7\xfb\x9ffs1\xaco\x13&amp;\x8f\x8e\xe3\xe7\xf9\x87\x82\xa6\xb3^\xa0:\xcc\xac\xea"\x971_\xf9"\xae\xb9\xb5\xdc\xd5\xbe+p\x006\xdc\xce\xfdT\xa2^\x89\xf5\xc7\x11\xcd\xeb[\x95z\xbb\x98\xd3\xff\x00\xb3U\x1c\x9b\xb6\xaa\xfa\x8b\xc5\xc7\xbc\x98\xce&amp;V+\x8f\x1fS0\x96\xe7WqM\xf7\x99@\x15^&amp;\x89\xdf\xb9\xcf\xbf\x80,\xde\xe0v|wg\x13\x92k\x8c\xc2\xcc\xb7\x93\xed\xd4[\xf7\xea\x1c\xfd\xc7\xa2_\xc4\xaa\x98\xc7\xcd\xdf\xc6\xb5\xff\x00\xc2\xa8%;\xb9\x9d\x0e\x97\xe2S(6)U\xe5!\x02\x8b\xac\r\x84\xbb\x12\xc78\xc5K^CO\xf1(\xb87\xa4Z\xf48\x8b\x01n.\x97\xcfs`J\xdb\xc2\x08\xd9\xb9\x05\x17\x82:0\xf5Gyc\x18\x8e\x15*\xa5Uu\x1c\x81 \xe9\x82\xe5\x1c/C.V\x18}\xc1\xc143;\xa0\x0c1\xda\xcc\xa6\x1b\x9eX\x10\xdcZ\xc6\x9dqqE-W\x0e5\x15LU\x8b\xbf50\x15\xa3o\xf0\xb8\x98\xd8e\xdf\x99Q\xc1\x93)o\xcb,\x94\xea6\xd1\xbfdi\xd0P\xd9\x0eD\xe1t\xa2\xbc\x0c#\xee/.k\xbf$W\x80\x85\xbc\x9c~`-M\xcb\x03\x83W\xf5\x1bTP\x16J\x14\xc6\xe0\xc6\x014u\xad\x86E[\xfd\x89\x9eU\x88\xdd\xea\xbe\xc7\x89I&amp;j\xf6\x02~\x18\x16\x80\xa4?\x1b\xd7\xc7u.\xbeo3CZ\x9e\x8cN*"\xb5\xc4xj]yn\xe3\xc5VFl=\x91\x07S}\xc5q\xa9\xba\xb5\xdc\xbe\x8ey\x98b\xea}_\x89{\xce\xfe\xa3\xcd\xaar\xb7Y\xdb\x88\xdfR\xd5.\xb2\xd5\xc1i\xfewQuY\x83\xd7\x83\xc1\x00q\xea\x1d0\xb7\xe3\xef\xf3;\xe30%13\xa9w\x8bYf\x18fe\xb9\xb8\xba\xb3\x92\x0b(\xfc~\x9dC\x13s\xbfS\xb7\xe2\xa58\x94x\x95*&gt;\x06\x10s\x88V\xe8\xc7kg\xceR\x81\x05\x9dA\nV&amp;\xe9\xd7\x89[\xa5\x18\xc9}6L\x1e\x0e\xf9\x07\x11`\xaf\x03\xcb\x1eYr`\x1d\xe2R\x99&lt;\xda\x81\xeev\xae5_X\x94\x81\x14\x11b&lt;s/\xe4\xcb#\xf7\x16\xa0B\x00\xf0\xc1\t\x05Q\x10\x8f\xa3\xa9p\xc6\xc5\x8a\xf3\xeb\x88\xd6\xa0\x9d$HPG\xfc1\xf4V\xd7V\xc6 \xe2;\xf7\xd4[@T\xe2\xca\x7f\xdc"\x14\xe9Cb&lt;\x0f\xa7\xaf\x864\x10\xdf\xfd`\xc4\xa4\x0e\xe0\x00FE\'\xa3+\xf5\xa9P\xaa\x84l;l\xc3\xeb\x12\x9b\xabGZF&amp;\xac\x01\x18Kn\xbcT\xb9%\x0e\xb0\xccBU\x8a\xcep\x902W\x97x\xb1\xa9\xce\x80\x1e\xda\xca\xfb\x951\xe0\xdek?haG\x13\xf5.\xea\xb9\x9dK#/\xe1\x99\xb2\xff\x002\xaf0\xdf\xfb\x8e\x9d\xd5D\xdb5\x89V\x96\xdf\xe2\xa5\x16s\xf5\xbb\x9a\xd3\xadf\x1a\xc2=]\xc7\x05q\xfc\xcb\xf3g\xb8\xd7S4\xd1\x93E\xcc\x8f\x18\xf3s&lt;\xb8\xe7;\x95\xfb\xa8\xe0\xc3\x95\x8d&lt;sqZ\xf1,\x1d\xfe\xa5\xc1\xe7r\xb8gR\x85\xdc\xacJe\'\x12\xb4\xcf\xa9L\xeahz\xb9L\xba\xed\x9c\x9c\xd4-\xc4X\xfd\x7fp!=\x17\x0f\x8f?\xfc\xea\xf3(\x8b\x9c.;FNp\xa1R\x90H\xe5\x9c\x9b\x18\xd4t\x821\x90\xbdNEv\x08~b\x16s\x8bU\xe8\\\xb2\x9c$\xbf\xe4]Q-fn\xc2\xa2\xdc\xa7\xc8\x19\xb8b\x05\xb6\xd3\xcc\x08\xba\x00\xebe&gt;`k\xe9\x8fq\x8a*\\\xa80f=\x8c\xa2z\x00I\xbd\xb5\xba\xb8\x9a\xaa\xc8\xeb2\xb9\xd5\xf8\x99\x0b\'\xf0\xf8\x9fh\r.\xc8]Q\x93[N\x90\xeaU\xe2;\x1c\x08k\x047\xb4\x9ex\xa8\xf2\x86\x7f.\x1e6f\x03i\r\xd9\x81\xf78\xcc\xb0\x89{\xe2\xac[\x8aJ\x02\xca\xd8\xd2d\x18\x1f\x0b/\xea\xb8v\xa6 \x1c\x91R.\xc8\xd0\xb5\x8bhm\xde\xa2\xf0d\xc02\xe2\x98\x86\x8b\xad\x17]\x9a\x85\x8a8\x03\x86\xf7\x18\x07\xebp(.uz\xe7\xe39\xc1\xf7\xab\xfa\x9c\x05\xfd\xf9\x9c\\\xcfY\x9b\x99\xbf\x86T\xb81+f\x8fr\xca\xd7\xe3\xdc6SY\xbc\xca\x0c:\xc5\xc1A\xb8\xdb\xa4\x8d\x9f\x08\xe6S+\xd7\xb8\x8f:\x99\xcf?\x19\xf5}nU\xeb\xd4\xb98\xa8~5\x0b\xd3\xa9Z\x94B\x05\xd7\xa9\xae\'%\x1c\\9\xc6\xe5kq\x9d\xf8\x8a\x8f5.\xbcbb\x81\xbew5\x9cL{\x82\x8f\xaf\xfe\xab\xe7\xeb\xe1h\xb9U\x91\x10\x1a\xdb&amp; \xac\xa8r3\x1c\x81|\xe6\x04\x99\x0fC\xfbj:a\xbc\xdd\x9f\xa81\xfa\x04\xdb\xcbl\xbfq\\Z\xb7\xe4\xca\xc1\x0c\xf4\xaa\xfb\xc4\xb6\xae\xb4\x18\'\xc9I\x88\xb8\x14:\x07\xa9\x97E\xa0\xa8\xd38\r\x05\xc4\x92\xfe\xa2\xd0\x1c\xe0\x89\x8c\x8c\xb4\xab;\x94\x94\xc0\xa5Z\x88\x18\x8a\xd7\xb9C\x9c\x81\xa9Z\xb8\xae\x1eIi\xe8y\xa9x\x1eFm=\x81\xc3\x0e\x00E~\xb9\xf1,\x00\xe8\xe3,\xaf\x8b\\]\x14:\xa2\x15\xea\xd9C\xb7\x15\xcce\x1cl*{\xaaf\xdeN2\xff\x00 \xd4\xa4\x9d\n\x91o\xac\xc5J^\x81\xc9L?\x9a/\x8a3\xebe\xdd\xf7\x9d\x9ewx\x92\xf3\xb1Z9x\xcc\xeeej\xee\xe35\xbfp\x1a&amp;\xb9\xaf\x9f\xac\xcf\xb9\xe1\xf9\xee\xd9\x9b\x84+\xc7\xa9\xa6.&lt;1Z\xb7\xf7\xbf\x0c\x0b\xcb\x1c\x10Ph\xd1\xd9\x1c\x0f\xbf\xa8\xf9\xbdM\x9be:\tw\xa4\x95G\x8c\xe6;\xb8\xf2\xdf\x82\xe3^%\x9a5\xc6g/0\x00y\xaec\x0f\xf33z\xeam\x85\xe2\x1b\xff\x00p\xd1\n&amp;3\x88CX\xf10f \x95\xc0o&gt;Hw\xfc\xc3\xc3C&lt;p\xcf\x01\x00|?\x7f\xfc\xe3\xb8z\x95\xf0\xb4J\xaev\xb8\xe7Q|\xfa\xd147\xf8\x1f\x973\t\xaf\xb6\xd8:\xb8\xb0Q\xc4P\xd1\x9e\xa2,\x15i\x18&amp;M\xb2\xe9Wot\xe6\x12\xc5Vr\xb3\xdey`\x865\xc8A\xa2\xdb\xcc\xba\x00Z\xe5\x87\x9b)\xa8!\x08B\\\xa0\x8f\xe0 \xa4\xf7*\xbc\xc40\x02\xe5\xa9\xc3\x9f\x98\xfe\xc3\xa4\xab\x06\xd3\\\xa4\xb8T/,\x16\xa8:\xcc\x006\x1a\xddt\xc2v\x97\x14S\xca;\xd1\xaeU\xb2\x10V\x8b\xac\x89\xe2\xe1\r\x14\x03\xa4\xfa\xa0b\x8a\xa2\x0b\x0e\xf1\xa3U\xe61ay\xb4\xb7\xe9\x8d\\\x87nP\x82\x95M\xa2\xe2S\x86\xbd\xc2\xe2\xd3\x1a\x16"\xf2Td\xff\x00\x0c\xba\n\x8d\x86\xb3\xfa\x95\x06ej\xefY\x9c\xe6y\xb8\xfb&lt;N\x19U\xf1\xe3\xad\xdc\xa7\x9b\x86\xbe3\x19h\x93\x07\xccwJ\xc5\x90+u{-\xa8\x03\x025\xd1\x03\x1cO\xa9\xd5\x1e\xbe6\xfcr\xfd\xe6?\xcd\xcb\xcd\x99\x8d6l \xd0\n\x98\xf8\xad\x10\xe2\x13\xdfSR\xf9\xb2h\xf8Sg\xc4\xd9\xcc\xabJfq\xfb\x99X\x84\x03\x07\xa8\x1e`k\xe0\xe2:\x9f\x98k\xe0\xaa\xc4\xc4\xed\x94\x10\x82\x84\x96U|sw*\xd4yn\xae\x1fd\x0fL_\xe38\xb9\x9dI/\xad\x08%\xed\x94F\x92:8a&lt;\xab\x949\xf0;f\x11+f\x8a:\x0f\x04D\xcb\xc9\n\xa7\xf9\x9a\x11\xf2rN\xc1U\x88g\xab\xf9f\xdd3\xa2S\x841\xc6\xdf\xd8\xc5A`\x17\xee"\x053\xa8\xa8[\xaa\'\x8e\xb9\t\xf0\x00\x08e\x9a3\xce\xae-k&lt;qP\x15\xc89\xba\xc4VTi\xa6\x15X\x01\xa4.\x06\xb0\x7f\xe0\\2\xea\xa6\xb4\x1f\xc4\xc04\x06\xec%\xfa\x8d9\xc6\xb7\x08\xf8\xd9\x11v\x0cQc\xb5\xa2\xca\x9b\xf5NP\xbc\xbc\xc1\x18\x17\xee\xf5(\x00Z\xa5\x83\x06\xdf%\xef\x17\n\xaa5\xe4\xdc"\xfd\xcdW\x05\x04g?\x1d7\xff\x00\xc3\xaf\x08\x9b\xc7\xc2\xd6o\x159\x8a\xbe\x91\r\xe7\xd70\xb8j\xa6Z\xcd\x1f\xab\x83\x05K\x98=\x7f3a\x83\x89\\{\xbe&amp;:&amp;|\xc7&lt;\xca\xce\xbfS\x9f7\x19x\xc4i7\xacC\x1e\xba\xbf\x8d\xdc\xc5\xbf\x98y+\x8c\xc35\x8f\xc4\xf0jo\x04\xce/\xee\x18*[R\xa3/\xb2Z\xa5\xc2w\xcb\xab\xccse\xc33_\x1d\xcb\xf9\xeb\xe3\x7f\x1c\x93p\xd4F\xc3\xb8\xa8W\x9cR\xd7\x9c\xc4\x84\xbd\xf3\x7f\xcc`\xe8\x9c\xe5\x02\xbd\xafL\x10\x87\x10\x02\xd1\xe8%\x18+\xf3\xfc\xca;\x0f\xb2 \x95c)\x90\xb7\xb5\xea`\x96\xf1f\xd8R\xc3Ga\xa9\x83\x9d\x15J_\xd4\xa0hI\xba\x1f\xf7R\xa2\x06\x7fp\xcc(\r\xab\x10\x11Op\x04WH\xe7P\xd2\xbeqy\x1ao\x0c\xba&amp;i\xa2\xfe\xda\x89=\xa5b\xea\x18E\x90B\r|[9\xa6\xe5\xc4]\x81\x17\xc3\xfb\x8de\x8dYp\xb3\x06P\xa4iN\xbc\xcb\xa1\x8a\xdfj\xf5\x03G\r\xf0\xb5\xf7\xc8\xeca#A\xad\x94\xf3\r\x8b \xdc\xf5l\x19\x81JL\x03|6j\x10\xc4\xd8R\x06\xaf\x98W\x8f\xdd\xe6\xf63\xde\x18\xc2\'\xefi\x18\xdaY\xdb\r\x85i\xac\xc5l\xcby\xba\x95\x87^\xf3:\x9d\x13\x99\x8cJC\xfa\xf9\xff\x00\x82UL\xcdty\xe2l\xf1R\xb74b\xb5\xbf\xcb\x00\xae\xa6\xe2J\x0f\xe8\x81\xbce\xa9W\xbfr\xb3\xa9\xddF\xa9\xc4\xaf\x18\xad\xfb\x8f`\x8cy*y\x1a\xf9 :fwMB\xe6aS\xea\xa13+\xfcN\xe7\x98\x99\xa2x\xe5\xa9)\xdd\xc2\xe7\x1b\x87\xc7\xe7\xeee\xf8\xbc\xc2k\xea\x11\x94\x92\x83n\xb1\x15_\x9a\x1eV&lt;\x0b\xf0\xb64\xfc.,\xc3\xaac"\xe9\xf7\xfa\xf1\x18E\xcdR\xf1\xef\x94ii\xfa\xc4.\xdb\xc3Z\xad\xcb\x18-a\xe3\xb5\xf5\x00\x05\x01@[\x06\x1a\xbdf\xa5\'\x87C\xff\x00\x84\x06\xa4\xbd\x19\xfew+\xa2iW\xd1\x0c\xe9\xcc\xb5\x15\xe3\xbf\xb8\x1ej\xa7=G\xf46\x8c\xaa=]m\x89\x85\xbf\x105\x0b)\x16n\x82\xbc%\xda\xaa\xf8B\xae\xe5+K\xf0\xdf\x0c\xca\xc5\x0e\x9e\xe1r\xd9\xdf\x94\x958\x1aA\xb6\xf8\xf7\x1d\x15\x04D\x00\xe3\xa9b\x01\x04K\x07:\xe3L\x01(i\xb2\xa6K+}y\x97\x06z\xb5\xf5\xccb\x80\xd3-\xd4z1\xb8hv\x08\xb7\xdd\x1f\xe6\x15\xbd\x86j\x9f\xa1\x18\x10\x8e\xfc\xf5\xb2\xc6V\x82\xf2M@\x16\n\x86\rb\x14h\xb0\xaf!2\x82\xb7\xe6\xa62\xd3\xeeTE\xd4\xd5\xd9SSF\xfc|\xb6G\xdf\xc7\x9f\x8d\xbb\xfcL\x99\xbc\xe2X&lt;\x91\xd2?\x88+\x1a\xda\xe7\xf1\x03I\xec\xf7+Bw\x1a1Z\x8d\xee\xe3\x1dG7Z\x8f\xd0\xbfQ\xbc\xbd\xff\x00X\xa8\xda4z\xcc8\xcc\xcd\x80N\xe5fcC7\xaa\x86*}\xccC\x06;\xe4\x97\x9c&lt;C\x0c\x91\xb9\x80e\x87\x89D\xc7\xc5C\xc7\xc6\xfex\xf8\xa0\x86*\xf6K\xc9v\xdf&amp;\x89v_8e\x12\x06\xb8\xb3\n\x97q\xcc\xc4\xb6\xe2\xa0|*\xcd[\xf8\x8b7\xe6/\xf9\xb8\x12\xa1|\x0f\xd5\xc3\xd7j\xe7,\xebv\xe5.\x90 \xb8\xb2\xde\x9d\xbe\xe5\xd1)\xdfy\x89Z\x1d\x99\xa5\xfa\x8b\xb7z\xado\xc6\t`#\xc9\xc5}\xbb}C\xc4\x10k\xda\xd5\xcc\xe9\x9f}\xc2\x16\xef\x92\xb5\x12\xdb{\xa2\xf5p\xdbOZ\xcc:\xb3\x0f\x1c\xc2\xfc\xa1\xfe\xf5\xe0\x95\xa8\xf6\x81\xa0\x06\x01\xb8H\x10\xc2\xbd\xc1\x9e\x060\xa4\xac\x00\xf6\xd9\x11~\x84\xab.9\xbb\x18\x81+\xc0d\xb3a^\x087\xc0\xba\xcbf\x96\xe3i\xb9\x0b\x1d\x86q\x17N1\xa3\'\x8dT\xb9\xcdnJ\xb9T\xfe\xe3e\x05f\xdd\r\xeb)NGY\xd8\xf2ff&gt;@H\xd4\xb1f/\x15\x1b)gW\x154\xa9C\x0c\xbe \xa2\xa2F6mq\r\x9936k\xe3\xdc\xc4\xc7\xf3&gt;\xe7\x1b\xfb\x8du&lt;E\\ \x08\xf3Q\t[\x87\x14}\xf9\x86\x91\x1d\xdct\xc7\xdc\xc6\xbe\x10\xac\xcd8g2\xab\xae&amp;\xb6\xb7q6^\xbc\xcd\xc0\xbdM|f\xb7+\x04Y\xaeIRf\x0cn]\xa6\x04\x81\x19e\xba\xed\x83\x86\xa7\xa3\xe3371\xf1\xf5\x08\xc3\xe5Q,3*\xad\xae*\xb3\x92#\xfeJ\xfe\xae21qY\x8cR\x8feLt\xc0W\xefz`6\x97\r\x14\x80\x07\x92\x10\x7f\x12\x84\xd7u\xbd\x19\xa8A\xa6\xe9v\x96\x01\xdf\x12\xe0V\x9c\xa4z|#E0W\x16k\x88\xd6&lt;r6\x87\x92XX\x83{\xa7\xd6%4\x0c\x15\xc2X\xdf\x80\xe8\xfc\xc0\x97K(\xe3\x1e\xfc\xc0I\x8b\xf1Q\x19\xa39\x81e\x05f\x16p\xbe-\x8fh\xe7\x9b\xe28:\x19b\xbf.\xda\x08\x0c i\x8f\x1cE\xdf]\x068{\xf3L\x1auE[\xd84\xdc\xaf]\x87\x8bn\x85\x9e\xb1c\x1b^\xb3@]\xad=\xc5d\xee\xfa\x9a\x03D\xae(n\xd3#t\x06\x9fP\x10\x86\xed\xb1/\x1aHZ,MP\xb7\xea}\xa0]\x17\xf18yp%\x89pH\x11\xf3\x9d\\\xde\x05\xbb\x06\xea\x1f\xa8\xac,\xac\xcf\xf8\x8d\xc6\xdc\xf3\x1dpOG\xc7&amp;&gt;/W)8Ln]\xc7\xe6\xa5ulg\xda\x98\x1a\xae\x08l5vndC\xdc\x7f\xcc\xc6~\x1cS)\x8d[\xee\xf3\x1e6^X\xed%\x11\xf2\xe7\xc9*y&gt;1\x8b\x9c|jT&gt;%jE+\xcb\xcf\x17\x18\xb9Y\xe4\xb8g\x10\xa3\x89\xef\xa8{\x95\x87\x1f\x1ey\x9a\x9c\xbf\x1d|\xff\x00\x88\x01t6\xc2\xf6+q\x01\x95\xf1&gt;\xc1\xb1\xdf\x10\xb0\xa6e%\x08\x9b\x12\xf5\xa2\x95,u-A\xdc\xb4\xd6\xc1\x1b\x1al\xb0+\xc6f(\xb5\x96\xd3\xfb\x82V1\xfaX\x8a\\\x0fj\x8d\x95H\xb7\xb4\xcc\xd9G\xcc\xa2&gt;t9\xfc\xce\x02\xbc\x8b\x96\xe8\xee\xccf\xe7xX\xde;\xaa\xf7\xbe\xea`\n\x1a\xc7N\xea\xb4K\x05\x163\x1c\xba\xfc\x12\xe1n\xb4\x1e\xa5\xbe#Gi,\x02Z\x87f\xf6\xcb\x01D\xd7\xde\x0cY\x8d\x8d\x9ca\x8a\xb1O\x9e-6N\x01\xabO\xc3,F\x99\xc9\xbeO\xeeW\xc0\x87\xa3\xe6\x04^\x97\x0bA\x88\x04\xb7uZ&gt;K\x8c\x0e\x91\x92\x8a^\x8d\xef\xc4n\'\x93\x8d\xde\xd0U\xe2"\xa1p\xba)\xc7\x86a\x19c\x807F@f=;;\\~q\rp9t^i\x12\t~\xd0\x7f\xcc\xc5)\xecc\xc4U\x93{\x9d.9j[\xd88\xcc\xaa+\xfeX\x9e\xb703L:\x99\t[\x9c\xee\xb5\x03\xe3\x8f\xb9\x83\x7f_\x14\xe1\x8a\x9f\x99m\xd7\x17\xc3\x89\x91b\x8cb\x1a=!MN\xb1\x19\x8egz\x8d]\\\xb38,\xa7\x9d\xb2\xb3Q\x15\xf7879c\x85\xeb\xdf_\x1fs\xa0\x95+S\xc1\x10\x10,nk\xf3\x0c\xf7\xc4YG\x8c[:\x98\xfa!\xee\x1cN\x9f\x8fp\xe2fT\xaf\x9a\x0c\xbe\xdd\xd4t\xed|G+9\x0ej\xb8\x8c,2\xa1\xb6Q\x1d*\xdb\xcdF\x8dTtd\x99-ZVf\xe2\x940\tO\xb9A\x19\xbbt_\xf3\x1f8\xdbO\xed \x8d5\xeb,Mdk\xdc\xb4\x01D4\rq\xc5w\xcc5\x00.0\x0c\xf4\xd9\xb9\xae\xad\xd3A\xd6\xa0\xb4)\xbdd\xbf\xd4\x10`\xceyS\x88\xab\x0b\x80\x1flh\x0bP\xa5vm\x8d\x1d\xa2\x96\xfdT\x06\x06\xa9\xbb\xfc\x97\x0f+\xc3C\xb81\x93\x81~\x02Z\xfa\xaa\xab\xfb\xfc\xcb\xa0\xc5b\xce\x1f2\xed\xb5\x85\xd7\xa9r\xd9\xa3\xa7s(\xb6\xfd7\t\xc5z@k\xd5\xc4\x00\xafn6\xee\xc9\x88-qxG\xcf\x98\xf7E\xcd\x13\xad\x91U\xea\x89E\xae\xb0&gt;.\nL\xa7\x9a\xb7\xe4K\x8d2\xa8\xb7+o\xc5\xc2&lt;\x99\xa2*\xfd\xe2\xa3\x85Z\xe8\xba?\x04v\xa1,\xc0D\xcaw\x85\xb9H\xe2\x05\x04\xcb\x1b4\xce\xa6y\xb2\x1a\x99\xaf\x85\xb2f\'s\xdc\x1a\x9b#\x10/\xf33U\xddO\x0c\x98\xad?Y\x97\xe2w\xba\x8e#\xe6W\xf0\xcb\x01o\x13\x8a\xbe#\xa7\x11\xbc\xc6\xe3\xccw\x8f\x83z\xea\x7f\xb2xn}\xc5@\xc1\x0c3%Rw\x18\xbdL\xa5\x99\xaf\x10kX`\x0c\x04%[\xf7&gt;\xa70\xbc\t+O\xcd\xee\x15\xe6x/\xe1h\x82\x1c\xf1\x0f"\xc5W\xce\xf2\xd4e\xc3I\x08\x8e6J\x0e#\x1a\x95s4:f\x88\xdaS6d\xeei\xd5\xc9\x8c=\xcej\x9fJ\xa9\xa0\\\x0e\x8f\xa6^?\xcfp\x91Q{\x96\x0b@\xfe\x89\x86\x80 \xcaj\xf9\x83\x86\xe8e,_X\xa2\x0ftx\xbb&lt;rT\xe2S!T\x98\xbe\xb2\xc8Z\x0ejUhco\xc4\xd0\xa6\xfd\x1a\x1c$v#\xa4\xeb,\xd8\xbaqz\xe0\xceeQz\xda\xbe\xa5i\xf4_\xa9Ptt\xd6\xbf\xa9m\x03&amp;\x9e\x1b\xe1\x95\xa5\xc5\xa6\xf5\xe3\xccT&amp;\xc3E\xbf\xdc\xa8\xe0\xb40\xa4}\x91\x8aI\xbb\xe2\x9b\xe3r\x95\xb6\xd8J\xc6NS\x11\x16\xb0KU\x97\xd3\x18\xc0;\'Nh\x07\x04\r\xb2\xc8E}\xd002\x98\x03\x17\xd9\xa7\x0cZ\xda\xd3NT\xcd\xd7\xca_\xabj\x19F\xb0g"\x97v2\xaeg\x1an\x10^\x18\x98\xcf\xc5i\xf8s\xb8\x1c;\xa9s\xa9\xacd\x94B\x1ag\x97\x9f\x8d\x1d\xf1\x18\xf0\x0f3"\xbf\xde\xe7Cf{\xdc\xa4\x94\xff\x00\xf0\xea\xf9"q88k\xa9\xa1\xac}\xd4n\xbfs\xcc}|^\xabR\xb19\x9fo\xc5\xd0\xeb\x1b\x80\x16\xe24\xb8g\xfa\xf3\x15\xfc\xe2l}\xc0\x16\x1b\x98\xb8V*\x05\xfcfk\x89\xaf\x8a\x957y\x94?\x15\xa1{\xdcG1\xb2\xa8\xe2\xe0!\x9c\xccw]C\x01M\x05M\x12\xcd\x1c\xc7\x17O3&lt;h\xe05\x88\x92@\xc5q\x04\n\x1a\xe6\xa4)\xe3\xd1S?\xca\xf2\xee.XT\xb5y\xf1-l\xff\x00\xcc\xd6\x9b\xec\xe2\xce"j\x90\xaeZ~\x88V\xcc\x1d^\xbe\xbb\x88Z\xf2]\x0bm\xfa\x98d}\xb8,\xe8\x8d\x16+\x03\xc5_\xf2\xcaE\xd1\xfd3c\x1c/W\x8c\xc5\xae\x987\xbd\xdck\xa1\xfa\xed\x82\xca\xf9\xae;\x14\xe7\x8e\x81u\x0b)\xb0M)\xb0\xe2\xf9\x88\xab)\xec\xd0#\xba\xedq\xcc\xed\xa6\xea\xf3\x99\x9dZ\xa8V\xfe`\xb7\x8bs\x80 \xbdfU\x15z\xa2\'\xb4A\r\x19\xb1Y\xe0+\x84\xb6E\xda7XZ\xf1\x98]\xc9\xe9Y\x8e\xebL\xb7]\xa1x\xc1\xeelS\xcd\x9c\xbc\x90)5\x9b\xa5\xcc\x81F5\x05\x08B&gt;\x913\x18\xca\xbf\xea&amp;\x12\x19\xd3+\xcd2\xf9f1\x9fr\xba\xf8\xa3\x92\x1b\xf8\xc0a\xb2\xe2=A^H(\xd6\xa9\xf85\xbcL\xf1\x1e7\x89^\xbf\xdc\xe5&lt;\xc6\xcc5\xceg:\xd6b\x7fQ\xe6\xf5\xb68\xa9\xfe\xf7:ru\x89T\xc25\x88\x01X\x9e\x08\xb9~\xf9\x8a\x8d\xb9\xfc\xca\x0c\x99\x9aW8\xdc\xc4\xe7sG\xc7p\xa8\x13\x9d\xff\x00\xf1z\x82A\x95sPd\xe1\xbcBx\xb5x\x8a\r1PF\x8cjP\x04\xaa\xcb\x97y\x81\x7f\xf3(\xb2\xfa\x82X4j\xb1L\x1c\x80\xe7l\t\xceV*\xe9\xf6\xdc\x0f!\x8a\xcb\x80\x94\xa0*\x98\xeb\xdc\xb6\xa9\xb2\xbc\x18\xb8U\xd6Y\x85~o\xd1\x0e\x0f\xb0\x19\xa9\x86k&lt;\x0e\xe3\xdb"\xb1\x9c@\xa1#\xb7\xa8\xb5\x1aV\xc1\xe0\xd5\xfb\xce# x\xb6\x16\xb2\xdb\x07,\x05\x8d\x15\xcf\xe2\xe1J\xbe\x8fH\xae1\xbaF0\x069\xeb1\x00\xe4\xe4LE\xe4\x0bR\xdf\xf4\x837[K\xc3`\xf5s/nK\xcf\x8f0\xdep\xe5\xaa\xeb\xc3*-y&lt;\xf8\x07\x0cf_\xdd\xdfQl\x9d\xe0\xa5\x95\xf7\xbc\x0c\xa3\xa2\xb9p\xd5\xf0\xc1,+-+\xfd\xb8\x97\x10\x9f\x14\xe7\xc9\x89Q]KA\xb7m7,\x98\x1a\xe2\x03\xec\x96\x9b\x11\xee\xde\xc6R\x16_Mj\x14\xd4\xcc\xef3\x9a\x9b\xf1\xf0T\xab*r\xe6\x1f\x99\xdco\xfd\xc4f\xe59\xdc\xd6\x15\x7f\xd7X\x81\x86\xaf1\xcf\xab)p$\xd3\x88\xd1\xce\x08\xe2\xa7\x88\xeb\xae33\x82\xd8\xa5\x17(\xeao\xfb\x8c\xccx\xcb\x003\xfcKq\x0478\xc7\xdc\xb13\xef8\xc6#c\x05\xc23\xe0\\\xac\xa9M\xce\r\xfc\xd3P\x1a\x81\xf1Q\xff\x00\xe1h\x84m\x1b\\\xbd\xaa\x8bDf\x97\x97\x93s&amp;4jRB g\x8e v\xb1\xc0\x95\xf7o\xe6^\x98q\x80k\xeajO[\x130\xcbX+1\xa1\x9a\xbc\xe2\x1e.r\x81\x07\x17\x800\x11b\xc2\xf97-\x95AF#`a|B8\x15 \x06X\xa3Q#\x03\xd6\xf7\x9dq\x1a\x88\x81\x9dC\x8a\x99r\xc0\xb1\xbf;\xda\xcb\x10\xdaU\xf1Z\x8a\x16\xf6\xafu\xd134\x96\xa7\xc6a\xc2\xe8\xef\x08\xe9e\x1awo\xbe\xea"eS\x8f\x0c\xbb\xc4)6\x19g\xf0\xcaG\'\x8e\x8d\xea \x83]\xd9\xd7LcF\xb4\xd9\xb7\xdc\xbe\xa0\xb9\xb3\xc63\xa8\xbd|^s#M\xe5\'3v\x1aEp\xf6\x9c\xd3)\xbb\xc0i\x974\xd1\xa7\xa8\xa2\x9a5\xbb8\xee%\xbb;\x03\x07X[\x8a\xc8\x0fJ61\xa4\x16:X\xf7p\xbfX\x80\xaaXM@\xa1\x8e!\xa9\xdce[1\xe2\xa2b\xa2f\xa5q)\xeav\xe2}E\x95\\@\x86o\xea&lt;\x9c\\#\x931\xaa\x16+*\xae\x85C\xb0\xe3\xe3\\}O\xd6~:\xb48\xd4\xb2\xd9o|$\xed\xa3u8\xdf\x1a\xf59C\x99\x89_\xf1\x86}\xd4\xba\x84[\x00(\x9e\xd9g\x9bj\xee-3\xbd\xb2\x80\xc5C\x17:\xb2T\xfc\xe6\x159\x9dc\xe4\xf1\xff\x00\xcd\xd40s)\xe5\x10\xc3\xa9qE\xc3\xbc\xb5\xea\x10\xc8JC\x15\x1c\x1f\x00^\xe0\xf5x*V[\x9e\x06Q\x81\x9b\xc2\xac{fP\xd5\\\x82\x06\x84\xfa\xa3\xcb4\x08Q\xd2\x02\x01\x90\xefj \xaa*\x9e\x0c\xc6[Pc\xcb\xc1\x14s\x9e\xe8\xf0a\xb9\x90.\xaf\x81\xcfq[)m\x0b\xcc\x02\xd0\xa4\x174\x8d\xf1\x02\xf5\xb4m\x8a\xb1k\xa7\x88\x82\xaa\xe9\xfc*3\xd1\x90\xd3\x02\xd4a.\x9e\xcd@\xa3+\xb4~\xb2F\x99O\x17,\xaa9\xa6\xfd\x18e\xa5\xd0\x9b\xad\xd7\xd9\xc4@\x04q\xcf\x18\xed\x82\x04\n{i\x88\xc4\xf1\t\xbe\xbd\x90,\x14\xf0\xc8u\r\xca\xdar+}\xdb2\x8c\xd1\xc5\xa2\r\xece\xb7\xa5\xc8\xd3@w\x84\x89\xc0\x0f\x03\x87\x9dD\x16\xb84?\xbdMi&lt;"\x7f\xb1\x81oG\x9aJ\xeaZ8\xe9(}\xe2\x08[3\x8a\xc9)z \x9cj9\xf8\xdcesS\x8d\x11\x95\x8dJ\x9cJ\xf0G\x01\x88\xcbA\x92\x1e\xe1h\x94\xd4\'\x10\xc1\xe9+\x18\tEj4e\x15\xfcNt\xeeQ\xc6\xfd\xc7\xefU\x1eee\x9b\xc1\xd4\xd9\xf9\xf5\x1e\xaf\x8dM\xe53\xeb\xe1\xa0e\x86\xd9c\xbc\xbb\xcf\xb8\xfc\x1f\xd2kj\xa1\x01+\x07P\x9f\x7f\xfcUVf&lt;\xcd|w\xff\x00\xc0\x15\xf7\x0c\xad\x84\xc2Qx)\xfe\xa1\xa6\xac\xbe\xa5v\xe1\xe4\xdb+\x8f\x1f\x01P\xc7o\xf1\x89\xb7\xce!M\x97\x16QgX\xb8\x92\xda\xef*\x8f\xa1\x95\x80Q\x9a\xbf\xddMCX\xbb\x89}\x07\x06\x08\x12\x80Q\xf8\x94Y\xe3\xaa\\\xa0\xd5j\xb6\x08.\xa5\xd2G\xa3\x83\xc1\t)uOu\xe2\xe6`iz\xc5\\@pl\xce\x05\x97~*\xa2\xe9EE\x02e\xcc\xa77\x9b_8g\x13\xc4Z\x7f\xe5MU\xc5\xd0\xfe8\x82\xd6U\xd5\xdc\x18\x95J\xeeQM\x18U;\x0b\x19U\x0b\x06\x96 \x18\xa3\xbeW\x1bb\xcb\xce;\x88\x1d\xe8\xdeY\xaf\xef\xa9\x88+\xa3\xecf-^,\xd3\xc7?PR\x9f\r\xae%9 rA`#\xe1\xbd1\x17\xd4\'\xf4\x94`!\xc2\x96xuc\x11\xc2r\xbc\xfc\x915\x8aQ\x8c\xd1\xf4\x90\x81)v\xaa\x1f\x0c\xd2\xd5cB\x8b\xfc\xc6\x05\xae\xfe\xe0\xdaZ{\xfc\xfc\xbfq5l\xf11\xc7\xc3\xf1Z\xb2]o\xff\x00\x87\x98\xe9\xc7\xa3\x7f\xdd\xc0\x87|\xba\x0e\xa5e\x00\xc6~\x1b\x8c\xa3\xe7\xb8\xf3(\xcd\xce\x0f\xe2:\x88v5*V\xf7\x07Y\x96n\xe3\xabx\x99\xd3\x0c\xb3\xd7\x82\x98\xf9W\xeb\xfb\x82\'\x99\x9e#\x0f\x8e\xbe:\x84\xab`PM|\xadf\x1d\xab\x04;&lt;\xdb\xb9C6\xde\xa2\x86\x9c\xdc\x1d\x0b\\b\x18u;\x8b\x13*\xc7:4\xdfd\xaddd\xb8[7\xb7\x17k\x00mt-L\xd5Z\xe6\xed\xf8!\xd6.Z1M\xc7\xe5\x18\xac\xd9\xb687\xee^\xd1g\x96\xdb\x98\x14J:\xb4\xeed\n\xbcOr\xe5w\x06k8\xdcm\xa0V\xc6q\x99H\xb1X?\x95\xc4 \xe3j[\xb7q\x83\x8b:\x88%\x1b\n^9\xac\xc4\xb5V\xf0W\xfeA\xc9\xba\xfe*\xeel]`\xefD\xb2\x1c\x03\x1dY.\x82\xee\xb7[\xfb \xa0*\xaa\xa1\xc1\xcc+\xc5%\xe4\xf3,;\xbas\x0c\x00go\x15\xab\xb9f\xa4\xad\xdeC\xc9\x0b\x12\xef\x15F\x14N\x1f1\x18j\xf0\xbb\x9f_\xb2\x1b\x80\r%N2S\x0c+U\xc2\xa4\xf2\xd5L\rES\x85!\xf4(7kMd0\x11B\x92e\xe0^J\x9c\x00;Mk\xea\xb1\x070\xcf\x0f\xf1+\xa1m\xdb\x88\xca\x80d\xe3s"fW\x89Us\x9f{\xcc/\x9a\x9dUC3D\xeey\xf8\xcb\xf8\x84\xc5TI\x9b&gt;\x7f\xb9\x88\x9a\x03\x9b\xdc\xa2\xae\xff\x00\x98b\x0e3\xfec_\x1c}\xc0\xb61i\xc71\xc7\x13$5\x1a\xf8#\xb8\xca.\xa0QF\xf4\xd4p\xcb\xa8`\xc7\x9f\x8a\x81)\xa9_\x1a\x9d\xfcTI_\x15\xe28\x19U\x9f\xa8\xc7\x01Qa\x87\xb6\xc2p\xf1\x0c\x12\x8dT\x7f\xb9\xbb\xa9K\xb3*\xf0\xfa\x8cy!E0%\xa6\xc8\xed\xc1\x84\x1bR\xed\x03\xaecSJ\xadf\x89af\xf4\xdd~\xa16\xceZ9\xe2!\xedZr\xadL\xd2\xc9x\xf7\x11T+9&gt;j\xfdD\xabo+\xbf\x0c\x02)\x8a\x06\xfc\xba\x8e\xa5\xa5/\xa1.c\xaa\xd7F\xbe\x96X)[\xbe\x86X\tY\xb2\xf5\xa2R\x15v\xdc\xc89(\x9dS\n\x95\xc0[\xef\x86TS\x19\x061\xc2S`\xdd8{`X_[\xb3Lh\xbb\x13\x93R\xb5\xd8\xd1\xa9\x1f1\xaa\xca8\xa3\x88-+\x1e*\xf2J\xc2\xd0\x01\x8e[\x94j\r\x94\xbc\xc0*_\x14p5\x1c\x04\xd5 \xe4+h\xec\x9b!\xab\xff\x00\x0e%\x0c4K\xba\x1c\xff\x00\xe9\x01\x95\xaa\xb8\xa5:c\x0c\xe9\xa5i\xbe\xaedP\xf3wdr\xb8\xe6\x8c\xfa\x84D\xce\xf7\x98\x8e[3y\x0e_\x8a\xf1*\xa5k\x12\xb9\x94rJ\xf8\xacJ\xde=\xcaz\xe2tT\xcdXEZ%7y=\xc3^\xd6\xfb\x8c\x0fR\xb3*\x19m\x8f\xac\xca\xab\x98\xeaw\xcd\xb2\x9b\x89\x8f\xa9X\xd4l\xacw\x1a\x15\xe6{7-\xb0\xf2\x9b\x96F\xf8\xea*\xd3(\x98\x86\x00\xf1\xf0?\'\xc5\xe5\x9c\xee\x18\x96\xff\x00\xf3\xe7\xc0\xed@\x1a\xcf\x8c\xe6\x19\xbb\xc9\xba`\xca8\x02{\x95\x18\x80*\xbd\xe6&amp;J\x97m&gt;\xa1\xddf\xb5,\xa3SZ\xbcx\x89\x06\xf9\xdb\xd78\x80$f\xe5Tqe5\x03\xaa\x1a\xa1\x03\xe2\x1ca\xce6M\xcd\xb4\xe5b&amp;\xd9Z\x14\xfbQ\x02\x8eh\xc0wq\\)\x0bk\x8b\xd8C[\xca\x99\xb7\xb2\xea"\xd1\x85j\xfce3o\x10\x07\x8a\xeb\xfb\x96e2\xad\xe0\x88`\xa2\x8a\x1b\xd7,\rzW\xe1\x9c\xc2\xba\xb6\xb8C\x9f,\t\x9a\xaat\x1a\xe2\xa2WX\xa5\x1e\xb7\t,\xd8\xbd\x97s\x9d\nD\xb7I\xb41\xbefP\xb1x\xa6\xac\xd37\xc5!\x814\xc2MU\xef\x05Y\xd8\xee0\xe8\xcd\x89\x8d\x1c\x91\x95Z\xf1\t\xc9)\x0f`\xf0M\xefd#\xa3{+\xf2\xfaf\x03\xc2\xc2\xcc\x8d\xef\xd4(J\xb3\xc6\xb3\xb9Q\xde\x1a\xb3\x87\xc9\x00\xed\x88\xd2\x9a\x8c\xb6\xdb\xba\xba\xfe\xb1\x11DS\xa3\x88\r&gt;\xa2[\r\x9b\x82b\x84\xff\x00\xe3Q\x95\xf1\xcc\xbbw1&gt;\xb3\x18\xc7\x9f\xf8\x8e\x98\x16\x10Z\xad\x9cAX8\xf8\xcf\xc7-]\xc2w3\xbb\x99\x8b\x1b\x98\xc7\xc5,-^\xfc\xde"\xd3^\xe72P\x13=\xfc0_\xfe~\xa7\x11\x8f\x10\x9b\x8bPd\x1b\xfd\xa5d\xc8\xbb\xae.U\xdd\xc4\r+\x95*U\xcbf8\xab\xfe\xea\x00\x12\\\x1eQ\xdd\x962f\x1d_&gt;\xa14\x13\x8c\x04C\xc1f\xad\xf4\xb8\x84D\x95\x82\xc7\x0c\x14\x07X\\\x04\xb1\x1c;\\jW\xf2\xa0\xb8P\xf94k\xb8!L?\x93\xfe\xa2\xa6d&lt;qU\x13\x84\xb2\xca\xc7P\x9c\x06@\xf5\xa2P\n]\xda^\x1a\x1box\\f\x16\xb1\xce\xe29\xee\x02\xa3Q\xbe\x1c\xb7\xdd\xcb\x80\x15.}\x92\x8a\x85\xa5a\xfe\x19E\xeb\xfa\x9d+z\xad9\xa6,\x10\xc7!\xa4\xec\xf5)\x82\xa9z\n\xfb&amp;8\x02\xb2/\x0f#\x12\x14\x0br\x8d\xeaXYx\xe7.\xaf\xe2\xe0J\x04\xd8=\x1b\xfb\x88!F\xab\xc4\xc7\x17\xc3\xf9\xe9\x99\xcb\x82\x8a`\x1dC\xd6(4t\xf0\xc19\x8e\xf42\xcd4\xdf\xb2jkz1\xb3\x88\x01[\xe2\x93\x88\x95\x06\x8au\x02\x85#\xb2b\\\xd4e\xf1\xf3\xefR\xd2g\x9f\x13\xc0\xcc\xde\xe3t}\xc3\x12e\x8a\xe5\xb9\xbf\xca\x8f\x045t\xa9\xb3\\\xcc\xd6\xdeb]\xe22\xf21\\9N\xe1\xd4\xf1\x88\x8ej\xfcG\x96\xbe\xd8\xe4\xb4\xbfy\x8a\xef\xd6\xe6\xfb\xb1\x00\x8dVe\xdc\xbc\xc3\x8dBu=\x13=\xcb\xde?\xf8w\xf3U\xcf\x0c\x0e\xaf9\x8a}\xa8\xa9HK\x00\xe0\x94\x16|\xad\x13\x08\xb8\xad\xb7\xc6\xe5y\xd7x\x88m\x18v)\xb9\x8c\x06\x8c\xe4\x99S^\xf7\x1a]\xe8\xc8\x07\xf7,Z&amp;\xda\xb2,\xee;5\xafG\x04\x14T\x03\x8b\xb1\x9e\xa1\xb2\x0e\x0b^bt\xa7,\xbcSAF\xa6{\xf5\x97\xfcB\x14\x1c\xaf\x06uq\xda\xb0\t@\x9b\xe7\xee0\xca\xdb\x17\xbf\xf8"[H\xad\xbc`&amp;\xef0tvCE\x1d2\xf1\x18\x02\xf7}\x97\xcb\x01Mi\xc9\x8c\xd4\xad\x94\xa1a\xc5M\x87R\xb5\xf0-dYB-\x8d\xe3d\xbe8\xe7\xef\xc4\xa6*Q\xc3\xab\xf1\x08\x05\xb6\xb8h\xca\xa8\xd5\x06Z+M\xf1\x9dW2\xc5\x98P\xdd\xbf\xc41\x81\xb3\xd2\x95\x00\xad\x9a\x14\xd6\x93\x88\xb0x;ze\xc6\x85\xef\xc4\x18\x82q\x98l\xa3\xf82\xa9\x8ax\xcb\x1f\x86V\x85\xe2\xf0\x12\xcfn\xf6U\xc6\x03H\xb1q\xf4\xca\xb0\xa9\xa2}Kq\x98\xbf\x19\xb9\xbe&amp;Ys\xeaY\xb2\xe5\xa4\xb6\xe3\xa3\x04Q\xae\xb1L\xb1\xb1\x03\x83\xa0\xc6\xe3\x05\x9f\xc5D\xd6\xa3\xc4\xf6zc\xear\xfe\xe6f\x96\xd2\x06z\x95\xcc\xaa\xc7\x8f\xc4y\xe5\x89\xcd\xfa\x9d\xdfp\x82\x84\'\x84ff8\x9e\xb3\x0f\xde\xe1\xdd\xcf\x1f\x17\xe6u\xf1\xc7\xc7\x7f\x067\xb9x5\xb8\xc0d\xca\xefv\xed\xe6\xe0a\xe8\xd9\x0c\x85j\x1dC\xe3Fc}\xe6\xe56\xe7V\xd4\xc0\x8f\xc3\xc6\xe1QY\xcf\xb8\x895\xc7\x10(\xd4\xe8\xdf\xb5\x95\x06\x9d?\xb7P\xbfR\xb0;\xa7\xab\x8b\xa9\x00e\xb1\xfa\x8a\x84E\xe7O\xa0\x8dDD\x05\xee\xe2R\xf1\xcd\x1fl+\xcd\xc3WOu\xb8\xbbkI\x86\xe0U7X\x0f\x1c5+Ay\xa29m\'\x063)\xa3J\xc0\xefm\x9f\xa2^\x8dK*\xef\t\xbfqXq^wY#J[h\xdf\x98Uf\xec\xb1\xaa\x83M\x92\xf4\xder`\x00\x1e3\xe2\xa1%\xb6\xa3\xc7\x10\xef\x1b^\xa3\x9dU\x891\x86]R\x82\xf9\x14\xff\x00$KR]\xbc\xf9\x8ap\x0c\x86\xa0\xbd\xb75\xbd\xf7IqL\x9d\xff\x00\x14L[\xc2\xe8!M\x1b\xc0\xff\x00\x99@\xa4n\xb0\x956\xe3&gt;)Q;T*\x86\xc8\xd0\x98\xf9\xa7:\xc4\xa4(\xa7J\xd8\xb3-\xc3\x8a\x08\xa6\x0c\x14\xb1\nCFo\xe3\x8a\xf38q;\xa9\xee\xe6wSZ\x9fS9\x9a\x9fX\xf8\xd2\x92\xab.T\xf1\x94\xfa\x91\x00\x1a\xf7X\x95\x88\xf31\xca\x9b\x89{\xa9DNk\xeev\xde%|:\x8d\xa9\xa6TV\x8b\xc4\x12\x1a\xa2j\x9f\xe6sW*U\xfb\xe3\xb9\xff\x00\x11\xde\xbe7\xa7\xf3+;\xf9&gt;.\x7f\xa8\x80V\n\xafd\x0cn.&gt;\x06\xd0\xaf\x945_\x1e\x14\x03_+(Mq\x12\xcbF\xeb1\x85\xff\x00\x89\xa0\x1bE\xbdX\xc3\x99+t\xe9\x84\xb2u\x1c}\x11m\x02\xdb\xd0\xc3\x82\xd7\xd0YO3Z\xb5p\xcf\xa8\xe5\x95\x131\xf6\x98\x8a\n\x0c\x87\x05\xed\x95\n\xb4\xe7\x18\x80Ko\xadgWR\xd6\xfdf\xea\xcf\xc4j\xd0r\xa7\x18\xe3\x99u\x9a\xb3G\xbc\x1b\x97!Q\xa1\xef\xfa\x95\xd4\x95\xba\xe3\xa0\x99\ru\xa2\x9d\xc1%\xb6\x9dz\xcd\xc4\xa8^Q\x9f\xeeYAE(&gt;z\xf7\x17\x88\xb7\xd74)\x994\x01L\xfe\xc8\xf1M\xa2\x99v\xa0h\x0f\xdcm\x0c\xe6\xb1\xd9\xa1\xbf\xb7\x88\xdd\xa6\x9ej[\xab\x94aaMoG\xf1\r\xc1F\xceH\xb5\x9a\xf1PP\xc2\xdb\x8ci\x88\x97\x16\xf3c\xa8\x9a\xd4\xd6k0\x97\x19\x1e)\xeaS\xda\x83O\x85\xc02\xeci\xb9\xfdF\xeb\xf0\x97\xaf\xa8\xe2\xd81m\xb0M4}9\x8c\xc3\x85\x19\xa9\xae\xcf\x8b;\x95\xa6\x16J\xa6\xa5\xf54\xbf\x17R\xb3\x1f2\xaf\xd5\xca\xed\xa86\xf8:\xc6!\xe7\xac\xfa\xe3\xee\xe5t\x8e\x8d\xbc\xc3Y\x95\x9dd\x8fs\xd5\xcf57_\x04\xee\xd9yb\xe8\x8bw\xdc\xc7S\xeauS\x89~\xab\xe3_\xfc\x9e\xa7\xd7\xc7S\x92\r\xdf\x13\x10\x19\xe8\x86\xb4\xeb\x11e\xe5i\xe6=\xa9\xd6``@\x00\'P\xf5\xf1\xcc\xbd1\xa2/v&lt;n3`\xf2\xf8\xd4,\x15\x97v\x15\xc0\x07\xf5\x15\xb7obR3x)\xb2\xeb\xf8\xb8\xd1EL`&lt;\xbcJ\xa4vd\x1f|\xb5\x07-\xc0V\x06\xa5\xe0\xf4X\xe0\xbd[\x15\x92\xf3\xca\xb7\xb8}\x0c\xa62C\x97\x1a\xdd\xa7\xf4\x87]\x97\x05\x95\xad\xee\xb11d\x00\xa3\x04y\xbd\x11\xfc\xd9\x1c\x1eIW\x84\xc5[\xce\xd8\x89.\x01\xcbcz\x94QeV*\xb8\x88W\xab\x17\x9djT_;\xb7|L\x8eh\xaa\xd1p\xc8\nJ\xea\xb9 \xd0/\x15u\xe4\xd4a\xd1\x01\xeb\x10hM\x17\x7f\x84(pVC\xef9\x89L\xe5\x01\xe1 i"\xd7\x9cE\x10\x9a\xe2\xf12m\x7f\xb4\xdcwr+dN\xaf\x07gW)\x96\x82&gt;\xcfP*\t\x84_\xe9\x18\x82\xd0\x14\xa8\x11\xaf\xbb+\xe1\xa8;\xdf\x8f\xfaq\x03\x9a\xe7l\x188\x01eJM\x86\xf9%tl\xd1\r\x868\xd4_$\xbb\xa9\xd4\xfa\x86\xb8\x9e7\xcc\xf31\xaa\x97\xe7\xeep\xe7\xe2\xe3\xb7\xd4\xdaKT\xbd\x9f\x9f2\xf2\x0e\x89\xc4X\xc7\xaf\xe2\x7f5\x1e\x16&lt;\xc5w=j\xbe1\xc6H1Z\x97\xef\xd4F1s\xc6\xe3\xeb\xe0\xe7\x9f\x9c|\x9f\x0b\xed\xc4\xf1\x1f?\x00\x10s\x8c\x12\xa8~\xd7\x07\x83\x9bCu\x82\x87P\x83\x89\x93\xe0\x97\xf1\xb3\x10%7\xe2\xa0X\xd0\xf7\x1e\x96\xbc&gt;\xe7R\x8a\xcd\x90\x8a\xcf\xa8\x06\x1c\xe12\xb2\xbdA\x15b,\xee\x8fk*#AA\xa6{H\xb2"\x96\x94\xa1a\x00\xcdb\x8a\x0f\x00@4\xe5\xe8_\xab\x83\xe6\x16\'\xf7w\x10[5\x0c\xd0\xf4j\x87\x99\xa5=\xa3T\xda\xcfp@\xa8U\xa1\x95\xedYyM\xdb\xa7#\x89\x92a\x04C\\\x884\x0b\xd3\xa5\'\x12\xc0\x18\xd3z\xb0\x8fGJ^*\xe5U\xe8SNM@]\xadA(v]{\x07p\xad9\xc0\x83km\x1af\xec0\xd2\xde.S\xaeq\xe2-I\xaa\x8bE8\xa4\xf7\xe2)v\xa6\xeb%\\\xe3\xbd2\xae\xd9\xa5 5\x92\xf0\x90\xaa\xb8as\x1e\xdab*Ua/\x0f\xf33\xd9\x80\x0f;S\x98h\xf7\x04\xcd\xd8\xbb"\xae\x01\xc0\xf0\xf1\x02\x06\xc7\xa3\t\xe4bC\x12\xb2W\xdd18)\xad]!vcu[`H\x98k_\x98\xfb|t\xc2&lt;\\\xbf\xe22\xb4\x92\xb7&lt;\xd4\xcd|\x92C&amp;\xd1g\xb50T\x18I\xdf\xc5\xddf-u\xf1\xd7\xc5\xbcLq\x1e\'S8i\x98\xb8\xde\xeaU\xc7\xbf\x9aZ#\xcc\xa2k\x99s\x03\xf1ss=E\xa1`&gt;\x98}\xe2r\x8d\xed\x8e\xca\xd3\x86\xdb\x84\x8c\xdc@`A_\x1b\xaf\x8f_\x1a\xb0\x92\xd2\xcb\xbf\xccH\xaf\x0fS`o\x86*\x95\x0c\xb8\x0ei\xb2\xf7\x11bZL\n\xaa\xcf\x104G!o^X\xc2\xae\'\xe5\xe8\x8e\xb6=\xdb\x03\t0\x1d\xa7\x93\xa2QM\x93|\x1e\x10\xe26\xe8\x1e\x18\xb1\x81\xa1K\xad\xdc\xb30\xf5Y\xc7\x86(0h)8\xaec\xdco\x95\xac\xb06\xc8b\x08\x15Zm\xb9\x9e\xd8\xab\xec\xc5iX\xa5&gt;\xb8\x85\xb5+8&gt;\xe568\xb1\t\xb7JQ\xc5\xde`\x00\xab\xbc1\xaa%qN\t\xee\x1b#+k\xcc\x18\x06_Z\xd5\xc0\x06m\x05\xc6Ax\xb5\x7f\xb5\x94X\x88l\xf4HW\nJ\xcb\x0e\xa3\xc1H\xb8\x1c\xe6`]c8qK\x8b\x81p\x9a[\xad\xf37\x00*\xe1C!\x91\xe4\x02\xc5\xe9-\x80p\xbe\xe3\xc0l\xe2\xf9\xf7\x17R\x19\x9eC\xc2g\x89\x81f\xf7(\x16\xfcu\x99\x89\xcf\xfb\x9fq\x9fS\xe8\xde\'2\x9dBg\x99{\x9d\x93c7.\xa4CU\xbcM\xf1\x1e\xa3\xccq5\xc4\xef\xc4}|9ng&lt;E3\x167[\x94\xfa\xe2c\xe2\xf3\x89\xc6\xe6&lt;J\x99\xff\x00sO\xc3\xf0\xe7\x1f\xdc\xcf\xdc \xa7\xf9 \xfd\xb1Lh\xedI\x12\xc9\x0b\x1c\xf1\x8a\x80J\x87\xc1;\xf9y\x8e\xbc^^fA\x94\x8c\xa5\xd5\x1b\xeb&gt;#6(\xaec5\rb\xfc\xc7\xac9\xce0\xdf$\xe8&gt;\x15\x1f\xc1\xc2\xbf&amp;\x8cG\x03\tZ\x00\x9c\x92\xbe\xee\x0bz\xf6\x96\x1e\xc3q\xa3W\xdf1p\xf4\xd1\x9c\xf7\x05\xd6]\xb6W?\xd4\xdfZ\xd9\x8c\x8b\xf19s\xa7yaa\x8c\x18\xc5\xfe%\x0b\x196v/?P\x96c(]\x16x`\xe1r\xa0\x9a\x1e\x12f%R\xd3\xc5a\xb4\xbdN\x14\xfe-\x97-A\x99mxw2\xc9\xb1Y\xc7\x98+\xc7\x9a\xfcV#\x16\x12\xa9\x9ep\xd5G\xd2\x9d\xd6\xd8\xea(\xb5\xb5\x807Q\x8f\x07\x0b\xf3,\x1b\r#\x86\x98]D\xb0\xca\x1a\xb9\xb0K\xbe\x15\xb2\x1b\xe9u\x90\xc4DJR\x9a\xcb.\xaeTCF\xac\xdf0\x1d\xd3\xd8W\xd3/\x94\xcd*\xf5,\xcazu\x06\xb8\x07-\xc1M&amp;\x18\x95\x06$]J\x98\xa2\\^X\xae\xb5/k)\xc6g\xaf\xfc\x9c\xbfQ\xceI\xd4\xba"\xe6$\x0c\xae\xd8\xae\x16\xa5\xc2\xae\xcb\xdcg0\xb2wz\x87r\x9b\x02\x7f\x8d\xc5\x96\xcf\xb9\x97\x8e\xa7\xd7\xaf\xb8\xa9\xe3t\xe2/\x9e&gt;?Sc\xf1w\xcf\xa8qS\x89\x9b3\x15\x07o\xc7\xe8\xf9\x08\x19\x91\x84G7mQ\x03\xb7\xfc\x90L\xa3\x94\x00\xa0\x9au\xf1s\\|\xebq\xf5\x1a\xda\xfe\xa5\xee\x1d\xfec\x8df\x92\x8d\xc2\x03\xf6\x19%X\x07\x169\x84\xcc\x07[c\xdc3\xbb\x9f\xd4\xe6\t\xea\xaf\x8b\t\x8c\xd1ts\xf4\x84\xac\x17\xc2V\xbd\xd4E\xbc\x9b\n\xc4\x13d\xbb@\xf5\r\xa6\xf0\xf0K\xe1J\xac\x82\xea&gt;\x98s\xe4L\x05&gt;K\x99 \xbf)\x9e\xeb\x96\xf5\x98U\x80\x8a\xc5\xa9\xa7{\xc4t)W~\x1d\xa7\xf4\xca\xdc,\xe6i}\xc4A\xa2P\xddK4\xb4\xd5\xf8\xd1\xf9\x8a\x96L\xf7\x02\xcc\x1e\x0e\x9e\x7f\x11\x02\xcfM7\x15\x1a\xde5\xf8\x8a\x9d\x15\xaa\x85\xb3\xd6\xb53i\xeb\xfd\xa6|\xc1\xa2\xff\x00\xeb`\xda\xc3\xba\x83\x95\x93\xaa\xa8:!\xbb\x03\xaf8\x8b\xb0\x00\\\xee;5\x86Z\xcd\xfdA\xd8V\xef\xbd}0\xaa\xdbf\x1d\x11\xab\xca\xe1\xdc \xd1X\x83\x15e\x93fe\x84\x1e\x99\xd6\'\xf3\x0f|N\xdb\xdc\xef\x89\xa7\xea)/\x88\x00"s\x1d\xbb\x98\x99\x8e&gt;5\xf8cy\xae\x869\x8d\xdc\xbdN\x11_&gt;\xfe3v\xd17q^\xbe3\x9af~3S.\xa7\x89\xf8\x99\xea8\xb6\x17z\xaf\xcc\xa9\x86\xe9\xba\xd4\xbf\xa8\x18m\xcc\xe2\xf8\x06\ro_\x19\xf8\xff\x00\x1f\x15\xf1\x9dG\x99\x9e\x97\x1b\xc2!\x91Y\xa8IA\xaa\xce&amp;\x03_Y\x9c#l\xee\xb9\x89\xc1W\xe2F\x80^Wo\xe5!\x8a\x9boO\xf6\xcc\x02\x96\x9a?\x83\xbf,D\x03\xb9\xd5\xff\x00u\x0e\xb2\xe9\x82\xfay\x85\xb6\xc7.b\xb3\x86\x93\xee\r\x8b;\xbb\x8bY\x94\xca\x1e|Q\x89j\xd6\xe0\xcf&gt;\x98\x95k\x8d\xea\xaeb\xa9\xab\xad\xb0\xb3p\x17\x8ap{\xfe%\xad\x8a\x00-\xd1\xc9\x149\xcb\xfeu0\xa9\x9f\xcb1\x8c2\x01\x93T\xc5|\xb5\xbc\x98\xfef\x06s\xe7QG\xf8)\x89Z\xb6\xb5-\xbf:\xa6^m\xbf\x11L\x11\xc6wq\xac\xd6\xae\xf8g\xd4\xce2\x83c\xd4\x17\xa5f\xc5\xb8\x14\r\xfd\xb1\xf66\x08\xb3~\x8d\xc6\xb7\x8b\x14\x11\x82\xacu/t&amp;\x0b\xd4t@\xe0\x97x\xa9m\xe6]\xd5\xc5\x82\x97\x9fpzX;\xf8\xc9\xe3\xe3\xbc\xf5\xa8W+\\\xcao\xac\xb5T(\x19\xf9\xb0\x8fS\x88\xaecr\xb5\x83\xe3?\x1d\\E\x14cV\xcc\xf9\xd6\xe5\xf9\xf9\xb85\x7f\x96d\x9a\xf8\xb6fd\x0f\xfa\xe0:\xa448\xfb\x88Y\xbc&amp;,\x95\xce\xa0\xe1g\x10)R\xe3l\xces3\x99s\xf5\x9f\x9e\xf3?R[tqlR\xe0\xf3\xfe\x86\xa5K\xf9\xab\x97\x9c\x83\xcdb\x05+U\xbd%\x92.\x94n\'oag]\xb2\x92\x8fX\xe4\xfbE\xaa\xc0\xc0\xd5[\xc7\x82-\x83m&gt;l\xc2\x0e\x03~`T\xc8\xbf%\x847\xc3\x8a\x80Xw\xb6\xa6\xd0i\xa7|J:\x0fK\tB\xdf|FYk9{\x8d\xca\xaa\xf3/TY\xba\xf3\x7f\xc12\x81!w\xe5q\xa8k\x1d\xa8\xbd^\x8cA\n,\x16\xba|TF\x19o\xf0\x82\x84i\xac\xe1\x86a\xe6\x98B}\xba\xacO\xb4\x016\x02\xca\xb6\xfb\x97\xbc\xea\x1a\xdb\x8f\x17\x88\xc1\xe5\xc5x\xa86FZo\x8b\x95\xa2\r\xb34\xe8u\xff\x00\xb0\xc0H7\x97\x05\xcc\x8f\x84\xd9\xfc\xce\x82\xe6\xf1\x10\xeck\xdec\xf1J\xf8\x80x\x0e\x18\x81\x1d\xd6\xf5\nm\xadA1.\xa9YmK\x97|\xcbJ\x83\xcc\xb7\x0e\xa18\xab\x8bC\x15\xe5+h\xcd\xb6\x88D./Z\xc40\x1f\x19\xc4\xbf\x11\xf3.\xe7e\xce\xff\x00|\xcb\xbcM\\n\xa6o\xfe"\xf9\xc1,\x95\xaa\xfc\xcb\xddj\xf3\x00\xc0M\xee\xe7u7\x0f\x1f\x1fS\xc7\xc5\xcd\x0c\x17N\xb0\x8c\xd2+\x13\t[\xc7\xa9q"\xa1\x87\xa2?6|]\xfc}3\xba\xc4\xb2 \xee_)D\xe5\xf16\xb9\xa9[WZ\x1e\x12\xce\x9ew\x01\xa4]0W\x0f{\x95[ib\xece\xd1\x88\xf6\x80t\xaa\xd4!\xdc\x0c\x97E\xf8\x97\xf0\xe2\x8eV\x1cV[3\x1d\xa7\x15\xaeYq\x039\xa7\xe8j\x02\x00\xfb\xba\xea$\xe1\xf6\x8da\xbc\xbf\x1e*d\x1b\xea\xa8\xd3\t\xa7g\\\xdc\xbf\x0c\xb7\x8end\xb6q\x7f\xf5E\xa5\x15\x11w\xe95o\xb9H%\x0e}@WE\x8d\x1ec\x0e?\x96YH\xad\xb7\x10\xd4\xbb\xde\xe0\x86n\xfa\x85\xb3\xd3\xcb\x02\xb9\xd16\x0efC\xce\xfd\x1e"\x8e\xe8\xe5\xee;uv9\x85Z\x03\xb6i\xe5\xce\x83\x0bD\xe0L\xfe`-\xae\x02dF\xb1x\x8f\xa5\xdaU4QC\x16\x0c\xf1\x01\x8a\xb9p\xc5sr\xe5\xc1\xdb7\xc4\xb9x\xd7\xc5\xea8fs\x9c:\x94\xde\x16\xa9p\x04\xc6UF\xb9\xf8\xbd\xce\xe6\tm\xd1\x1a\x8e.^\xa3\xea9%\xe9\x97f\x98\xb7\xfe\x19vY.c=\xc6\xb3iw1\xf1r\xefM\xfc\xdf\x0c\xaa&lt;\xec\x0b\x076\xaaM\x9e\x8eQ\x8f\xa4\xa9\x06\xbe5\xf1\xad@\xaf\x9d\xc7\xcf\xca\xc5f\xc8\x97!r\xff\x00\xa5\xea9E\xc2\xe2\xe5\xcf\x1e\x9dA\xda\xfc\xd1\x7fD\xe7W\xd8\xe3\xf0@\x8b\x85\xfdO\xc6\xd3\x05\x9d\x11\x06\x0e\x0c\x0f\xee\x03)8R\xe5-U`\xceK\xd3\x034\xebN\xb7l\xd9cl\xbc\x06\xe9\xefD\x1eWW\xf9\x80\xe3?\xd7\xa8\x86\x875\xc4&lt;\xba\xea\x1a?^\xa1\x1b\xe8f\xc8R\xfc\x18\xef~\xe23\x83\xb7\x15\xfb\x96\x0c\xad\xad{\xdc\xa1\xa7\xdd\xca\x18\xedw2\xee\xa1L\x8b\xbf\xaa\x95%!\xef\xa6\\\x1c\x9e\xf5\x13b\xf8-"f\x01~a^\x88\xe2_\xf8V`Z\x81o;\x8a6)p\x99\xc6\x89\x8e\xa9\xec\xcc\xb6 zC\x18a\x14\x02\xcf\xd4\xa6\x00\xe6Q\x1aj+\xea\xa1\x8e\xce `\x89\xab\x83\x9f\xa8e\xbf\x8b\xcbR\xea\xeb\x19\x97\xfb\xfb\x83qS\x87\x9b\xc3\x1f\xb5#B\x1eJ\xb9\xba\xcc\xba\x9b\x963\xf1+\x14N\xf7\xfe\xa2\xdeq\x15\xc7\xdcj9\x9a\\n\xc8\xba\xb3\xebL_\xc4\xbdM\x8d\xa4\xe2_p\xc9\x8f\x8b\x9e\xd9z\xf7\x18\x16\xa0\x06\x07\x89\x9f/A\x00\xc9+nR`\xc1\xa8\x01\xf0\xce\xa1d\xc2~\xa7:\x8c\xe5\xbe%\xf9\x97\x88\xae\xd6R6\xcd\xdc\xc0\xb2x\x8b\x94\xfa\x98\xb7\xf4\xfee\xbe\xae\xf0\xdb\rMk\xee\xbe\xf5\x08K\xae2\xe1_[e\x16\xea\xbc\xe0\xfa\xa9\x91\x15\xa01OD()U\xb5\xbb\xaf\x12\x97V7\xe6+Iu\xb5\xc4&gt;\xcd\xc1C\x8aNX"\xb4\xd6y\x81\xb0\xbe\x8d\'\xd9-\x80\xaa\xff\x007\x10\xdc\xe5\xc5\xae\xba#\xdd\xe7%\xf7\xf7R\xfb}\xfa\x99\xd9\xf7{\x9c\x7f\x0b\xe3s1\xd2\xee\xea\xe5++\xc1{\xc4+.\xab\r6\xd4\xc8\xaf\xfa\xe6+\xb2\x1b\x80\xfb\x8d\x81\xb7\x01\xab\x9d[\xc0y\x8a\x0b\xce\xb1\tnj\xda\xdd\xc2b\xd2\x86\x18\xdbQ.\xaec\x85\x1cg\x88.\x17\xf32J&amp;\x10\xd8\xafo\xdc\xd1\x96\x8e#\xba\x8a\x99\xf3(&gt;\x92]\xbb}\xe2a3\x0b\xe0\x8f*\x96c\xcb\xf0\xb7\x10\xa4\xfb\xef\x9a\x97\xfc\xca\xa8\xeb\x96P\x0e\x10QWI\x12\xce*\xb5=\xea\xe5\xd7\x04\xbf\xc7S|\xea\\\\\x1f\x17\x82y\xb8\xb8\x1f\xcd\xf9\x97\xb6Y\x8c\xee-k\x1b\xd9S\x90\xb9]\xc3\xcc5\x83\xe3\xeb\xe2\xfd\xeb\xe0\xc3.:Xol\xd4\xea\xd6w\x0e\xe5\x06$\xa6\xf8\x81\x82\xd7S\x0c\x12\xf3/\xc4\xe3\xd3\x05x\x87\xc7\x99\x99\xc4\xcfS\xab\x97\x0b\xb3\x1eb\xd6\xe0\xc2\xf7m\xc1(?\xb80\xdc\xb5\xa8\x1bLx%\xc5\x85\x903\n\xe6\xf2n\x1a\xe9\x1d\x00D\x12]\xcafC\x9bM\xacQ\xe5\xa2\x8b\x81\xac@\x15\x1f\xb75f%\x8d\xa2\xed\xff\x00\xd9n\x0bUp\xd6K\xf3\xfef\xe8}7R\xd2i\xc9p\x19^\xb00\xae?\xf3*U\x1b\x1f\xb8U\x17\x8e\xb3\x1b\xf2H\xe2\x15p\x81\xcf\xf73#\x00&lt;b\xa6\x8d\xfdn)Zc.\x06\xfcB4\x10\xc6\x18\xa9UfYaPT\xde7\x05p\x06\xed\xb8\x0c^\xab\x1c`\x97\x1b\xc9\xe1.\x011\xd6\xa5\xd6R\xe9\x85\xee\x9aW\xb8.\xaa]\x9c6:Xa\x0bp\xdf\x9ey\xdc\xe1p\\o\x9e&lt;Ck\xceY\xc9\xa6_\xa9uY\xc9- \xc7^\xbfQWe\xc3\xb0^\x88\x07\xf1=\xa5\xd7\x05\xd7S98\x9c\xceL\x8c\xb6\x82\xa2\xee}s/D\xb7\xbc\xd6\xd9};\x97D_w\xccq\xe7?\xbf\x83\xe1\xb3\xf13\xf1\xf7.\xb8\xa9qrq\xa9\xa5Q\xf3^`\x98\xb8\xfb\xf8\xc0\x08\xaa].e\xdd\xc3&lt;\xdb\xcb\xdc\xddu(\xea~\xfdM_\xc7\xa9x}\xfc=\xdc\xe5\x13\x9ec\x0b\x02\x99\xac@R9\x83L\xde\xa6j\x08\x1a\xd8&amp;w~aX\xa9\xab\xfeH\xed\xd0\xb7\x06k\xddD\x80\xe1m\xcc\xa29y\x84\xcdm\nU\xbf|C\x0bJ&lt;\xdc\xb7M&lt;\xcb\xd6\xef\x96f\x80{\xdc\xa5j\xbb\xf1\xdcB\xb9\x0cKC\xbf\x15d\t\xf6!\xca\xa6%\x045\x1c:\x1d\xef\x17\r\xb1\x06\xa7\x08E\x88\xb4bA\x8b\x94\xba=T\xa7\x89\xefW2b\xe4\xc1V\xe1\x87^B\xb5\xdc\xbf\xdac\xb2\x12U,\x1f0V\xdag\xf3\xe1\x82;\n\x81\xa8\xd5q\xeeZ\x0eH\xb2\xca\xbf\xe2]6\xfbeq&amp;\xcd\xf9\x8e\xeb\x9b`\xb5\x0c\xbdB\x98\xbc&lt;j\rq\xcc\x1d\xed\xc6%\xee^jd\x9e\x93-\xd6\xa0\xbe\xc3\x1b\x81M\x88\xfd\x12S\x0e"\xf0%\xc7|\x90o2\xf9\xeb9\xf8\xd1\xce\xa2\x9d\xc7\xdf\xee]\xe7&gt;l\xdc]\xf9\x86\xcf\xfa\xa7\x17q\xa6\xe3\xceLSxG\x10\xff\x00\xad\x99\xd4\xd7\xa9\xd5\xcc\x07\xc3\x98\xbe\xe3\xa2\xf1\x08\xd0X\\\xb7\xe6\x1a\xe4\xc1\xc1k\xe2\xda\xf8\xf32\xcf!/\xe7_/q\xaf\xf8\x81\x8aJ\tt\x86\x89\xcb\xd3\xea?\xc6Rf\xeb\xea\x7f\xb7,\x9b\x82\x8c\x05\xd7\x02\xdc\x0eE\xa7\x1c\xcf\x98\x04(\x19\xeaR\x86\xad\xda\xbb\xa8U\xc3\xca\xba\x84;&lt;\xe6^`\xc7\xae\xf5\x03^.\xa9\x85\x8c\xee`]_\x19\xd4c\xbc\x11\xc2\x9c2\xe8\x7f\x92\x01\x04v_Q\xeb\xa5\x8ai\xe7\x89\x88&lt;f\xa3\x9b\xb86\xe1\xc3p\x91\xb9^\xf8CwiA\xb1\xd9\x02\xd4\xb4\xd3U\x0e\xc0\x99D\xb6\xba9\x0c\x11\xc4\xde\xff\x00\xb8\xa2+kW\xfeg\xbb&amp;n\\\xd4\xc4U{\xd4\xdf\x075\x19Y\xd7\xb8&lt;]q\x07\xcf0\xe4#\x85\x8e\xfa\x97\xca\x8dh\x96\xd5\x85\xfa\x97O\xdc\x1c\xea5\xadA\x0f\xf1P\x8a8\x7f\xf71\x9b\xc9S!Gwd\xc2\x8d\x12\xec\xbbu2\'\xb7l\xbb\xe6\xe0\xea\xe3M\xcb\xd6#m\xdf\xa9{\xd4,^?\x82+\xcd-\xcc\xb4s\xa9b\xb5^\x1dj6\x9c\xe5b3}\xf1/y\x98\xeaj]\xdc%L\xcc\x0c \x8b\\`\x0bj\xb4\x8bf\xa8\xc5\xb2\xc6\xbe\xa1\x90\x13uS\xcdF~a\xaf\x8a\xd7\xcb\x03u\xf1Y\x95\xc4\xa8\xda\n\x86\xaaZ\x04&gt;c\xc2\xa7t\x05\xac\xb2\x89\xa7\x83\x84\xfeb\xcd\x16^\rb:\x186\xd4\x03|\x93\xc6\x08`2\xbd\xf3~\xee8RR\xb3\x0eQY\x88xLm!\xc0\xc3\xfc\x91(\xa7\xc4R\xc1\xf7,\x8c\x1b\x94"\x0b\xba\x97j%\xb8\xe6W\x04\xf8k\xfa\xb8\x99y%\x89ar\xb8V\x01\x8e \xe5\x9b\xaaO\xef\x10\xb4\xb5S\xa7\xa8\x8e\x1b\xec\x84g-\xe4\x89c\xc1S(,(\xf5\x88R\xa9\xfac\x0b\x0f\xfd\xf7\x1e\xc1\xe4\x9b?PP\xb7\x9a\xdd\xce\rT\xd0\xdc\x11\xc7\x9c\xc3\xcf\x11j\t\xcf\xdc&gt;\xd6]n\t\x8d\xdc!Z~\xa5\xa1\xd4\\\x96\xff\x00\x1b\x06\x0c\xcb1\xb8\xa7Xf\xf4^"\x9d\xbb\x8b[\xc5\xce?\x92(\xee\xab;\x8a7\xa3\xf9"\xef\x7f}\x11\xc2\xc7)\xdcS\xa7\xee&gt;\xb9\x8ex\xfdj+\xc13\xf1l\xbe\x16b\xa2\x9d\xee8\x0c\xb3\x81W\x1b\\XL0\xb5_v\xc2\xcc\x12\xe5,\x0f3\xd7\xc7r\xfcB\x8a\xf0C\x8dFp\xcf\xe1\xea^\xe6\xdejW}|b\xa7\xb9\xd7\xa9\xde%\xd0SyD9\x87;\xcc\xb5\xa1C\x9e\x08\xf26vE\xbe\x18\xcec9w\xc9\x1dd\x10W\xaf\xb8TT4\xdc\x01T\x97\xea\xf75\xd6K\xba\xe6V\xfe*\xa2\x1cq\x99m\xbb\xb8\xf1j\xcd\xd4\xc0\xdd$\xfem\xb9\x8e\xd7q\xb0\xa7\xeaf\xd3\x17\xaan5\xbcb\xf7\x0b\x10\xaek\x8c\xcd\x1c&amp;a\x9a?\xc4a\x94+]0_{\xcaW\x85Ajb\xd7\xa9\xb0Vp\xef1\xcc\xa1Ek\x98\x96i\xe4\xc4\x00(\xd1\x1b-X\xf7\xc3\xaf;\x81N}1\x15U\xc6\x1c\x0c\xf3\x06\xa9\x02\xa1ec\x06u-\x02\xaa\x08\x85\xf6\xc5\x0cV9\xe6\x0e\xc2\x8b`\xee\x9f\xcc\xd1\xeb\x89\xb3\x7fqL\xa3(\xdf\xbb\x06\xb3a\x15\xc4\xca\xef0\xce\xe7\x1b\xf7\x8b\x97n\xe6\xbf\x1a\xbb\xdcZ\x1d\x7f\x13\x0cx\xdf\xb9\xaf\xe4\x18\xbey\xfc\xc5\xb5\xe3\x9f1w\xaf\xc5\xcf\xfb\xd1\x04\x1a\xd4\xb3\xfd\xb3\x04\xbf\xfc\x89(\xa6r\xce\xeb\xb9q_2\xf4h\xd4\x13\x1b\xccD\xb6\xb2\xd6\xe4\x82\xd0j\xb5\x0cE\xf8\x0fx\xf3.T\x1d\xcb\x98\x9b\x9dN\xb5\xb9\x8b&gt;;\x95\xa7\xe1\xc8\xf5Z\x9c\xbe\xe0\xa9\x8a+ik\xb9\x9e\xaeR\x1e\xbf)\x17v\x15\xac\x970\x9b\x07^\xbdJ\xd5\xcb\xb7m3\x15]~\xad\x9b\x97\xd7_q\xe1|o\xde\xe5\x85\xdb\xcf\xac3&gt;)x~\xe16\x87\xdb\x1c\xd2)\xc5\xd5\xc5@L\xff\x00$\xab/\xe4\xd7\xeeWF\x14\xcai\x9e\'\xdf\xb9\xc7Q7x/s\x1a+\x17\xcf2\xb6\xe3PF\xbf\x99\x81\xaey\x80\xe7\x18\xccp\xdd,\x13\xedphUe\xbb\xde\x18\xb0Q\xe8\xa7\xa8\r!\xbd\\\x02\xc2\xf98b\xaa\\a\xbd\x90R\x8e\xfe\x868!\x9e\xbb=J48U\xaf8\x97\x96o\xd6 \x1d\xaaI\x8b?\xa8\xb3\xef\x8b\x85P\xef=\xc7\xfa\xebPN\x8e\xe1\x93\x98\xb9o\xcb\x04\xfdq\\\xccg\x85V \xf1\x7f\xdd\\}\x97\xdc\xfa\xcc-{\xb9\x1a\x9bk\x11u\xb11\x07\x19\x8bo\x0c\xf7N\xa2\x8f2\xc4_\x0c\xfb5\xcf0j\xb8\xcc\x1fn&amp;\x1c\xee(\x89g\xe7\x11\x8e~\xcfL\xddLb\xe5\xd0\x99\xcd&gt;l\x973\xaa\xb9z\xd5\xcc\xce\x18H\xd0\xa2i\xa6#K{A\n\xe2L\xa4\x13D\xb9\x9f3\xb9C{\x95\xf2\xcb\x99\xb9r\x9e\xa5o\xe7\xc7\xc3\xe9\x8d\xcb\xf5\x16XV\x071\x98j\xbc\xf1\x0e\xf1\xde\x18sC.(\xf1\xdc\xe0o%\xe8\x8f\xe8jU\x05\x96V\x0cB\xefw\xee\x08\x8d\xf2\xe3\x98\xd0\xa1\xc7\x1c\xc7\xcfKy\x95\xda\xe0\xbf9\x99\xf4=g\x8285\xe4\xd6\xea\x1d(W\xd6\xae\x1d]Q\x1a\xef\x84wts.x\xdck\x9a\xa9s\xf9E\xe0\xd8\xcc+\x1b\xe1\xeaZ\xdf\xdc.\x02\x92\xf2(\xd9\xc4\xcb\x94\xff\x00:\x97\xd1\xcd\xc0\xd8nb\x96\xb5W1\x1b=os\x14a:\x80\xac\xe1\xee^ov\xec\'\xbe\r\x0c\x02\xf08\x808\x1b\xd9)u\xc48\xa4\xb82\xee\x9c9\x82\xfc\xc0\xc6\xb8\xe3\x89\xe9\t{1\xf5\x0b\xadb83\xaa\xd5V\xa7vF+\x0e\x7f\xba\x03\x01\xacR\xee\xea\xa1\xa5{\x89\xab\xddW\xa8\xd5\xf7-K\xdf\xd4m\xfe;\x8a\x86"\x8ag\xf2G\xcf\xf9\x95\x97\xc3\xad|?\x87\x88\xb8K\xb9\x9eZ\x7f\x7f\x07w=\xcc\xe5\xb9lS,EkC\x17\x15\x14V\xeez\xb0\x0f\x04\x0f\x9c@\xaa\xcc\xe7S8\x9c?\x04\xe2\x13\xc7\xc6(\x99\xc5\xc0j2\xb7\xef\xe5\xfb\x9e\x98\xcc\x84\xfa"\xb7~\xa7~Z\xbe\x06\xd9@\r\xf2\x19\x8b\xd2\xd4\x07r\xb2\xc8\xf1\x02-\x96\xce\xa6aN\xb4\xb9\x87\xcbgz\xc4\xd11Y\xdc&amp;\xcdb\xa5\xefh\r\xd9\xe2;\x88\xfd\x17\xa9a\xb4\xc5x&amp;\xb2\x9b\xea\x1e:\xc97\x9d\xef\xeb\x7f\x88\xb2\xff\x00\x94\x8e:\xac\xd6%\x19\xd26\xcd\x7f\x82$*\xb7\xe2r&gt;}\xcb\xf1X\xc0i\x94\x99\x0e\xec\xc1e/\xf9%\x08\xb5{\xbe\xa0mr\xdc\x85\xcc\x91T/\xce\xa6@5\xab\xb2(\x0c;\xe6b\xa5\xea\xc1\x81&amp;0:\x83l\xd6\xee\x01\xdb\xeer\xcb\xd5W\x12\xfa\xf4\xd4\x1bJ\x83\xce"\xe5\xfc\xc1\x82\xd9\x8c\xdc\xb5\x94\x96F\x99A\x8f\x97\x1fmu-.\xc8\x9eS\x95u)\x85\xceq/\x15W\xc12\xd5\xba\xe7\xb8\x9c\xe7\xee\xe5\xdeJ\x97\xd2\xdf\xa9u\x9f&lt;\x95-\xc6\xe5\xa9\xcf2\xc6/&lt;M\xde\x7f\xa8\xd6\xf7\x17\x9bw\x17\xe3\x19\xb7&gt;\xe7\x1eIq\xbc\xd63&lt;\xe0\\N7\x03\xc6\x93\xa6\xe06\x18\x81X\xeb\xe7\x18\x9a\x95\xf1\x8f\x8e\xf7-\xc5\x92\xbc3\xc4\xd6#\x1b\xf1/\xe1\xf5\x82&lt;\xca\x05\x8c=M\'EFT,\xb1\xcce,my\xe1DF\xc5u\x83\xd3(R\xe4\x80X\xac\xe2\xa8\x99/zt\x11\x83\r\xf1\x1c\xbf\xd49q\x83y\x98X&lt;\xc4\xa5|\xe6\xf1O\xbee\xb1]\xcb0WF"k\x1aM\\K[;\xba\x9b\x8aq\x074b\xf8\xea_b\xc6\xc5C%\xfetO-\xe9\x83\xd2\x02\xec%\xfe\xef?\x18\xb2\xf0&amp;$\xc9\x91u\xa8\xe6S\xcbx\x94\xa8e\\\x92\x02\xc80\xeb\xa9\x83@m\xdfr\xac\xe9\xb6\x9c\x8b\xcf\x92VX9\xe3|\xca\xc6(w\x99P\xa7\xb5\xf8\x82\xb6\x07\xa6;]\x1a\xb9PJ\x96\xaa\x86|\xfe\x17\x12\xb8\xc4\x1a\xe8\xc7\x9egC\x89\xa5\xd4\xc5\xdf1\xd2\xca.\xbcE\xf7\xff\x00s\x0cT5\xc9\xccPuj\x81\x82\xa2\x0c\xdd\x10\xec\xef\xfc\xc5\xde\x07\xb8f\x8b\x1d\x9eaZ\xa0\xd4P\x97\x7f\xde"\xf3\xc4\xd5cD\xc1\x97\\\xf3\xa9\x85.[\xfdTS\x9f\x80\x8c\xb7\x1d\x8f2\xfcy\x87\xa8=K\x82\x15\xd0A\xca\xd9\xd3r\xe0+\xfc\xa3xH*\x08\x9b\xad\xe2\x01\n\n\x8bQ\x9cg\x9d\xb3\x8f\x80\xaa\xc6u:\x9b\xbc\xdf\xc5n\x14\x04C\xc5\xb2\xb8\x9cc\xa9\xbf\x8a\xf5\xc4\xa8\xdc~\xd9t\x1bh%\x13\xcc,R\xda\x8a\xcc-a\x18\xbb\xd1\xf5\x15un\xbc\xc0\xe7\x97\xcf\x12\xa1i\xbf\xfe\\U\x1cmZ\xb8\xc5\x95}JE\xa3\x17p\xb9td\xd4\xb3\xcey\x80\x05\xfex\xb8=\xfd\xf3/\x13\x15&gt;\x87\xc4NL\xd3\xbb\x97\xf3a\n\xb2\x10\xfa\xa8k\xbd\xdf\x14\xb1O\xdf1\x93_\xe332\x14o\\b\x10_\x82_\xbc\xc2Z\xdc\x8d\x90cZ1\xbc\x91\xb3\xe3LY\n\xce\xc81\x8d\xb7\x00\xdao&gt;`\x8b6~\xa5\x9f\xa2\xd3\x0c\xd0qb\x06\xbcIC&amp;\\\x91\xbbp\xcf\x89\x92\xf2\xea\x06eWg\xa8U\x97\xfbh\x95\xf3r\xb5\x88f\x8bx\xe2V.\x932\xf4\x8e\xbd\x11\xd1yy\xd1\x1a\xe7J\xe3\xdd\x9bL\xead\xb8\xc5\x1a \xfb\xc1\x03\x1a\x9eG-\xe7\\\xc1q\x8cTp!\xc7\xeag\xce\xe3\xf0\xfajj\xd3\xf8\x94\xf2\xc6\xd3\x8c\xeeRr\xe7\xdf\xc3uC\xcef\x82\xc7\x88\xccY\xc3\xcc\xbaLC\xfd\r\xcb\xbb\xccL\xd6\xad\xe9%\x82\xefQ\x9b\x9b\x94\xd6Eg(\xa0\xd5C\xe2\xdcq9\x9c\x95\x0c\x96\xcel&amp;\xf4|\xebd\xfa\x9cC\xe3\xc2\xc1\x9a\xaf\x90\x15\xf5\x01\xb22\xc1\x8c\xa1QX\x90\xda\x88\x13\x08\x05\xbc\x84\xacS\xb7HS\x13n\xd9\x9dS\r9\x08\xac+\xb64\xcd\x0f\xdeQ\x1ds\x86Q\xa8o\xee\x8dGK\xee\xee"p\x95\xe3C\x11\xc0m\x83\x98\x0etU\xe3$\xdb4wf`\xacd=\x92\x9b;\xf1\xf9&amp;\x05\x05\xb3/]f^\xd1\x9a\x12\x95YV\xb0\x8f]bX\xbdR\x9c\x99\xf1\x1b\xc9u\x1d\xb1J.\xe1\xea\xb4\x17)\x90\xb7\x0b\xab\x8b\xb2\xbfp\x05\xf8\xc0\x9e \x0e\xedx\xf3\x1a\x07\x86z\x80Fl\x1d\xfa\x81^\xba\\\x90 PH\x99\x1a.\xe0\x95\x06we\xc6`\xbds\x16v\x19h\xe3q\x87#P\xa1\xf5\xeai\xf9w\n\xadg\xd2J&lt;[C+j\x9c1\x15K\xc3Z|\x9e\x88\x0bV\x86z\x8f\x07W\x99a\x827\xff\x00T\xa5\x7f}\x13N^X\xe2\xf0\xe2j/\x94\x8a\xb2\xe6\x17\x7f\xf5L\x99\xbdv\\\\\xccQ\xf5\xc4/&gt;\xf3\x15\x1d:\xd4\xdf\x9f\xc14\x7f\xae\xe3\x91\x1d\x19x\x98\x89\xfc^c\xf3\xac1X\x01\x8a\x93j\xc7(\x88\xa8\xd4\x0b+@\x81D\xc5{\x9e\xa5\xc3\xba\x95\rJ\xddTq\xa2.\x98\xb41\xff\x00\x95\x88[\xb3\xe7\x96^\xfe,\xeaa\xb8\x84\xc5\x95\xdbP\x88+\x9a\x89\x97q\x8b1\r\xab\xe4`\x85\x10Y\xcd\xbdA\x15\n\x0e`\x1f\xbd\xbcL\x11,\xa0\xaa\xa2X\x17k\xf3.)e\xf9\xc4!\nwFM\xdc`\xcc|\x8b6\xc5\xca\xeb\xf9\xbe\xa3\x93\xdd\xe3{\xfe\xe2\xbb\xb3\xf7\xb8\x8b\\\xed\xaa\x94\x98i\xf5P^2Q\xddEr\xf5\xe9\xdcp6\xd9\xab \xb8\x00\xf3\xf7\xa9Wh?\xfb\x14\x06\x02\x0f\x866T\xea\x15\x12\xc1)\xde\xbcJ{\x9a1|@ua\x9a\xaee\x89\xb3\xe1\x83\x06\x82\xb1\xdcU\xb5\x02\xefR\xe5\x8a5\xed\xe2_vi\xad\xd7\xaf\xf7\x13\x01\x94\xdb\xbf\xcc\x10\x8c\xfe\xa2\x88\xd9JVM\xc1\xa5\x8a\x9f\xcb\x02h\xe5\xa7q\xcc\xd8\xc1h\xad\x8f\x99\x8f\xa7\xc1(\x97x\xb8!\xc5K3\xc0K\xc7\xde\xd9\x90\xf4c\xb9Z/\xed1\x91\x9e}\xc3\xb7R\xa0\x1fk,j\xaa\xc2\x04\x06\xf3\x11\xc1\xe6\xa5\xd6\x9a\xb9\x83\x9c\xd4(E\x98\xe7\x82c\t\x82\xe5\x12\xc1\xc4\xe8.\x02\x9b1\xdc\xad+\x11f\x8d\xcc4!\xfc9\x81U\x1d\xb3Z8\x88\xdb\x9a\xc9\x17\xcb\r\xda\x828\xc9\xb7\x87Q\xad/Q\x02&gt;\x80\x94w\xc8B\x00\x18\xe2\xa6\xbf\x12\xf3\x7fL\x1f\x13&gt;~6\xfcyJ\xf8\xfa\x84\xacq\x01\xf8\xdb\x13P\xb9\xcc\xd5L\xca/p\xbd)3Qu\xf5\xcc\xbbcP\xb7\xdb\x8c\xb0\x92\n\xf1\x15\xeb`\xde\xd7\xd1\x05\x16\x95d/\xdd@GJ\x1eu\xe6\xa1\x9f&amp;\x846yb\xeb\x94\xd05~\xc9~\xa2\x9bkQt\x17\xa2&lt;A\x0c\xe5\xa6\xbb\xf14m\x8e#\xcepF\xaa\xc6\xaf\x1d\xf8\x89l\xe2\xb6|\xfa\x82\xe0\xbcq\xcd\xc0\xc2\xca \x94\\\xd9qo\x08\xadz\x89qZs\xfe\xa2\x94P\xd5\x11\x06\xf9c\xc4B\x1b\xd7\x9ecz\xb2\xc58\xdc\xe4\n\x13`e\xf8!\x95B\x99\x0fR\x8a\xe6_\xa8Pt\xec\xec\xf33A\x9cg\x98\xa9\xe6\xc7\x15\xcb\xa3\x11\xd9\xbd\nV.\x14\xb67\x04\xa5\xd2\x0f\xf3\x19(09\xae\xc9c\xe8\xd5s\xc0\x00\x14.\xa5\xcfd0n`\x1dx\x95\xaa\xee\x02\xd9\xb31\xa7O\x19\x98V\x9c\x8c\xc9\xbcT0\x88\xdc\xa6\xcdtNW\xfb\x9b\xd9\xa5\xb5\xa2\xae\xe0\x11ln\xb4U\xc5aKq\x98\x10s\xaa\xa8\x85\xe6\x00\x12\xf4\xd4\xd7\xdb\xd4\x11\x01&lt;\x91[K2\xbd,\xa79\x95I\xf4\xc6\x85\xdc\xdb|TC\xdc\xb2\xb0\xfd\x174z\x8a\xff\x00J\x99\xe2\x1b\xf2U\x116\xf2\x18\x8a\xdd\xac\xb8\xb5\xb9\x80\r\x04.\xee7-}\xa4\xd5[4Y3\x03\x17l/w\xa9\x9e~\x1f\xb6f\xf8`\xee\x1e\xb8\xf8\x02.\xe5\xb2\xe5\xc5\xad\xc7\x0b\x80fL*R\x1eMD&amp;\xe3-K\xd8}}J\x04\x05^ 0\xbf\x00ac\x08E\x92\xb2/g\x96V\xb48\x0e\xfc\xc5@\x05\x95\x1a\xa2 P\x1b\'\x16\xc2\x1b\x03\xdf\x8cJ`e\xa6"\x01M\xd35\xf2g]\xca\xcb\xc2c50\xf3\xe3\xbc\x98\xfa\x85z\xde\x89MV\x97d\xd0\xeb\x19\x83\xa3*?\xe7\xdc/W\x17T&lt;\xc4+e\xd7\x13\x7f\xb5\x1dL7\xf7\x9f\xdc\xa3\xc0\xc6~\xa5\xc4\xe0\x9f\xbab\x18d\x08\xa5\xc7p\x92\xd0W#.\xdf\xbf5\x05\xa4\xa3\x93m\xccL{\xcc[p\xb0\xe0\xbbe\xc9\x96`\x86\x91\xc3\xf7+\x92\xca2Q\x9f\xf0\xc1V^\xd5\x9f2\xfa\xa9g\xd8\xc09\xa6\x0b\x1a3.\x0bbs3\xd3\x0ew),g\x83O\x98W\xa6\xe5\xc5^\xf5\\\xcc\xc7\xa9w\x85=D\x00\x0f\xcc\xf0\x7fz\x9c\x930\xe59Gl\xca\xd3\xb6\xf1\xab\x88\xb49\xd42\xc8\x15\xc3z\x04\x01^\x8d\xc1\xaeW\xd4\xb1y\xcd\xe2t3X%\xa1\xaf\xa8-\\1\x16\xf3\xfa\xe6\x03{\x98Y|~\x89\x95w\x11\xab\x1c_\xf1(\xcd^h\x8e\x15\xd6}\xb2\xeetEl\xf5\xee\xa2\xe35\x1d\xa87\x19/\x90\x8d&gt;u\x19"\xba\\\xee\x89N\x94\x17\x02\\\xaf\xdc\xb6\xf52\xfeh\x96\xean]|h#\xc4\xcb\xb3\xe2\xd9S[\xf8f~|ED1\x88\xc9*\xb2A\x85\xcb\xcc\x15\xd0\xbb-p\x85\x9e\xea\x11[\xaa\x9c\xab$\xe9\r\xbe\x88\x8d\xe8\x87\x15k;F\xafU+T\xbb}\xc2_n\x13\xe8\x88\xcd\xa7$\xaa;\x9au(\xae*\xfc}\xc1\\\x94x\x83p\xdf4\xc3\x0c\x07\xdb0U\x9ee\x15QZQz\xff\x00\xae\r9\xd7\xbb\xf60\xa8\xff\x005\xa6/\xaf.%\xff\x00\xf5\xf7=3\xaaq\x00F\xb8\xb8\x83\n\xa4\n\xfe\xd2\xc4r.\xf8\xb8\xee8\xf6\x8a\xc3\xa9U2\xf5\x1d\xce\x9a\xe3y\xd4\x18\x8a[z\xddB\xc8\xe7p\xeb\xca\xc9p\x89\xe4k9%\xb1\x83\x98\xda\xb3\x1b\xd4]4\xc2j\xad\xd7\x1b\xd6%\xbe\x15v-\xc1\xdc\xc2\xc1b\x1a\x85J\x0e[\xd7\x12\xadS\x0e\xdcq\xccd\xee\xb9\xacA\x19\xc2\xc5\xd2\x9c2\x99\xdb\xb6]Fk\xdf\xee\n9F\xd8u\xc5L\xde\x07\x1f\xa8Y\xa1\\3F\t\x9e\x11,K\x98\xff\x00\x80AE\xf1\x19M\xe8\x9c\xef2\x8cuf!\x9bYsYY\xf7G2\xf5\xcf\xeaZ\xab\xa37e\xf2]\xc6\xc5\xbc\x92\xda\xdd\xd6\xf1\x16\x985\xdcq\x93\xc4v\xee\x8b\xf4C5\x93Z\x89\xc1\xc5~\xa5t\xd1\xd5JV\xe9q\xc7\xfd\xa8{\xd9\x89yva\xe7S\x99\x04&lt;O.\xa7\xf9cW\x04\xbb\x98\n+r\xa9\x87\xf3=/\xa9U-\x9b\x97\x99\x85\xdc\xf3?\xb8c3\x1f\x18\x95\xe6\x15(^a\xd8\xa0\xb2\xcbq\t\xca3\xd6\x13]\xab8\x8e\xd1\xcb\xba\t\x81\x93NWmDEt\\\xbe\x92\x8a\xd9\x97:\x07\xda\x107\x83\xc6\xe58\xc0\n\x07\xe2\x01\t\xa1\x9e\xe6/\x84\xdf\x10\xd4\xcc\x1c\xc8\xb8.\xb8\xcdD\xc2\xd9y\xca\x91h\x07\xbc\xf31\xb8\xa2\xcc\x7f\xbf1N7\xfb\x8dO\x9b\xa8;(\xab\xcc\xad\x10\rc\xa6SM^XY\x97\xcc\xb4h7\xa7\xf7s\x134s\x9f0\x065\xff\x00\x1b\x8b\x94sW\xeb\xe0/d\xb3U\xb1^\x16\xaaX\x1dn\x88k\x85\xf1W\xf7/X9\xeb\xf7\x07\xc2\xbb-W\xdf\x89v\xb2\x0b\xce\xb3pH\xd9\\\xe7\x0c\xcbd\x93\xeb\xfcE\x1be\x9b\xed\xd20\x13\x9e\xac\xd5@\xb5\xdcv\x90\x85\x05\xb9/&gt;"\x04)\xcbn\x8cT\x05e\xe6\x84\xbf,Ixe\x7fbib\xc2\xe0h,\xd4\x06\xcd\x8b\xb9\x985z\x1c\xf1s&amp;\xb3{\x0f\xe6Z\xec\x80\xc7R\xec\xc1\xd5.\x01\xcaFo\x99\xaa\xe8W\xd4\xcd&gt;\x1d\xc5JPb\xd1\xfe\xf7\x11r=\xcc.B\xfbf\xddmw;\xab\xb0\xac\xc0\x14\x07\xb8\xf6\x8f0\xd3\r\xff\x00\x11\xd6\x02\xf3\x8d\xc0\xb45z"i\xdb\x9bu\x16\x8c\xd7\xe3-\xc0Q`8\xbeu-\r\xd6\xa5\xd9+\xb9f\xda\x89\x1f\xd6\x98r\xc0\x00\xd6%\x06.g\x87\xea.&amp;&gt;\xa2\xf6\xddA\xbc\xceB=B\xde%Js=\xa5jp\xcc\xc7\x12\xcf\x81\xcf\x1f\x1d\xd1\x08*\xe6\x8b\xb4\x11\xda*\xbb\x98y\xf1\xc2\xb3\x02\x82\xdd\xb5!F/\xc3W\xa8\xd6\x92\xdc\x1f\x11\xc2\r"P\xbb\x06\x95\xbc&gt;\xa0V\xef\xac\xd8q\xe2\x18x5[`\x88\n\x02\xd8\xe5\x99l1\x9ab\x11?\xc9x\x87\x83y\x01lPp\xed\xbb\xbb\xc4vK\x8c\xf2\xc0r\xb1\x8ah\xc68\xcc\xa2\xb3\xbf\xc4\x1d\x0c\xfaF\xb9\xd3\xcdy\x8b\xdb\xbbX\xb5\xba\xbc\xbe\xa5k\x07lT\xd4R\x05s\xae\xa5\x1c\xdbhh\xe7\xee\x11\xf1\xa8SMK\xd8\xec}e\x97n\xc6\xee\xa1\xe2\xd7\x172(\x16L\x01\x9b\x04\x18\xc3\xb6K\xa3qx\x8e\xb3l&lt;\r9\x85\xd2\xb7Y\xa5\xbe\xec\x99\xde\r\x92Vfw\xc1\xa9KL\x08\x963\x0e\x89\x02\xc2kG\xf9\x82-\x0f&gt;\x88\x08.\xcb\xd90*\xe6\xf4nU\xae:}\xca=\x0f\x9f=D!w\xab \x8b\xba\xdc\xc2,}\x0b\xc0\xb1\x8cV\x15 pK\xc1\xb8\xab\x07\x0f\xa0\xed\x10\xa0-\xbcO6W%AE";\xbf\x12\x86\xd9C\x075\x12\xd4\xb9\xd5sr\xcb\xa0\xe9I\xb3\xc2\x93\xd4L\x19\xff\x008\xdc\xb4h\r\x97\x8a\x81\x1b&lt;\xd1\x8a\xf2\xc09\xbe\xf5\x14\xd2\xa6\xa9\x8arXr\xc5\xe3?\x8eb\xd7\x97\xf7\x8ee\xae\x97[\xd7\xf1\xa8\xe9\x19bec\x86\x87l\x06\x85\x1b\x06\xd8\x17\xc6!\xbe2z\x82\x1f\xec\x97\xf8\x8b\x89\xa7d\xbfP\xee\xe7.\\\xcdV~3\xdea\xe5\xd6\xe5i\xe7\xdc\xef?\x1b\xba\tVB\xbe8\x8b\x1c\xba\x12\xfd\xc6@\x97nf\xd9\x918&lt;T\xc3I\x03\x90\xfdE\xd7^#\xad\xdaR\xef\xc3-g\xd2\xef\xb9\xa6\xcdL\xe7b\x0c\x05\xad\xc6\xad\xdf\xb9\\5\xde.\xdc`\x94&amp;\x1c\xb5\x0b.\xe5le\x81K\xba\x98\x95uCu\x00\x94\x06=n\x01\xbd&lt;Jq\\k\xb8\x06\x81\xcex\x95+\x1bnQ]\xbc\xb5/\\o\x13]\xd6h\x95\xbb\xdf\x12\x96\xd7|@T\x85\xfd\xcd\x14%\xa6/&gt;#\x90-\xf0\xddGk?\x7f\xe9*\x98&amp;*\x94)\xcd\xc6\xf6\xb9U\x8b\xc9\x00\xd1\x9ci\x99\x1e+pT\xd9n\xff\x00\x11\t\xf4\xeelc\xf7\x9f\xfd\x94\xb7\x8b\x95AC\x87\xcc\xca\xe0*q\xc6+0n\x8f1\xc4]\x05@9J\x06\xd2\xa0\x96k/\x18\xc47\xc5.\xe2\xd1X\xfa\\\xad\t\x89Fy\x0e\xf7*\xc5\x17o\x1a\xc4)M\x96\x9cG1\x82\xb6\x96\x98\xe2Y\xa9\xde.Vo\xfd\xdf\x99\xdf\xa6&gt;!\xb0N\xedfQ\xc9\x8fG\xd4H\x98\xd3&gt;&gt;\xe0\x0c)W\xa0\xdc\xa0N5\x00\xa1\r\xf7\x10\xb1M\xa8%6\x82\x94\xb8\n!Wc\x96\xeau\xb5\xebq\xc8\xa9\xe2^)\xf0u\x06\x8fn&lt;\xa4\xbb\xb3\xf4\xf9\x97\xcb\n\x1c\xe6\x95\xfb\x83NS\xea\xb5\x11\xd3\xfaCp\xb4V\x08\xae+w\x04\x86IuR\xb8\xab\xf3\x1d\xbeS.\xc9J\x95\xc4\xf2K_p\xc4\xbf\xacB\xf6\xe7\xd4T\xde\xe5\x8c\x13\x96v7\x0b\xb9e\xc2\xa1S\xea\xa2\xd0\xaf\x15r\xd1i\xada\x84\xd9\xca\xbb\xba\x8a[4G\x00!o\x16_l\xe9\n\\ps\x19|\xb8\x8af\xe4\xad\x11\xb6\xc3\xed\xab\x98\xa8\x1b\xe3DNk\x9f\x16\x93\xb0\xea\xeaX\xc2^\xee7\xa3\x03\x85n#\xff\x000\xc58?\x88-s\xf9K\x04\x0c[P&lt;\xb3\x1aQ\xce\xbc\xd4\xa0h\xda\xcdr\xf9\x94?\xb6\x97w\x00_"\xf6\xf9\x81\x8e\x10\xcaV\xb2)f\x9c;\x94}Z&lt;\x81\x1ee\x91o\xb3A\xc2\xce\xdf"[;\x9b\xa6\xde7\xd73\x05v\xf7u\x12Z\xd1\xf7\x109D\xed\x95Ct\x05y\xcb\x05\xf9\xdf\x0c\xd8\xff\x00\x81qTV\xa5W\xb6\xde\xe5o\x1e\xa5sgC\x03v\xd6\xfa\x95\x96\xf0J:W\xa9\x8a*\xb8\xa2"-b\xb5\xab\xfc\xcbg\x1f\xbeH\x8d\x91\x05\x18\xdc\xedZ\xed\x84\x8c\x8a\xa6#4I\xfd\xc2_-*\xfbf\xcd\x06\xd2"\x880\x0791B\xa5K0u\x02\xd1V8\xdc\x01u\\\xb0\xfbl\xe9t\xb8\x1d\xd4\xae\x8f\xbc\xcaQ\x9b\xaf\xeb\xdc\x05\xb6\x8b\xac2\xd4%\xec\xbb\x85\xa5\x9c\x18\xc5^ 4\xec\xdez\x86\x05\xe1\x8d\x91\xc1\xe8\xd6\x0e`\x12\x84\xc9r\xceY\xe2\x15\x97\xec^\xe3r\xdetAK\xc2\xe6\x82s\x1d\xf1\x9d&gt;I\xf8K\xee\xa7?\x15\xd5L\xbb\xd6\xa6&gt;\xd8Y\xee_\x08&gt;}E\xbd\xd4\xa0n\x1d\x0ef\x0f0\xc5\xe7\x89\xea\r\xc7&gt;\xfa\xf8\xad\\[\xebp\xa7\x04\x04\xa6\x94y\xa9x\xd6R\x87\xcc\x84Y\xdf\xbb\x8e\xb1\x0bn\xe9\x96f\xf8\xaa\x8d\x1b\x06w*\x99\xad~\xe7E\xa8\xef0J3L\x06.\x15\x8d\xfa\x9a\xe2\x7fiB\xbfQ:\xe1\xf5\x13\x03\xd9\xd50\x17u\x8d\\\x00\xbb\x18\x9c\x96\xbc\xfe&amp;k\xe8\xc6sp\xb7N\xa5\x17\x83{\xe2\x00\tF8s-\xd6QW\x95\xb5U\xc1\xaf\x11\x96S\xc7\xc4\xa7b\xab\x04w\x1e\x1c\x11\xbew\x13\xdc\x85s\xe7&lt;\xdcsD\n{\x8bB\xafVT\x08\xc1\x80-\xdb(c\x17\x7f\xa8?\xc3\xf6@;\x8be\xb2\xa1]\xd1e\xad\xd9\xc6v\xc1YY[\x89\xa0\xc6\xbc@\xce\xabz\xc3\x01\x90\xf3\xe70\x17\x05^\xdbe\x1b\x17\xfbH\x98\xf3\x14\x10\x99\xc0\xc2\xd6w\xa5\xc6\x87\x01\x95\xb0u\xe9\xd4\x0bP\xa9\xcbq\xe9\xb7\xf8g1\xda\x8c0\x9d\xf6\xfbI\xe9\xd4\x10v\xaa\x12\xe0\xd1}@\xa9j(Q"\xe0\xbf\x7fp\xb5d4\xea\xe6k\x06E\xcf\x12\xceI\x93Q5r\xc1\xa6\x80Cd\xd5\xe8\xc5L\xbc\x9ag\x15\xafu\x01M\x12\xae\xec{\x8d\x98.6s\xea\x1cZ\xd3\xac\xcb9\xb3\xd1\xaf1G&amp;\xfdf8Y_Lf&amp;I5px k"\xd5\x0c\xb7\x1a\x99\xca\xf4&lt;Bg\xc4\xec\xbfs&amp;\xb8\x86r\xd6\xf5\r\xca\xf1-\x0f\xbeu\x12\xd14e4\xa6\xe6\xd7\x0c\xde\x8a~\x17-\xdb\xea\xa6\'\xdc\ns\x1c\xb7\x08\x05\x05\xdd\xf0C\x15\x8c\xb6,Y\xb6\x96\xd6\xb9\xf7,\xd0\x15h\x0e\xd5\x81\x02z\xda\xdb\x0f\x1a\x91L\xc3\x1fq3F&amp;\xa3\xb4Jh\xfdD\xce.Qe\xc6\x95\x11\xa2\xb3\xee6\xc0F\x8bx\xff\x00\x100o\xcf\xb7.\xe2\x0ev\x05\xc1mm\x94(\xdf\xf9\xa9j\xf38[&amp;\xfc\xca\xba\x1b\xfe\x0f\xd4\xb6okg\xd3\n\x0f\xaf\x10\x0c\xf7\x00\x9c\xdc/\x8c\xbc\xca*\x18\x08\x96\xd69\x8f\x1d\xd8&lt;\xaa\xd8\x08\x8a\x83V\xc7\xe7\x1b\xab\xca-tD\xf9\x11\n\x00)\xe3\x12\xa5e\x8eP\xaaM\x0b\xcb\x04m.V\x19D\xa2\x87\x03_LA\xcd\xabx.U\xddf\x00\x9d\x8c\xc1\xa1\xa7\x92\xf5S\x84u\x9e5\x12\x80Zl+\x84\xb8\xe1zg\x07,8\xdb\x03t\xc8 \x9a\xb0\xee\xe0\x81\x04\xcf\x1d\xcb\xcf\x1a\xa9\x92\x91\xb0\xd3\x13W\xae\xae\x0b\x85!\xab\x86J/5\x8b\xf3\xe2S\xc0\xf8\xe6\x1d\x8cb\xbe\xfd\xc0\xa6\x139&amp;&gt;n\xb1\xc8\x96\xf1\x1bn7\x8ai\xb44\xcf\xc1\x00Z\xd1cN\xdf\x969\xb5t\xb7\xc4\x04l\xba}T\x0bo\xf6tC\xa5\n\rn\xe2\x82\xb2\xc6\xbe\xe6\xb8&amp;j\xa5\x85\xf3D\xb8sbB\x81\xd5y\xb9B\x9c\xea-\xde\xb8\xc4\x1d\xae\xeb\x17\xe5\x8b{Q\xd7}\xce:7\x84\xfb\xdc\xcePxs\x037\xf5\xbd\xac\x06\x11x(#\x00\xb6\xbc\x98\xb5\xcb\x0b\x01s\xc7\x19\xa9\xc6n\xf9\xfa\x81l\xb3[x\x99\xc52\xc6R\xce!~w\xdd\xe6_\x0b\xc4\xb5j\xe6\nb\xcc\'3\xd2{\xb8\x8ej\xaeS\xabc\xfb#i\xc5\xf6O\'\\\xcc\xa6X\xbb\x83\xba\xacM\x1b\xc5\xe6\x16{Yc\x8d\x81Mr\xd2\xb2\x8d\x156\x0bG\xee&lt;\x0b\xc8\xacZ,p\xf6\xf9\xbb`6\xf6:{\xb8.}0\xb3\xd7\xe24m#\xae&lt;2\xff\x00\xf2&gt;\xe6{\xfc\xc0\xec\x9b\xf1)\xe51,\xb6W/i\x13\xb6\xf3\xb9T\xbf\xd4\xa6\xff\x00F/\x1eb\xdd\xaa3x\nV\xc6%\xec3\x1f&amp;\xec\x88\xd3\x91\xdd\xc3\x97\xf4:\xe6P\xe6\x19\xbb\xbf{\x89\x8b\xccq\xc9)\xe5\x04\xba\xa4\nl!\x0fl.v(\x9ea\x134\xaa\xdeag\x19\xee\x92,\x10d\x0c%F\x88K\x16\xf0\xa6h)kx\xc1\x1b\xa2\xb1\xc3K\x82\'V\xfb\xa8h\x0e\x8b\xf3U\x98Z\xad\x17wW\x0c\xcc\xde\x9e\x82UX\x13\xfb\xf1\x0b05\xba \x1a\x02}\xdb\x12\xa6m\xe5\xfc\xef\xd4\x17/\x99\xa1\xba\xfc&amp;#g 3\x9cq92\xeb\x86X/\x05\xaf;%;6~\xa5\xb6\xd61\xb2f\xd5\xc3-\xb5w\x83x\x8aAmozx\xccK\xbb\x93\xec\xa7\x9f\xe2r\xc6\xdf\x94\xd7\xaa)1[\xa0\xda\xd5m\xad\xd7\x99H\x02qA\x1c}\xc2\xf7\x17\xac\x0c\xaasr&amp;o\x18\xd2\xce\x0c\xf0&gt;\xbac\xbe\x13x\xc4`N\x87\x8a\xafp^\\pc\x8e\xa6\x02\xc1U%^\x88*\xf3x\rf\r\xb7_&lt;\xc7/\xca\xc6\xac%,R\xd6Vo\xf1/\xc1E^7\x12\xbc\x87\x9dE\xe9c\xba\xdc\xdb4c\x16s\x17E\xe3\xc4-B\xdbH\x1e1R\xd4W\xa8.\xf5\xd4Y\x0e\xe0\'[G\x01\x9e!Fa\x86\xf9\x08:\xa3=35{ \xf8\x99\xa6\xcf\xbb\x89\\&gt;\xa0\x97\xb6\xbc\xcc\xaa\xa5\x8b\xc6u\xddB\xeaUV*R\xb5P\x1d81\xdeJ4F^\xd1\x1b\xd4\xdb=\xce&amp;\x97\x99\x12\xbb4\xa8\x06\xc81\xbc\xc4\x86\xda\xb1D\x18\xed"X\x08\x03\xd1%\x18:?\x9d\xcc\x80\xf7\x9a\xa8\x84\xc5\x81\x89l\x83\xce\'\xbe\xe6}\xb5?N%\xe4\t\xc8&amp;SP\xa1o\\N\xbc\xca\xd9Y\x8d\xe7\x9d2\x84\xaf\xf0\xce\\f\xe6lC\x8d\x98\x94\xde\xdd\xb9\xd4\xc8\x0fQ\x1c\xdb\x8a\x8d3Z,D\xac\x8fm\xce\x1f\r\xf8\xb6aE\xa7&amp;+o\xa7\x8a\xbf\xd2]\x03\x18\x15\x16\xd2\x17\xeb&gt;\xe4\xaf\xac\xaa\x01eZ\x9e}=K(\xed\x9b\xd6\xae\x00_\xb3\x97\x99\xcd\xbfK\x80\t\xbb\xc8&lt;\xc1\x15\xc6\xea\x07y7L\xe4\xd9\xb30\xe7\xbc\\+\xad\x84\x1bUe\xaa#n(\x96]i{\xc9r\x92\xdc\x1b\x98^.\xb0\x11\x059\xa2\xa9\xb9@0\x14{\xcc\xdcVi\xd3\x15\x0e\xc4p-\xd2\xe6\x9a\xa8\'\x8f\xa1\x0bU\xac\xba"\x8b\xb0\x05\x12\xc5-\xb1\xd6Kc\xd3(\xb3[\xf8\xd4p\xebs\x98\x94\t\xcd\xd8\xaa\xea\x89 \xd3ht\xb7\xcc\xaa\xb7F{+\xd4\xb7\x17\x8d&lt;?u\x1b6\x0e\x12\xfd\xf7\x12\xc9\x92\x8f\xde|\xcc\xac\xc9\xbf\xe7!\x987L\x92\xae\xefL\x15\xb7\xb72\xcc\x00j\xea\x94\xc5\x075\xe7\x17\xb8rE\\6\x99\x8e\xdd\x973x\x16g\x7f}L(\xa2\xb4\x11U\x14\xf0\x81\xbc0.\xae\xc9)\xd3\\kQc\xd83\xea\x7f\xff\xc4\x000\x11\x00\x02\x02\x01\x03\x03\x03\x04\x02\x03\x01\x00\x02\x03\x00\x00\x00\x01\x02\x11!\x03\x101\x04 A\x12Qq"02a\x13\x81#3B\x05@Rr\x91\xb1\xff\xda\x00\x08\x01\x02\x01\x01?\x00\xd9\xed\x8d\x9a\xd9\xf8\x10\xb3\xb3{P\x96\xefj&lt;-\x91-\xe8\xaf\x03\x1dl\x95\x89n\xf6B*+\xb5\xae\xc7\xc6\xcd\xf6\xb1\xb1+\x10\xb0&amp;&gt;w[p^\xde\x0f\x05\xb2\xf7\\\xee\xf7[y]\x88[{\xefB\xb6\x9fe\x8fu\xbboom\xde;\xb9\xbd\x96\xee\x86\xb0\'\xb2[\xbf;\xad\xec\xbd\x90\xbbl\xae\xf5\xbb\xddr\xf7|\xee\x93\x16\xcd\xad\x96\xed\xe3ty\xdd\x9e\xe2]\x8f\x93\xdcB+\x83\xcfc\xfd}\x8a\xd9\x8f%\rev\xd0\x97\x05mx\x1e\xc9\x142\x87\xb2\xe4[1\xec\x84y\xd9\xa3\xd8B\x1f\x82\xb3\xbf\xb0\x8a\xa6V\xfco}\xab\xf7\xd8\xc5\x94x=\xb6\x96\xde\x13\x11\xec7E\xbd\xd5\xf6=\x97\r\x8bg\xc1\xe3d\x85\xb3\xddx\x12(\xa3\xfa\xdf\xcfj\xda\xb7\xf3\xb2\xc6\xef\x81\xed\x15\xbb\xdd.\xc7\xba\xf1\xbb\xe0\xf0!r"\xbb\x17\xc7\xff\x00\x01\x9e{_ev\xa1o\xe4{-\xd9B\x10\xb2{v\xc5\xfe\xb6]\xaf\xec7L\xe7\xb1\x9c\xbd\x90\x8bF\x1e\xf4$\x85\xb3\xe0CB\xec{\xa5\xbb\xddQ\xec&gt;V\xcd\xbf\xb8\xc5\xd9\'\xce\xd6!q\xb3\xec[\xbd\xd0\xb6l\xf0-\x97b\xd91\x0f\xb6\xfb\x9b\xed\xf1\xb3\xde\x84\xb7l\xb5|\xed\xeaK\x96K\xaa\xd3O\xd2C\xa9\x84\xa3\xc9\xfc\xf0\xc52\xef\xce\xe8\xf01\xf8\xd9p/\x1b#\xdfe\xb2\x16\xf7\xbb\xf8\xed\x7fa\xed\xe4\\l\xd9)ylz\xf1\xa7\xe4\x9fW\xe8\xd5\x8f\xb0\xfa\x98(\xc9\xdeQ\xa9\xd4\xcesu\x84\xcfS\xbb\xb1j5dugb\xea\xa4\x94N\x9f^:\xb1V\xf6Okc\xdb\xc0\xb9\x16\xde\xe5\xf6!\xec\xb7\xf3\xbd\x14&gt;\xfe\x0bc\xe3e\xb3\xe1\x9a\xda\x91I\xc5&lt;\x8fR\xa7/bNM\xe4\x8c\xe6r&lt;\t\xb1p\x89K\x84ij=9&amp;\x9f\x93KQjE4\xc5\xb5\x0ft\xf8\xd9\xd5\xf6\xf9\x10\xda\xbe\xd4-\xdfr\xec{\xdaF\xbe\xb2\x8c]3WZr\xd4m1z\xaf,\x9cR\x84i\tP\xf0\x98\xecN\xcd?c&gt;H\xaf\xd9\xa1\xaf-9*x4\xa6\xb5"\xa4\xb6\xbe\xc8\x8bf-\xd0\x87\xc9\xc1\xcb\xdb\xc7ke\x8fe\xb5\x8fd\xcb\x11&amp;\xa2u=R\xd3\xe0\xd6\xea\'9Yl\xd0\x83\x92v\x89\xaaH\xa8\x8fd\xa8\xd1\xa74j\xc7\x96&amp;Q\xd0\xeb\xd4=-\x8fR5df\xa5\xd9\x1d\xe4\xf6LB\x11y{.\xf6\xf6[-\xec\xb1\xe4\xa2rpVk\xf5/\xd3\x85\x83SU\xcd\xbb\x1a\xe5\xb2\n\xda4!ZqU\xe0\xd4Rm\xa3\x8b\x1b\xd9yf\x8a\xff\x00,(\xd6_C\x7f\xb1\x0b(nQj\xb9%\xaf*\x8d\xbe\x0e\x96~\xa8\xfa\x85\x9d\xe3\xb3\x1fb\xd9y\x1fg\x9d\x98\xc7\x9d\x93b\xdd\x9c1\xf3\xb5\x9dWQ\xe9\xb8\x92\x9c\x9by\x12\xb7&amp;\xf9\x1c[\xbb4 \xbf\x91}8 \xfe\x96NY&amp;\xed\xe0y&lt;\x7fb\xb2-\xc6J\x8dU\xfe*\xfd\t\x11y\x1b\xf2N\xde\x11\xd3\xea\xfa"\x91\xa7+[\xc7\xc6\xcf\x8d\x96\xc8[Yg\x8d\xebg\xd8\xad\xed\xc0\xf8\x1b\xecxM\x9dWP\xbdRBm\xe5!G$\x93\xf4\xba4\x13\xab\xfd\xd0\xf1\xa7\x82o\x0e\xc7\x82\xc4\xca\xc1\x18\xdc\xe8\xd5\x7fCC^\xc5P\x93h\xfe7\xe9#:gI\xab\xea["#\xc2\x1fj\xdb\xdf\xb9\xb1\x9e\xdb\xd6\xcce\xe1\xf6&lt;\xa6\x8dl\xea\xcd~\xcc\xa5\x81\x9f\xf3\xcd7\x83M7\x08"\x7fL\tJ\x9eF\xefd\xc5\xc2f\x9e%h\xd4\x9e="yG\x828L\x87\x06\xa6%\x93\xa4\xd5\xf4\xc9/\x16A\xdcS\xf1\xb2\xe0n\x89q\xdb\x1e6\xf0g\xb5\xefUbL\xab\xd9\x97\xd8\x90\xd18\xd6\xac\xeb\xdcQe`t\xfd8\xf2A_\xf1D\xea\x12Q\x1f#[E`\\$\'\xc3\x1b\xb93\x84,28i\x90NQI\x9dT~\xb7\x82\x18gM?T"\xaf\x84-\x9a\xb2B\xec\x8d\xd6\n\xfbky&gt;\xd42j\xb5g\xf2I4\x9b\x1a\xf4\xff\x00DW\x0f\xc5\x1a1\xbdx\xfcY\xd5I+L\xab\xb2\x9ak\xd9\x93^\x99\x11\x12\xe1\x8f\xc6\xcf&lt;\x89U\x11\xc9\xa2\xf0\xce\xa6\xd9T\x8e\x93_\xd0\xfd&amp;\x94\xbdH[=\xd6\xd1\xfbu\xbbx\x18\xf7[\xc9\xd6\xac\xfeY&amp;\xdb%\xc9\x04i$\xb5%\xff\x00\xe2ur\xcdU\x9a\x92\xb6\x92:u\xe9\xe7(\xd7K\xd5dy\x17\x81\xff\x00\xd1\x83\x97\xfa\x13D\x11\xa3\x8e\rW\xeaW\xe7\x81\xe0\xa6\x9cN\x96K\xd0\x85\xb3{3\xce\xcb\x8d\x9f\xdb\xb1\xbe\xd4&gt;6\xea&gt;\x9dmE\xec\xc5\x96\xac\xf3\xf2Aedx\xd4\x9f\xc1\xae\xfe\xbeM\r\x19\xea\xcb\t\xbc\x90\xe9\x1a\x8eRGU\xa4\xe2\xda"\xb2.G\xc0\xd9\x05\xea\xe5\x18\\"5\x8c\x9ak\x16I\\o\xf6%t\x89\xa3\xa5\xd7\xfe7M\x9az\x91\x9a\xc1u\xdc\x86=\xde\xe8\xf1\xd8\xc6\xec\xb7\xba[1\xbag]\n\xea_\xef%\x8dY\xa0\xbe\xb8\xa2\xeeZ\x87Q\x06\xa6\xd2:\r\x15\r4\xdf,kA\xc6Ir\x96\x0e\xb3N\xe3\xea\xf2U\x10\xe5\x0f6\x86\x8e\x9bMU\xb3^\x11\xb6\xd1\xa6\xf3\x93M}7\xfa\x1a_\xc7\xfbR\x12\xac\x92\xca3\x16\x8e\x86WY\x1f\x1d\xcb\xc1\xe4}\xb6\xb7\xf1\xbb\x1fb\xf03\x1b\x7f\xe8\xc6\xb5!/te$ygM\x1f\xad\xb7\xc2V[\xe7\xdc\xd4\xd5\xfa\x99\xd1\xb5=\x14\xc6\x92\xe0\xea\xb1\xa6\xd8\xdd\xdd\xfb\x90\xe5\x13\xc4\xda=\x0e\\\x1aZ\ti\xa3\xa9\xd3pf\x9b\xceM\x1bp\x7f\x03_C\xf9#YC\xe4\x9a:9\xa4\xd0\xf8]\xa8^\x07\xcfr\xa7\xb2\xdd\xb3\xcfb\xd9\xb1\xed\xff\x00\xa1\x05-(\xba\xe1\x9e2D\xd3\xfa4&amp;\xfc\xcb\x04\xb0\x91\xa9\xcbg\xfe\\\xd7\xa6Qlq~Y\xd7\xeaR\xf4\'\xc8\xf3\xfd3Az\xb5"\x9a5]\xea\xcb\xe4\xe9b\xa4\xd1\x14\xb85\xf4\xfdP\x92b^\x99\xd34?\x06\xaf\xc1k\xf8\xbeYo\x92\xb2\xc9\xa4h:\x9a\xafr\x19\x84{U`C\xcb\x1fz\xdd\xf6";=\xf5`\xb54\xe7\x1ft4\xd3\xf4\xfb3M[f\xaa\xafD/\x0b\x92\\#P\xe95\x7f\x8eh}Lk\x1e\xc7Q\xaa\xf55[\xb1;gG\x0fT\xdb~\x11\xaf\x8dY\xfc\x9d\x0c\x9f\xae\x98\x95\xb2i\x1a\xb1\xf4\xeb?\x93K\x10\x7f\x04\xa3\xf4@\xe4\xbf\xaa\x89\xac\x1d:\xbdx\xaa\xf2~\xbbP\xb6|\xed\x9e\xc5\x9d\xdb\xeeC}\xbdn\x87\xa7S\xf9"\xb0\xf9:m)I\xfa\x925\xe1\xe9\x95g\x8b\x1d\xb7D\xd1\x1cP\xb5\xdaO%\xd9\xa3\xa6\xe6\xd1\xd3\xe9z#tuQ\xa9\xd9\xd2\xca\xb5 \xc5\x8af\xa4\xd2\x8c\xa4?\xf2;#\x8d?\xe8\x9f\xe3\x05\xfa$\xaa\x84\x92\x92d\x91\xd1A&gt;\xa3&gt;\x17g\xbe\xd1\xe4\xf1\xf6\x10\xa8x\x18\xb8\xecH\xa1\x8f\xb2pS\x83\x8b4\xf4\x9e\x94(\xea\x13\xbb\x1b\xca5\x95~\'\xc1X\xa3KFS\xa5\\\x1d7L\xe3+\x12\xc5\x1ddnTi\xb7\x19\xc4\xd3\xd4N*\xdf\x83\xac\xd7\xc7\xa53N^\xe5\xfd6\x99\xab\xcc~\x11,\xb2\xc5\xf8\x1d\x02\xb9jK\xf5\xdc\xb9\x17\x07\x17\xde\xb9\xd9\xbe\x07\xb6|o\x1f\xb1\xeeu\tx\x1avj\xc7\x81*\xb3N\x1e\xb9%\xfb4\xb4T"\xb0\x88\x96u\x9av\xac\xfcfF\x7fO$\xe4\xd9\x17\x91&lt;\x1a\xcb\x8f\xdcEm[\x17,\xe2\x8e\x8a&gt;\x9d9\xcb\xdd\xf7G\x91v{n\xb6cy/\xb5\x0e\xdf\x7f\x83\xa8X\x1f\xe6\xc9\xc6\xe8\x9c}(\xe8\xb4\xfdm\xca\xb0\x8a\xa1J\x9eK&amp;\xbdp\xa3\xa8\xd3p\x9f\x05\xd0\xc4/\xc4\xd4w\x1d\'\xe6\xa8\xb6\xacO\xc9\xcb\x8f\xc9\xa7\x0fF\x9cc\xfa\xee\x8f"\xf3\xf6d\xfb\x91\xc2/=\xc8\xac\x1a\xa94\xcdH\xd4\x90\xcdK\xc6\x0e\x9bO\xf8\xf4\xa2\xbfD\xd8\xa0\xda\xba\xe0\x84\x1bD\x0e\xbe9\xba\x1a\xf06\x88\x94\xfd)\x91\xce\x92~\xcco%\xac\x1d&lt;\x1e\xa6\xb4P\xfb\xa3\xc9t\x87\xc7{\x18\xfbQ.\xf8\xa1\xb2n\xd3&amp;\xac\xf4\xb3OMJhC\xcc\x94H\xc61\x8d\x0f\x82\x0f2:\xe7p$&gt;H\xa1\'H\xd2\x8bq\x9f\xb1T\xccR?\xf3\xf4\xf19\xb5\x9e\xf8\x96\xe8~;\xe4\xef\x1d\xc9l\xdfr\xe4XD\xe4Hk\xeak\xc1W\xc1\xa1\x1f\xa9\xbd\x93\xa9#\xd4YMM\xfb3\xad\xfcZ\x1f%s\x81pC\x83\xa5\x8d\xc6F\xb4=:\x8e\xcd\r\x07\xab5\x8f\xa6\xc8\xc6:pQ\x8a\xef\x8f;=\xd6\xed\x9c\xe4\xbe\xd4;\xefCX%\x99\x0f\x82|\x9aj\x8d%\xce\xc9z\x8a\xad\xae\x9f\xf4u9i\x13\x8bL\x81\x84\'\x8aH\xe9)i\xa4OAj\xb4\xcd=8\xe9\xaa\xa2]\xf0\xd9\xf8\xdb\xce\xf4I\xf7-\x9b\xfd\xf7\xc4w[2q\xc9\x1c\x1aWL\xa1s\xba\xcc\xdf\xc1\xd4\xa9z\xf0J\xd4\xd1\x18\x8e9\x15\xe0\xe9\xe5D\x18\x89w\xc5\x9c\xb3\x97\xb6i\x0c^\x0c\x9eG\xdbG\x08}\xfc"v\x96\x08N\x9d2\xec\x90\xf9!\xf8\xa1p\xcef\x85L\x9b\xf4\xa6A\xba\xb3\xa8\xbb\xc7\xb1\xe9\xfa\x93\xb2k\xd2\xb1\xe4\x86h\x96(\xd1u$DD\xb7}\x90\xa3\x16&gt;K/e\xbb\xeeo\xbdr&gt;\rV\xe3\x16\xcd9\xc6\\\xa5b\xc0\xf6\x83\xc1tz]\xda\x12\x91+o"\xe1\x1a\xfeH\xc7\xea\xb2j\xf8\x12\xa1\xe5\xd9\x16\xd6Q\xa5+\x8ab\xaeG\xdf\x1e\x0f\'\x91\xac\x9f\xae\xc5\xdc\xb8\x1fw\x82+#\xcb5\xdf\xd2icV\xafi\x0f\x914&gt;\x08I\xaaV7X\xb1\xa8\xcb\x91$\xea\x8dx\xf25\x87\x91r&lt;#\x929|\x9a1J\x08K\x1fb&lt;\x1e\xfb\xfbm\xe5v\xf9&lt;\x88o\xecxbGQ$\x91\xa6\xa3)]\xe4\x8f\x9c\x97l\x97$d)\xd3)\x19Cr\xbf\xd1\x0c\x1dL\x92C\x7f\xff\x00\x05\x82m\x8f\xde\xc5\xcavt\xf2\xb8"\xf0\xfb,[\xc4\xf7\xdd\x16_\x7f\x84&gt;\xf4\x895\x84\x8a\xa4k\xc6\xe2=9\xb7\xf4I\xd1\xa3n\t1,\xb3S\x08|Z\xe4w\x82\x12\xa5E\xd9c\x9d"m\xc9\xa1\xa1e\x13W\xe4\x93\xac\t\xe5\x1d2\xb8#\x8b\xec\xad\xbd\xf6\x8f\x07\x87\xf6\xd0\xf8\xfb\x08\xe5\x8f\x83^~\x98\xa4i,\xb14&lt;6j\xabHG%\xe4\xb2Re\xdbc\x88\xe2\xc7\x8e\x0c\xbeG~\xa6y\xb4t\xb2\xff\x00\x1c{\xafx\xf0/\xc5\xf6p\xcb/\xf5\xda\x91\'\xc7\xd8\xe1\x11\xa2L\xea\x8d\'\xe8y#\xc0\xd1&gt;\x08\xd2|\x89\xa1\x1evK,\xc3[M\xf9Hm\x8f\xc8\x8e\x8d\x7f\x8e6HK\xbd:\x89\xff\x00"\xdd\x8b\xb5,-\x9fz\xc9\'\x94p\x86u\x19d\x14\xad}\x0cL|\x13\xafH\xa3bMy#\xc7\xf4y+%\xd3e\x97D\xab\xd3d\xe5\xec!y\xf6:\'zke\xd8\xf7K\xe9\x1e\x17e\xf6\xc7i}\x88\xab9\x91"L\xd6\xcbK\xd5F\x95\xd5e\x89pV\x19%\xc6J\xa7\x94{\xb2\x1cn\xf9\xd9\xa4\xd17\x82L\xb2&gt;N\x8b\xf0\xd9vx\xd9\x0f\x08\x7f\x8fg\x8e\xd4\xb6o\xec,E\x90X\xb2l\xd4\x9bn\x89B\xe4AR-&lt;"\xda\x1f1\x1f\xe4\xceZ\x13\xf0&gt;\x0628~\x96b\xeb\xc1\xae\x9aH|\xf2$,\x1d\x1bN\x0f\xec\xbe\tp^\xcbe\xd8\x86\xeb\xec,\xb2n\x92K\xdcj\xa2j1M9\r\xbbT\'\x84VFj?L/\xc8\xdb\xc51S\x10\xe4)[\x1b\xbc\x92\x8f\x12G\xa5J\xa9\x9a\xceK\x0c\xbc\x89p\xc7\xca:7\xca_e\xda\xa2O\xb1\x89\xd9n\xf8\xd9!\x12\xef\xc9\x04%\xeb\x9f\xc16kJ\xa2G,_\x97;J\xc7\xc15\xea\xf4\x92\xc1\x1c"\xae\x99,\xd0\xb9*\xd3\x17\x05\x1a\xdc\x08M\x18:\x0f\xfa\xddq\xda\xbc\x12\xe6$\xf7\\\x0bt\x847C\x7fc\x84i\xac7\xeeO\'P\xdd\x9ao"\xb7\xa8F\xebm]N\x12\xe4\\1\xe5\x88WC\xe4^\x08\xb2\x9eI\xcb\xd3L\xd7\x92\x92\xc3"\x84\xb6\xe8\x9a\xa6\x85\xda\xc4G,\x7f\x94Q.vkns\xba\xe7i}\x85\xc9;t\x90\x93\x8c\x12\x19\xd44i+lr\xa6\xdf\xaa\xb2i\xcdI`r\x1a\xb7b\x1a{{"\xeeY#\xc31\xeae\xd1?\xc5\x92dV\x05|\x14to\xfc\xb8\xe0]\xf1\xe5\x1f\xf6O\x91\x1e6\xf0-\x93&lt;\r\xfd\x88\xab"\xfdZ\x9f\x04\xe46k5\xeaf\x95Sf\xb3W\x93\xa6\xe0\x96\x11\x9a\xc9\x1c\x9e2^K\x17$sc\xc6K&amp;\xd3\x8c\x97\xb0\xea\xd52-4Yr\xc9\xd2:\xd4B\xef\x8f(\xff\x00\xb2\\\xf7&amp;r\xd0\xdd/\xb2\xfe\x94i,[%\xc9&lt;#Q\xdc\xd9\xa7\x14\xa3\xc9*\xb6\xe8\xe9\xe4\x9c\xb99$ig\xd4\xff\x00e\\Yy\x1f\xe2aP\xbf*\x1a\xf7\x12Tjc\x03Y\xb1\xa5\xc8\x92\xa3\x83\xa7u\xa9\x0f\x929K\xbe&lt;\x8b\xf3cc\xc6\xfeD!\r\xde\xef\xb5rO\xc20\xa2\x96\xda\x9f\x8b\x1aNN\xd8\x92Qt\xc9z\x15\xdb4\x96o\x14,\xa4K\x8c28\xb4\x88\xbf\xa6K\xf6W?#\xb7K\xd8I\x92YL\xaeD\xa8\xd4\x92\xb6\x9e\xc8_\x8b=^\xac\x1aI\xa7\x1f\x92\x1f\x8a\xec\xa2\xb6\x87\'\xfd\xc8|\x8f\xb5\rR\xfb(\x8a\xf5M\xbf\x08\x95m\xaa\xe91\xb4*pd\xd4H\xbb\xaa^H5I\x12^O\xfe\xccXW\xfb\x11W)#\xca$\x9b\xc1yCt\x89\xca\xe7\x91\xe4\xd0\xd1\xb7l\xd6\x8a\x8b\xc0\xb3\x92\x1f\x94+\xdc\xd3w\x15\xdf\x0eD\xbe\xb91\xf3\xda\xf3[M\xdb\xfb/\xe9\x89\xa6\xaa\r\x8fmo\xc5\x8f\x16\x8d?\xae,\x94\x1c\x93EF\r%\xe0\xd1\x97\xad\t\xe6\x9b$\x92\xe3\xc9\xc6\x0f(\\\xc8\xe2\x86\xb08\xda*\x956kA\xfa\xad\x1aZ-\xd0\xb4\xfd+\x06\xad\xa9g\xc0\xa3dZ\xc1\xa7\xf8G\xe3\xbfO\x96G\xfe\x8f/tVvl\xbb\xfb\t[&amp;\xee\x91,%\xbe\xbd\xd3%*\xac\t\xff\x00\x8e\xea\x87);\xafq\xa96\xbc\x1a\x14\x89\xc9E\xa6\xf9\x13RV?;.$\xc6\xf8&lt;\x1c\x13\xaeF\xbdXD\x17\xa4\xf5rO/"K\xc3\x1b\xa6i\x7f\xae\x1f\x1d\xfa|\x91\xe2_;-\xd8\x8e_\xd9J\x91\xa6\xafQ\xcb\xd8\x9b\xce\xfa\xfc3\xcb/\xe8\xf7\x1d\xb9,\x17rQ\x14\xbd1k\xff\x00\xdb%9j:"\xfe\x93\xcd\ra\xb2\x1cQ.R\x17\x0fi&gt;bF4\x8bW\x92uM\xa1\xbb\x15\xf9\xdbA\xde\x9c&gt;;\x99\x05\xcb\x17\xe2\xfb\x97\xda\x93\xa8\xa3K\t\xbfq\xf3\xbe\xbf\x0cI1\xe3M\x93\x92J\xbc\xb3O\xd3\x12Ri&lt;\x89\xf0\xec\xd1\x9eZ\xf0)\xdc\x9b"\xd4\x93#\x86K\x98\xb35!&lt;\x7fC\x8b\xf5Y&amp;\xa8su\x9eO\xe5|r)[x\xf2&amp;&gt;j\xce\x9f\xfdP\xf8\xef\x8f\xe3!*\x8b\xec[#\xc7\xd8\x8a5\x1eh\x7fL+\xb3Ua\x8b\x0c\xd4k\xf8\x8fS\xc8\x9ck\x87d\x9d\xb1+T\x99\x16\xe3$,8\x91\x92N\xacYD\xa3\xc1\xee*^\x07$\x99\xa9*\xb8\xb69\xd9WL\x8a)R\xceFt\x9f\xe8\x8fzu\t\x9c\xc5oH\xafa\xe0_eZL\x87\xd52n\xddvO\xf1g\x13\x7f&amp;\xb7\xfa\xcf\xe8\x94\xaa4E\x97L\x93\xb4\x99\t\\\x11\xcbMx4\x9d\xd9N\x98\xf8l\xfco\xe4r5\xdecCT\x90\xa5\xcd\nn\xc8\xc8\xbc\x9d\x1e4#\xde\xddi\xff\x00b\xfcw\\\x8f\x9d\x97\xd9\x9b\xc1\xa6\xaa-\x8f\xb2\x7f\x8b\x1f\xe6\xfeM_\xf5\x11\x8d\xdex&amp;\x90\xad\x0c\x8f\x83K\xca+\x04q$\xca\xb4K\xf1g7\xf2Vl\x9cnf\xa1\x08\xb2\x92\x12*\x99\xd1\xbb\xd2\xef\x97\xe0/\xc7\xb6\x8a\xfb\x08\x93\xb9P\xf1\x1a\xed\x97\x0c\xd4\x8dM\xd1\xaa\xff\x00\xc4&gt;y\x1dQY\xa2\xb8\x12\xc1\xa4\x95\xab)\x8d:DZi!\xf9Es\xf2S\xc98\xfb"J\x98\xbc\x0f\x9d\xfa\'zo\xbew\xe9G\xfc\xae\xc4Yo\xecp\xac\xd3^\xa9d\x97=\xadZ\'\xa6\x9b:\x87\xe9QHm_\x19\xaeH\xc6\xf2\xfc\x1c\xb1.\x7fB\x8ai\x11\x8d"\x8a\xce8#*cy\x18\x95\x12\xa6\xa8\x9chL\xb1~\x98\xce\x8a5\x07g\x9e\xe9\xbf\xc4|G\xee\xa5d\xdf\x08\xd3U\x17!\xf7J\'T\xf3C\xe6\x8f\x15~J\xaa\x13\xe4\x8e}?%SDSMm\xc39\x1b\xe0\xb45d\xe3\x82\xe9\xedM\xba4t-\xdc\x8d%J\x96\xf5\x8e\xc9\xff\x00\xcf\xc0\xfcv4#\xdb\xbe+$\xb2\xd8\xf1\x04\xbb\xda\xb3\xacU49\x11ce\x90\xe1Q\\"\x84zs\x96]"c\xc1\x17h\x9a\xb1\xe9\xda\xc2\x1e\x83Ti\xe8\xb6\xd3!\x14\xa9Q\x15E!\x0c{\xea&lt;\xd0\xc4\x95l\xb6\xa5\xb7&lt;w]"\x0b\xd54M\xb6\xfb\x97\x05`\xeb4\xae6\x87\xa5$\xae\x84\xd2\xbfq;bj\x9f\xc9\xa7\x1e\n\xc5\x89\x142\xb8d\xd6OM\xd0\xa221\xe38=)d\x8cH\x90*\xb6h\xacl\xb9%\xf91\xf2\x86\x9fj\xeeD\xe9R4\xff\x00\x16\xfe\xc7\x81\xab\x1e\x94Z:\x8e\x9a\x9d\xc5\x1e\x99]P\xb4e\x8f\x93N\x14\x88\xc6\xd1T\x8a\x1a\x1eh\xab\x14\x07\x15L\xa4\xd0\xb0\xbe\x0f\xa5\xd1\x17\xb4;\xa3\xca\x1f,|\xec\xbd\xfb\x17\x1d\xc8r\xb6\xd8\xf1\x14\xbe\xcaw{I*\x1e\x94\\\xac\xf4\xa2\x88,\x14Q\x9c\x8a%]\x08\x97\xe2\xf6X1B\xad\xa1\x81v\xc7\x94&lt;\xc8|\xad\x98\x9e\xcb\x8e\xf7\x88\x89\\\x92&amp;\xf3\xf6\x1e\x10\x92\xa3#=\x90\xf6\x87\x1bQTV\xf2\xe0\xac\x94\xe8\xcf\x02\xa4.H!\x08i\xe0\xa2\x9d\x8b\xf2\x17+\xe4ke\xf6\xa6\xf8F\x9f\xfd1\xe7\xb6\xfb[\xa1\xde6h\xf2\x88\xf0&lt;\x99\xc6\xf6X\xc5\x81\x8cX\x13\xb7\xc1\r\xabg{C\xf2#\xca\xf9\xdd/\xb3\x15\xe4n\xdbg\xe3\xa6\x97\xbf\xdcee\xb2Od\x8c\xed\xe7w!f\xc6f\xe8^FrC\x14\xbb\x97\x92\x1f\x92\xda\xb7]\xafi}0\xb2+\xd4\xe2\x89\xbf\xb4\xf6\xad\x9f\xb1\\\x19T=\x9f\x1bdD8\x18\xd0\xb1_\x07\xc0\xae\x88s\xdbb\xf2C\x94\xbf[,w-\xd2\xb6O\x94\xbd\x8d5\x96\xfd\x87\xcf\xda{\xd0\xf9g\xb2+\x03\xecOh\xf0&gt;O,H\xe1\x9c\x91\xab\x17o\x86C\xf2\xfe\xb6]\xcb\xc6\xd6G\xcb&lt;\xb6,i\xfc\xfd\xb7\xc6\xde\xc3cdm\x97\x96&lt;\xedT\xbb\x17\x03\xe4\xcb,_R"\xc4\x9e6\xbb\x1b/g\xc3!\xcb\xf8\xfbsiF\xbd\xca\xbaD\xfd\xbe\xd2Og\xb5%\x96rG\x91\r\x1e6h\xf6\xb1%{r\xd9\xe4H\xfd\xd9\xcf$l[U\xde\xd8\'\xf8\xff\x00d\x17\xe4\xf6_a\x12\xa7?z \x93m\xfb\x0f\xed\xd8\xf6yB!\xceN\x19&amp;,\xee\xd0\x96V\xd1\xe6[{|\x9c4!W\xb0\xb8\xed\x9f\x82\x17\xf5}\x9a\x12\xac\xb1\x11\xc4&gt;v\x7fc\xc1\xe3g{\xa2\xb2\x86\x9a|\x8d\x15\xb3\xda+;C2\x97\xc0\xd1\xe0Y#\x13(\x8b\x11\xe7j&amp;\xb1\x16C\x87\xf3\xb2\x18\x8a\xd9\x9e\x11D\xdbQ\x8a\xfd\x94\xf0\x89x^\xdfmq\xb32\xecdo\xd8\xf2\x87\x81\xbe\x06\xe8WVUQDP\xcd*\xf5K\xe0\x9b\xa4\x89Zk8co&gt;\x97\x822t[de\xcd\x0bd\xb6\xd4\xe1\x1a|l\x9e\xefl\x8b\x81\x0f\xea\x9b\xf6D?+\xf6Ln\xd8\xfe\xca\x1a\xa2\xc6\xea\xc56\xff\x00\xa4FwK\xc8\xa5R\xf4\x97\xc7\xc1c\xda\xbd\x86.J\xaa\x1f\x0c\xd3\xc4\xbf\xa2Qr\'u\x14E%\x18\xaa&amp;\x9c\x1f\xa9&lt;2\x14\xe2\x85\x89R"s\xb252\xd1\x05Q\xddq\xd8\xb6\xe17\xb2\xc4\x17\xef\xee,\xc52\x96pj\xfe"J)\x12MJ-!e\xdfj\xc0\xf8G\xa5\xa4\x863\x86\x99\xcd\x13T\xd0\x87\xf8\xb3M\xd2_\x04\x9dH\x8b\x17\x02&gt;\rJ\xba^\x11\x1f\xc5m}\x8by\xb7J+\xcb*\xda^\xec\x975\xf6\xdb\xc3#\xf8m\xab\x9aG\x92\\2\x0f\xe9\x8b\x1b\xc8\x96\xe9&lt;vb\x87\xe0\x8b\xc17q\xbf\xd9J\xf9=W7\x06FI\xb4\xbd\x8dWQ\xb4if*\xcbE\x88\x9a\xa9H_\x8a\xdb\x14^{_\x18\x1b\xb92\x1c\xfc!\xbb\xef\xf3\xd9+\xc2\xf7\x1b\xa8\xd1\x1c\xa4\xc7\xf9W\x94\xcb\xfa\x90\xfc\x8b\xf0\xd3\xf7\xc8\xddQ\x1d\x92\xc6\xc8ke\xc2\xfd\x8e$\x9f\xa1d\x83nS\x8b),\x99\xfeh\xbf\x14B?\xe4\x94\x89}T\x92"\xaa*\x85\xb7\xb1.X\xaa\x97\xd9J\x91\x0c&amp;\xfd\xc7\xd8\xfb^\xd2\xfc\xa3\xf0z}^\xa2\r\xc64\xc7\xfe\xeb\xf7"\xff\x00\xcc\xd0\xd7#\x9f\xd5\x05\xf2/\xa9\x89`\xaa\x15\x8e\xc5\x92UO\xdc\xf6&lt;/\x83\xf7\xe0\xc3\xe4z*\xdbLp\x95r8IQ\x18JV($\x85b\xd9\x0f\x97\xf2UEl\xb7b\xa7\xbf\x91\xe1W\xdcJ\xdd\x8a\xea\xfd\xd8\xe9\xaa\x1c\x1cf\xaf\x82\x9f\xf2M\xa8\xb2\xa6\xe9\x0bG\xea\xb6(\xa4*[-\x95X\xfc\xfcmY\x1a\xcf8\x13[*EdIl\x98\x99b\x1f\x91q\x1f\x81\x17^\nx\xad\x91\x85\xbc3%{\xb1\xaf\xb0\xf8b\xc2G\xb6\xdc\xed\xe7\xb1\xb1Y~\n\x1f;\xd5\x94\x92\xc0\xad1\xf2\xf6\xc6\xeb\x02\xe0\xf0{\x8f\x84!\x19\xda\xbb \xb9g\xbe\xed\xfd\x89\xf0\x97\xbb\xee[\xa7\xb2\xe5n\xf9\x17+v{n\xb6\\\x0be\xc4\xbe6{\xa366\xf6\xfa\x8eE\x84\xb7|\x0f\xec&lt;\xb2\xb3\xf6&lt;\xedb\xce\xf0\xe5\x9c\xd6\xcf\xb1m\xe4[\x7f\xcc\xbe\x05\xca\xf9\xdds\xde\xc7\xbb\xfb\x1c\xb6\xc5\xbb\xddv!`|m\x1f"\xed\xf6\xd9Yy\xa1mx\x90\xb9]\x9e{\xdf\x1b\xbd\x9fg\xb9\xe0\x88\xbb\x91\x7f\xad\xac\xf0\xc47\xb4c\x83\xca\xec\xf0\xcf""\xca\x16\x06&lt;FDy\x8e\xdc\x0co{W[\xff\x00\xff\xc4\x00.\x11\x00\x02\x01\x03\x04\x01\x03\x04\x01\x05\x01\x01\x01\x00\x00\x00\x00\x01\x02\x10\x11!\x03 1A\x04\x1202"Qaq\x13\x05#3@B\x81Rr\xff\xda\x00\x08\x01\x03\x01\x01?\x00\xd9}\xb7\xa3\xa2\x18\xea\x84&gt;\xb6*7\xb1\x0f\xdd\xbd.\xea\xbd\x8b\x0e\x8a\x96\xa3\x1dR\x10\xde\xce\x84=\x8a\xae\xab\xfd.\xaa\x87\xb1*7T!\x8d\xecH\xe0{\x11\x7f\xf4\xf9\xdbas[\xf5EF\xf6*\\uTc\xd8\xbd\xc5^\xd7\xfa\xbc\x89Q\xd6\xc2\xa3\xaa\xe6\xac\xbe\xcbm[oU\xb1o[/D\xa9r\xf8\xaa[Q\xcd\x10\xea\xbf\xd4T\xe3;\x9b\xc5P\x862\xe2-V\xf6*#\xba\xacU\xef\\R\xfb\x95~\xc3\xda\xea\x84\x84\\\xbdb\xaa\xea\x85K\x8c\xbe\xd6&gt;}\x86\xbd\xf7T!S\xba*\xb1\xba\xaeEN\x8b\xf4XU[\x10\xea\xebloc\x10\xaa\xcf\xb5P\xa8\xea\xaa\xe8\xa8\xab*\xa1Q\xfboe\xf7*\xb7TX\xb0\xc7D$Y\xda\xf6\xa5\x9b\xe1\x11\xf1u$\x93\xb0\xfcYE\xf0\x7f\x04\xb3\x82\xcdt\\\xb8\xc7E\xbb\xedU\xb1\xf3D\xfd\x8b\n\xd5\xe6\xab\x8av]\xd6*\xec\xfe\x16\xacC\xc6\xf5i\xc8^&lt;\xdc\xa2\x9a\xe4\xd2\xf1\xe1\x04\xbe\xe5\x92\xc5\x89A&gt;\x87\x08\x8f\xc7Wf\xbe\x8b\xd3\x97\x18\xa3\xd8\xa9\xd7\xb2\xbd\xc4-\x8b4[\x11\xa3\xa4\xee\x9d\x88\xc14\xb1\xc24\xe2\xa2\xae\xd0\xe2\xaf\xc1\xc5\xb0,\x8e.\xc3LQ\xb6M]5\xa9\x16\x9a5t\xde\x9c\x9ac\xa2\xaeGE\xb7%\xc5\xed%Km\x8e(\x86\xe9f\xcd\r)I\xaf\xa4\xd3\xd3\x8c`\x93]\n(\xbbwC\xe1\x9c\xd8\x8a\xc1bj\xc8k\x03\xe8\xf24V\xa2x\xc9\xa9\x07\tZ\x89U\x8f\xd9^\xe3\xd8\xba\x11\xd0\xbb\x1b"\x9bx&lt;\x7f\x19\xcd\xf0ix\xea6\xc0\xe2\x91\'dE\xdd\xba,\x1c\xd3W\xe3"/\x11\xfd\x12G\r\x1en\x83\xf5z\x97b\xd3whq\xb0\xc5G\xfe\x92\xc2uuB\xa2&gt;\xe4#\xeb\x95\x8d\x0f\x1d]]\x1a:J+\x08J\xcb(vh\xd6\x9d\xb50\xc8\xbe\x05\x91.\x05\xc2#\xc1\xad\x9d)\x1ar\xbc\xd2\xfc\x12D\xb9\x1cT\x93?\x81\'&amp;y\n\xcd%V:*\xb3\xed\xed\xa4Z\x8cuHT\xb0\xcf\x1fF\xee,\x86\x9aI_\x92\x0b\xd2\x8b\xdf\x93ZX\xc14\xfdI\x89Y"\x0b\xb1!\xe0D\x95\xe2\xd1\xa6\xff\x00\xb9\x7f\xcd\x86\xbb$\x84\xac\xac$\xad&amp;ki\xfa\x9bd\xd7\xa5\xba1\x8a\xb6-\x82\xd5^\xdb{\x17Ub\xcbG\x8d\xa0\xf0F6Bc5^l_\xeb\xc9\x15\x9b\ttv4qtJI)3I}Cx\x1a\xbb/\x8b\x97\xbd\x918\xb6y:N9\xab\x16\xcb\xed[\x95Yz\xa1U\x91\xf9#\xc6\x8d\xe1\x16\xc7ea\x0c\x9bJRd36\xcd8\xab\t#\x0e\x8d\x1a\x9f\x16B9O\xf0K)\x0f\x04\x9d\xd8\xe5\x94r\xb0y:w\x8b$\xad!\xf1D-\xcb\xda\xbe\xc5\xcd-V,4x\xff\x00\xe2\x87\xe9\x12w\x17(\x96\t;GQ\xb3C,\x82\x1c\x8b\xe4\xe5\x0c\x92\xba\x12I*M\x16I\x1a\x8e\xd243\x13R7F\xbc\x1cf\xc9*\xaa\xda\xabm\xb7:\xa4*\xcb\xaa.Q\xa1\xfe(~\x91\xea\xcd\x84L\xd6\x95\xb4e\xf9g\x8a\x95\x90\xe4\xe3\xc2\x15\xdb\x1a\xc1\x16&lt;\xddV\xe3\xc94j\xf2\x8f\x14j\xf7&lt;\xbf\x1d\xbc\xa2qq\xc3~\xc3\xf6\x1fT\xbe\xc4$*.\xc7H\xf2\x8d\x1f\xf1B\xdfd%k\x9d"L\xd5~\xad8\xff\x00\xfa4\x12QF\x9c=R\xf5&gt;\rV\xbd?O74\xdbqw"\xf02\xe3b"\xf2L\xd5\xcc\x91\xa1\xf4\xb6\x84\xd9\xa8\xbdPg\x90\x9a\x95Rt\xefb\xd8\xfd\x94\x84\xaa\xc6\xe8\x97\x07\x8c\xef\xa1\xa7\xfa\x1e)&gt;\x1f\xe8Y\x84\x17\xe4\x86 \x89N:zwn\xc4\xbc\xc8\xfa\x95\x99\xe3j\xc6q\xe4\x8fcb\xc9*+\xa1\xf6O2X\xec\x85\xbd\x7f\xf87c\x95c\xcb\xd0\xf5p\x8dM9E\xe7\xfd\x17T%^\xc7H\x89\x1e\x04\xbdZ1_a\xe5^\x9a\xb8\x84\x98\xb0\xa0i\xe6(\xf3\xf5\x9c\xa4\xa0\xb8\x89}T\xd3\xe9\xb3\xc1\xd4\xb4\xdcK\xe0\xe9\x9ayK\xf4H\xd7\x93\xc2L\x85\xdc2}\xd1\'i\xa2/\xfb\x8b\xf4I\xe5DXh\x9a\xbag\x99\x17\xd2\x17;X\xe9\xddsKm\xecE\xb61\x11T\xfe\x9d/\xa7Q\x1f\x82\xf7\xcd\x8dg\xf4%\xdbi\x16\xbc\xacA%\x1b\x1ev5\xbfhM\x9e%\xde\xaaI\x96\xb4R\x1ff\x9c\xaf\x18\x92\x9aI\x9a\xbeCz\x8c\xf1uT\xad\x92_&amp;kYM\t\xafZ\xfd\x0e\xed\xc5\x88|4yp~\x99\x16\xb3\xdc\xc5\xed\xa4-\x92x\xa2\x12\xa7\x837\x1dV\xaf\xca/\xdd$\xef\xab\x14\xbaW\x13W"\xee\x7fR\x8b~\x99$&amp;\x8f\xe9\xdaK\xe6\xd7\x08f\xb3\xb4$\xcd/\xf1\xc7\xf4ysqM\xa2M\xf2x\xda\x9e\x99\xac\xe1\x8f6f\xb7\xca?\xb2\xdf\xdd\xff\x00\xca_\x02g\x90\xaf\x16J\xde\xa9Y\xf7\xb5\x8c^\xdcV6\xc8BY\x12\xb54\xa7\xfcz\x90\x97\xd9\x89\xa7\x14\xd7\xd8dd\x9b\xfd\x8b\x96i\xb6k\xe9\xff\x00$\x1a\x17\x89+\x9a\x1akKJ1\x1f\x0c\xf2\xe7\xe9\x8cW\xdc\xd3\xcc#\xfa&lt;\xe8\xff\x00ln\xc8\x83\xb3L\xd3~\xa8D\xd6W\x92\xfd\x89\xder#{\rb\xe4]\xcf)\xdbJO\xf0w\xb9\x8b\x8d\x96\xab\xaaB\xd8\xf8\x1b\xb9\x12;&lt;-oT?\x8d\xbc\xa3[R0\x8eY\xa7\xa8\xe5w\xf9"\xf0i4H\x86\x9a\xbd\xc7\xdb\xb9=D\x8f+S\xd5$\x91\xe3\xca\xfah\xf2!\xea\xd2\x90\xd7F\x94/$\x88\xfd)!\xe6D&gt;R\x7f\x92-\xd8\xbd\xe2E\x9e|\xda\xd1K\xee\xebj\xb1\xf2-\xfd\xd1r.6\xc9\xf4\\\\\x89[f\x9c\xe5\xa78\xc9}\xcf#Y\xeaJ\xcd\xe0\xf1\xde\x08\xe6?\x93E\xfd\xcb\xa1I\x13\xd4Q\xec\xf2&lt;\x84\xd3\xb0\xe4\xdb\xbb&lt;i}\x08\xba\x94Zf\xae\x8c\xbdn\xc8\xf14\x1aw\x92$\x91\xc4\x8d&gt;%\xfb#\xc1\xc28\x91\xfdFX\x82\xa5\xa8\x8b\x0e\x8be\xe8\xc7H\x8bky\xe6\x91Ksm\xb3\xc7m\x11j\xc6\x9c\xb2\xcb\x92\x97\xa6&amp;\xb6\xb3\x94\x9d\x9b\x19c\xc4\x9a\xe1\x91\xb0\xf4\xe2\xd9\x08\xd8\x90\xd6M?\xfa\xfd\xd1\xf0\x7f\xf4y\xb2\xf5j(\xfd\xabj\xcb\x81\xfe=\xa4\xb1\xb5\xb1\x91BV\xda\xce\xd1\xa0\xdd\xf9\x17\xc0\x84\xb2BW\x92&lt;\xb9\xfab\x92yb\xcbw\x14OM\x99\x07\xe8\x99\xa158\xf2,\x8b\x17\x19{I\x9axz\x9f\xb1!\xab\x8e\xd1R\x7fdN\x7f\xc9\xa9)n\x97\xb0\xdd"\xb7H\xe4\x82\xdd7\x8aia\x91\x96\x19\x1eM\'fyZ\x8ez\xbf\x84i\xc6\xe6"\xd2\xb94\x89\xa3\xc4vL\x8b\xe2\x93}\x11yd]\xa4\xc5O/Qi\xe8\xcf\xf3\x84F\x8bc;^\xc2X\x17UT|\x0cK"\xdd1,\x91V\xb0\xb0\x84\xecKRQ\x8bw\x1bm\xb6\xcd&lt;A\xb2Z\x92\x9b\xb9\xeb\x93j\xec\xd6\x8a\xf4\xc5\xa3\xc4\xba\x99\x8c\x1e\xac!\xb3\xeez\x92\x9aW\x13\xbaG\xdc\xfe\xa3\xab\xea\x94`\xba\xcb\xaa\xaa\x19k\xba\xdbb#\xb9\xbaAq\xb9\xbb\x0f&amp;\x9a\x16\x19\x1e\x06\xd2\xe7\x93Q\xfd\x14\xd3NP\x9a\xfc\x0e-QK\xd5\x0b\x1e7\xc9\x1c\xc4l\xe4g\x91?D\xe2\xd1\xa34\xe0\x8f#\xc8ZP\xfc\xd8\x94\xde\xa4\x9bo;;T\xe8\x93\xc0\xb7\xa5\x91b\xbdU\xf6%\x94%\x9d\xd2"AYR\x0e\xe8\x9f\xdc\x9b\xc2\xa4%\xe8\xf5?\xc19\xfa\xad\x81d\xb3\x8c\x0f\x19f\xe2xL\x93\x17\x06o\x93\xc8\xce\xa1\xa5\xae\xe1\t~\x11\xa9\xa9-Y]\x91[-Y\x16\xdd\xd9\x15E\xb2C"\xb8\x16\xe9rF\xb0v\'yap\x89\xf2\xa9lQ\x13\xf8\xc5\x1e?\xc4x\x8d\xc6\xfb\x14\xb0\x89\x1a\xcb7%Ho\x91v-\xd6-EY\xb1\x11[\x9b/sN\xd7\x1cn\xa8\x99\x16\xac\xd0\xf9#\xc9\x18\'\x12pk64\xe1w\xc1\xa8\xach\xddD\x94\xad\x0b\x91m\xbf\xc1~\x91gcU^,\x9ft\x86\xde\xcb\x92\x10\xb7*\xaaI\xd9\x0c\x8a\x17\x1b\xa4\xf1M(\xdd\x93MU\x12\xe4\x89\x19Y\x12\x92\x92\xb34\xd4}6\xee\xc6\xaf&amp;\x9b\xc2F\xa4\xac\x91\x1c"\xec\xe8\x9cpjE\xa6\xce\xc8\xf1\xba\xc4\xb9\x11l{H\x91\xd9\x15\xc6\xf9\xb1rh\xac\xa2Y\xd3\xe0x\xab"\xec\xcb\xdd\x16\xb9\tI`\x9bw\xc9\x06?\xa8\xb9t\xf2\xd0\x89\xfcMYe\xed\xb6\xc9v.=\xb7\x847q-\xaa\x8f\x81\x8a\xf74"\xc96\x95\x89*!\xab\x8e=\x91v\xc3\x11\xea\xb0\xda\x93!\xf7\x11k\x89\n\xf7%\xc3F\xbaWbB\xda\xa9.\xc5\xc5\x19obLYdR\xdf\'\x8aG\x93M\xd9\x91\x9cm\xf5#Z\xd7\xc3\xa4{B\xa4\x97e\xcc\x89;\xa14\x92\x13.C6\x17\xda\xc3\xe1\x9a\xf8\x90\xb2\xf6\xda\xb2\xf6ztn\xc8\x96H\x8b\x8d\xf3y\xa4\x15\xcd(\xfa\x996\xd2X%\x97\xc5"\xec\xc7\xfa\x1d,$&gt;\x05!K\x04Zd\x18\x9d\xecH\xf2\x12\xf5\x91\xd9}\x92\xe4\xed\n\x8f|\x9e\x06Ag{\x1ei\x05\x83A\x1a\xaa\xe3GDy\x1a\xb9a\xe2\xc8\xe8\xe0tBD"\xactK\'\x93\xf3\x91\x1d\xd6\xa3\xe4K(\\{-\xde\x91\xc6\xf9\xf1E\x96$h\xbc\x13\x92\xb3\xb3%H\xf2\'\x81\x92gB:-\xc5#{\x9aj\xd1t\x92&lt;\x95i\x91\xe2\x9c\xee|\x8b\x9a=\xaa\x92\xe0dU\xda\xf6$\xe9\x04#F6F\xad\xafq\x8cO&lt;\x179\x1a\xa2\x17\x03\x17$#\x9b\x8b\xa1\x8d\x9eVf%d\xb7\xbe(\xb9:\xdfrn\x90[{\xa3vC\xa6\x9a#\x12.\xc9\x92\xa3B\xec\\#\x846$Z\xccC\xe2\xe7\xe4\xd1\xb3e\x92\x1acXg\x92\x9a\x9d\x1e\xe7E\xcf\xb1\xd0\xdd\xc4\xae\xfd\x89\xe1QrC\x94[\x04xw%\xcd\x11\x05yS\xaa$4.\x08\xcb\xa6\'cEE\xe5r&gt;.\x84\xd8\xdd\xd1\xe5/\xa9{\r\xd1ru\xb1\xd6O\xaaAw\xecO\x9aA]\x90WhxF}.\xc3\xac]\x9b\x12\xbdc\xc0\xd2t\xb6K\x1aWR\xe0\xe5\x16\xb0\xcf3\xe5\x1fbGb\xafutdE\xb2\xd5xC\xcd4\xd6\r$O\x81b.\xc4\xb9t\x84{\xb8\xf9\x16\x12\xaa\xe0u\x82RVf\x92\xb5\xae\x87G\xc1\xe5\'u\xecK\x81\x11\xdf*A_\xd8\x93\xa7h\\\x1a&amp;\xa5\xd2D"\xda\'\x07\x17D\xdaHbb\xe5S\xfeFZ\xe9\x08\x82\xc9\x08\xa2\\\x1c\x0e\xd6&lt;\x94\xbd;]e\xc5!\xbeL\\\x91^\xc4\xf9:d\x15\xdd4V\rSK\x84k\x96\xc9\xda\x19\xd9\xd5\xe8\xf8\x1f\xfc\x88D\x13\xbd\xc8Q\xac\x8e\xc7\x93\xf0\xf6\'\xc0\xb8!\xc0\xc4=\x97\x12\xbbO\xd9\xe5\x8c\x82\xb2\x11\xa7\x84\x8dG\x93O\x84\x8de\xf4\x8f\x02D\xba\x1f\'H\xb6N\x99\xcck\xa7\x91,&amp;p\xc9]]\x16\xba&lt;\x85\xf4=\x9dl\xd4\x13\x16\x11q:5GH\xab*\xad\xb3vGB\xbbbDyB\xe0n\xf2!w\x84N\xf6%\xc9\x17Gk\xa1t.\xce\x99\x1c\xa6qjiE\xd91.\xbf\x04\x9d\xb9\x1b\xb9\xc1\xaa\xef\x19\x0f\x97\xbfPB-N\xea\xf9"\xae\xfd\x99\x0f\x08\x82\xa49\x12\xc0\xd7\xd4\x88\xa7\x8b\x12\x894\xee\'m\x9c$.\x18\x99b(\xd3K\xd0\x8b\xfaY\xad\xaaiI\xb4\xc6M}2\x1f/|\xc5\xc2:[R\xc0\xc8,_}\xc6\xec\x8eG\xc9\x15eM&lt;\xc9\x08\x95\x94\x8fU\x8f\x918\xa4\x86\xaf\x94E\x9d\xd1\xf0\xa8\x9eD\xcb\xe7\x06\x8e\xa2\xb7\xa5\xb3WYqs\xd7\xeaf\x93V.;\xd9\x92\xf9K\xf7\xbeb\xe1\x0be\x8b\xd1q\xecM\xe0BWw\xae\x97\xc8J\xe3_ZL\x8cQt\x8dgr*\xe9\x9c;\x08\xe7\x83\xec\x8b\x1f\xf5H\x89\xfarI\xdcQWF\x9cp\xac\x7f\xe0\xd2h\x97\xce_\xbd\xf3&gt;\xdb_\xb7\'v&gt;\x08.\xeb\xa5\xf2Bb\xf9!4\x8fJ\xb3\x918\xfa\xb2\xc8AEd\x9a\xc9k\t\xe5\x0c\\\x1fj%\xd8\xdfE\x9d\xf8 \x9d\xc8\xac\x18\xb0\xd5\xcdEi\xcb\xf6-\xd3\xe5\x1d\xaa-\x9f\x7fe\xf1F\xc8\xacWO\xe4\x85\xc3#\xf3"\xb2M\xb6\x90\x92l\xf4`\xd5\xd3\xb2\x1a\xfaI]:#\xb4&gt;Y|\x11Wh\x8e\x95\xf2\x7f\x15\xb2+$\x86pk\x7f\x96[\xe7\xc9n\x0b\xd5\xd1\x8b\xd8\x9b\xc0\xac%wO\xb5 \xfe\xa4tA}b\xc0\xd3\x12q\xb1\x92i8\x8f(q\xbeG\x811\xf2\x86\x99fi\xc2\xf6b\xb2.+\x97\x1bV\xb9\xe4+j\xcb|\xb3-\xef\xd9\x97#vV \xbb\xaa#\xd5\xc5\xf1D&gt;hK\x81+\xc92\xc8IXd\xd5\xa4\xce0\xcdA1&gt;)\x18\xe4\xd2\xed\x10,\x87eGk`\xf2\x7f\xcd*=\xaf\xe6Z\xcd%\xb1\xf0uG\xbd\xf0,\xb1\xe6HK\x0bb\xe5\x10W\x81\xa7\xf3\x1c\xf8D[\x1b\x1b\x1b\xc1\xa9\xd0\xf24\x9ab\x17*\xb0x#\xc1s\x91\x8d`\xf2\xb1\xaa\xf7\xff\x00\xd9\xddY\xd2\xa3\xf6&amp;\xc5\x82*\xf9\xda\x8d\'\xf4\xa3O:\x84\x12\xe4\xc5\x1f\x14\xd4\xe4k\x17\x10\xd5\x9dQ\x07\x92.\xe8\xb0\xb8f,3\xcb\xbf\xf2o_#\xb7\xb1\xd2\xd7\xf6\x1eIa\x10X\xdd\tX\xd1Ww"\xa5bX\xb0\x96\t\x12yd\x9d\xee&lt;*I`B\xa4M9u\xb1\xb7\x93\xca\x92s\xdb\xf6\xa49\x90\xb6\xb2\xfb\xd8\x95\xd8\xee\xd8\xb0\x96\xe4\xcf\x1b(\x83\xc1\xff\x00W\xb5\x1a\'\x8b\x89\x8d\xdc\xe0y\x17$N\x8c\xdd\x9aN\xcc\x8bW.6\x91\xad\xe4[\x08\xd4w.\'\xb1\xf0C\x96.\xea\xfd\xa9p,\x10\xcc\x98\xe9\xd6\xc4\xcf\x16Xdb\xad\xc9jK\x06\xa1t_6$_\x05\x88\xe0Y\x19\x1c23\xb3?\x99\x1a\xba\xdd"M\xb2b\x10\x9d_\x04;\x13\xab\xda\xb6\xda\xec\x93\xb4H,^\xb6Ke\xcf\x1fS\xd3,\x8bUYd_U\xac\xe9$j;\t\x8d\x8d\x8a\x91.7v!\xbeK\xb2Ld\xce\xe8\x9d\xe9q\xf0C\x86.\xf6*\xe4[\x18\x87\x99$p\x92\xdf\xcb\x16\x08\xea5\x96\xcd\x0f"\xd8l\xfeX\xda\xe3\xd6Vf\xa4\xee\xc6\xf2\x8e\xc6\x8e\xc4^\xc3\x98\x9d\xe4\x8b\x92\xe4d\xa91\xf3\xb1\x0f\x82\x1clt{\xdf\xd8\xe1\x10\xcb\xbf\xb0\xaa\x9bG\xad\xa8\xf2)Ro"\x96(\xb9/c\xd4\xd8\xc8|\x96\xdb\xdc\x9e\xe6\xf0C\x84\'q\x8fc\xdd\xcc\x89pC\x0b\xd8\\\xd5\x17B\xa4\xb9\x12\xc0\x9a\x1b\xc0\xeb\x1f\x92\xabC\x19:\xfd\xeb+\x0b\x8a\xb7W\xbe$\xb9K\xdcT\xb8\x86\xae\xe9a\x8e\x89\x0b\x0cn\x8e\x8c\x9e\xe6u\xb9\x8a\x99\xac\x85\x81fW\xf6\x96\xc5D[\x03\x1f\x15C\xea\xad\xbcQ\x933\xbb\xaa\xf5\xec\xfc\x98\xdd\xa2AYU{j\x97\x17W\xa6\x1a\xd9.j\xd5\xe8\xc9\x8fnG\xc29\xa2\xf6\x1b\x12%\x96\x96\xfe=\x84t!Kwb\xe2\x97\xc0\xf2\x86K+w\xd8x^\xdb&gt;\xc5\xbe\xbfmU&amp;\xc8\xa2TE\xdd\x15{buwC\x1e\xcbQ"|\x16\xd9g\xb9|\x87\xc3!\x95\xb7\xba}\xaa\xc8\xd6\xee\x8e\x88\xbe\xc7\x84\xc4t\x7f\xf2g\x91\x8c{\x1d\x17(\x9f\x1e\xd3\x17\x04\xb9B\xc2\xad\xa8\xb6\xb1qT6:-\xb2\xe0CxG\xd8\xe8\xe4cC\xdb\x0f\x91\xa9\xbdQ\x0c\xfc\x1c\xcb\xfd\x0b\x8e\x89\xda\xa9\xd2\\R\\\x0b\xa1\x1cdm\x0c|\x0cu\x83\xbc\x8dN\xb7:\xf2\xc8\xe5\x8f\x82&lt;{k.\xfb]-\xba\\\xaaM\xe1\x11\x8d\xc8\x8e)+\xb2K%\x90\xf0:;t"\x1f&amp;jr\xb7\\\xe6\x9c\x11\xc2\xb9.\x90\xb6t\xf7\xc6\x88\xf4\xd9+\x92\x8d\xac\xd39[o_\xfa\xa3\xe0\x8b4\xf9l\x94\xae\xd9\x06\xa4\xad\xd9,1\xf0K\x9d\x90\xec\x9f5U\xb5yv\xa2\xcc\x98\xbd\xa7\xc1\x1eX\x8d?\x92\x1b\xbc\x9b\x16SG\x18\xab.\\\xb9s\xbat\\\x83\xe6\x91v\x92%\x96\xc5\x1b\xc5\x93Ve\xeb\x0e\t\xf3\xec\xc5f\xe3dW\xb6\xcf\xfae\xf2i\xbc\xde\x91\xc3%\xf2h\\\x8f\x9a\xb6f\xd4E\xc4\xcb\x11\x8b\x8b\xfd\xa1\x0e?Le\xf9\'\x1bE3K-\x9a\xb8\x9b\x1d\x19\x1e\t&lt;\xfb\x0b\x91a\x13\xe8^\xe4#y2q\xb3\x12\xb4n%\xf4\xdc\x8a\xbd\xbfe\x9f\xael\xec\x95\x1d/\xc5"1`\x86Y\xa8\xb1\xa6\xff\x00\x04U\xc7o\xe1\xf4\xf7ry\xd3\x84E\xf4\xdc\x97#\xa3 \xbe\x94&gt;vX{[\xbb\x11\xd7\xb4\xb8#+46\xa4\xcc-\x1b\x1e\x95\xfc\t\xfeD\xeda/\xa2N\xdd\xa2VC\x90\xe5L\x0f\x19\xa2\xe0\xed\x97\x13\xb0\xb5\xbe\x94\x88\xeaE\x1e\xb8\xbe\xc9j$\x87;\xb2C\xa3!\xf1C\xcc\xa5\xb9lU\xef\xd8e\xadD\xec\xc5\xa8\x9cl)G\xd1\x15q\xca*\xed1\xeb;\x0ewe\xc7\xc0\xe8\xb8\xa2\xe0l\xc5/K\x8d\x97\xa38\x19\x1e\x10\xfeN\x9d\x0bt\xb8\x11z%\xecK\x94\x84.+\x95\xdb\xd9\xd2\xa3\xea\xa8\xea\x97\xda\xe9z:.\x11\xdb\xf6d\xf2\x95\x11\x9fg\x92\xdb\x1f\xb2\x89;E\xd5Q\x0e\x9d\x16\xafh\xe9\xfe\xbd\x8cQ\xe6TB\xa7B\xda\xc5E\xbd\xd1\xba\xc4\x9f\n\xa8y\xa3\xe8\xbe\xc6\x85\xccG\xf1\x7f\xaa\xbd\xb8\x10\x8bQ{\x0cT^\xda\xe4F\xa7[._k2/\x94G\x84\xff\x00U\xebm\xaa\xb6\xad\xaf\xa3\xb67\x96\x85N\x87V:\xb3\xb1\x13\xcb\xfd\x17\xdc\xebv\xf8\x11\x1f\x92%\xf1\x91\xd1\x9d\xa8Gg\xff\xd9\r\n--f1c677c39b4c6eebf9ea3bcd77a9f468\r\nContent-Disposition: form-data; name="additionalMetadata"; filename="additionalMetadata"\r\n\r\nabcde\r\n--f1c677c39b4c6eebf9ea3bcd77a9f468--\r\n' 
 </msg>
<msg timestamp="20250205 13:17:52.952" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet/9223372036854766780/uploadImage 
 status=200, reason=OK 
 headers={'Date': 'Wed, 05 Feb 2025 10:17:53 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":200,"type":"unknown","message":"additionalMetadata: abcde\nFile uploaded to ./puppy.jpg, 68996 bytes"} 
 </msg>
<msg timestamp="20250205 13:17:52.952" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20250205 13:17:52.952" level="INFO">${RESPONSE} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.105" endtime="20250205 13:17:52.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE.text}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.952" level="TRACE">Arguments: [ '{"code":200,"type":"unknown","message":"additionalMetadata: abcde\\nFile uploaded to ./puppy.jpg, 68996 bytes"}' ]</msg>
<msg timestamp="20250205 13:17:52.952" level="TRACE">Return: '{"code":200,"type":"unknown","message":"additionalMetadata: abcde\\nFile uploaded to ./puppy.jpg, 68996 bytes"}'</msg>
<msg timestamp="20250205 13:17:52.952" level="INFO">${RESPONSE_PAYLOAD} = {"code":200,"type":"unknown","message":"additionalMetadata: abcde\nFile uploaded to ./puppy.jpg, 68996 bytes"}</msg>
<status status="PASS" starttime="20250205 13:17:52.952" endtime="20250205 13:17:52.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE.status_code}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Arguments: [ 200 ]</msg>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:52.963" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:52.963" endtime="20250205 13:17:52.963"/>
</kw>
<kw name="Convert To String" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE_STATUS}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Arguments: [ 200 ]</msg>
<msg timestamp="20250205 13:17:52.963" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Return: '200'</msg>
<msg timestamp="20250205 13:17:52.963" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:52.963" endtime="20250205 13:17:52.963"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${RESPONSE_STATUS}"</arg>
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:52.963" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.963" endtime="20250205 13:17:52.963"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:52.963" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.963" endtime="20250205 13:17:52.963"/>
</kw>
<doc>Test Description:Upload pet image with formdata 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:17:52.075" endtime="20250205 13:17:52.972"/>
</test>
<test id="s1-s1-s1-t12" name="TC_POST_pet_12" line="370">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:52.975" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:52.975" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_pet_12' ]</msg>
<msg timestamp="20250205 13:17:52.978" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet image with formdata using non-existing pet id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:52.978" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_12'), ('Type', 'Negative'), ('Description', 'Update pet image with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request P...</msg>
<status status="PASS" starttime="20250205 13:17:52.975" endtime="20250205 13:17:52.978"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:52.978" level="TRACE">Arguments: [ 'Test Description:Update pet image with formdata using non-existing pet id \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:17:52.978" level="INFO">Set test documentation to:
Test Description:Update pet image with formdata using non-existing pet id 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:17:52.982" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:52.978" endtime="20250205 13:17:52.982"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:52.982" endtime="20250205 13:17:52.982"/>
</return>
<msg timestamp="20250205 13:17:52.982" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet image with formdata using non-existing pet id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:52.983" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_pet_12'), ('Type', 'Negative'), ('Description', 'Update pet image with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request P...</msg>
<status status="PASS" starttime="20250205 13:17:52.974" endtime="20250205 13:17:52.983"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.985" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:52.985" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:52.985" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:52.984" endtime="20250205 13:17:52.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.987" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:52.987" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:52.987" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:52.986" endtime="20250205 13:17:52.987"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:52.987" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:52.987" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:52.987" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:52.987" endtime="20250205 13:17:52.987"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>mysession</arg>
<arg>${BASE_URL}</arg>
<arg>verify=True</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20250205 13:17:52.987" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2' | verify=True ]</msg>
<msg timestamp="20250205 13:17:52.991" level="INFO">Creating Session using : alias=mysession, url=https://petstore.swagger.io/v2, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<msg timestamp="20250205 13:17:52.991" level="DEBUG">Creating session: mysession</msg>
<msg timestamp="20250205 13:17:52.991" level="TRACE">Return: &lt;requests.sessions.Session object at 0x0000027251EA7B88&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.987" endtime="20250205 13:17:52.991"/>
</kw>
<kw name="Get File For Streaming Upload" library="RequestsLibrary">
<var>${file}</var>
<arg>${EXECDIR}/puppy.jpg</arg>
<doc>Opens and returns a file descriptor of a specified file to be passed as ``data`` parameter
to other requests keywords.</doc>
<msg timestamp="20250205 13:17:52.992" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg' ]</msg>
<msg timestamp="20250205 13:17:52.993" level="TRACE">Return: &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;</msg>
<msg timestamp="20250205 13:17:52.993" level="INFO">${file} = &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.992" endtime="20250205 13:17:52.993"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${files}</var>
<arg>file=${file}</arg>
<arg>additionalMetadata=abcde</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:52.994" level="TRACE">Arguments: [ 'file=${file}' | 'additionalMetadata=abcde' ]</msg>
<msg timestamp="20250205 13:17:52.995" level="TRACE">Return: {'additionalMetadata': 'abcde',
 'file': &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;}</msg>
<msg timestamp="20250205 13:17:52.995" level="INFO">${files} = {'file': &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;, 'additionalMetadata': 'abcde'}</msg>
<status status="PASS" starttime="20250205 13:17:52.994" endtime="20250205 13:17:52.995"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_ID}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:17:52.996" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:52.996" level="TRACE">Return: '75ac93e4-e3aa-11ef-b24c-744ca1d2e576'</msg>
<msg timestamp="20250205 13:17:52.996" level="INFO">${NON_EXISTING_ID} = 75ac93e4-e3aa-11ef-b24c-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:17:52.996" endtime="20250205 13:17:52.997"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${RESPONSE}</var>
<arg>mysession</arg>
<arg>${BASE_URL}/pet/${NON_EXISTING_ID}/uploadImage</arg>
<arg>files=${files}</arg>
<arg>expected_status=any</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20250205 13:17:52.998" level="TRACE">Arguments: [ 'mysession' | 'https://petstore.swagger.io/v2/pet/75ac93e4-e3aa-11ef-b24c-744ca1d2e576/uploadImage' | files={'additionalMetadata': 'abcde',
 'file': &lt;_io.BufferedReader name='C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/puppy.jpg'&gt;} | expected_status='any' ]</msg>
<msg timestamp="20250205 13:17:53.001" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:53.882" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/pet/75ac93e4-e3aa-11ef-b24c-744ca1d2e576/uploadImage HTTP/1.1" 404 None</msg>
<msg timestamp="20250205 13:17:53.882" level="INFO">POST Request : url=https://petstore.swagger.io/v2/pet/75ac93e4-e3aa-11ef-b24c-744ca1d2e576/uploadImage 
 path_url=/v2/pet/75ac93e4-e3aa-11ef-b24c-744ca1d2e576/uploadImage 
 headers={'User-Agent': 'python-requests/2.28.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '69276', 'Content-Type': 'multipart/form-data; boundary=a942d3c5cedcd9e507487bfff40b8951'} 
 body=b'--a942d3c5cedcd9e507487bfff40b8951\r\nContent-Disposition: form-data; name="file"; filename="puppy.jpg"\r\n\r\n\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00\x84\x00\x06\x06\x06\x06\x06\x06\x06\x07\x07\x06\t\n\t\n\t\r\x0c\x0b\x0b\x0c\r\x14\x0e\x0f\x0e\x0f\x0e\x14\x1f\x13\x16\x13\x13\x16\x13\x1f\x1b!\x1b\x19\x1b!\x1b1&amp;""&amp;18/-/8D==DVQVpp\x96\x01\x06\x06\x06\x06\x06\x06\x06\x07\x07\x06\t\n\t\n\t\r\x0c\x0b\x0b\x0c\r\x14\x0e\x0f\x0e\x0f\x0e\x14\x1f\x13\x16\x13\x13\x16\x13\x1f\x1b!\x1b\x19\x1b!\x1b1&amp;""&amp;18/-/8D==DVQVpp\x96\xff\xc2\x00\x11\x08\x02\xc7\x03 \x03\x01!\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1d\x00\x00\x01\x05\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x03\x04\x05\x06\x07\x08\t\xff\xda\x00\x08\x01\x01\x00\x00\x00\x00\xf4\x99g\xb1nR\x8a\x16R\xcb4\xb3H\xf1W\x8d$r\xd8\x98\x9a\xbd`\x14\xe7%\x99^*\xf1\x839\x9d\x99SW\xa7\x14h\xe4\xb3i%\x05Xbe5\x93`\x8f:\x84HNi@\x04sr\xe1S[\x98\x061\xde\x9e\xc5\xa3z\xc0\xd2I,\xd3\xd85\x0c\x00\xc9\xe4\x96y\tW\xaf\x109I-\x89PW\x85\x84\x9eI\xa7M\x1d\x1a\xf1\xb1Kb\xd4\xa9\x05h\x00Y\xe5\xb2\xcc\x10f\xd3\x89I%\xb2\x8cB,\xcc\xc1Gn@\x85\xa2\xe9\xacNcXT\xb2\xcb&lt;\xf6\t\xe0\x80\x05\xdc\xe6\xb1#\xaa\xd0D,G5\x99Y\xa0\xae,\xe5,\xb3\x12\n\x94\xe0\x15%\x8bV](*\xc4.\xa5\x9c\xd9\x82\x9eeh\xdeK6X\x00b\xc8\xcb\x17\xb1nH\xa2\x10\xebd(`O$\xd3OjWPD\x02\xe4sX\x91\x9a\n\xd1\x0b\xbc\x93Y\x95*\xf0\x03#9\xa7&amp;U\xe8W\x89\x14\xb7-\x9b!\xad\x04i\x1d\x89\xd2\x18\xb3\xf3\xab\x0b\xcdv`\x01\x081\xf3@\xac\xdfp\x88#\xeb\x9e\xa0#9\xe7\xb3&lt;\x84\xabF\t&lt;\x93\xceN\xd5\xebB\xceGb\xc4\xac\xa3\xad\x1b1\xc94\xc6\x94t*B%,\xfa\x06\x9d\xa1\xad\x10\xa2\x96\xcc\x82\x9a\x1c\xca\x101Y\xba\xe3\x18\xb5l:1\x95\xcb\xc8"\x10\xe9\xaa\x89\x1c\xd3\xcfjg0\x80\x01\x13\xcb,\xee\xed\x05\x18E\xe5\x9a\xc5\x89R\x8e\xbcL\xc5,\x96\r!\xa9B\x08\xdc\xec]\xb0\xe9\rX#g\x96\xc4\xee\xc9\xaa\xe6S\x81\xa4\xbbl\x04B:\xb8\x94B[\xb7X\x020\xd7\x13\x92[6-\x1b\x9cp\x801\x9c\x93\xc8N\xd0g\xd7Ds\xdb\xb2N\xe3V!r\x92K\x06\x92\xafB\xa4bs\xdc\xb6I&lt;\x15c\x89I5\xa3L\x9a\x8emX\xd4\xf7\xa6\x11\x08\x82\x8e-6\x92\xfd\xc1\x8e6\r\x13\x9a[6\xe63Q@\t\x19\xcb9\x9a\x18)T\x17\x9akv\xe4H`\x80X\xa4\x96\xc4\x89(\xa8\xd0\x84\x0ek\x97%I5Z\xf13\xcdfvIG\x9bJ\xa8Kf\xe9\x0cq\x8cT1 \x1b\x17l\x8c@\x83Jk\x16-Hd\xf5\xe1\x14e,\xb3\x92O\x05\x1a\xd1\xb4\xd3\xdb\xb9"u\x05pJIlH\x99\xc6\xa6uX\xcakW\xe7I \xa9\\\x1c\xe7\xb2I\x99C\x95R\xb3\xcfz\xd0\x83F\x11fdV+\x1a\x06 ,:\x96.Nf\x9a\x08\x19I$\xb3Li\xd4\x14+\x02\x92{\x96\xe5N\xa2\xaa\t\x14\xb6%N\xca\x0c\xcap\xa9l\xdf\xb8\x92v\xafV&amp;3\xb32d\x86\x9e]@;:\x12\x88\x88\x0499PIgE\xc6 M\xb5ng3\x8e\xa4l\xf2\xc9&lt;\xf3\'v\xadN\xb0\x11\xd9\xb5nT\x9c+D(\xa4\x9e@R\xbcY\xf9\xd5X\xe7\xb5\xa9)\xa6AV\x00G5\xa4\x930g\xe6\xd6i/h\x10\x03\x00C\x8b\x96\x13\\\xbc\xd1\x88\x83tg!\x1cU#c\x92k\x16\r\xdd*\xd5+F\xf3On\xd9\xbb\xa6\xab\x1ch\x88\xe3\x0c\xdc\x9e\x8c\xf0(T\x07\x9ei\xefK&gt;\xec\xcd^\xb4BgjD\xc9\x9a\x1c\xba\x10\xabZ6\x90\x08\x83V\xc4\xce\t\xef\xdc\x08\x98@zC7\x8a\x9c\ni\xa6\xb39\xb1\xa5^\x84\x11\x9c\x93\xdd\xb4i\xd2\x82\x18\x93\x94u1j\xd0\xc8\xb3\xa2\x9a("\x92V\xbe\xa2\xd3\xe9\xb4\xebW\x04s\xd9L\x99*\xb9\x15#;\xda3\x08\xb00U\xc2\xcekZ3\x80\x83\x00t\xa6\xf0\xd0\x89If\xcd\xb9\xdd\x9d*\xd4 \x07\x9e\xcd\xbbN\xe8\x940F,\xa9\xe0\xd6\xa7\x81\xc0u{6\xed\xb4\x14!\t\x8d]k/\xd1t\x04\x0f5\xa3I\x935\x0c\xaa\xadcB\xf9\x0b\x08 \xa3\x85A\xae\xe9\xcd\x10\x03\x08\xf4\x8d^\xa4M&lt;\xf6oJ\xe9;U\xa1\\N{\x17,\xa2D\xa2\x80+C\x97\x9b\x98\x13by}\x8e\x9f\xa0\xb9z\xae}Z1\xd9\xb1eX\x90\x83g\xb32\xb1i;3\xa8\xf2\xf3\xeb\x1d\x9d;L(XG;\n\x8a\xbf\xad$Q\x80\xb0\xef\xd3\xaa*kV\xaeJ\xe8\x98k\xe6\xd6\x13\xb3j\xe5\x84N\x90\xd7\xa3\x06^\x1e52\x96?$\xc7\xef\xfb-9\xb3\xabC\x00\xe6\x96\xc6\xddz\x16f\xb6W\xf7\x8bSQ\xdd\x92hq\xe9E%\xfd#afv\x1c\xbc\x1ae\xa3\xacQ\x0cL\x03z\xa29m]\xb5+\xa7MW6\xa8If\xe5\xd9\x9d\xd3\xbbW\xcd\xca\xc0\xa5\x91\x90\xa5&lt;O5\x97\xd1{\xf9\xf3\xf3 \x8a\x193\x95\xde\xcb\n\x94\xda\xb6\xe9\x9d\xa0\xeb\xf5\xef\xd8N-O&amp;\x98\xd9\xd1\xbe\xe0)\n\x1c\x8cJrki \x01\x00\x08\xdak7.Z4\xe9*\xd9\xb4\xc0\xed\xdd\xbb1\'t\xa0\xa9\x8d\x8d\xceeg\xe7\xc5v\xcf\x0f\x85\xda\xf7\x17 \xadJ\x08\xab\xc4\xc3{\xa4\xc2\xcd\xbbf\xf8GZ\xb7u\xb1\xa9\xbde&lt;y\xd95\xde\xde\xc5\x80aL\x94x\xb8\xb5\xe6\xd8\xd0Q\x8cb!FK\xb7\xb4\xa6&amp;D\x95\\\xdaqKn\xed\xe9\xd3\x92J(*\xf1&lt;~\x15\xc8V}\xfc\xccl^\xcb\xba\xceg\x05\x97N\x9c\xaf\xd1W\xce\xa9\xa4\xf6o?\x1f\xcdu\xdd\xd6\xafQ\xd2\xce\xa1\xc9\xcd\xaf.\x86\xb4\x88E\x99(\xb12+[\xda\xb6"\x00\x0c\x14/_\xd0\xb0\x9d"\x1a\xd9\xb4\xa3\x9a\xcd\xfb\xd3;\x9aO\rq\x0f\'\xe5"\x8a\xfdl\x9e\x93\x99\xc1\xc0\xf5M\xaaJ\xec\xd0fQ\xa5^\x1e\x8e\xad+o\xa5~\x1a&lt;\xbe\x15\xcfE\xd0\xdb\xeez"\xaf\x8b\x9d\x1d\x9d]$\xcc\xcc\xc9W\xc2\xc9\x8e\xee\xe4\xe0\x0c"\x03_OFfH\x92\xad\x99N9m_\xbf3\xb994U\xe3x\xfck\x8b\xa7\xadd-\x1f\x1b\xc9g\xfb\'C\xac\x18x]&amp;&gt;L9V5L,X\x1a\xd3\xb6/\x12\xbb+\xda=o\xa2oA\x8dE\xafl[d\xcc\x85*\x98\x19\x91\xe9\xed\xc8 ",\x16tdN\x92U\xf3)\x0c\xb6\xb4/\xcc\x9c\x9d\xde:\xd11\x8f\x80r\x87\xb3lc\x87\x8c\xe5\xbaoU\xec2\xf8\x9f?\xd2\xed\xeds\xf9\x94\xe7\xbfr\xc6\xa5xs\xaaM\x8f\xc5kts\xbd\xee\xdf\xd2/eV==i\x13$\xc8U\x1e\x7f5\xf5\xf6\\@\x19\x80veL\x9d\xd5L\xea#5\xcb\xf7\xa5rwt\xd5 G2\xf0\xdeZW\xd2\x86&lt;~\x0e\x9f{\xea+\xcf8|\rn\xdf[(\xf3\xae\xad\x1d\xb89M\x91\xc5\x8f\x1b\x07\xa2\xbf&lt;\r\xd3v]\x95\xd8\xa5\xd7\xd0t\x85\x99&amp;\xce\xe7\xb3\xe6\xda\xd8\x8dF\x0c\xcc\x1bn\x99\xd2\xad\x97P\'\xbb\xa1vGDI\rj\xad$\xf6$\xf3\xcf4\xa9j[\x90p|\xa5\x0e\xef\xd0\xfc\x97\xca4-a\xfa\x8e\xf1n\xe6j\xe2\xd9\xd6\xe78\x8b\xfe\x83{\x92\xe7p\xba\x89d\x81\xb5\xba\xae\xbf\xa8\xbdcf\xd0\xa6\x14\x99\x9b3\x9f\xa3c\x7fI\x80A\x84Cm$\x95l\xaamf\xee\x85\xc2\'rN5j\x04\x96g\xb0X\x1e)Z\xdd\xb8)\xf9\x95\xda\xdd\x06\xaf\x9dy\xf4&amp;\x1dW\xa0\xe9\xe9\xa9\xf0\xb2\x87\x82\xe7{&gt;\xd7{\x1b\x91\xe5;\x9a\xf3\xd2\xb3\xa5\xb3\xd0v=&amp;\xd6\xb9\xa0t,\x90\xe4s\xf5ntW\x01\x81\x0bF;I\xd9T\xcb\xa2\xd6\xae\xe8\xdd7N\xe4\xca\n1\x1c\xf6mH\xcd\xe3\xbc\x94\xd7a\xe3\xb8\xee\x93W\xaa\xb5\xccx\rl\xed\xafO\xe9\xad\xdb\xd7\xa9\x8f\xc6p\x9cwE\xce\xf6~\xab\'\t\xc4\xfa\x1dK\xceS\x8fA\xd3u\xfd\x8e\xf8\xa4\x98]\x90b`A\xa3\xd1X\x10\x16@\x01\xb4\xee\xd4\xf2h+\x1a:w\t\x124\xed\x05*\xe55\xbbR:\\\xe7\x8a\xc9\'?\xc3\xfa\r-\x8e\x8a\x95_8\xf3\xd9\xfb\xce\xc2\xf0Z\xecx\xdc\xec\x1f\x1e\xe6m\xcfS\xd5z\xde\x17\x0b\xa0\xb1&lt;\xa0a\xa5\xd3w~\x91\xa0\xc9\x93;&amp;\x8b\x03\x0c5z\t\x04XXF=\xb7jX\xf4T\xfa:\x97\r:2v\x8a\x8df\xb1f\xdc\xa9\xd2n;\xc7r\xf9\x8fs\xca\xca\xb1\xb3G\x1dU\x8ff\xfc\xf1lv~{\xc9\xe3\xf9\xb7\x99\xcdb\xc7\xa6\xcf\xcd\xc1n\xfc\xf6#:\xba}\x0f\xb1w\x892\x12B\xed\x079\x86\xb7w\x08DY\x9a6\xdb\x1ay\x14\x1a\xc6\x96\xa5\xa7\'swx\xe9Si\xed[\x91"N\x87\x88\xf0?\xa3\xeb\xf1X\xc1\xd1\xd3\xa6\xd6\x82\xfd\xd9\xf5\xb7\x8f\x85\xe5\xb2\xf8\xff\x00&amp;\xc0\xbf\xeaZ\xb8\x19\x92\xe6oGl\\!\xe8~\x88\xea\xc5\x99$\xc9\xc6\xb71\x87\'G\xb4\x90\x88\xb0\x88lT\xc7\xa264\xf5,\x93\x93\x93\xbaT\xe8\x0c\xd6m\xcc\x93\xa4IAO*\xae\x17;[\xa6\x92\x94\xb5\xb4z\x9d\xb7\x8579\xc2e\xe1\xf3T\xe7\xd1\xb1J\x95Nc\xa1\xb9^zo/q\xf45\xc1L\xc92J\x8f-\x8b7Y\xa8\x99\x84XX,\xe3PV\xb4\xf5l\xa7rDN5\xa8\xc5%\xab\x93\xb2N\x91%\x0e&gt;\x06\xbe_5\x99\xd7L\x19\xf4}\x0b`#\xc2\xd6\xbf\x9f\xc8r\xbc\xf6.i\x1d\xd3\xa5\x9d\xc6\xf47B\x18\xe7\xb9\xef=\xdaB\xc92IgrY\x17\xba\xbd\x16L"\x08G6\x88\xdc\xd5\xd3\x9c\xd1;\x92u\x0e|\x07n\xdc\xee\xc9\xd3\xa7M\x9d\xcc\xe7\xf4r\xf29\x9dS\xc5\x8f\xd4v\xb4\xf1\xb0\xb9\x0e\xb1m7\'\xc2c\x9eu\xad\x13\x86\x86\x16n\x8a\x8a{}\x97\xb6^fd\x99\x93&amp;\xcc\xe4\xf2\xf5z\x9bi\x85\x85\x98G\x9c{z\xfar\x91;\xbb\xbax\xa8WV\xaeYN\x92t\xec\xf50r4\xfa:&lt;R\xd4\xb8\'\xd8\xac/\x0c\xf1\xeeW@=o\xd5\xf5\xf8\x8c\x0b\x15\xe6\xb2\x0b&lt;\xfc\xe3f)f\xe9\xbd\x97\xa4\x94S&amp;L\x936G\'Ko\xa6\x912aaa\xe6\xee\xeb\xe9\xc8Nn\x9d\xd3\xc7B\xb3Z\xb7m\xd2N\x9d%\x16W;/Yw\'\x8c\xcf\xd6\xd7\xbf\xa5v\xb67\xcd\xbf&gt;\x04Su^\x93\xec9\x1c\xf6\xac\xf3&gt;k\xe6\xeft\x7f;\xea\xde\xea\xfd+\xa7\xd5I\x992L\x90\xe1\xf2\xd5zm\xf6L)\x0b\x08\xe4\xec\xe8\xca\x88\x9d\xdd:\x1a5\x1a{v\xc9\xd2t\xe9&amp;\xcf\xe7\xe0\xd8\xda\x92\x9f%\x93k\xa9\xb9}\xf3\xeax\x17\xcdt\x85t\xbf@\xf6\xfc\r\x0e\x93KC:\xa44{\xff\x00I\xe0\xbc?\xd8\xae\xe8t\xb7\x99\x93!I\x9cG\x9f\xe5\x97U\xae\x85\xd8Y\x84X\xb4\xa4w\'D\xee\x82\xa5\x06\x9a\xe5\xc2N\xee\xc8\x93*\xb88\xba\xbd\r\xe2\xad\x8d\x8dWc^\xd5\x1apx\xaf\xcc\xf4D=\xbb\xda`\xe3\xa9\xf4\xda\xd7\xa8\xd4\xc7\x9b\xb1\xee6y\xccz\xdb\x9d\x1c\xac\x99\x0b\xb3$\xc1\xcc\xf3g\xd7i\xb3!d\x02\xc3\xa8n\xe6\xee\xee\xe9\xaaQ\x8akwH\x99\xd3\xbawPcr3u\x17\xa4\xb2\xa8\xe3\xd7\x8bvl\xccz\xde{\xe3|j\xec}\xe6L\xbc\xba\x9d\x86\xac\x14\xb32\xb5:.\xaf\xa7\xc7\xc0]6\xc1$\xe2\x99\x932\x8b\x96\xe7\xaeu\xd6\xd9\xd9\x84XDu\x9d\xcd\xdd\xdd\xddW\xcf\x86Kv\xe6N\x91$\xe9\x0eg%\x81\xbd\xd3Kq\xca,\xfa\xb5\xac\xe9S\xe7\xb9\xfe_\x13\x90\xea\xee\xdb\xd4\xe4\xe4\xd1\xed!\xa1\x0f:\x1b\x9a\x1b}\x85\\[\xbdM\xf1I\xd8Y\xd9\x92\x83\x94\xc6\xd4\xea\xa4I\x84XDCT\xc9\xc9\xdd\x12\x86\x8c/r\xdc\x8e\x93\xa7t\x9d\xaas\\D\x9d\x9e\xb62\xdd\x98 \xabX\xad6\x1f+\xc0y\x9e&gt;\xff\x00o\xae|N\xaf\xa1l\xe4\xd5\xa5GU\x97K\xd4\xaa:\xfd\x1c\xa2\x93\xb2fI5NS\'\xa0\xe9\x1d30\x80\x88\xb6\xab\x93\xbb\x92x\xe9\xc0Vn\x1b\xa4\x98\x93\xbb&lt;X|6/S\xd8\xac\x9bS]\x81\x83:\xb1=\xc8\xb1\xb2r\x86u\xe7\x1es\xeb\x9e\x81B\x9e%-\x0b\xf9\x12n\xf6\x06\x1d6\xc3\x82N\x99\x92I\xa8\xf2\x19\xbdO@\x99\x0b0\x80\x88\xeb#D\x89\x06}im\xda\x95\'I\xd3\xa4\xe3\x9b\xc6\xf1\xba\xfd\xbfCC\x07\x17G\xa7G\x1e0\xd3\x10\xbd\xa4l\xce\x18\xfc\x86\xcc\x19\xd5\xc3\x1c2m[\xd7\xeb\'\xbb\xd3\xddf\x14\x93$\x92l\xfe\';\xb6\xdbqd,"\r\x1e\xcb\xa7wp\xce\xce\x9a\xf5\xe9S\xa7I;\xb1*\x9c\xb7\x02\x1d\xcf]w\x0f\x16\xe5\xebC\x1c\xb9\x19r\xc4F\xac!\x82\x85\xa3\xabV\x8dH!\xe7*\xc7&gt;\xff\x00U\xa1\xb3\xd1\xca"\x92L\xc9$\xb2x:\xbd\xe6\xc90\n\x14"\x03\xae\xe8\x9d\x9b?!\xaf\xeaX$\xee\xce\x9d:xp\xfc\xfb\x0b\xb0\xeeub\xe5\xb1\xb5.KzQ\xc9\xe7\x15\xe7i\xa7\x8c\x152%W:\x89\xe0s\xf5ljht\x9a\x9df\xca\x01I\xd9\x92I,?&lt;/A\xd6L"\x84X@u\xdd\xc96~\x14z:\xd7\x1d\xd2$\xe9:v\xca\xe2x]\xff\x00B\xe8%\xad\xc9Aj\xdd\x9b\xea,\xfev#9/\xb1;P\x8d*\xb5\xa4\xa1\xcac\xde\xab=\xbe\xc7\xa2\xebn0\x0b\'fI:nw\xce/z5\xf4"\xcc\x98@\x1b]\xc9\xda\x8e\x05K\xfbW\xc9\xd3\xbb\xa7LIT\xe4\xbc\xd8\xfd\x17\xae\xbb\x15^r=I\xe76\xabO&amp;\xb0\xbc\xd7\t\x13g\xd6u\rj\xb9\x9c\xa9G,\xeb\xb2\xed:yD\x05\'d)\xd3\x87/\xe6\xdd\x0f\x7fq\x0b33\x00\x80\xed:z\xdc\xfe]\xdd\xcd)\x12$\x9d\xd2N\xa2\xe7\xbc\xd3\x9c\xf4\x1e\xf7V:\x91\xe5Y\xb8j8\xd5l\xba\xd1\xc6v,U\xb0\xf5+Vz\xe0\x1c\xb6qGc&gt;\xd7o\xdfo\x90\x03\x8aN\xcc\x92x\xb8\xef8\xec\xfb\xc9\x90\xb3 B\x02;.\xf1`\xe2\xcf\xbd\xacn\xee\x93\xa7N\xec\xd9|\x07\x98u\xde\x9d\xd1,\xd2l\xab\xd6\xd3\xbd`\xc6\x86*\xc6\xe6y\xd6\xac\x05ih\xaaY\xfc\xden\xb0\xe6enu\x9e\xab\xb6\xc2\t\x9d&amp;I3\xc1\xc1\xf9\xef\xa2\xf6\x86\xe2\xc0\x85\x98D6\x90b\xe0\x9e\xf6\xc4\xae\x9d\xd2wI&amp;\xab\xc7y5\x7f\\\xednQ\xcb\x95\xeb[\x99V\xb3\x10e\xd4\xa2\xd3\'\x86\x84\xf2\xcf\x13GV8y\xfa\xb4\xa1\xa5,\xfb\xfe\xd7\xa8\x84S:d\x9d\x99T\xf3\xbe\x13\xd6:\x87qaB,\x0c\xdb\r\x93\xcc\x96\xee\xdc\xc8\x93\xbb:vt\xa2\xe7&lt;\xb3\x86\xf5\x1fH\xda\x8f\x1e\x85\xc8r7\xed\x04\x91`\xd8\x97.\xb4DR\xd7\xaf,\x90\xcb\x14Ti\x1e=Zu\xe0\xb7w{\xd6\xf5P\xb2gI\x85\xd3*^]\xcbz\xf7B\xec"\xe2\xcc\x08\x03b\x8f+Sw\xa2\xb0\xe9\xdd\xd3\xa4\x92C\x97\xe6\xfeA\xdb\xfa\xcfM=\\*\xda\xb43\xeei&lt;\x15c\x8dA\rh\xa7*RGn\x92QA\x9f\x9d\x9d\t\xc5P\xae\xe9\xfa\x7fd\x98Rgd\x99&amp;\xce\xf2\\\xef\\\xd7t\xc2\x90\x8b\x02\x8e\xe75\x97\xad\xd3\\t\xee\xe9:N\x93U\xe3&lt;T}\x9f\xb6\xb8\xb3q \xdc\xa1\xc8R\xeb\xaf\xc4\x12d\xda\x85\xb2\xe3\x9e|\xeb\x11\xdd\x86\x82\x8e*\x99\xf941\xb4\xec\xd9-/C\xed\xac\xb3;;&amp;d\xc9dx\xdc\x9e\xbd}\xd93\xb0\x8b\x08\x0e.^\xa7I\xa0\xe9\xd1$\xee\xce\x92\x8f\x9c\xf2&gt;\x07\xd9=#P\xa1\xc2\xc6\xbd\xbb\x91\x99\x9b\x7fBF\xa3\x95\xa9\x0b\xe3#2f\x94`\x89T\xc6\xc0\x8a\x8a\x9a\xf4G\xa5\xdaz-\xd3I\x99!I\x93`xOI\xeb\xd6\x99\xd9\x9d\x08\xa1\x00\xe34:\xad\x12\x12D\xe9:I\xd0\xe5y\xb7\x8f\xfa\'\xac\xf4\x125&gt;r\x1d],l\xbc\xe9\xb6\xec\xc3O2h-\xd0e^\xccV\xa8\x9b\x00\xe3\xe3sT\xf4\x0e\xdc\xd2Z\x9bg\xd1\xf6\xa5I\x99\x93$\x99\xb9\x7f\x9d\xbd\x17\xd7l2avfa\x10\xe5\xba\xadd\x93\x92D\x93\xa4\x95&gt;#\xc4\xf5\xfd\x9b\xac\xb0\x873\x9d\x87KO\x94\xadJ}\xdd\x83\xa7\x92\xf9\xf3\xc54R\x8cV)\xb4sR\xe4y\xeaW\xf5z*\xf93\x80\xde\xf5\x8d\xb9S\xb3&amp;L\xce\x9b\x8e\xf9\xbf\xda=BAB\xc8P\xa6\x10\xaf\xb4i\xd3\x13\xbat\xe9(\xf9\x7f\x17\xe5=\xd7\xbe\xba\xee\x18\xbc\xec0n\xe4\xd4T\xce\xed\xebV(\x04J!\xd0\xab\x1d\xa8"\x8a(ry\xf9\xb6u\xa3\xcd\xcdP\xd6\xb9\xea\xbd&lt;\x8c\x92d\x992n\x17\xc0=\xef\xbb!\x06fd\x84E\xafJ\x92t\xe8\x92t\xce\xd9\x1eS\xe2\x9e\xc9\xeb\x9b$\xea.w\x06\x9c\x9b\x199\x11\x85\xad\xe5SF\xdcP(\x82\xdd(n\x85qY\x85\x15\xbb5G;\x1f&gt;\x94w}\x9b\xa7\x95\x92I\x92I\x83\xcf&lt;\x1f\xe8\xce\xbd\xc4\x18P\xb3\x802\xd1$\x93\xa4H\x92d\xd58\x0f\x9f\xf7\xfd\xef\xae\x95\xd2\x87\x98\xe7\xa1\xbd\xa7\x8d\x9b\x99\x0e\xd4\xf5\xf1\xf5w.I\x14q\xd8\xa9R\xca\x11\xaf\x04\xd6\x99\x9b\'\x91\xa3M\xa4\xbb\xeb\xbd\x94\xc9$\xcc\x92w\x87\xc9\xfcc\xe9\xce\x95\x90\x8b\x0b!\x10f\xd4I\xd3\xa7wI2\x8b\x92\xf0\xae7\xe8oH\xba\xe9\xd4\x1c\xbf,{\x16\xf1\xf2\xf3\xafG\x17?\x9b{\xb4\x9a\xc4\xba\x10KV\x95\x95Zh\xdeL\xbc\x0c\xb9\x96]J\xb6\x1a\xdf\xabw\xf32vfqD\xabx\xa7\x0f\xf4\x9e\xb3&amp;\x10fH@C]3\xbaN\xee\x85%\x83\xe3&gt;+\xee&gt;\xc7\xb4i\xd2\x8b\x9e\xe2\x9f\xa3\x9b\x9f\xa3U\x06pV\xcd\xd5\xdeWm]\xb2\xab\xbbS\x94\xe0\xc7\xe7\xb9\x1b\xd7\'\x939\xe2\xab\x7f\xd2}.vt\xc9\x92gz\x1f;\xc5\xf4M\xe4\x80E\x93&amp;\x00\r\x84L\x9d\xd2N,T\xbc\xcb\xe6\xdf@\xfa\x0b\xa87N\x99\xb2&lt;\xf1\xba\x0b\x1c\xc62\x87\x9b\xa3a\xa9\xedt7Dom\xddQ\xd6\xce\x80s\xa0\xc6\xc5\xae\xf5\xf4-\x9dEc\xd0\xfdBWL\xe2\xe9\x92|\x9f\x96:o\xa2-33\x0b!B#\x1e\xbb\xbaN\xee\x93&amp;\x8f\x90\xf9\xd3\x99\xfao\xd0\xec\xa6D\x99g\xf09=5\x8eR\xd4X\xf9\xd5\xa3\xbf[7sL\xa7iz\xa6\x8a\x9edy\x95\x16v\x15\xd9\xb2.:p\xbd\xdc\xfau\xa7I\x93\xa4\xce8_&amp;\xfag\xbc\xce\xcc\xc8P\xa1`\x00\xd8&amp;D\x89\xd2\x14\xd8~%\xe2\x7fDz\xf6\x8b\xa4\x93\xa6\xa9\xc6s]\x05\xbes\x02\xb9\xcfR\xa4\xf7\xe9A\xa5\x1d\xbb\xb5zk0A\x9c\x1c\xf4W\xa8\xd1|jS[R\x14\xdd\x97\xaa\xdc2\x14\x89\xd98\xf2\xdf\x1f\xfb\x8f\xb9\x1a\x14\xc2\xcc\x81\x08\x06\xc12wH\x99\x95/-\xf9\xaf\xd0\xbe\x92\xe8\x13\xa6t\xec\xf5\xf00\xb5\xf3\xb9\xaa\xd9gJ\xbdr\xbdi\xaa\xd5\xd3\xd6S\xda\xb5\x15\x0c\xdc!\xd1\x96\xa5&lt;\x91\xcf\xb59=\xde\xe3\xd0\xf4%$.\xe9\xdd\xdb\xce\xfe9\xfa\xaf\xd7\x12ff\x14,\xc0\r\xae\x9d\xd1:vh\xb8O\x9aq~\xa9\xf4SI:I&amp;\xa3\x8fo\x90\xc4\xc9\xa5J\x01&amp;\xb5r\xeeu]\rY\x18o\x05\x0cLkw\xa7\x92\x841R\x81\xedn\xf4=\x1fA\xa1#\xa4\xee\x89;\xf9\'\xc9_e\xfa#3!d(D\x18v\x1d\xdd\x12IG\xcf\xfc\xf3\xe2\x7fM{}\xf0I9$\xcc\xd0\xd1&gt;/\x9c\xcf\xcc\xa6a;\xa9ujL\xebF:\xa8+bg\x9c\xba\xb6\x9a\xf2\xad\x01\xedn\\\xb3\xa5x\xc8\x9c\x88\x9d8\xf8\x7f\xcc\xdflvl\xe2"\x90\xa0\x06h\xf6\xdd\xdd\x89:\x0c\x8f\x1c\xf9\xbf\xd2\xbe\xa1\xe8\x93$N\x99\x02\x08j_\xe6\xb9ZY\x99\xf5\xa3\x9aI$\xb3N\xc5\x95$\x95kCG\x0f,b\xe8:\x0b\xb7\xac\xce\xf3Z\x9eY\xac[\x9aG)dtE_\xe6\xaf\x1d\xfbo\xa3d\xcc\xcc.\x0c\xc0\xc1\xb2i\'&amp;h&lt;\xef\xe6\x1c\xef\xad}\x12AH\x9d&amp;\x15\x1cT\xdbPj\xd2\xc6\xe5\xb1\xa0\xb8\xacA\x8d\xc1o\xf4\x05p\xa1\xa3C\x0b\x9c\xc9\xa1\x9f\xd5{\x1e\xa9\xdb\x9c\xecZ9\x10\xdc\x9eY\x0eY\x1c\x88\xaa|\xa1\xcc\xfd\x9d\xa4\x92a\x06L\x08\x19\xb7]$\xee\xd1\xf3?7x\xf7\xd3\xde\xebi3\x11$\x85\x08AY-\x11\n41\xea\x15h\xf3\xbc\xa3\xc6{\r]\x0e\x92\xfd~;;+#.\x1a\xfd\xcf\xd0Z\x13Kp\xac\x199),O!\xc8R\x1c\x8b;\xe3\xab\x7fa[I\xd9\x80\x1cE\xa3\x11\xe8]$\xe8hx\x8f\xcd=\xdf\xd6\xfd\x1b\xb2D\xee\xcc\xce\xd0\x84Y\xf1t5\xe2\xa7Z\x9c5\xaa\xc5G\xc0\xfc\xb6\xe5\xad\xadK\xf9\x9c\x9c4\xa6\x81K\xe8~\xe7v\xe3\x94\xe4lv\x18\xac\xc9$\xb2\x1c\x8eE\xce\xfcC\xea\xbfT\xc8\xc9\xc50\xb3\x03\x087B\x89\'Qy\xbf\xcax\x1f`\xfa\xa9\xa6D\xee\x98S\xa1\x06\xa9\x06\xcc\x14`\x82\xbepW\xafO\xc48\x12\x96q\x88qc\x82ebn\xdb\xdc-\\\x19Zd\xa6\x9e\xc4S\xcb$\xb2Hh\xdf\x8e\xf8\x87\xe8\x1f\xa4H\x13\xb330\x8b\x007F\xeci\x0f9\xf2\xf7\x8b\xfd\x17\xf4\xae\x82d\xe4\xe9\x90\xbaL\xcdV[\x95)V\xa5P*\xd6\x8e\x97\x98\xf2\x11E\rj\xf1\xd3\x81\x9eI\xad?\xd0\xfa6g\x94\x80&amp;\x92\xc5\xa8\x1eid\x9c\xd1\x11y\xd7\xc5\xdfR\xfb\xaaL\x85\x90\xa1\x10a]\x1a\'MC\xc1&gt;k\xec&gt;\xc9\xea\x98S\x93\xa4\x85\'L\x80f*\x95\xa8\xd3zu)\xd7\xa9\xc3dU\xafZ\xadZ\xd5\xe2\x07R\x17\x13\xf4\xf6\xf5\xbb6gd\xa4+u\xdey\x0eY\x08\x9c\xbc\xd3\xe3?\xb0=i\xd2`d,\xc0,\xc3\xd3\x13\xa6\x8f\xcd&gt;J\xc2\xfb\x13\xd8\r\x93\xa2vH\x1d\xd9\x9d\x08I$ua\x8f2\x95*5+s\xb4j\xc1^\x95j\x95\x82 \x8d\xf2|\xef\xdf=KJ\xdc\xe6M!\xa9\xa1)$\x96bs%\xe2\xdf*}\xbf\xdc\x92ff\x16L-\x1b.\xa1;\x0f5\xf2\x97\x95{\x07\xd7\xda)\xc5\xc9$\x93:d\x90\x8a\xb1\x145\xe2\xa1\x9f\x9fB\xbd\x1a5kE\x05\x1a\xb5\xea\xc3PB&gt;\x17\x8e\xec\xbe\xa1\xd3\xb6e!5\xab\rH\xa6V%\x91\xcd/\x9b|\x1b\xee\xce\x84\x9d\xc133\xa0\x10q\xe9\xc8U\x0f\x9a|\x1fo\xed.\xdc\xd9\x92$\x99\xd2I\x93\xb0B\xda1\xd4\xadV\x9e^}hjAV(b\xabZ\xa5Z\xd5a\x8e\x97\x94ev?Rj\xd8)\tX9\x8e\x9a\x9aI\xcc\xd9\x98&gt;L\xe1\xbe\xe2\xd6qt".\x99\x93F\x1dX\xb0y/\xcb8\xdf`\xfb\x04\x84\xc9\xd1\'H]$\xc9\x0e\x1d\xed\xa8\xeb\xd3\xa7\x99\x9b\x9e\xd1\xd3\x82\x08\xa1\x8a\xbdZ\xf5+V\x82\xaf;\xe4\xf1\xfa\x8f\xd0\xfa\xd2\xbbZ\x05fK%H\xa5\x94\x89\xc5\xa8|Ew\xed\x9d\x02pt \x80\x10\xa1\x8b\xae\x15\xcd\xfc\x7f\xc2\xfa\xc7\xd8\x17\xcd:N\xe9\x9d"d\xc9(y\xae\xc5\xab\xd6\x86\x96}A\x82\xb6\\P\x040E\x05j\x90A^\x0f8\xf3\xa9=\x9b\xdb7f\xaam-\x8b\x93Oj\x9d\t\xa5F\x85\xf2&gt;\x1b\xef\xbe\xbe\x9aFd\x99\x0b\x02\x10Q\xf5#G\xe6O\t\xd2\xfbs\xbeD\x9d\x9c\x92@\x8d\xd2I\r-\tY\xa3\xa7\x99\x05\x04\xd9\xd8\xf5\xe2\x82(\x9a\x18jG\x1c4\xfc/\x9c\xd8\xf6\x7fR\xe9kX\xcd\xab&gt;\x9e\x8bJsT\x92ru\x1b\xf3\x7f\x11{w\xd2\xb6Rd\x99!x\x81\x08\xf4\xc3\xe2\x1f6\xe2}o\xee2\xa6t\x9d\xd2qrd\xee\x9a,\xbdz\xaa\x080\x1f/l)\xd6\xc3\xa3\x1cE\x12x\xe0h\x97#\xf3\xe4\x1e\x91\xe9\xfd_R\'\x83\xb7\xad\x1f5\xd7]\xcf!\xb31\x92\x88|\xa7\xe5\x8f\xa3\xbd\xc2\xf2\x06\x16d\x94l(\x07\xa9\xe1\xfeR\xe1\xfd\x9f\xeb\xabI\x12H\x913#I:!\xce\xf2\xefX\xcd\xd2\xb1\xe7\xd3\xdf\x83\x16\xe49\xf8U\x0c\xdd\xcc\n5\x1b\xf8\xdf\x91E\xf4\x86\xcc\xdd\xb5\xf9x\xfe\xae\xd4\xb8z6hT\x9b^iMVo\x02\xf9\xf3\xea?b\xb2\xa3t\xa2vaB\x02:?/y\x05\xef\xba\xba\xd3N\x93\xb9$\x92\'d\xee\xa2\xf3\x1f\x18\xfa~\x9e\xbd\x8f/\xee\xb2c\xc9\xcb\xd3\xa1\xccGb\xd4\x93\x1b\xb8\xb0g|\xeb\xc0t\xdfR\xc1\x9f\xd0\xea\x9f\'\xd9\xd5\x0b\x99\xd7)r\xfa\xfd\xa4\xf3\x98W\x1f\x9a\xfcs\xeb\xafK\x91\x867L)\x81\x99\x9a/.\xf9\x96\x87\xd4\x7fE\xc8\x9c\x93\xa2N\xec\x89:t\xedK\xe4\x1e?\xe9\xed-\xa9r\xb6q\xa8\xd0\xcd\xb5\x9d\x87\xa7\xa3fy\x8c\x94M\x1e\x0f\xca8^\xf7\xedA[/\x9di7\x82\x86\xeeT!K\xd0:[\x12\x13V\x1f\x8e\xf8\x0f\xb6\xbbb`\x14\x81\x0b!a8\xfe*\xe5=+\xedMRI\x9d\xdc\x9d\xd8\x92H\x93\xbc~u\xf1eO\xb1\xa1\x18\xad]\xa1S\x0f\x1e\xb4\x9dF\xfd\xf9\xe7va\x10\x87\xcf~X\xa9\xf5\xa7|\xd2\x15l\xbc\x8c\xfa\x9c\xc6\xf4\xb6\xbbm}I\x8c\x92\xad\x07\xc3\xf9\xdfhu\xa6\xc0\tFL\xa3f\x08W\xc1w\xbe\xf5\xeaM\xd31"\x91\'cqbrY\xdf%\xf8\xbf\xb8}oO\x17\xcf\xd6?/w^\xe6\xb6\xfd\xb9\t\x13F \x03S\xe7\xdf\x0c/\xb9\xaf:\x91\x08\x93\x84\xd2\xbd\xb3\x98Q:\xaf\x9b\xf0m\x1f\xbev\xc4E\x93\x80\x80\x88(\xd8~\x0c\xfag\xe9)\t\xdcR"4\xee\x93\x939!\xf2\xbf\x910\xfe\xf6\xed#hB\x08\\\x13\x88\x84ba\x12\x89\x87\x94\xf9\x0f\x9b\xef\xbe\xc8\x01#g\x8c\xcc\xcd\xcaR0r\x02\x8b\x96\xf8^\xd7\xe8\x04\xcc\x02\x81\xd9\x84D@#o\x8f\xfe\xed\xban\x92DI\x1a7I\xd3\xa6\xaf\xf1\xd7\x93\xfa\xb7\xd9\xa8\t\xa3@\xd1\xb3\xc6!\nA\x0bD1\xf9\x17\xcb\xd9\xff\x00V\xfa\xf2cN\x82S7"$,\x9d\x10y\x8f\xc6\xde\xaf\xf5\x94\xe2\xcc)\x81\x84Y\x81F\xd5\xfb\xa9\t\xc9\x8d\x8d\xd3\x11$i\xdd\xd9\xbc\xdf\xe3\x8c_\xbd{Wd\x02,\xe0\x9a0\x18\xd8b\x06\x8d\xab|\xb7\xe3\xb3\xfd\xe7x\x1c\x93\xbaDdc+\x88\'I\xbcC\xe5?u\xfay\xa3\x12\x16Q$\xd1\x83\x04a\xd7\xd826DN\xe9\xd27NI\xd5?\x92\xfc\x8b\xd4&gt;\xc97&amp;`\x14\x98E\xa3\x08\xc5\xc6\x05\x1cT&gt;\x1f\xe6\xbd\x17\xec\xc2\x18\xd0\xce\xecjC\t\x130\xa4\xef\x17\x81\xfc\xc3\xf4W\xd11\xa4\xca"\x8d\x98E\x80\x04;)dt\x8d\xd3\xb9&amp;3gvE\x07-\xf1\x87;\xf6\xff\x00\xa01\xb1\x10\x88:h\xc1\x81\x85\x0cl\x03\xe4\x1f\'\xe6\xfd[\xee\x02\x00\xeaG7cN\x90\xb2L\x90\xfc\xdb\xf3\xa7\xd4~\xd4\xec$\xa3\x10d\r\x08\xb8E\xff\xc4\x00\x1a\x01\x00\x03\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\xff\xda\x00\x08\x01\x02\x10\x00\x00\x00\xecR\x04\x92\xdb\x99N\xc5#\xa1C\xaa&amp;]R\x15X\x86\r\x8f2P\xd4+BCd\xaah\x13\xa6\xa0\xa69uM&amp;\xc652\x01\x12\xe8R\x16\xe2J\xa2QV\xa6Kb\x0b\x1a\x06\xc6)@,\xe8\xa5(\xa6\xe6J\xa9\x95UD\xc1l\x81\xe8\xc4\r\xb4&lt;\xc6)\x96\xda\x91\xd0\xa0,PU\xb53M\x92\xaa\xd8\x81\xb0fc%\x0c\x14\xd3iAT\xa6K\xb0\xcdU\x12\x8a\xab$*\x90&lt;\xd8\xa4`\x90\xd8\xa1;S#\xbap\xa6\xad)um&amp;X\xc4JR\r\xa9N\x82$\xa6B*\xd92\xad\x935UI7`\nRC\x05%\x01\x12\xe8R\x1a70\xd52\x19v!U\x82\t\x94\xc0%6\xc8\x81\xd1\t\x9aQ\x10;\x14\x95T\x80v\x00\xa5\x00\x12\x8a\x1a\x89)\xa9\x8a|\xee\xed\x8e\x9c\'Ur\x81\xd8\x81\xcaM\x90\'BS4\xc8\xe6\xf3}\x1f\'\x9d\xe9\xd9\xdd\xd2\xe9$\xde\x8eSU`\x81\x03&amp;A\xb1J\x9b\x0e?\x17\x8bZKj~\xee\xd6\xa4f\x8ee\x8fA\x03\x91\x8aPSP)\xb3\x97\xe7p\xeb\xc4\x87\xa8u{\xbaJ\n\xd0\x98m\xe8\x00$\xc5"\xa6\xe1K\x0f?\xc2\xe5\xed\xdb\x19\xce\xb5\xbc\xaf\xd3\xf4U\x85Y\x12\xdd\xda\x06K\x14\x01mBJ|\xef\x1b\x99\xfb\xdc\xbc\xf0\x8d{8u5\xf4\xbb\x02\xedD\xb2\xed\xa5BjR4d\xe6#\x83\xc2\xca\xb4\xf6x\xb9!\x9aw\xf0S\xcb\xd0\xf554\xa8\x90.\xdc\x8cd\xc8\x1a\n%\x0b\xc0\xe0\xab\xdb\xb7\x87\t\xab\xbe\xde9\xaa\x9f[\xb6\xb4&amp;\x01\xdd\x88\nP\x87TD\xcak\xe5\x04u\xf5y\xfc\xd3\xb6\xda&lt;\x9d\xf4qo\xee\xde\xa4H;\xb4\x985"v\xcc\xa5\x0c\xf9a\x1d\x9b\xf9q\x17\xae\xb0\xa7n\xdeNo\xa0\xeb\xd0\x89at\x02*F\xa9\xb8\x89\n_6\xb2=\x03\xcd\x94\xf6p\x9e\xbd\xf8\xf0v\xfb\x9b\x19\xa4=i \x1c\xb4\xdd,\xe6[\xa8\xf9\xf8\xcbN\xfeO?\xa63\xe9#=o\xbf\x0eI\xfa\x1e\xd39\x19\xad$\x00\x82\x99\x13 \xdc\xfc\xeeS\xbfw\x9b\x8f\xb3\xc3\xcb\xbc\xe3w\xafo6\x07O\xb7\xa6`\x1b\x04\xb0@\xe8\x98\x94\xe9\xcc\xfc\xfe\x13\xbfw\x99\xecz\xfeG\x94\x18\xf6N~\x97&gt;\x0f\x9b\xda\xf4\xa5\x0c\xd5\xa42YA0\x93\xb2\'\xc7\xf3\x8e\xbb\xe5\xf7;9|\x1a\xa3\xd5\xe1\xe4\xf5\xb9\xa20\xec\xf7\x10\x87\xb1#NJ\xa5*\x10\xedB\xe0\xf1/\xb28\xfd\x7f[\xcc\xf27\x9e\xdfW\x0f\x03\xd6\xc7\x9cQ\xf4m\x05jH\x06uc\xc9&amp;\xae\xb3\x95\x1f7\xa7V\\\xbb{\x9e\x1e\x1e\x8f7g\xad_;\xdd\x96\rG\xd1\x82\r\x9c\x00\xd1U\x19\x80\xb43I\xf8\xf1|\xdc\xcb~}\xbd\xaf9\xfb\x93\xe1\xf5\xc6\n\xb5\xf6@\x1e\xa40sT\xa2P:\x99A\x11\xc7\xc5\x87;\xd7\xd8\xf4&lt;\xae\x0fw\x93\xcf\xebx\xaa\xec\xf4@\x1e\xf3 9\xa73)\xab\xac\xe4\x18\xf8|\xcc\xb0\xd3\xdb\xea\xbe\x1f\x1b\xa7\x18\xea\xdb\x9a\x9f\xa7\xd44=\xd4\xa1\x85\xac\xd2\x02\xd4 \x1d\xf1y5\x87O\xad6\xfc,\xa5\xef\xd1\xce?v\x80+e\x03\x1bq\x08\x07P\x81\x15|\xfeEsz\xfa\xcd\xe9\xe6\xf9S[o\x89\xa7\xbc\x80+R@u0\x90\x9d\x99\x82\x1d&gt;\x7f=_\xa1\x1d\x87?\x1f\x89\x9e\xbb\xf4s\xafG\xd1\x00+G \x17\x9a\x94\xc7S"\x07Q\x9f\x11\xb7T\xea\xf1\xe1\xf2\'m;\xf0^\xe4\x83E\xd8\x90\xca\xc8Bvf\x00\x9d`r\xbd\xf5(^w\x975\xaf\xab\xbe\xee\x01\xa2\xed$\xc6\xa0\x04\xeed\x04\xd9\x8b\xe6]\x1a\x94g\xe7p"\xfd\x0fKY\x80M]\x12\r\xcaH-\xe6\x02\x1d\xe7\xcb\xb4e\xd3yo8\xf1\xf14\xfa}m\xa2@F\x95(\x1b\x94\x80\xd2`\x01;\xc3\x9fc-\xaak\'\xcb\xc8V:\xfb\x1d\x19\xa0\x03G(\xa6L\x88w\x98\x00\xa8\xc3\xce\xf4\x14h\xe7y\x9c8\x95b{]\x10\x80\r+0\xa0\x80E\xa9\x00E\xae^&gt;\xc2\x13\xd4\x8b\xc7\x88X\xcf\xb7\xd4\x92\x06\xb5y\x8cd\x89\x97\x08\x04:|^W\xa3\xa4LtZ\\1Y`{\x9d"C\r\x1e`S\x81\x16\xf3\x00\x06\x9f\'\x1fj\x8c\xa8\xb8\x82V\x1c\xeb\xdb\xeb\x00\x03G\x98\xc6\xe1\x15q \t\xd1&gt;o7u\xc7/B\xa9\x8dg\x0c1\x9fw\xa5R\x18\xae\xa168\x0b\xac\x90\x02n\xf1\xe0\xc3\xb3L\xb8\xf5\xd2\x9emg\xc7\x9a\xf7:\x86\x99/G\x986\xe1V\x93\x08\x01Z\xac8+w\x97;\xd6\xcc\x83\x0e \xf6{@\x04j\xf3\x07D+\xbc\xe4\x00VG&amp;[R\x9cc[3\x83.\x1b\xbf[\xa9\xb1\x01\xb1\x9am\xbc\xcd\x0c\x80\x01\xad9\xb8\xebrs\xc4\xb1\x92sq\xe8\xfd&gt;\xe6\xc1\x06\x8f0\xa6\xa6\x9c\xc8\x00\xaeo\x93\x87~\x892\xc5\x92\xb4k\x9f\x83w\xdf\xe8\xd2hU\xa1\n\x86E\x90\x80\x13\xb2&lt;\xfe{\xed|\xf5\x88\xe5\x8e9\xb9v^\x97\xa0\xd3\x11Z"F9\xd2!\x0c\x06k\x87\x9f\x92\xedy$\x9ec\xac\xfc\xe7k\xaf\xd7b\x18\xf5P\'No\x10\x00)^&gt;k\xe6\xe8\xeb\xceL\xdev\x11\xe7].\x9fd\x00u\xa2\xcc\x03I3i\x89\x8c3\xf2\xb7\xe6\xae\xec\xe2\xf0mR\xc7\x89\xba\xd7\xdbh\x03KP\x98[\xceZ`5\xae9\xf9\xbd\x1c\x8b\xd1\xce\x08\x13+\x9f\x95T\xef\xedX0\xb1 \ny\x80\x02\xb4\xe7\x0f;\xa3\x8e=e\x8c\xb4\xe48\xb1\xdc\xcb\x7fgD\x14\xac\x94\xc0\xa2\x00\x00\xaa\x89\xc7\xcd\xdf\x0c{uR\x98\xf3\\\xab\xbb\xcf\x9d\xbd\x9d\x00\r\x14\xa1\xb1\xc8 \x06\xb6\xc4\xe6\xf3\xb7\xe6\xcb\xb6\xe9\x0eiFz\x9c\x92{\x96\x00\xe9\xe62\x82A\x00i\x15\x077\x9d\xb7!\xd1\xcd\xdb\xa2\xac\xe8\xcd\xdc\xf1\xc5{Z\x8c\x0b\x99\x18S\x80@;!,&lt;\xedx\xe5O^\x9bVmMa\x84S\xf6\xb7\x13\x0b\x94\r:\x81\x00T\xe9\x98c\xe6k\xe7^&amp;\x9b\xed\xd5\x9dE\xf2s\xc5\x87\xb5\xd2\x00Z\x92\x84\xdec@\\^l\x8f*\xfc\xbaEt\xdfF\xf3\xcerD+=\xbe\xa4\xc4\xd8\x86\'P\x80\x06\xe4\x08\xf2\xb4\xf3b\x1d\xf4o\xa7nX\xcf.RY\xecv\x00\x8a\x10\r\xd6h\x01\xc6\xd9\x81&gt;M\xf9\x8e,\xe9\xde\xbb\'\x1c\xe3\x8b\\\xd5z\xdd\xc0\x03\x10*/4\x00\xe6\xe4\t\xe4\xe7\xf3\x9c\xddo\xa6\x9a\\Lr@\x1e\xb7h\x01I\x00:\x84\t\x8d\x02\x0c|\xce\x1b\r\xba\x1e\xcbX\x95\x87 uz\xda\x80+I\xa67\x12\xc1\xc6\xb0\x02q\xe4\xf9\xee\xd6\xfd\x8e\x8a\x9c\xaar\x8a\xf4\xf6\xd5\x02)9ld \x1a\xa9\x01\x0f\x83\xc7\x82\xfa\xbb\x9bDM\'u\xb6\x9b\t"\x84\xa8l\xcd\x03n\x00M\x99\xe5\xe6p\xef\xdd\xd3iH\xef\x07Zi\xa6\xa1(T\xe6\x80\xac@q\xac\x00\x01\x9b\xcb\x9a\xde\xe2\x87TsS\xbb\xd3f\x945NJ\x07\x90\x17\x96\x92\x02\x11$D\x9b\xb9T\xdc\xe1J\x9e\xfa\xb73QR\xe8c\xc51\xb9\x01\x08D\xc2\x93bJ\x05\x04\xd3\xdft!\xe7H\xa1\x8f$^z\xe6\x00\x89\x1c\xa9\x87a4\x95H\x9dk\xbbHy\xd0\xc0fH\xa8\xb9\x04\x08Nd\x83D\x91&amp;\x8a[\xab\xe8\x1c\x8f+\x18\xc5X\x82h\x04\x02NE\x06\x8a\x10\x8d\xe1*\xaa\xe8\x002\xd0`\xd3\xc5^Z\xc0 \x10\x9c\x93\x15\xac\xc2\x12\xd9AF\xda\x80)\xb1\x80\xccB5\x80\x04\tT%\x9e\xba(\x99\x1e\xd0\xa4\xd3M\x00\xa9V\x98\x03\xc2\xa6\x92\x00@\x81L\xce\x9aL\xa5&amp;\xd2\xa5\xd6\x9a\xb4\xdc\x16\x0c\x03\x1a\xcbD\x80\x04\x12I.\x99"F\x99\xdee\xde\xb4\x15\x050\x18b\x95\xc0!\xa0\x110[jA7\x17\x8c\xebw\xb0\xae\n\nM&lt;\xf2\xa0@\t0\xces6\xa2A\x951X\xdct.\x81\xd4:\x00i\xe7\x9d\xca\x00\x04\x04\xe4N\xa0\x147\x11\xb6-3\xa2\xa9\xe7clC\xc2nA\x02\x015\x85\x0cl\xaa\x12\xcf\\\xcc\xd3\xe9\xd0\xac\xf4\x19B\x0e{H@\x80I\x984\xcb\xbb\x02D\xb9\xf5\xe6zu\xd5^:\x0ccO\x9a\xe4\x04\x00\x92\x1f*\xd7;\xde\xa8ft&gt;u\x9dt]\x97\xcf\xb1I\xaa\x0e]\xb3\x10\x00"[\xe7\xcbW\xb5\xb2\x91\x96\x89*T\xaa\x9b\xc3q\x8d1\xf3\xd2\x96\x84\x02\x13\x1a\x18\xc6\xc9\x9dT\xa6\x052\xb0\xe9M\x80\xcc)"A \x8a\xa0C*h\xac\xcb\x12\x13,o\x1d\xca\x04\xc31\nA\x08E \x06\x16&lt;\xcbs,t\x8ax\xf4&amp;0j\x12\x14\xa0\x02[\x10\x9b\n\xa37D\x80R\xb0\xcbv\x0c\x07\x9c\x84\xa11\x11`\x90\xdb\x0bQT\xa4sM\xb1F\xe3`\x07\xff\xc4\x00\x1a\x01\x00\x03\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x03\x04\x05\x06\xff\xda\x00\x08\x01\x03\x10\x00\x00\x00\xe4\x06&amp;\xd9!NPY(v\xa6]T\xa4\x02\x00L@\xa8\x06\x0c@\xed@UJET\xcav\xe1&amp;\t0\x04\t\xb6\x866\x93)\xcc\x8e\xcc\xc6S\x89*\xd4\xa0\x1c\x80\x02\x00l@\xdasW2*\xb8I\xdb3N\x9aR\xd8\x92`!\xa0`\r\x88(R:\xa8\x96hL\xa2\xdc\xc8\xe9\x12\x98&amp;\x9a\x06\n\x86\x93l\x94X\xe0.\x94H\xe9\xa8m\x8aP\xc4\x00\r0h\n\x12\x1d\xb9\x91\xe8L"\x9b\x84SD\xa0\x00\x101\x80\x03d\x85\xb2\x13\xd1\x91)\xd8B)\xa2P\x00\x8460\x13lBv)\x1e\x82\x89\x1d\xb5\t\xd0L\x8cB\x00\x1842\x9a\x80\xabp\x9b\xb1d\x9d\xd99\x8e\xd2R\x00\x00\x86\x03@\xe8\x94;n%\xe8\xc5\xb9\x19\x84ILP0\x10 `\x00\xdbR\x17d\xca\xbe\x9e\xde_O\xa5e\xcb\xc3\xcf\x12\xdd%\x00\xc1\x00\x00\x98\x149C\xba"__\xad\xd46g1\xe1\xf3\xa7@@\x00\x80\x00\x01SjB\xdd(:\xbd\xdd\x87:\xd6j9|,\xa9\x8ea\xb15,\x10\xdaN\x99(z\x04\x9d\xfe\xcfL@my\xc1\x1eW\x9cK\x99E $\x00\x00\xb6\x94\x86\x97#\xef\xf6z\xd7\x97\xae\x9a\xd5O\x1fF+\x97\x83\x98Y\xa2\x84\x12\x02m\x0e\x99\x08\xabb\xec\xf7;\x1e&gt;WN\xfb\x0c\xe0\xea\xc1\x9ew\x9f\x99\x9a\xa0A \x03\nb\x94iM/k\xd5\xd5srto\xa1\'\x0fL\xca\xc7\xcc\xe32)\xb4\x92\x04\x01M\xa8\x15\xdd\t}G[8\xf9\xbb:\x07\x18\xce\x99\xe5;q\xf8\xd3\x91L\x08@4P\xc5)\xe9C\x85\xf5\xba\x87&amp;\x1e\x95N\x93\x95\xceq\xcb\xd3^\x07&gt;E1\x12\x81\x82\xa0\x12Wt(\x7fWV\xb8N\xc5\xadJH\xcb\x8b\xa3\xb3\xcc\xf1q,\x02\x10\xd0\xc6\x04\xa7\xa52b\xbe\xa7J\xcf\x8b\xa7zV\x94\xc5O\x06\xfd\x91\xf3\x9cm\xb0P\x03\x15\x00\x91Z0\xcc\xbf\xa5\xdc\xcf\x8b\xba\xbc\xde\xee\x84\x94\xc1\xc7\xbe\xe7\x9f\xe2\xe7m"\x00`\xc1!\xdd\x8er\xad}\xfe\xc9\xcb\x9b\xb7\xcb\xf2=of]r\x87\x1e\xdd\x03\xf0\xfc\xfa\x04@0\x18$\xed\xd3Y\xab\xd3\xd7\xf4\xa7\x19\xeb\xf0\xf8\xba\xfe\x834x\xfd\xfby\xfb\xedU\xe6x\xec\x11\x03\x13\x1bR=\x1bs\x93\xd6\xbb=\xdc\xb2\xad\xfc\xcf+\xd8\xf4\xf0|\x9e?G\xb7\xe7\xe9\xd2\xdf?\x81"\x08\x18\x05\xa4\x96\xb4\x0f8\xbd\x1e\x9fD\xb9\xde\xf3\xe4\xfb\xb5\xc3\xbf\'\x8c}\x17\x1d\xee\xcc~}\x00\xa0`\x172U\xd1S\x91\xad\x07\xaf\xd1\xc9\xd1\xd3\xaa\xbc&lt;\xafB\xbe~\xfd\xceu\xd1K\x8f\xc5\x00P4\xc5\xa4#V:\x8c\xabV\xcb\xd3n\xddz\x9e~_\x9d\xea\xf6\xf8\xdd^\x8f,n\xd7\x9d\xe6\t\x93\x0c@\\\x15\xa3\x1b\xc66\xb0\x1e]\x9e\x95\xf4/\x1f\x9a;\xfd5\xb1\xcf\x96\xe2\xf1\xf9\x00s\x90\xc0\x1c\x9aXT\xe3Z\xb0\x0c\xba\xfd)\xe8\x8f*\xf3~\xbfU\xe5\x8e{\x8b\xe7P\x06p0\x10\xafPfq\xa6\x808\xc7\xab\xd1]&gt;|o\x1c\xde\x87\xa5\xa6\x19\xce\xe77\x83I\x86p\xc0\t\xab\xb1\x86\x06\xec\x07\x8a\xe9\xec\x1f\x17O2\xdb_^\xb1\xcf.\xc7\xe3\xf04\xc50\x02\x05\xa5\xb1\x99\xc5\xea4\xd6\x1a\xed\xd4\xa3\x0e\x8eU\xbe\xfe\xa4\xc4\xf0z\x13\xf3\xf6\xc9jd\x00N\xecb\xc9mCD\xe7\xd2t\xceq\xb6Q\xa7g|\x19\xf9\xaf\x8au\x04\x11,\x04US\t\xcd\xec\x03Y\x9b\x9a\xbc\xe3l\r\xba\xfa\xf3k\xcf\xe3\xc6\xf4\x003\x96\xd0-U\x0c\xc9k@\xc5\x8e\x9d9\xbd2;yK\xdf\xab\r\x1f/\x9d\x8e\xb4\x023L\x13Z\xb0\xa9\xc6\xb6\x01\x93\x8e\xfd\x19\x8eN\xb5\xd1\xcb\xb5\xa7\xae\x1ef\x1aSB2(\x126\x18\xf3\xcf[\x01\xbcg\xa7\xbf\x8997\xcfY\xd3GT\xbc\xac4m\x01\x92\xb1!l0\xc8\xd8\x06\x18.\xbe\xceT4U\xab\xd2\xee\x9f\x91\xcf\xaab\x0c\x8a\x12\rFNz\xd0\xd3\'\x17\xd9\xe8q\xe4\xe9\xe7\x0c\xea\xb7\xae\xd1\xe4\xf3\xe8\x08\x16j\xdaH\xd5\x86+\xa0\x06\x9eQ}]&lt;\xf2h\x94\xbbwZ\xf4\xcf\x91\xcf\xa4\x89\xa39\xd5!\x1a\xb23\xbd@a\x82\xdb\xb7\xa3\x97\x1a\xdf5.\xa6\xf4\xea\xda&lt;|nZ\x03\x17bH\xd5\x99F\xf4\x03q\x89\xd1\xd7\xb76o\xa2s\x95\xa2\xa7\xe8\\\xf8\xf99hf\x0fD\x92[\xb8\xc6\xb7\x00\xa3\x08\xd3~\xa5\x81Z\x99\xca\xd5V\x9d\xe4\xf9\x19\x08\x01dZ\x14\x9b\x91\x96\xba\x00\xc3\x05\xb7F\xd8\xc8\xf4\xb8\x95t\xba:\xd2\xf22\x10\x01\x89\xa4\x89-\xccM\x98\xc0\x9cN\x9e\x97\x8c\xba\xd4D\xb2\xbaz\xa2\xbc\xaet\x80\x16.\xd0\xa4\xde3\xd3@`e\x9d\xf5ug\x83W\xa0R\x91\xef\xd8\x97\x9d\xc8&amp;\x82rzJB\xdf%\xb3\x18\xc9\xc5k\xd7\xd0\xb9\x15\x97Si\x1ao\xd0O\x9d\xc8\x00\x89\xca\xb4\x81%\xa6w\xab\x00##~\xad\x8e|\xed\xbbT\x85}\xed\x1c^x\x02\'+\xa9\x10\x9coE\x00\xb1\x9a\xdf\xb1\xed\x1cm\xadgIe\xf6\xeb\x9a\xe3\xf3\x80\x05\x19\xdd\x04\xa4\xafQ\xb0F\x06\xb7\xdf\x96\xef\x89\xdc\xe8\x026\xed\xd2\x17\'\x96\r\x06y\xdd\x04\xa96\xa1\x83S\x91\xbd\xf6\xe1\xd1|\x15j\x98\x07Gr\xcds\xf9h\x00\xce*\x84)7\x06\x0c\xc5V\xb7\xdb\x8fS\xf3\xe7`\x1a\xb9\xf47\xe54\xc7\xc9@\x06q\xa3D\xb9\xad\x00``\xb7\xad;\xb2\xdbNLK\x07\x16\xfa\xe7\x93\xb6\xf3\xf2P\x02\xcdj\x84\x89\xd2\x80a\x10\xb7zwg\xd1|\x99E5y\xd5Vgf\x87\x8d \x06KT\nV\xa3\x06,\xd3\xd5\xeb\xdf\x97M\xf3W4\x05\xc8\xd4k\xdfq\xe2\xcahy\x1a!J[\xa1\x80b\xb6\xa7\xa7v}u:r\xf3\xe6\\\xb1um\xba\x9f\x136\x80\xc9\xd8\x92Kt\xc0"gv_\xa1\x1d\x8a\xc3\x8a0\xa1\xcfOcA\xe3b\xd0\x19U\nD\xb7\x00\x0c\xd5[\x1f\xa3&gt;\x83\xb5&lt;3\x86f\xd5\xd1\xd1\xa1\x07\x8b\x88\x80\xcd\xd0\x91+f\x00d\xb6\x18\xfd\x05\xd9z\xc2\xe4\xc69\xabk\xdf\xa5\xb4\xbc|\x10\x06UD\x89-\x982$\xd0c\xf4\x17\xa0\xc9\x8c1\x9eg\xae\xb5\xd5n\xa7\xc7\xe6\x13\x0c\xad\x89"w\x003*\x86=\xfa;\xdb\x9cr\x8c\xb3\x9d,\xea\xdfE\x1e?0\x03\xce\x98$\x96\xc0\n\'a\x83~\x8fqQ\xcf\x82\xc4\x8b\xd2v\xec\xd2x\xfc\xa8\x18(\xb6$\x92\xd9\xb1(5L\x03\xd0\xf4\xaeg\x9b\x9ae*\xd1=5\xcf\xcf\xc7*\x1bR\xe8R%\xb8\x04+ch]^\xae\xb7\x97\x1f*\x91\xde\x99\xb5\x11\x9eY\x83\xa16A"\xe8\x07*5\x18!i\xafwf\\x\x04\xd5Lj\xa63\xcf \xa2\x93d\xc8\x97@\x12N\x83\x01\x1aM\xee\x96n\xe5\xcc=\x94DFB\xa66$\x93\x9e\x80 \xa66\x80\xa0\xd1\xb8V\xe2Uk\x04\xceY\xa0e\xcbHB\xe8\x02U\x8d\x89\x80\xdbm\x8dB*\x91+,\x90\x06\xb0\t\x01\xb3%\xc6\x83\x01\x80\xc7EQ2\x9c\xd8\x92\xcb\x10\x13\xd71\x00\x1b2)P\xd8\x00\xc66[ 2\xd0Js\xcd!\xad\xb3I\xa6\x1b5%\x83\x00`\xc2\x98\xec\x80\xcbF\x94F"b\xdb\x11\x80\x1b9q\xa00\x18\x0ctK\xa1\x0f+\xa4\xa7,\x98\'\xa6@\x00l\x81h&amp;\x00\xd3c\xb9\x97@(\xb1\x91\x9eh\x13\xbc\x9a\x06-\x874\xc6\x004\xdb.%\xd3\x05\x16T\xcc\xe2\x84Ud\xd3C[*\x8d\x01\x8a\x84\xd5\x03r\x14\x0eU+S\x19\xc0*\xac\x98\x86\x8dXP\xc11\x8a\x98\x08\x1bU\x05\x1a^\x11\x19\xa1S\xcd\xa0\x03K\x9b\x01\xa6\xc1+\xad\x0c\x93\x06\x19\xd5\x9a#\x03\x15%\x90\x80\x1a\xbds\xd0\x1a\x1b\x057\xa3 \x04\x04\xd5\xc6\x91Ra\x12\xed@\x00\x1a\xd4\xd00(\x12{C\x02I\x02\xaet\x8b\x0el\x91\xa4\xc0!\x8fh\xb0`1\x89\xd5\xcd\x04L\xa6\xa9\x9a\xf4\xe1\xb2\xc3\x9a$\xd7$\t\x81\xd1\x9d4\xd8\x14\x13W\xb9\x9e\xb9`\x90\x96\xb2\x9e\xee\xe7\x9b9\'\xa3\x02X&amp;o\x9d\x83`\xc6\x90\xf7\xd39\xc2Bh\xd7&amp;0R\x92]&lt;\xc2`\x83im\xb6\x0c%\xb4$\x84\xd2+\\J\x04\x92\x12\xe9\xe7H\x004\x19C\x189`!\x10\xdc\x97x\x8d\x88\x12K\xa7\x98@\xc0\xa2\x9b\x18\xc1\xcbnA$\xe5\x1a\x19\x8d\x89\xc8\x85\xbf;B\x01\xb6\xe9\x83\x18&amp;\xc1\x04\x84%\xbc\xc2l\x12\x12\xad\xf9\x80@\xd51\xd8\xc6\x13I\x8cI"Q\xbep\xc0$\x11[\xf2\xb4\x98\xc5\xff\xc4\x00#\x10\x00\x02\x02\x02\x02\x03\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x01\x02\x00\x03\x04\x11\x05\x10\x12 0\x13\x06@\x14\x15\xff\xda\x00\x08\x01\x01\x00\x01\x02\x01\x13B\x01\xa1\xd1}\xfa\x00&amp;\xba$\x9fA\x00\x03\xb2w\xe9\xa0\x00\xe8\x9f]@;bO\xa0\x80z\x18a\xebZ\xd0\x1d\x98\xf0\xf7\xad\x05\xf1\xf1+\xe3\xe3`+\xe3\xe2\x14\rkZ\x80\x00\x14\x08In\x87@\x00\x00\x1a\x84\xfa\x88\x00\x1dl\x93\xed\xa0:0\x937\xde\x80\xed\x89;\xecA\x00\xec\xc3\xd1\xf4\x1d\x1e\xda1\x87\xb1\x00\xe8\xf4e\x90\xf6 \x10\xfa*\x81\xa8X\x9e\x84\x00@\x00\x9a\x84\x9fm\x01\xae\x89\xdf\xa8\x03\xd0\xfb\x08\xa3\xd1\x8bC\xd8\x82(\xf40\xfah\rz&lt;0\xf6\x00\x9a\xf42\xd8z\x10A\xe9\xa8\x07E\xba\x10M\x00\xa0\x0e\xc9\xf5\x10\x00:\xd9\'\xd8@;\'\xb1\xd6\x80\xf4hO\xa0\x8a\x07\xa1\x86\x1fQ\xeac\xc3\x0f`(\xf5id#\xa1\x040\xcdk\xad\x96\xf5\x00\x0e\xc9\'\xdbZ\xebd\x96\x9b\xef@va\xf6\x03]\x98\xd0\x9e\xc4P\x07\xa3\x1fMhz\xb4x{\x10@=\x0cyd=\x08\xb0\x08f\x8fE\x89\xec\x00\x00\x03\xb2I\xf6\x03\xd0\xb1m\xf4 \x80k\xb2w\xd0\xeb@\x01\xd9,I\xdfB\x00\xa3\xd4\x9d\xf6\x00\xf51\xa3C\x0fB(\xf6x\xf0\xf4"\xc1\xecO`\x00\x00\xf4\'{\xdfz\x03]\x96f\xde\xfa\x10\x00=\t\xf6\x03\xd0\x96$\xf5\xa0\x14\x0fV\x87\xb1\x04\x10{&lt;0\xf4"\x80=\x0fVG\x86iB|t\x00\x01}\x0bo}\xeb@vI,\xc4\xf4 \x00\x01\xe8Oz\x00\x00=\tb\xc4\x98 \n\x00\xf5&gt;\xcb\xecc\x92{P\x07\xb5\x91\xbb\x11}\xf5\x00\x00\x0e\xf6[~\x80\x01\xafF,\xc7\xa1\x00\x01@\x1e\x8cO\xa6\x80\x1e\xcc\xccw\xd0\x8a\x15}L&gt;\xa0\x0ff\x8eOb(\x1e\xc6Y\x1b\xad(Q\xd9\x10\x80\x00U\xf4\xd9;\xec@\x00\xf5b[}h*\x80=\t\xf6\x03\xd4\x96$\x93\x04\x01F\xbdL&gt;\x80\x0fw,I\x82,Q\xd9\x9a\x86Y\x0fB(\x03\xd9T\x0fBI\xf4\x10\x00=K\x13\xde\x80P\x07\xa1$\xfa\x89\xb2\xca\xfd\x12\xecl\xfd&lt;\xfc\x83#\xa9\'\xd0\xc3\x0fb\x01\xecc\x93\x0fB(\x1e\xed\x1e\x1e\x84Q\xeaz\x1e\xa4\x96\xf4\x10.\xbdI\'p@\x00\x00\x0fR}\x04\xf2\x17\x1b\x1e\xc5\xc99v\xe4\xbd\xff\x00\xa7\x92\xb0o\xd0X\x1dol\x9a\xb2\xd5\xfah}@\xf61\xc9\xe8\x05\x88=\x8cidn\x94,\xd7\xc9\x89b`\x80\x00\x14{\x16$\x9e\xb4\x00P=\x0c&gt;\xba\xf3{\x1d\xdb-\xef{\xab\x7f\xd0\xb4\xd7\x99o0\xe1\xbfB\xe5\xaa\xc9\xa7+f\x18{\x00{\xbchz\x11B\x83\x0fZ\xed\xe3\x93\xd2\xc5\x1f"\xc4\xf5\xa0\x02\x85\xf5\xdb1m\xf4\x00\x00{\x12N\xfa\xf2k\xac\xb1K\xd9nE\xd7\xe11\x159\x85\xcb\x17.\xd6y)6\x87\xf2\x9et\xe6+\xf6\x00\x1e\xc6&lt;h`\x8b\x10\x01\xee\xf1\xe1\x82,_\x9310M\x00\x14/\xa9\x8c\xc4\x9e\xc2\xa8\n\x07\xa9\xec\xb1\xb5\xb2^\xf3p\xb7\xcb!\x86@4\n\'\x8e\xf7\x0c-\xe6\xa7\x1c\xba\x01[\xf9\xed\x8e.J\x99\xb5\x83\xdc\xc7\x87\xa1\x14(\xf7"\xc8\xf0\xc5\t\x07Z\x86\x1e\xf6\xceO@\x00\x14\x0fS\x19\x99\xb7\xd0\n\x02\xfb\x12c1\xb2\xcb\xac\xb3\xf4kGMg%zL*\xd2\x81S\xc7r\xf6\x16k  \xe2\x1a\xeb\xc8\x84\xc5\x84,\xa6\xe4\xbdmW\x1e\xed\x1e\x13\x04P\xbf\x1b#C\x04H;\xd7f3\x13\xd0\x01U@\xf6fbL\xd0\n\xa0{\x92\xf6Y{\xdan\xb5\xccB[\xcf\x93\xc8v\xa2\xace\xa4\xb0g6y\x12\xa4\xb4\xaaSe\x12\xf6\xf3\x0e\x086\xba\xbf\xebM\xf4\xd8-C\xea\xf1\xa1\xe9b\x0f\x81\x96G\xe8J\xc0\x9a0\xfa\xf9t\x00\x01@\xf6ff&amp;\x08"\xa8\x1e\xe4\xb35\xb6\xe4=\xaf{Zaj\xdc\xb9t\x98\xd2\xb7c\xfb\x16\x01\xe7\x9065\x87\x15\xb1\x95\xae\xc9\xb4\xbdMU\xad\x91\xb4\x97_Fe6\xad\xc9z7f9=\xacQ\xf0iln\x96W\xf2\x01B\xa8Q\xecc311B\x85P=\xc9\x8e\x96\xbeFG\x98\x02\x18\xf2\xb5\xcf-e\x97aS7\xa3\xdb\x08KJ\x1b\x14\xa5\x8c\xc24\xf2\xa8\x01d\xca\x86\xfc+\x92\xca\xef\xa2\xf5=4\xb2\x1e\x96 Q\xf0iln\x92 \xef^\x82(UU\xf61\x99\xdc\x98"\x85U\x1e\xe4\xf4\xd3.1\x0e\x19\xdc\xc6\xab\xc71r\xae\xc6\xb3\x16\xc8_aD\xd1\xe9\xd4\xb0)b\xb3@Uk\x1a{l\x99\x14\x03\x83\x91]\xca\xd4\xdd\x8dph\xe5\xc9\xe9b\x0f\x8b\xcba1"|QQT{\xb33\xee\x00\x02\xa8\x1e\xecOns\xec1\xec\xc7Z\xa7\x82\x0f1o+n\n\xe3\xd7Z~&gt;W\x9a\xf2\xc4+\xb7g\x88\x18\xe8\x00\xa2h\xba\xc2\xeel\x15\xc4\x7f\xd2\xbb\xb1\xb2\xf1\xf2\x96\xc7/\x0c\x11"\x0f\x8b\xcb!\xea\xb8\xbf\x15@=\x8c,\xccH\x00\x05U\x0b\xeeI=\xbc\xcc\x96YN9\x8f\x1a9\xb5\xe9|\xe9\x84)J\x92\xfc\xbc\x8b\xb2\x13\x12\xcal`\xd0\x9bJA\x15U\x02\x16eu\xf2g\xba\xdb[\xc3}Un.E\x05\x8bC\x04@\xa3\xe3d\xb2\x18\xb2\xa8\xbf\x10=\xd9\x99\xf7\x00\n\xa8\x07\xb9$\xf7\xaf\x0eJ\x95\xaah\xa0P2\x9f\x02X8\xf9@\xcb\xbf#\x93\xb7\x9c\xff\x00\xd4\xc5\xca\xc7\xbb\xf4{\x11\x1eh\xc5\x88-\xb5\xf2)\xba\xca\x9a\x11p\xf2.\x87\x7f\xa26=\xd8\xf95\xe5M(\xadu\xf1\xb2&lt;1eC\xfc\x0c\xce\xc4\xc0\x15U\x00\xf83n\x08\x00\x1a\xe5\xe8\xb6-5\x95\n\x82f\xcc^\xb8\xebFG-\xcb\x12\xd3\xfej\x9f\x07#\xce\xa5\x02\xc4\xb9\x1aT\xff\x00\xaeFNFF.M\x19v\xa5\xb4\xda\xe2\xd6\x18\xd75\xad\x12V\xd4\xdbE\xd5&lt;H\xa3\xe2e\xb1\xfaY_G\xd4\xfcY\x9d\xf7\x00TT\xd7\xb9\x8cOB\x00\x00\x13&gt;\x9bkh\x05T\xbc\xb1\xb9;\x85oN.3`\xf2\xf8\x95\xa3\xd3\xe1\xe1\xc6\x84\xae\xa5\t]94\xe4U\xb7\xc8\xcc\xcf\\\x9cL\xda\xc5S&amp;\xbb\x9c=\xa3\x1c\xa1A\xb9[\xd1u6Vk\x83\xe4e\xb1\xfaH\x9fvgr`TU@=\xccbL\x11`\x80w\xc8\xe33*\xb3yr9|v&gt;\xd6\xa4\xaagQ}\x1e%h\xaf\x1b\x17\xf1\n\xb3\x1a\xab\xcd\x87$\xe6\xe5D\xc5+\xc6g\xd5m\xf3%&amp;p\xc7\x88\xa6\xb4}\x8b\x15\xe8\xb2\xab\xa8o\x91\x96\xc6\x82W+\xfa\x98\xce\xeeL\x01UW\xe2\xc5\x8fZ\x00\x0fNO\x10!&gt;VZ\x95\xdbZ\xadh\x03B3\xf8\xcf\xfc\xa4\xe3p\xb0V\x8f\xcc\xa5iV=\xf3WW\xc8\xd5?\x15M\xe0\xe4Xn+_ \xf3\xc6x82\xb7\xa6bJ&gt;m.\x8d\xd5A~\'\xd1\x9d\xdc\x98\x15\x11T\x0f\x81\x8c\xdd\x00\x00\x1e\xdc\x8f\x1c\xefu\xd4W\x89\xc4\xd8\xa5i\x9apc#c\xae"*\xa7\xe5\xff\x00&gt;67\xe3\x94\x8c.\x1c\x95L\x12\xd6\xc8\xc5\xa4\xd0n\xbd\xf1E\xe7[3v-n\r\x16q\xb8\xe0|\x9e]\x18\x89H\x10\xfc\xd9\x99\xc9\x01UQW\xe2K\x1d\xc0\x00\x03\xe1\xcb\xf1\xbcW\x13\x8d\x89t\xb6\xb6\x08U\x19J~\x7f\x97\xe6\xb5\xad?\xf3U\x8dUd\xe6+\x0b+\xcc\xa3\'\x07\xfejpp\xf1\xadSS&amp;0\xae\x11X\x13\xc1\xa5\x8bL\xa2q\xd5k\xd7^\x8f.\x8d\x16R&gt;\'\xa7g}\xc5TE_\x93\x12`\x00\x01\xf1\xb5\x02XCZ\x96\xadu\xa22xh\xca\xb1\xea\xc5\x15x\xb3)5d\xd1h-z\x9aE?\x92\xcf\x16\xa9\xa9\t\\0\x8d\x08\xca\xc4\'\x15\x8bX\xf9\xd9.&amp;W*\xf9\xbb\xbb\x92"\xaa"\xaf\xc9\x98\x98\x00\x00|\x98\xda\xe5j\xab%mZ\xd6\x94\xd2\xd7t\xaecc~{vaT&amp;\xc5\xbf\x1e\xfckg\x83\xd7\xa0\x88\x85]\x00\xc8\xac\x84O\x08k\tM\\f\x10\xfa[.\xea\xa9W\xc8\xc7r@UDU\xf931\x82\x00\x07\xc8\xcb\x1a\xe7Z\xe9\xa3!\\\x1a\xeb\x0c\xc4\xd88\xfcH\xee\xf7_\x9a\x9f\xd0\x7f\xd8\xbc\xa8\xb9\xec\xc8\xba\xd6\x8c\xa0**x\xbdh9||{\x15\x164\xf1\xae\xbe7\x0e\xb5\xf9\x99l\xb3\xaaEc\xd3~\xa4\x88\xaa\x88\xab\xf2%\x8c\x10\x05\x1f7kl\x02\xbcTL\x81a\x02\xa8SU\xe3"\x99\x92\xd9\xfc\x9e_$r\x0f&amp;\x9c\x8e\x0f;\x85\x9f\xfa\xe4\xac#\xc0U\xe1\xe0C\xadIv8\xb1\xe3\x89\x8f\x8f\x8dJ\x8f\xa5\xd2\xce\xa8\x0b\xf3\x01\x11+\x0b\xf2%\x98\x9d(\x03\xe6\xc6\xc6\xb2T\x95$\xb9nT\xb6\xab|&lt;)R\xc4\xda?\xaa\xa0\xb9m\x82\xb9\xfcE\xd4\xcc\x92es\xc0!S\x0cy\x84\xbc\x8f\n\x8b\xe4\x8bG\x15Uu/\xd0\xcb\xcd\x90J\x14z\x9fdD@&gt;F3\x12 \x00\x0f\xa3\xb5\x8c\xb2\xb0:u\xba\x83+\x95\xb3\xc4\x8cX\xcf\xe9\xf2\x9e\x10\xb3\xcb\x8f\xc6\xe2\xb8\xff\x00,\xbb\xe9z\xca\xc1,\xe9\xca\xd7\xc7\x8a\xe7\xf4\\\x17\x07\x83\x8f\x83*\x15\x8f\xa1\x97\xc7\x89(\xfaWX\x1f#\x19\x89\x80*\x8f\xa35\xd6yUek\xd3\x8b\x15\xa9\x15\xd2\xec\xc0\xb1\x17Z\x7f\xa2\xc5\xb2\xb6\xe8\x0f\xe7x\xe4\x17_}\xc9+\xa9\x04tj\xd8\xd6q\xda\x87\x06\xca\x1c\x89J\xa8\xfa\x19\x91\x1aT)\xfa\x01\xf3f&amp;\x00\xa0}\x18\xdbe\xb6\xd4\xd5\x8f!\x7f\x99\x8c\x1e\x10\x00s-qu\xcf\xc8]\x95\x8fv/\xfc\xbc_\x16\x85E\xe8k\xf1\xc6\x1af\x8di\xbe\xb9Q\xc7\xb3\xca\xe6h\xb2\xa5\x1fW\x97\xc6\x94\x8a\xbf\xce\xccL\x00(\x1f2l|\x8bD\xa2\xaa\xc7\xea\x0e\xb6\xdd4\xf1H\xadae\xb7*\xec\xdb2ro\xc2\xc1\xb6\xbf)mb\x8a\x01\xaa\xd7[l\xb6\xd3]K\x14\xd4\xf5\xddl2\xa1X\xfa\xd9.\x86P\xa8=\xb5\xf6$\x98\x00\x00}\x1d\xb2-\xb6\xca\x8d\x15\x91p\xa1\x81\x11\xa1\x8f6\n\xb3\x0bj\xc8\xc2\xcc\xe1\xad\xc0\xff\x00\x93\x1e\xdc~IE\xf6Y\x95\x8f*\xa9m\xa6&lt;z\xff\x00$\x06#T\xd5Fo*B\x8f\xad\x92\xde\xa8\x1f\xe5$\x99\xa0\xa0}\x18\xddfM\xa0cWZ\xbb\xbb"\xe8\x12\xd0\xcdo\xcb\xccX\xf4\xbd6\xe17\x168\x8a\xf8\xd3\x85\xc9c\xaa\xf1\xb8\xc2\x10\r\xce"c\x10\xf2\xb9IG1\x05\n&gt;\xd6\xcb\x8a\xcc\x7f\xf2\x92\xcf\x04P\x07\xd0\xcb_*\xf6lz\xe9\xadE\xabeON8\x08\xcb\xa2\x1e\x12z\xd2X\xb6h\xd5\xf9xx\xdc\x9f\xf9e&lt;4\xc9\xe2\xf55\x8eP\x04\xa2W\t\xaaV&gt;\xd6\xcb\xcdg\x1e\x0f\xf1\x93c\xf9\x08\xa0\x0f\xab\xb6E\xb7\xdbRc\xd3Z\xcbm1UD\xdfV\xa8\x1dh\x8d\xc2\xfem\tBA\x02\x15+\xa7\x8e\x02\xb1\xad\xab4\xc0(U\x1fk\xe5\xe6\x99G\xc7_\x13,\xb0\x98\x81W\xea\xc6\xfb2\xaeQ\x8dEU\x81d\xb2\x02\x96\xfe\xab\x00\xd4\xba2\x07\x0f\xe5\xbd4\x10Mh\r\x93\xa2\xc6\x13y{\x04H\xb0\x1a%b\x85\xfb\xe4K\x9b\x1eP?\xc2e\x8e\xce"*.\xbe\xb6\xbeU\xec\xd8\xd4\xd1R\xacx\xe8\x15D\x04B%\xd0\xae\xb5*\x02?\xa3\xf5\xb8\xc1\x8bKNGFx\x00\xa7\x1aT\xb5\xaf\xd8\xcc\x93y\xc4\x14\x8f\xf0\xd8\xf6&lt;E\xad\x07\xd9\xdb&amp;\xfc\x8b\xb1\xeb\xc6\xa5\x16\x13ax\x83\xcc\x00\x90\xcf\x17\x8e\x9d\x18\xb0\x1e\xccy\xb9\xb0Lv\xbc\xbc\x13J\xbaY\x85(\n&gt;\xc6e\x9bN\x10\xab\xfc.\xd6\xdb\x11k\xac\x0f\xab\x1b\xed\xcc\xc9A\x87EH!m\xd8?1\x01\xf3,#7W\x18H\xe9N\xd9\xf7\xb6\x1ai\xb7\x822X\r\x85\xff\x00So\xfd\x15]\x86\xd4\r}\x9af\x1b\x0e\x10O\xae\xbacm\x84\xa2WX\x1fkl\xcc\xc8\xb2\xcc*1\xeaP\xc5\x99Y\xc9*\xdb\x9e$\x18&amp;E\x90\xcd\x817\xe5\xe5\xe6\x1b{\x85#Wj\xd9n\xabfGUJ\xa6+c\xff\x00\x81\xe6so\tG\xdc\x9b\xadfAU@}\x9d\xb2\xaf\xcd\xc9\xc5\xa7\x12\x8a\xd6;1Il\xac\x82\'\x8c\n\xd1\x98#BD0\xf4b\xc1\x04%\x80\x8cY\xfa\xbd?\x18\xd9,T\xa8\xc3\\q\xf7\xb2g\xb5s\x0c}\xb7m\x8c\xea*\xadW\xec\xc7"\xdeC*\xb1\x85\x8fM`4s+\x97:%hD\xdbYm\xd1\x8b\xcd\x0e\xccx\xb1&amp;\x95\xbax\xd0\\\xec\xe7\xf4w\x9a\x08\xa3\x1d\xe8?{g q\xa6(\xf4?+\x1e\xd7YUh\xbf{\x9f;&amp;\xebx\xfc\\jTK#\x9d\xd7-/rf\x0b\x8b\xf9\xb1\xf0\xd81\x81$\x88\r\x86\xb2\xa6[7\xbf7\x96B6]kd\xfc\x95DC\xc6X&gt;\xf7\xceA\xb0\x97\x18}]\xee\xb6UR\'\xdd\xdb.\xfc\xfc\x9c\x1clLj\xd3\xab\x19\xca\x9a\xc5\xf2\xd0\x94\xd5Z\x87tGo%\x1bhJ\xc2zX\xc2\x11\xa36K\xb2\x9b\x0b\xa1\x08\xf0?\x8dc\x01\x90\xfd\xb2\' \xdct\xa4|\xf5/\xbbuW]\x7frrn\xe4\xb3)\xaf\x03\x16\xaa\xfack\x93Z(\xb8\x92\xcdSy\x05ba\x80\xacqa\x01%\xaf\xa4\x96\x04g\x84\xc2\xac\x18\x96v\xf2*\xb1#\xc4t\x98-Y\xfbe\x1eF\xce*U\xf6\xdd5\xd7X\xff\x00\x05\xd6g\xe5;q\xf8x\xf4\x81\xd5\x86\xc2%hc\xc6\xb0\xb0Tm\x14\xb4\xf8\x98!fB\x04U\xd2\x08\x03B\xa0\x19}\x96\xd9\xe6\xae\x0f\xe4\x10\xa2O\x0f\x1cYQ\x1fl\xc3\xc8\xbf\x10+\xfbT\x95W\xfe\x07|\xcc\x9c\xfc\xae;\x13\x16\x84^\xed.w[\x96\xb0\x97\xfd\x83T\x03\x12\xca\xeaa\x0c\x19c@\xa6$\xd3\x08\t\x96\x1c\xa9\xbf\x1f\xca\x9a\x17\x1e\xda\xfc\x04h&amp;3P\xcb\xf6\xcf9\x93\x8a\xadG\xd6\x9a\x80\xfb\x93\x95w\'\x9d\x85N\x0e5i\xd9\x97\x16%\xff\x00T[\x13\xf3\xfc\xf6/\xaeyWo\xe6\xf3\xc1\x8c\x11\xe6\x87B8\x9e 4\xbe\x96\xc7\xaf\x16\xbca[#\xa7\x8e\x9a\x1b*|8&gt;\xa6r%\x87\x1a\x83\xeb\xa5\x1fs/\xb3\x92\xcc-\xc6a\xd1X\xf4cyh\xcf\\\x06\xc9c\x86aUi\x1ay\xd5y\x8f\x18\x11\xbd?j\xcd\xe8!\x9f\x92\xd4c7\x93\xbb\xde\xd6\xfer\x93\x85\x07\xd4\xceQ\xa8&lt;x\xff\x00u\x8f\x9d\x95\xc9eqXX\x94(\xf4i|f\xd2F\x8d\n\xb1B\x08\xb1\xf2\r\xb4\xd9\xfayB\x1e,\x10\x8d\xc6\xed\x8cT\x9e^r\xd3~Q\xb0\xb7\x90\xb2\xbb8\xeb\x07\xd5\xa72\xfcp\xc2_\x99\xeb\x7fv9\x97\xf2\xbc\x86\x05\x1c~-i\xea\xd3&amp;\x12%R\xc2c\xb9@|,\xb1\xf2NEYX\xd7\xbd\xf5X\xb78\xd2\xfa&lt;\xde\x98*\xf9Z\xf6d\xff\x00\xdc\xb9e\xdd\x7f\xe5Y\xa5:\xe2\x9d~\xb6\x1er\xce\x16\xbcQ\xfe\xdc\x9b\xb9\\\xe18\xbc\x0czG\xb1\x99\x0bd\xaeT\xd6\xc7o\x06\xb1mkK\xc2\x7f*\x0f\x8dLl[\x95\xc7EHa\xbf/&amp;\xb2\xcb/\xb5\xb1\xebRR\xd7\x10\xd9\xad$\xe2\xca\x8f\xa5\xc7\xfa+x\x01G\xd8\xfd\xed~K/\x90\xcb\xe1x\xfc\\e_|\x81x\xae$\xb1\xad%\xd5.k\'\xe6\x85\xa9\xf1\xa9\xa8\xb5\x9c:":\xb2\xc3\x1eY\x1a1,\xd6\x98M\xd9;\xf0\xfc\xd2*\x1a\xcaig\x12\x17\xeb\x94\x7f\xa4\xb7\xf9\xe1W\xfb\x18\xe6ds&lt;\x87\x17\x83\xc7bV\x9f\x0bFB\xa9\xa4\xdc\x19B9rA\xad\x14\x0b*\xf0FX&amp;\xcc\xa2\xc5\x8d7a0\x9b]Y\x85\xd3\xf2Tx\xf7+\x97\x16\x9b\x7fT~&gt;\xd4\xfa\xe6\x1e}\xbf\x9f\x15\xff\x00\xb3"\xee[\x90\xadx\xae&gt;\x9a\xbe6L\x84\xf0\xc7\x99%\xa5\x8c+\xd0RY\x91\xd68UV.\xad\x0c\xa6\xd0In\x9aXV\x12\xca\xcb2\x19\xe5D\x1f\x10D\x13\x00\xd6~\x99\xef\xcc\xd9\xfc\xfa\xaf\xfa\xed\xb3\x92\xcd\xe42\xf8.;\x12\x9f\x93\x0b\xab5W]\xec\xd1\x9d\xecSe\x8eIf\xc7x\x05\xa4X\x90@U\x92\xc2\xc5\x98\xd8\xee\xea\xc8c\x034\xc3A\x84\xd6\xab\x18\x89Q\xdf\xcf\x98{\xec\xe0S\xea~\xacs\xf2\xf9~G\x8a\xc4\xe3p\xd4|\xdc\x15\xf1\xc8\x8e\x8e\x9e\x05\x84$\xc7\n\xd5\xb1\x84~u\x95#\xa0\xc1\x8b\xb3\xda\xe4\xa1\x16\x061\x80G_\x1f\xc8"%x\xb5b\xd6\xb5M\xcd\xfc7\xce\xb53\x86_\x9e\xfe\xa4\xe5_\xcd\xf25\'\r\xc7S_\xd1\xa1V\x17\x8b\x1c\xbd\x90(X\xc0\x80\x17\xad\x05\xf0\x1d&lt;\xd8f{Y\xc9&gt;A\xd4\x98\x14!\xab\xf1lD\xc6\xab\x1dQT*A7\xbe\xb7\xea\xd3\xfa;x\xe9\xc4\x8f\xb1\xf9\xdfo)\xc8\xe7d\x7f?\xc6a\xd1\xf4\xdb\x1d\xeb"\x87\xc7|v\xa5\xdf\xf3v\xf10*\xacgW\xe8BOLmw\xb0\xd9\xfb\x7f\xd1\x8f\x91\x15R,+\xe0\x10(\x1a\x100m\x83\xbd\x83\xb9\xbe\x9c\xff\x00Uw\n\x9cr\x7f\xa1\x9b\x92\xca\xe4\xf38\xac./\x05G\xd0\xc65\xf4T\xd2\xd8\xf6\xe2\xd9\x8a\xf8\xe9\x8d\xff\x00:\xd1\xf9\xf8\xe4\xddf}\x19"\xef\xdb\xf4\x0e\xccmkn\xbe\xcc\x96\xc9l\xa6\xca\xe2r\x15LI\xa8\x00\x83\xd3jw77\xbfK\xa7\xf5M\xfc\xe2\xe2\r\xff\x00\x9f3#\x99\xe4\x80\xe0\xb8\xea\x93\xe8z!O\xeb6c\x06\x0c?2\x854\xe3\x9f\xb9n\xc7\xcc9\xd4\xe5\xd5\x93\xfbY\x93w s_-\xac-\xe4g\x02\x00Q\xe2\xb0@`\xeb\xc8C\x07[\xdf\xa0;\xdeK\x7fIw\xf2\xc9H\xff\x00=\xd6s\\\x86U\xfc\x07\x1d\x85\x8f\xf63VJW\xa2Z4\xd1S\x1a\x10G\xf4\x04"F\x942\xda2r/.\xcd\xe5\xb9\xaf\x0e\x02\xb8\xa2\x11\xb0\xddl\x10\xc6\x0fA\xef\xc8?-g\xf2U\xa7\xae\xe6\xe6\xf6{?\x12y\\\xdeK\x90\xc4\xa3\x85\xc0\x03\xef\xa7\x15W\xa3\x1d\xc4hc\xbbB#N~\xbf\xc3\xf2\xfc\x90\x13\xe7a*T.\xbcB\x85\xe1\xd9{`\x1b\xad\xf9\x08!\x82\x036=\xf9g\xcd?\xc8\xa7\xf9\xb7\x99\x93\xcfr\x93\xf9\xce"\x8a\xbf\xc2E`\xc6\x8d\x0cv"1i\xb6\x9c\xaa\x1aM_\x99C_\x87\x89O\x0f\x0f\x0f\x00\x81q\xaf\xa4\xa9\x11O\x8fZ\xe9}\x07c\xd3s\x9c7\xcf\xe4\xeb\xf7\xdf\xa6\xfa&gt;\xf6\xd9\xce\xf2y\x16p\\o\x1f\x89\xfe5\x84\x90U\xc7\x8bMFm\xb1\xbdMF\xa3SVk(k)\xe1\xe1\xe1\xe1\xe2\xc1\xad\xc1\xb4\x11\x04\x044 u\xb8z\x1dlzn\x7f@\xec\x7f\x98\xaf\xe3\xb8~D\xf2\xfc\x86~mI\xfc\xff\x00\x1a\xa3\xfc`\xc3\x0c\xd1\x8e\xac\xae\x1a1h\xcaP\xa7\xe6P\xa1\xab\xc0\xa7\x87\x87\x87\x87\x8eS\xb1\xe02\xab\x9aS\x02\xb2\xef\xb1\x0f\xa2\xf4=\x7f\xa7\xc9I\xc0!\xebc\xfcY\xd9|\xdf$g\xf3\\N5?\xe4^\xb4D\xdd\x92\xd6x\xc4\xc6\x85\n\x95\xf1(T\xa9O\x0f\x02\xbe&gt;:\xe4,\x9c&gt;F9\x10\x8f-\x87(\x02\xcd\x11\x07c\xb17\xb3?\xab8\xe3\x8b\x1e\x87\xd7p\xfco\xb7\x9e\xe5m~/\x8f\xe2\xb0?\xc8\xc6\xa3\xa2\n\xbc=;\x12a\xe8\xc2\x08\xd1]\x15*\xc0\x8d\x10e\xa7)\xe7\x13M3J \x9a\xeb}\x10:\x1d\x03\xd6\xe37\xf5Y\\UX\xaa&gt;[\x9b\xde\xfd\t\xe79\x1c\xbb\x91?\x9e\xe2\x94\x0f\xf2e\xdb\x84\xb0\xc2\xd1\xa5\x91\xe1O\x12\xb0\x82\x0c0\x824C\x02\x08 \x8c\xeb\x18\xce\x191\xe0\x11J\x9d\xf9\x08 \x822t=\xf2\x1b\x94\xb3\x83\x14\x8e\x8f\xa1\xf7=\x1e\xb73\xf2\xb9~I\x9f\xf9~2\x8a\xbf\xc8\xc5\xeaE\xe9\x84\'\xc4\x85\x0c\x1a4=\x90a\x84\x10A_\x12\xa5yf\x880\xd3\x12,\xf1\xdc\xf2\n\x95\x84\xf1\x10K\x12\x0e\x87F\x1e\xb2\xcel\xfeQ\x04\x1e\xbb?K\xed\xe79k\x1b\x07\x0f\x85\xe3\x7f\xcbaA\xbe\x8cu1\xcd\xa4/\x8b\x07\xe8\xcd\xcd\x9e\x88#\xc7\xc0\xad\x93&gt;\xf9\x85UK\x86\xdeo\x91\t\xfdTWq\xb1N\xff\x00_8&amp;\xfb3\\\xa5\x97\x9f\xe3\xea\x04C\xef\xbd\xef\xbdt[\x9f\xe5/\xb9S\xf9~\x10\x0f\xf21\xf3\xd9\xb7\xf4h\xd7&gt;j\xbf\xfd\x15=\xa5msi\xf2-\xbe\xb5\xadx\xf8\xf8\xf8r\x96Xg\x0b\x8b\xe1\x80\xfa\xfc\xf4Z\x8a\x16_\x88\xb6\xd2\xc68C\xb1\xd6\xb5\xad\x99\xfd\x06RO\xe6*\xaa\t\xa3\x0c\x1d\xeb\xd3{\xf2\xdc\xe63\xf3\xf3\x19\xbf\x91\xe2k\xaf\xfc\xb7&gt;\x07!\xbf4\r9W\xe3\xf1\xed&gt;(\xea\xe60\xb9\xc3u\xad\x01\xe3\xe3\xe0W\xc3\xc3\x9c\xbe\xc2\x8b\x81[W\x8aP\xa8\xd2\x85\xe9Nr\xd3\x0bZk\xb7\xccA\xd9\x824\xfe\x92\xd5\x1c-U/G\xa1\xd9\xef~\x9b\xcd\xc8\xe69[m\xc0\xc4\xe20\x07\xf9Z\x7fC\x9d\xfc\xdd\xff\x00\xa5n\x1d\x9f\x91\xab\xc5\xe0l\xa9\xc5\xbb=\x8f\x90S\xa0&lt;B\xf8x\xf8\xf8\xf8\x95\xbd\xf9\x9b\'\x13\x8c*j\xf5M\x89x\xbe\xe3\xfa\xa3\xdbs?\xee,{\x1b\'\x12\xd1\xd0\xe8\x95g\x9f\xd7E\x9c5\x00z\x9f\x9f\xf4|\xa5\xd6\xcf\xe38\xc1\xd6\xff\x00\xc5\xbb_\xfaNK\x86\xcd\xaf\x91\xa6\xd4\xb5\xef\xf2\xba\xd1c\xd9{\xf0\xa5\xed\xfd\x19\xabP\xa1Bx\xf8\xf8\xf8\xf8\x91\xaeFe\xd9?\x8f\xc7\xf1(h5]\x9d^e\xb9c)\xae\xb77\x1e\xdc\xabFcd\xa6\x1e&amp;(\x03\xb2\x164\xfe\x9a\xe0xD\xf7\xd7\xc7?:\x7f;\xc2c\xe3\xfc\xf5\xf1\'\x9e\xcc\xc9\xb2\xa4\xc6\xe0\x7f\xe5|\xf7\xcd\xa2\xcc\xeb\xab\xc9\xb2\xfc\xac\xbcNK\'6\xa6\xa7\x19(Z\xc5~\x1e:\xd6\x80#_\xd0dZg\xf3X\xda\xd6\xbcZ\x83\xc6\xff\x00\xe37\tg\x0fo\xf3\xb5\xe3d\xe1\xe3\xf0\x94\xe0-\n\x9e\x9a\x84\xf2\xf6`\xb7\x10\xbe\xda\xec\xf7\xfay\xee\x13\x8b\x8f\xc5q\xff\x00\xe6\xb2\xcf\xe8slo\xe2x\xad\x14\xbf\x8f\xc9\xfeo\x17\x16\xf74\xa7\x188/\xfc\n\xf8\x85\xc3\x14~E||u\xadk\xc6[9\xfc\xe3+J(\xd4\x03Z\xf0\xf1\xf1+\xf9\x85\xd2\xae\x80\xf5\xd6\xac\xb3%\xa7\x1f\\=\x01\xeb\xbe\xf7\t\xf2\x9f\xc4qc\xe9\xbe\xf7\xed\xfd\x1f!\x99z\'\xf3\xfcq\x9a\xd6\xb4k\xfc\xbf?\x00\x9e: \x82\x04\xd1]t\x16r\x96\xe7\xe4\x99\xfc\xbe#Mh\rt`P55\xafMkQ\x97\x96\xb1\xce5*\x9a\x9a\xd7{\xf5\'{\xdf\t\xc4\xd1H\xf9\x8f\x96\xecn\x7f=\x8f\xf1|g\xa1\xe8\xf4f\xa6\xbb=\x98f\xa1\x9e?\xd2d]\xd7\xf1\xfcH\x1a\xd6\xba3Z\xd6\xba\xd4\xd7\xbf\xf56\x99\xfcu&gt;3}\x98f\xcc\xd4\xde\xf7\xdf\x07\xc3\x8f\xbe\xfd\x89\xe7\xb9+\x9c\xce\x03\x89\xf4\xd7z\x9a\xec\xf5\xae\xb5\xa9\xab\'\xf59\x16\x1cLlj\xb5\xef\xae\xb55\xae\xf7\xe9\xfd\xad\x86\x7f\x117\t\xebZ\x83\xb3\xd1\xec\x83\x14tz\xdf\xf8]\xbf\xa2\xe4\xac\x9f\xc6\xf1\x00\xfc\x88\xf7\xd7{\xb1\xb2r\xd8\xff\x00#QR&lt;|`3Z\xd6\xb4F\xb5\xde\xa1\xf4\xfe\xea\xf9\xfcu&gt;\xc3\xadv;&gt;\xe7\xe6=\xdd\xf2\xef\xca\x8f?\x99\xe3&amp;\x84\xdfG\xa3\xf1\xd1\x1e\x82\x7fM\x9a\xfd\x7f\t\x85\xa6\x04x\xeb\xc6hM@5\xed\xb9\xe5\x0b\x7fh\xf3\xf8\xd4U\x84k\xbdjop\xf4I;\xff\xc4\x00D\x10\x00\x01\x03\x01\x04\x06\x08\x04\x05\x03\x03\x03\x04\x03\x01\x00\x01\x00\x02\x11!\x03\x121A\x04\x10"Qaq\x13 02@\x81\x91\xa1B\xb1\xc1\xd1\x05#Rb\xf0\x14r\xe13P\x82$C\x92\x06S\xa2\xf1`\xb2\xc2\xd2\xff\xda\x00\x08\x01\x01\x00\x03?\x01\xeb\xf1\xec\xb8\xf6\x1b\xbc.:\xa7_\x0f\x15\x8fV\xbdN\x1a\xf1\xeb\xe3\xd8\xc6\xa3\xaf\x8f\x85\xe1\xdaG\x81\x1e\x1b\x97S\x1dTX\xf5\x0e\xbe=\x84j\xc7\xfd\xbbw[\x0e\xcb\rY\xf5wj\xc7\xaf\x9fV\xbd\\\xff\x00\xd93\xf0\xd5\xeb\xe1\xd6\xc7\xc1p\xd5\x92\xe3\xd8\xf1\xeb\x01\xaauS\xc2q\xebWW?\x1e;\x11\xdb\xf1\xed#\xa9\xbf\xab\xcf\\x&gt;:\xa3\xff\x00\xc0\xbf\xce\xba\xeb\xe1\xd6\x8c|!\xecOe\x8fS\x87iO\t\x8a\xf2\xd5\xc3\xabD&lt;-:\xd0\xa35\xc7\xa9Q\xe1q\xaf\x85\xcf\xb2\x95\xcf\xc1\xf2\xeaG\x85\xc7^\x1e \xff\x00\xb4\xd3\xb5\xc1G\xfbq\xf0\xd8\xd7\xab\x87_\x8e\xac\xf5\xe5\xe1p\xf1\x13\xd4\x02\x15\'pA\xd8\x1e\xabw\xa6\x91(\x1eH\x06\xb8\xee\n\'\xf9\x82\x15TC\xc3W\xb2\xa6\xa8\\\xfb\x1c;\x0e\x1f\xec\x01\xb9\xa1(\x1a\x14j\xd5\xd0\x9d\xe0G\xb2\xb2moQ\x06_\xce(\x9e\xea^E\xe6\xa4\xd4.\xff\x00/\xa24\xfe\xda\xaa\xe3\x9c"\t\xaav&lt;\xd65\xc4\xa7tp33TC\xa3:\xa1{h\xefA\xc3\xc5\xf0\xf1\x91\xd7\xe3\xe0\xda\xca\x13\x1c\xd4\xd5\xa6\x88V\x08\xfa&amp;0~`pn\xf0/\xb7\x9a\x17K\xda\xf0\xf0;\xcd\x18\xc1\xcc!m\x048\x19\x11\xcc9\x1b\x8c\xae`W\x85\x11ug\x8a&gt;rJ\x8f/\x92\x8b\xd5C\xfe4Gk\xc8\x95.b\x12j")\xe4\x84&gt;\xb8a\xff\x00$\x18)\x10\xd8\xf3S\xe4\xefUvQa\x15\xa5h\x99i\x8e8\xfa*v\xdcuOR\x9d^\x1e\x12{i:\xf8\xa3\xab\x8ff\x10\xde\x9b\x06\xbf\xe1\x13I\x9f\x9a\xb4\x15\x08c(\t,\xb7-&lt;\xe9\xe6\x16\x91\xd2\xb6\xd2\xe48\x0eHtCjZK\xb8D\xe4\x89\x16\x82w8\x1e(\xb8H\xe2\x15D`\xa6\x08\xccUwx\xd3\xd1c\xb8\xac9/p\xaf8\xd7z\x06\xf4~\x92V\xcd\xdf?T`\xab\xd8gOEw\x89\xcc\xe0\x8b6A\x92qP@q\x9a&amp;\xbc\x08\xdd\xe00\xec\xe8\xb7vU\xd7\x1a\xce\xb3\xd8\xc7S\x1e\xd6\x13rr \xac\xefG%9\xcf\xf3z8]N\x8e\xe8\xf3(\xb5\x85\xc1\xe4\x7f\xc4\xb8#h\xe2\xe3l%\xa3\x0c\x07\xf8N\x90\xe6\x89\r\xda\x8cHL-s\xac\xbb\xa6L\r\xfb\x91t\x03\xde\x02\x861\x1b\x8a\xe8\x9fz\xb7\x1d\x15\xdcW\xbf\xb1PMTL`O\xba\xd9&lt;\n\xa0\xe6\xb6\xbc\x90\x8f\xf8\x94\xe2\xf73{]\xee\x13E\xb1\x03\xba\x1c\xd1\xe7\t\xc5\xdcM\x10\xc4`\xdd\x96\xfd\xd1\x11\x99\xfa\xaa\x01\x8e\xfe(\xd0\x93\xca=S\xda\xe8 \xc9\xc9\x07\t\nP\xde\x81\xec\xb7k\xc3\xb7\xa7`\x16=n\x1d\x84)\xd5\xc3\xb5sx\xf3S\xdd\xf4\xcd\x1c\xf7U^\x98q\xf9\x14\x7f\xee\x1a\xe5\x12\x84\xc02~I\xe6M\xff\x00\xaa\xb4\x15i\x9e8\'\x0ck\xbe]\xf5Vo.\x05\xa4\x80j:B\xe4\xc7E\xa3\x03a\xbf\x15X\xe6\xf3\x89\x05Y\x98\xd9\rp\xcaAa\x9c\xd8~\x89\x8dq\xbc.\x17z;\xf9\xbdP\xef\xcf\xee\xa0"\xd3\xe7\x81S[\xca\x92\xd8\n\x97\xa3\x1a\x14.\xd3:\xa0IRZ\x9am\xdb\x95U\xfbgMn\xe1\xfd\xc75t\x96\xb4\xe1I\xdeU\x19f\xd1\xfe\x02\x046\xb0\xdc\x95\xe2I\x1b84( \x91.4h\xdf\xfe\x13\x98\xc7\x19\xade\xd9\x05&amp;&amp;\x1a\x14\x0ex&amp;\x9c\xf1\xf7W\x95;N\x1d\xb7\x0e\xb1\xf0&lt;V=h\xec\\0l\xf9&amp;\xe7h\x07\x9a\x8c\x1c\xdfXE\xd8\x99\xe4\x8e\xf1\xfc\xe4\xa6\xf1}8\n\xfa\xa67\x00\xe7pNu\x04\x9c\x07\x0f%kK\xf6\xf7g\x00*\xe2\x9c\xd6\x9b\x0b\x12\xf6\xce7b|\xca\xb5\xb2\xc4\x07c-1\xeeSK\xbaK6\x10\xd9\xc6\xca\xd0\x870\xff\x00iW\xe0\xc6\xd6O\x02\xed\xef\xee\xcaV\xc8c\xc4V+\xf4*\xe4A00\xfd\xb3\xf4S,;.\xf6r.\x05\xb2~\xc5\x19\xee\xd6\x93\x1b\xd7xe(\x06\xc8\x03\x19P\xcb&gt;\x05\x00\xe7"\xe7\x85\xd1\x16\x98\xa8\x13\xea\xba\r\x1d\xd6\x8e\x1bnp\x00/\xf4\xdb\xb8\x17;\x89\xdc\x10h\x97fh8\x05}\xe5\xc7\x0c\x93vK\xa3\xf6\x8e\x08\x00m\x0bj\xfa7\x88\xfa\x05x\x86^\x0e1\\\x80\x1f@\x833&amp;\xb4\x113\xc5P\xbd\xc7\x97\x05$I\xa9\xa2\x02\x17\xf2\x17&gt;\xc7\x87\x82\xe1\xab\x87e\xf2\xeb\xc6\xa9\xed\xdd\x93}L(\x93|\x03\xb8\x15\xfb\x81\xf2\xaa\x9f\x80\x0ey!P\x1fOE\x1d\xd0O\x17b\xadmH\'a\x9b\xe5\x06\x89-\x05\xbf\x08.&gt;\xe9\x9d\xdb\xd5\xfd,\x14\x1ek\xa1\xb3u\xa8d\x1eu%^\xb3\xbe\x19$\xf1\x93\xea\x9e\xf7\xb6\xe9\xb4c\xa6\x98\x1f\xff\x00el\xcf\xf5I\x96\xf1\xda\xf4\x15\t\xb6\x83\xf3X\xe3\xfb\xe3\xe7\t\xac\x14\xc1\x13;\xc2\x0e\x1c7f\xd5&amp;dO\xcd\x1a\x1c\xb3\x05Hv\xe2\xae\xb1\xed\xe6\x89e\x94f=\xc2\x01\xd6\xab\xbcQ\xb5\xb4\xda\xc2k\xe4\xba[\x8d\x1f\xac\x86\xad\xd8M\xd09"\xd8l\xd72\xa4\x12vX=\xd5\xe7\xf4\x8e\xe4\x1b\xf4U\xefm\x1a\x13\xbb\x80MkC\x8eu\x03\x13\xcd\x13\x83]\'7\x1az\xa9\xa0p\xa6\'\x1fM\xca\xca\xc8\xdcm]\x9eg\xcc\xfd\x91#\x8e\xe0\x9a1\xd5xvxxi\xf1\xb7\x85m\x1c\x14Mi2+\x875\\\xc9\xe0~\x89\xc6A1\xc2$\xab\xb4\x17\xa4\xefRkS\xfc\xf6D\xdd\x93&amp;&amp;\x9f \x807\xf7\xf7G,\xcc&amp;\xb5\x85\xc4\xb8\xfc\xbd\x13\xd8\xc0\xd7\x1a\x9f\x86b\x07\xee(\xb1\xc1\x97C\xa0m\x98VV\xef\xda\xb7x\xcab\xa15\xc1\xa4Z^\x8c\t\xb3\x00y\xa7\xb5\xbf\xea\x07S\x92\xb6\x15\xa1\x19\x83U\xf1\x06\xc1N5\xba\x11\x99\x85\xb1y\xae\xa6!~\x98E\xc0qiTmrSta!\\\x04Md\xb8\xf9(m\x9f\xea\xb4\x97r\n-\x8f\xec\x04\x00\xbf2\xf4\xf7E\x14\xbaF\xff\x00\xe1M\x86\x84Z\x05)\xbbz4s\xe7\x92\xbfx\xc53\xff\x00%6&gt;\x18\xdd\x8a\x11\xb5u\xa23;G\xfe-C\xbbg\x88\xdf\x80\xf2VO\xc1\xd1\xe6\x9b\x13\xd2\xca\x1f\t\x1eTB\xb2|\xb1@\xeb\xa7Z\x83\xb1\xa7V\x98v\\5G^\x9dL\x15T\xf6\xb2\rc\x8a`{\xda\xd1\xb0\x0e\xe9Vm\x891\xfbq\'\xd1:&gt;!5h\x9c\xbfQL\x14s\xaf=\xd4\r\x12c\x9a6l\xa0\x02h\t\x10\xad\x19G\xbe^@\xa7\x0f,\x11\x15\xa1$\x86\xceC\x83Fi\xc5\xc1\xa2\xd2\x03q\x8c\xb8\x95\xd2\xe9\x0ckN\x1bN\xa6\x01&gt;\xc6\xc6\xd5\xed\xbdx\xeeZA\r-c\x9cx\xd3\xd1i\x10\xd0\xeb!\xff\x00\x95Q\xc6G\x19\x11\xf2C*\x11\xba\xaa\xfe&gt;\xad\xa2\xb4\x07\xbd{\x83\xb3T\xee\x9e!C\xa4w\\\xae\xf9\x12\xab&gt;\x8a\x8d\x9e!\x06\x81\xc0,+\x8a\xb9\xd1\x93\x94\x05.\xb7\x7f\x12}S\x9dtf\xfa\x94+\xc3\xf9\t\xf2\\\xe9\x95\x10Kk\x92\x93\xb6d\xfe\x9c\x82\x04\xc4\xb7\x96&gt;\xc9\xef\x9a\x16\x88\xf3L\x1d\xfbP(h\xd3\xf3%\x0b Z\xc2\xd6N$\xc9\xf9\xe2\x98\xcbW0Z\xde1\xf16\x9eI\x8f\xef]\xf9\x142\xbb\xff\x00\x92p5 n\xa2\x106\xfc\x90=~\n\x9d\x8d\x15{n\x1e2\x1aN*--\x8b\xdd\xdd\x9aq\xfb"A\x07fr\x19\xab\x97\xdc\xfb\xcd\x9c\xb1qB\xcd\xae\xb4t\xcb\xb0ng\x89\xe0\x9fh]mh\xe6\x88\xf4o\xf3\xdd\x1d!\xff\x00\xb6}\xcak\xad\x9aD\x0b&amp;\x03t\xe2]\xc9\x12]\r\xc3\xccN\xe0\xbf6\xd5\xad\x97\xba@s\xa6\x9b\xca{\r\x9b\x1a\xf3\xfa\x8ae\xad\xa0&amp;\xe5\xec\x8bd+H\x18\xfd\x13\xdd\x1b\x00W\x82\x00m5\xb2\x15\x8b6vq\xc0\x95f*\xcaru\x13\x8d\xa4\x1e@\xaa\xc6\xf4n\xe3\x9a\xa7\xfc\x90\x97\xeej&amp;\xcc\x01\x8e\xf57\x7f\xb2P\xb4u\r$!t\xefs\xbd\x94\xbc\xbb3\x03\xc8+\xa4\x06\x8f4E"\x8a\xd2d\x9f\xbaww\xdb\x14`Cc\x89L\xa8\x91&gt;n@M\xdb+Bx\x00&gt;_t/8=\xdd\x13I\xcc\xb4\x93\xebU\xa3\xb3HkD\x93\x18\xc8\x8feYk\xbc\x8a\xa6\xe3\xe8\x9c\xc2\xa1\xc2\xad\xf9\xa0@\x9c}\x10u\x07\x80\xc7]V\x1e\n\x14)\xea\xca\x8e\xd4\x86:7g\x87\x9a\xfc\xc7\x82\xe9\x00\xe3\xbf\x8cqRMH\x19\xc7\xd4\xa0\xc7t\x8f"\xf1 \x06\x8c\x87?\xaa\xbdQ\x106\x8b\xcd|\xfe\xcb\x0b6\r\x96\x88\x03&amp;\xf1*X\xcb6a\x9dqP\x00o\t\xcb\xd7\xec\xae\x82\xc6d\xca\xf1M\x02\xd6\x80\xedO\xd98i\x8375\x8c\xfb\xa1j\xed\xa6\x81\xbd\xd0*\x83\xc3j\xf2\x85\x93fc\xceU\xd1\xb2J\xb5\xb4\x99$\xf3N\xaf\xe6\x16\xa8\x86&gt;+\x98W\xae\xd7\xf8\x14\x02O\xea*A*\xf5\xfe"\x15\xd2G\x05\xb2\xf3\xc9mS$M\xe1\xc5\x17:\x05\x05\xe8X\x02r\x9a*\xddck\xbf\xec\xbf^&gt;\xa8\x81\xdf\xba\x15\x93s\xa7\x1a\xfc\xd1\x81\xb6\xdf7S\xd1?\xe2{c\x81m\x15\x97H \x97\xb8\x9c\xcc\xa75\xac\xb4\r\xa086\x1a\x85+\xe4\x9b\x84\x8e\x0b\xa354D\x18`\xf7O*\x98z\xb9\x02?\xdbyv\xb7\xb1\xc1\x16\xe9\x16\xc5\xc2\x1am\x10{\xa9g\ro\xc4i\xe8\x13[3^\x03.h\xda\x90\x08"\xa2)\xeeS\\M\x98\xee\x83\xb7\xcf\x89Nm\xfb@*\xec&amp;\x80\x05\x0e\rmZ\x0e\xd3\xbe\xdb\xc9F\xeb\xa9u\xb1\x107\xee@\x98\x8d\xa9q\x1b\xaa\x9a\xfbw\xbbyQvY\xcaB\x11.i4E\xad\xc69-\x1e\xc2C\xad\xeb\xc5X\x99\x87?\xc8@A\xee7\xa68\xa6Z8\xb6y(.\xdc\xa8\x15be4\x96\xf3&gt;\xcbl\x0213\xea\x800w\xcf\xa2\xbb{\x88G\x01\xb9\x01x\x94\x18\xd8n\'\xd9Z^\xba\xd3\xcc\x95h@\x8bA\xe4\x13\x8doO2\x9e\xc7\x19-j\xb41P\x9c&amp;l\xd9\xe6P\xbc&amp;\xd1\x8d\xae\x17o\x15\xd1X\x17\x7fN\xd7o$VT\xd80\xc6\x1d\xd8\xdcrM6q\xf0\xe5\xbd\xaa\x05\xdaH\xf8sS\xb4\x1aN\xf8[\x8c\xf3QB\xdfC\x82c\xb7\x03\xcd^\x98 \xae^#\x87iU(\xae\x1e\x06\x90\xbf0Z\x01\x80\xa5\x15\r\x9bi\xfc\xcd1\x82\xfb\xdc\x0f\x94\xfa \xd2^\xe0LW\x94(m\xd2~\xc4\xa2D\xb9\xd8\x89s\x8e\x00 \x1e\xc3w\xbcf7N\xfe(\x0b7\xbd\xd35!\x11a\x7f\xd1\\\x9a\x8ex&amp;\x96\xc9\xa6\x18+;6\xc9\x93\x8d0\xf3RH`\x1c\xd5\xf7\x92\xf3\xc4\xad\x01\xadd\x17\xb8\x9cF\xe5\xa1\xda\xe8\xef{-\x83m\x1a\xd9\r\'\x14l\x9e\x1d\xb9t\x8c\xaa\xc5_u\x17r\x9f\t\x956\x96\\J\x8bg\x85t\x89P\xe6\xa0\x05\\\x86uO{\xb1\xe4\xad\xec\xc8\x9a\x84\xd7\x81\'\xd4&amp;\xbc`&gt;h\xb3\xbaDsM`\xab\xab\xc9Y\xbd\xff\x00\xeb\xd7\x8e\x08;Gq&amp; )\xb0\xac \xc0g\x08\x92\ne\xa4H0&gt;1\x91W\x1cH5\x1eaT\x9e\xe9F\x94\xe7\x08R\x0f\xba\xe5\xe4\xa7\x92\x9e\xde\xaa\x83\xb3\x9e\xb4\xf5\xa3\xb0\x1d\x8b\xad,\x1e\x1b\x8d=\x93\xa9\x11\xff\x00\xf9\x1b\xf9\xab\xbd\x15\x9f\xc4\xef\x87p\xc8 \x05!\xc7\xfc\xa0\xf6\xdf\xb72" g\xc3\x926\x8fk\x0e\xf9,mG\x9ah\xe9)\xbc\x17N\xfe+\xa6\xb6\xfe\x96\xccT\x98w\xedh\xc9\x00\xc6\xb2\x80\nB\x98N,\x96\xd0fB0A~\'\r\xe8\xd95\xb1g\x9e(\x17\x96\x1f\x8b\x05\x1b\xd3,\x81.\xa9\xc9l\xb5\xd9\xbaL"A\x8c\x95\x0bsP\xdc0*\xbeJ\xfd\xabg\x7f\xb2=#\x9cp&amp;B0\xe7\x01\x9c\x05ve\\l\xefD\x1b\xad\xc5\x16\x99\x8c\xd3-\x0e\xd4\x13\xbaaY\x91,\x95"\rF\xe5v\\\xda\xb7\xdd0H-&lt;\xdb\xf6(6\xd6\xc9\xdd!"\xf0\xca\xea\x04Z\xb4\xd3d\xc8\xe4\x89\xb1 \x89\xa0#\x91\xc4)\x96\xbe.\xa7Y:\x06#\xff\x00\x90[d\xe1J\x8d\xea\x0c\xd7\x9e \x84N\x06\xa0\xef\xf9&amp;L\x11\x1b\xf7&amp;\xe2\x0c\x1e)\xa7j\x1b\xc6\x13w\x8f_\nu\xe3\xdbG\x82\x92\xba\r,\x83\xdc}\xd2\xd3\xe5T\xc6[\xde\x9a\xb9\xb5;\x82/p\xben\xb7\xbcZ?HN\xb4\r\x02\x8d4\x11HVV\x02\xe3\x00\xae\'8\xde\x83\x18\xe67\x1cS\x8d\xfd"\xd2\xf4\xbb\xcd5\xcf\x80|\xa6&gt;h9\xf8\x9cwJ\x0c\x17\x80\x13\xbc\x08\xf5Do\x8f\x92\xb3\xb4\xb3}\xe1\x8eq*\xe5\xa3\xac\xdf\xb3\x07d\xad&amp;(\xe6\x90\x9f{i&lt;\x9a\xb6f\x82\x88XY\xf1*\xf4\xefR\xd8\x08t\x84\xa0M\xa3\x8f \xaf[\x13\x80\x88[4\x1f\xda\x0f\xcd\r\xa84\x18\x9d\xe5\x16\xec\x82\xaf\x1ekE\xb6\x10\xcbb\x0cb\xf8\x12S\x9a\x9df\xf0\xc7\x94\x0b\x87\xf2\x11\xba\\\xcf0\x8b\xa4\x8fDE\xa8\x18\x82\xe1\xeb*,\x9e\xeaI\xa1\x1c\xd3\x9bv\xb9\x08P\x0b\x9avsn\xe4\x08\xae\x02\xad0\xa2\x01\xa1\x1e\xeaH\x03u\x16\xd7?\x9a\x98&amp;e\x11\xfc\xaa\x9aCL/\xd4\xc7\x03\xfd\xaa\x9d\xb5V\x1d\xbc\xf5aG\x84\xfe\xabG\xd8\xef\xb2\\\xdf\xaa\xdb\xa8\xddC\xec\x9c\xe6\xbbq\xefo(\xddu{\xa7\xd5\x06\xb5\xd6\x84\x83\x90;\xd5\xbf\xe2\x9aP\xb1\xb3\x14\x15s\x95\x96\x8e\xd1d\xd7\x8d\x9ao\x9fDOy\xb27\xc1\xfa\xab\xae\x0ep\xa4\xe2\x17\xe8u\xf1\x9d+\xe6\xa0c\x14T"r\xc4`\x8d\xb9u0\xcdiW\x88 \x01\xbc\xab@\xe1;I\xcc\xba\xeb\x87\x85S\xc5\xe3p+\xb8SxN\x81\xbdma\x8a\x16vD\xe4\xa6\xd6\xd2\x94\xc9\x13.V\x1d\xe7:NM\xdc\xbf4\x9b\xca\x1c\x14\xd4:\x8b\xf5`\x14=\xc4dU\xf6\xb6T\xb7\x1d\xa0\x8d\xe3R\xd5\x7fI\xb2\xd9\x17\xaf\x8c)\x86\xf5 7\xf7-\x96\x11\x88\x15\xe2\xa0^\xf3WvF\x06\xb0\xa9\x8d1\x05\x01\x1b9H\xaf\xc9_h}\x089n+\xf6\xac\xefF\xe3\x97$\xf2\xeb\xad\xcb#\x82\xd9\x03\r\xe2g\xb3\xa6\xacDk\xa7Z\x9d\x98\xf1==\xdbK\x16\xfehp\x1c\xc2,\x9b:\x876\x04qiB\xcc\xbe\xf3\xbb\xadux\x9a-+\xf1\x8b[=\x1bEi\xb8\xde\xf1\xc9\xb3\xc5X~\x1d\xa2\x06\x9b\xae\xb4#l\xc7\xb2\xdc~\xde\xca\x05&gt;\xc9\xc0\xc7I\x13\xc6\x9ei\x8e\x186r!\x11R\x81\xc4\xf2\xde\xb3p\xa0\x1c\x95\xeb\xa4\x8a\xefM\x90\xe2\x14\x7f\xda0\x81\xee\xb2\x16\xf0\x8eJv`\xef@1\x01z\x02\x15\x15\xe0\xa8n\xb6&lt;\x82\x0fh9\xfa(0\x8bhD\xab\xc2\x8c\xae\xf4m\xad\x1a\xd1\xbd\x0b7PE"\x16\xc8RL\x04\x7f\xa8\xb1\x81\x9c`\xaf\xe9\x96T\xc0\x17+\x8cq\xdc\xe4\xf0\xfe-_\x13A\xc6F\xe5\x84\nqB0#&gt;-\xe4\x9b\xd2Z2\xd2A\'!B\x88\x120\xdc\xa6\x0b]4\xda\x06\xaa\xcf\xa3i\x83\x84\xb6\xbe\xcb\x87i\xc3W\rT\xff\x00kf\x95\xa3Z\xda\x81v\xda\xcd\xafsH\xce+U\xa5\x7f\xea\x171\xef\xbda\xa20M\xa5\xa6n&amp;\xb7Z\xb4_\xc3\xf4v\xe8\xfa-\x88c\x07\xa9;\xc9F\xe9\x81\xef\x08\xc9\xd9\xa7\x92\xbb\xddw\xaa\x17\x85\xeb1\xcd\xa6\xe9QV\xbe\xbf\xbb\xf9Tp\xb9S\xb9mR\xce7\xab\xfd\xe1\x9d\x16\x07 \x15\xea\xa2T\xe4\x9d\x18(\x1ft\xc6\xe5T*\x9a\t\x81\x8amP85_k\x81\x01E[\xe8\xad\xbfB\xb5y\x00\x82\x15\x9d\x83h\'}\x15\xe1\x88[\x95\xd1Z\x7f8!\xd2\x07\x01\xdd\x12\xbaM*\xd9\xc0\xd0\x08\xfb\xa9\x02\xb9(|y\x99P\xc2\xd9\xce\x88D\x8d\xe8\xd2\x1d\xc9^\x01\xed\xa1\x9fB\xb0p\x18\xe28\xeeRE\xc0]\xc3&gt;I\x96VV%\x9d\xc7\x8f\xfcJ\xe1\xdac\xa8J\xa7i\nW\x1dr\xa3\xb5\x9e\xd7\xa4c\xdb$^\x05\xb28\xab;\x1b6YY\xb45\x8c\x00\x008Q\x13\x80\x9e\t\xe7\x10\x84\x92"=\nt\xe4\xa4\xc3\xa2\x99\x8a"\xc1\x9atf&lt;\x94\x98\xda&lt;\xc4\x04,\xe2\xbeY\xa7;;\xa1ILm`&amp;~\x90\x80M\t\xb2\xa0\x94\x08)\xc1\xd8B?\xa98\x82aI\x90\x9b\xb4.\xa6\xb4\x82\x1a+\x821\xbbU~\x8b\xf6\xda\x0ex"\xc2c\x92\x1f\xd5[1\xdf\x13\x90\xbe\xdd\xdd\xd4\xdaD\xd0H\xe4\xa6w\xd58TA#\x11\xbcoMt\xc4\xc7xp\x95\xb2\xc18\x9a\xa2\x081 \xfb\x90\x9foigp\t\xef0\x9c(\x81\x12\x05\rH\xe3\xdab\xaa\xaa\xa7V\x1e\x03\x0f\x19\x08\xda\x1a|\xe18D\xd7\xcc-\xa2U\xea\xcf\xb2\xda\xee\xf9\x92\x88\x06&gt;\xbfU\x8e\xcc\x0e&amp;\x13M`"\x0e\xcb[\xcdm"\x00$\x94\x14\x18TW\x9d)\xb0%\x04\x08D\xb9\x16b\x14\xe2\xa6\x99\xa2\xd7N("3!\x10N\x1c\xca\x11\xde\x9f*#\x06\xed\xd1\xc3$\xf1\xdek\xa3\xc9\xc3\xd9t_\x885\xed\x82\x1e~k\xf2\xd91AS\x91\x92\x81m\xf00\xfeB \xfb\x85r\x089\xe6\x89\x05\xdf\xa4\xd7\xcdL\r\xfbM\xe6\x9cz\x11]\xdc\xb3CE\xb2h\xbb\x83\x8cp\x9e\xd7\x15R\xaa\xab\xdac]|&lt;u\x17\x14\xe7\x9f\xf4\xefO\x14\xcb1\xfe\x99T\xc96\xb2\xea\xad\xa9\x0f(\xdd\x06\x9e\x8a2g\xcd\x07\r\xe3\x85\x11t\xde\xc0d0@\xfek\x80\xe1\xaa\xealqV\x16,.s\xe8\xb4G\xda5\x81\xd8\xab+0\x1c\xe7\x80\x15\x81tt\x82\xa9\xaf\xa8pMke8\x83\xf9tA\xd9.\n\xb1w\x11D\x05\x1d\x97\xba\x8c\x8a\xa5O\xc9n.\x94\xe0(8\xef(;h\x1c3\xcf\xcd\x1e\x85\xb6\xc0T!h\xd9i\xa3\x9by6x\x13\xe8\x89\r\x93Y!;b\xf6\x0f\xa1\xe6\xba2\x0eD\xd7\x87\x04\t\x0c5\x8a\xcf$\xf7ZY[F\xc8\'\xd5\xab=\xfe\x02\xaa;\x0c\xba\xf1\xdba\xdbB\xe6\xaf\x9a\xfc\x93g\xbd\xec\xae\xa6\xc6h\xb4\xd0\x129+\xd5\x87r\x88+\x00&gt;\xeb=\x99W\xa9zy`\xac\xed_\x17h\ra5\x8d\rh\x805l\x95k`m \xf2V\xb6\xed\xab\xf1Fd:\xabH{.\xbd\xe5Z\xb0\x82\xd3\n\xd1\x96@Z\x92\xac\xb4\x9b\x10\xe9M\xb5\t\xac}0U\xc75{\x10\xb7\xc2\x1f\xa6\xbe\x8b\x89\xf5Mu.\xa0\x04\x077\xe4\x13\x9ad\xb4\xc8\xc0\x8cG\x9a\xe9\x83\xac\xed\x1b\xb2\xe1\xdeo\xd4+o\xc24\xa3ch6f\xfbN\xf6\xbb4\r\xe88\x9aqFwI\x05\x17\xb3\x92$q\xbc\x13\xed\\\x00\x06\x90\x99f\xdb64Q\xbf\xc9P;Z*\xeb\xa7i9(\xf1\xdb\x95j\xc2\x81#b|\xd4\x01\xaaA\xa2\xdc\x1b&lt;SD\x879\x9eF~K\xf42\xd4\x8f\xed\x81\xef\t\xee\xc9]\x150\xae6\x9ej\x17\x15x\x14\xeb\xad}\x98\xa0\xc5U\x14u\x07Y\x86\x96\xe0\x9c\xe9h\xc1\x10\x06\xf8Be\n\x95\x84\xc1\xa6*\xbb\xe5\x0e&gt;\x88\xdd\xa5\xdfX\\\x0c\xa3\x13&amp;\x11q\xd9qn\\\x11s\xdb\xdd\x04\x1cj\xdfp\xac\xbf\x14\xd0\xcd\x9c\x0e\x91\xb5c\xa6k\xe6\xad\xf4K{M\x0fI\xb3\xb9md\xec\x0ea^!\x12]\x89\xdd\xf2V\xae\xb4\xfc\xed\x90\x1c\'zcD4Eg\xb7\xc7P\x95\x87m\x1e:\xf1\xe2\x9c\rk\xc1\n\x12\xd8\xf2\x842\x07\xc9;p\xf3?dN/&gt;TL\xac\xb3\xcd\xc6\xf7\xcd\x01\xb2\xd3NH\x08\xbc\x1a\xe3\xfd\xd5\xf7W\xdbOT\x00\x00J\xba\x04\xa0Q\n\x84\x92\x8d\x93.4P\xa0\xf9\\Vh\xa3\xa5\xda5\xa17F\x0fr!\xa6B\xdb \xe0\x80"\xeb\xa4&amp;\xbf\x07A\x19"qmQ\xc5\x13\xf7\x14B\xb2}h\x98#\x10x\xd5K\xa4\x80y\x94\x19\x12\xdc\xf2\xaa\x14\xa2\x1f\x8bXt\xb6\x10\xcd6\xc4~S\xbfX\xfd\x05[\xe9\x9aie\xb3\x0b\x1bf\xd7t\x80\xe2\x0bi\x1e\xaa\xcbD\xb3\x86\xb6\xb0\x04\x9ch\xaa\xe3\xc7U\x07\x80\xafm\x1d\xbf\x0e\xde\x11\xcd\xae#\xf6\x94?K\xfc\xcc\xa6\x8a\xc7RTV\xb3\x95J8\x99\x03\x8a\xb3\xb3\x8b6\xd7\x99\x94\xfa@A\xc18;\xbd\x00+\xd3!\n\x12\xba{+\xe3\x14\xe6\x12\x08TT\x08\x92\x9d=3\x84\x04\x1b\xc9Y\x86w\x95\x83\xaf5\xf0Je\x0b\x1b\xf4VV\x81\xa6\xadpO\x06\xeb\xa3\x81\xde\xa7\x1a(3w\xd2\x8b\x84\xee\xa1N\x07\x0c3(\x9a\x90=\x14`\x89\x02\x9c\xb5Y\xb7Hv\x92\xc1\x0fs.\xbf\xf7qR\xa7\xb7\xa2\xa2\xaa\xaa\xa7i\x1e\x02{s4Fv\xac\xcbS\x0c\x10*\xa3(L\xcc\xa6\xfe\xa1\xac\r\xff\x00\xcd\xc9\xc7\x1cN0\xae\xbe\xf5M|\x93\xa9\x02\x88\xd4\xcf\xa2x\xe0\x83\x8cHT\xc6V\xc5\xc3\xf1`\xaaAmS\x86H\xa6\xdaZ\xb5\xcf\xc0UY\xd904R\x88\x1d\xa5bJ\xb1t\x92\x02{^\xdb\xb6W\x9b*\xca\xd8l\x9d\xac\xdaq_\xf6\xed\x05~\x123D\xd0\xfb\xaa\x11 \x8d\xc9\xa2\x97\x8f\x10\x9f0\t\xe1$\xa2\x7fG\x91WaUR\xba\xe7\xb2\xc7\xabMU\xd5\x87\x82=XU\x08\xee\xf0\x10\x0e\xa78\xe6\x13\xc7\xc2\xae\xe5\xee\x9b1)\x8e\x15o\xaafB9!\xaa\xb8\xd1\xbf=\xeb\x8eh;\x8a\xe1\xc8j\x91\x82m\x987U\x8d\x9fyhO"\xfeK\xf0\xb96\xaer\xfc:\xda\xd4\\\xa2\xd1\x9c\xcb\xc0\xdeCGs"\xcc\xa7\xb9\xc0L)\x10]\x14W\x8b\x80\xb5"\xabg\xbd\\\xf8\xa2^\xdaKFI\xaf\x87Am\xa3Q\xb4\xb3\xbas\xee\xba0&lt;T\x8b\xd1\xc1\xcc9\x14\xd2(\xe1\xf3\xf9"\xfa\xb9\xe6\xe8\xca\xec\xb5Y\xcc\x029I\xfa \xc8\xd8\xff\x00\xe5\xf7_\xb4z\xa2\x0e*\xfb{\xcb\x8a2\xaa)\xe0\xaa\xa9\xfe\xd3\t\xc5\xd49\xabI\xa5S\xa97\xbc\xd0\x18"\t\xaa\xaf\xfa\xa0n\xfe\x14\xfc\xe3VB\x93D"\x80B\xfd\xa8\x92?\xc9Q\x82\x1b\xea\xaf`S\xce%\x07\xd1\xc8\xc1,V\xd2\xe0AV\x9b\x96\x97\xa3\x18c\x8c+{]\x972x\xa7w\x9d\xbdE\x93\xa1\xd0F\t\xe5\xdb=\xe2\xad\xedn\xdan\xc4+\xad\xe9l\xab\xbd\xa8\x16\xdd-\xd9\x1b\xcdPkm\x18_7\x1d\xe6\xae\x92h\xe1\x91\x07\x19\xc9\x0b\xd3elM\xea\xc6\xff\x00T\xf7T\xb5\xff\x00\xf2g\xdd\x01\x89a\xe5\xb3\xf2M=\xd8\xff\x00\xcb\xee\xa0\xf7\x909\x8cU1GxN\xcc\xa9\xdf\xe0*\xab\xaa\x9a\x8f\xfb4)W\x8a#/0\x88\x18\xa07y\xab9\xab\x10\xc5\x8e&amp;\xaa\x0e\xd5\xa1\xf2M\x18\xae\x0b?\x9e\xaf\xdc\x800\x8e\x00B\xbb I)\x86\x8eW\xb0\\\x13\x1f\xf0\xa6;\xe1\x85b&gt;\x05d\xc1\xb2\xd8N\xf2ZKm\x1d\xf9n,\xde\x9e-\x9f2*\x9e\xe6\xd9\xbe \x1cWD\xd0w\xe3\x92\xda\x04Q\xd2E\x13\xfaw\x96\x9a\x960\xd7~\x19\'^2\xc0\xd2EhH\xe6\x13\xad\x89h6p\xf7|7\x9b\x07q\xe6\xba:8\x03\xce\xd54\t\xba[O\x86HA\xd4\xbc\xe7G!\xf3[\xac\xfd\x10\x91\xde\x07\x8a\xa62\x10\xa5\x15eDv\xf4X\xaa\xac\x15&lt;$k\x9f\x01\x01b\xa4\xaa\xe1\xad\xb9\xa2f\x1d\xefUj\xd1KW0qNou\xb7\x9d\xfa\xddD\xd8\xfe\x1d^K\x8a\xdcG\x98R\xde\xeav@}\x13\xbf\xfaN\xc0`1)\xcc&amp;\x0f\x14\xd7\n\xa6\x14\xc4\xcc\xd5\x90\xcdY\xa6Z6\xe8\x14*\xc0\xbc\xbc\xb0(\xb2\x86\xe4(\xa5\xa1\xbf\xb4)\x8c\x9f{\x92\x7fL\x1d0n\xc5}U\xeb\xdf\x98\xe1\x149\xa8|\x98 \xe61\x07x\xac+6\n0\x0ft\xcbCV\x8f\xeeh\x1f\xe1n&gt;\xb0\x99\x93Zk\xbdE \xfc\xd4\t\x94T\x9c\x07\x80\xa1[J\xaa\x9f\xec\xf1\x9a\x89\xaa\xbe\xe2\xaf\x9d@d\x80\x0b+\xa8|Q\x1b\xc2\x07\x03D\x07\x1d[\x88\xf2_\xc2\xa5\xb8\xa0fO\x92,;\'\xc8\x85\x9c{+\xd8\xbb\xc8+\xd0\xd8C\xcb\x12\x8f\xaa\x82J0\xcf$Kfr\x9fE7Q\x90y\xfbj\xe2\xb3\x1eh9\xbc\x8e+\xf3"\xd1\xbce4\x10\xe0\xef\xfb\x91^P\x9c\xd8 \x0b\xdc\xbd\x91\xa4\xdd\x07\x9c{+2\xe0/\xda\x03\xfb\x0f\xdc&amp;~\xbfR\xa2 \xfd\xfdQ\xff\x00\xe9\x1f\xd4U+\xab\x03EN\xde\x8a\xaa\xa1a\xe1!O\x81\x85\x01M%^r\x98Q\xabg\x04N^\x85\x16\x92}\x90\xa5j\x89\xc1\xa5\x032=\x14\xea\x94@*\xa4\xbe\xbe\xbfD\xc1\x9c\x0e%0\xe0e\x19\x81\xeb\xbf\x92\xbdM\xc5R\x99S\xcdS\xc9Q\x85c\xca=U\x07\x05\x07\xceT9b3T\x91\x96(:HNiq \x8aqR\xd6H\xc0\xb4\xc8!c\xb3\xf2\x95j\xd6\xc3X\\&amp;\xb1\xdeo\x91]-\x0b\xde\xd3\xba\xd2A\xf5\n\xd9\xb3.&gt;\xa8\x9c\xfc\x94\xfa\xe3\t\xa0\x04b\xaaHT\xf0\x14UR\xe5O\t*|\x0c(\x94^V\n\x06\xb9\n\\\xe9d\xa7\xde\xa5\x8c\xf2\xaa9\xd9}W\x1f$Fr\x89[\xd0\x1b\x90\xdfU\xc6\xa7\xd5\x1c\x8a?\xa8\xfa\xab\xa0\xc6&amp;\x8b\xe6\xb6|\xd4\xb7\xd5AQ\xee\xa0!&lt;\xd5\x04\xac\x10\xa5c\x8a\x9f\xba\xda\r \xfdPvY\xab&lt;\x08\'\x81\x1fd\xc7\x0e\xe11\xf0\xcb\x81\x1eE4\x92da\x9dS6\xa9&lt;\x8a\xdc#\x9a\x7f\xea%\xabk\xf8\x15"\xf6HJ\xe1\xe0(UT\x95O\x05\nT\xea\xc3\xb7\x85\x00\xd5_$"\xe3*\x00\xa2\x8d`7\x14\xe7|oO\x11\x16\xb6\x90\xad7z\xa2\xe4\x05Q\xdd\xaasC\x04L\xa1\x90*U\n\xa7\x9a\x90\x16\xcf\xaa\xee\xea\xa1\xe4W\xf3\x8a\x85\x1f\xccTrM9\xacL\x9eWU\xa0\xe2\x15\xf6\xd6\xcd\xc6\x94p\x87G&gt;\x08\xc0\x00\xfba\xc753?\xcf\xb2\xa8\xc7\xe6\x80\x14\x99P1\xfa\xa2\x08&amp;#\x92\xda\xc0\xaa\xaax\n\x15\xb5\n`\xaax\x18S\x9a\x95:\xa3\xb6\xa2\x89X\x80Q{\x96\n"\x8a5\xd1Y\x17R\xa4nX*`\x82&lt;\x11\xc4\xa9!\xab\x8a\xa9\xe4\x80\xf8i((\xc0J\xacf\xa2\xea\xae\xaa\xb7\x9a\xfb\xea \x94\x1c\n{+2\xdf\x92\x9c&gt;\xe1oL~\x04O\x04\xf6U\xa0\xf2A\xa6\xf5\xd2\xd3\xc3`\xf9\xa2]\x84\x9e\x05\x1cd\xa6\xce\xd3\x9f\xc8\xe0\x9a\x062\x9d\xfaX9\x04\xec\x9f\xe8\x9ay\xf8*\x15\xb6\xa8\x15&lt;\'\x0f\x01\x13Ut\x14m\x1e\xa6\n\x80:\x81\x1f\xe0V\x93KOE\x93\xa4\x94\xdaP\xa9\xca5\xc4\xc7\xaa\x999\x05\x00\xb1\xb8\xbb\x13\xb94W\x18\xcdEK\x90nU\xf9*UVT4\xaa\xa3\xee\xb1R\x81\x90Q\x06?\x81\x04[QQ\xbb\xec\x9a\xecJ\xa1\xa8+IkOGhi\x85h\x9di\x05\xc3hz\xf9#\x85\xecr\xc4{\xa3\xbc\x14\xcf\xd0Bf\x14Ngw\x0eh\xe6\x07\xa2\x82\xdc&lt;\r\x15\n\x97\xaa\n*\x0f\x01\x92\x95:\xa3\xc0D\xab\xce(\xda:\xa1]\x8au\x86eS\x10&lt;\xaa\xa9F\xfb\xaf\xda\x11\xdc\xa4\xc4\x18\xf4[\xc7\xcfSC\r\x16dT\xaa\x80\xb7o@Vk\x97\x15\x90&lt;\xd6Cr\xcf\x92\xa1SE5\xd5\x9e\xa2\x8a\x15\x1d\xd7\'\xb8I\xd9;\xe2}Q\x13#\xff\x00\x1f\xb2c\x88t\xa1\x1f\xc2\xad,\xa7jG\xaau(\x1c\x16W}\x16wj\xad\r\x0bS\xaf\xb5C[\xcb\xc0QP\xd5M\xa0\n\x81a\xaf\x8fi\x01L\xa9\xe5\xe0aB\x8b\xd5F\xd5\xea\x82\x8a\x02\x8e\xa9\x03$\xe9\xda&gt;\xe8P\xca!o\x95\n\x9f\xe1&gt;\xd0\xddf\x1b\xd1\x908I\xe6V&lt;\x914T\x98\xe4\xa27\xfc\x95\r\x14\xfa\xfc\x90\x17\x97\xcdJ\x06\xf7\x15^x\xaa\xddr\xe3\xc9\x14EG\xa2\xbf0\xadl\xbe\to\xb2e\xa3d\x18\xe3\x9b\x0f\x14\xf9i\'\x19\x066\x82`\xc4\xc1\xf4Mq\xda\xc7x0\x8bf\xf3`\x1d\xeb\x9f\xcd\x13\x00\x9a\xe4\x9e\x10\xbf\xe6\xaf4\x11\x87\x80\xa2\xc5M\xaf\x9a\xa0\xed\xc0\x08\x92T\xa9Q\xe0.\x85vS\xad\xad!\x1a+\xa0QGS\x8a\xe0\xa1\xd8 \xd3W\x81\xc34\xd8\x8f\xf2\x9aSr*\x93\x97\xa2\xa5TIP\x1d\xc9R8\x80\xaa\\w\xaa\xc0\x85\x15\xc7j\x9fu\xdd\x1f\xb9EqT\x039\x9dU&lt;\x94ZsD(t\xc74Pu&amp;\xb9"\x0c\x15\x10B\t\xa0\x0ex\x84rt\xf0*;\xce\xa6\xfcD+\x1bQ\x1b%\x0b&gt;\x1c\x0e\n*\x04\xb7v*\xf6\xfe0\x88\xde\x88\x8a\xfd\xd1,-w\x80\xa1U*m\x15\x07m\x08\x9a)*N\n&lt;\x04+\xa0\xab\xee!:\xd1\xd2B\x02(\xa3\xa9\x8a\x93EJ\xa9\x9c\x93~\x16\x97\x1feZ69\x04\x18 T\xe7*\x04\x96\xa8\xc1\x92S\xe6\xf3\xf2@\x0c\xd7x\x9f-[UQ\xcc\xd5Ew"J\xee\x0f\xe4\x05\x12\xa4\x13\x14\x9a(z\xaf\xbf%*\xf0\x14\xd5xVFr\x15\xecbw\xefNeB\xd9\x91QB\x83\xefG?Ut|\xd5\xeb\xce\x08\x03I\x04cD\xfc\x1c\xdb\xc3\xdf\xc8\xa76\xa2aN.\x90\x9d\x83\x81!\x06\xa1\x10\xa9\x87o\xb2V\xd1Rel\xf6\xd9"T\xa8\xf0\x10\xae\x82\x8bsN\xd2-$\xd5]h\xa2\xba\x07R\xaa\xf1Cz\x80\xa7$\x000\xc5[\xd5\'$@\xdat\x8fD_\x82\x8cTe\xf4D\xab\xd6\xb7r\x1fEIY\xff\x000X\x9e\x10\xa0:\xa7%\xfc\xfa\xa9&lt;7/\x87T\xb8\xf14R)\x90*\xf0\x075\x1bC\x043\xf5P\xa7\xf9\xb9l\xa8\x17p\x87\x02\xd3\xcd\x16\xb8&gt;\xcc\xee\xa2\xe9,\xdc\xe0M=\x93\x99XFf\x90Sdb\xa3\xba\xe9\xe0\x9c\xd3\xddFy\xfb\xa8W\\%\x03\xdb\xc3J\xfc\xd8R\x1a\xb6GkEyJ\x85\x1e\x02\x01P\rS\xb4\x9bU\x11!]\x01GT\x12\x133B\xeand\xab\x16\xe3x\xf0\xc1\x07\x9d\x80\x1b\xee\x867\x87\x9b\x96\xce \x04r\x03\xcd\x19\xde\x8c]\x18\x9aJ\x00Sz0TZ\x81\x91\x80\xb6\x8e\xe6\xa9w\xa2\xbdyC\\\xe8U.\xcebV&lt;\x16\x11\xbdRx\xab\xaepP\xe0PF\xb9\xaaU\x06\x80\'*\x15\xb0\xf21\x10\xef%\xe8Bu\x9d\xa3\x86\xfa E\x04\x8c\xda\x8f\xc3\xb4\xde8\x8ek\xff\x00\xa41h\x84\xe6\xe4\x13P\x10\xbf0b\x150\xed\xf6J\xfc\xfcs[\r\xa2\xa0\xeb\xf0\xeb\xca\x8c\x94x\x08P\nu\xab\xee\x82\xa6\n\x00`\xa0u1\xd63B\xe9\xaa\x82`&amp;gg^i\x981\x80\xfd\x15\xa18z\xa8\xab\xbei\xbb\xfdP\x8cP\x8a\t+\x0b\xcb\xd1g\x99Uw\x1f\xa6\n\x1a\xbb\xa7z\xc0q\xf9*5P\xa8.\xae\xe5\x17\x9a\xa0\x82\xa9\n\x16a\x11$G\x0f\xb2\xee\x99\xa1j"\xc8\xc8\xa0\xd8&lt;\x8a\xa1\x11\xbb\xcdt\x91O\xe7\x14d^o\x9a\x02\x15\x9bD_\xbb\xec\x9e\t8\xa6\x9e{\xd4}a\x06\x89\x058Z\x0eh\x10\x15;m\x97+\xfaQ\xe6\xa1\x8dT\x1d\xb4B\x8f\x01\x084\x15\x01\xc2Q\xb7\xb4\xbcU\xd0\x14u\xc8\x08\x92\x9c[$\xa3&amp;\x86\x13\xcc\xec\xf9&amp;\xb4U\xc0rA\xb5n;\xddUN\xf9w\xee*O\x14A\x9b\xc4\xf2\xff\x00*hM}P\xc7\x14M}\x15\xd4\\g\x01\ns\xc4)x\xa6\x12\x8d\xf6\x85\xf2S_\xdcV\xd9\xf4\xf4S+\x1d^\xea)\xe9\xcd\x00\xe2!6\xd0F\xfa\x83\xcd:\xcc\xd4H\xcf\x8c\xac\xa6\x88\x0c\x90\xde\xa2bHN\xa8\xc4qWp\x90\xa7\x1fd\x19\x9a\x07"\xb6\x84\x0c\xd3K\x1b\xdbb\xb6\x1e\xafi^j\x18\xde\xde&lt;\r\xd0U\xd0\xea\xa7izE0P\x02\x80\x14u(\xab\xaa8\xa9\xf8O\x92\xa6h\x95m\x10\xc2=h\x8c\xd7i\xde\xc9\xee\x154\xde\x98`\x97\xd3 &gt;\xab&amp;\x88@\xe2e\x00F\xc9B\xa2\xa9\xa4\x08\xcf\xe4\x8c\xae\xeca2Tbh\x80\x82\xa5\xe1{\xad\x97q\x95S\xc0\x8fu\xdf\x19\xaa|\x97sq\n\x87\x82\xbc+\x9a\x1f\x14\xf3G\xe1\x85{\x81\xfb(P\x9c\x0f\x0fe\xc0\xa9\xe3\xf3@c\xeb\x08;sx\xe4\xa3\xb8\xf9\x94\xfc=\x91\x04Lb\xbf,S\xb6\xa2\x86;\x15\x7fK\xf3[\x03\xc7\xc0WA\xaa6\xd6\x97\x1aT\xc2\xba\x02\x81\xd6\xc7T\xa8\xf8\x91\x84H)\xd8\x06\x1f#\x82\x16T\xef;\x9d\x13\xad\x1c+x\xfb+;,]y\xf9\xa7\xb8I!\xac\xe0\x9a\xcc=N*\xd5\xe7`{\xc2"\xe5\x9b\x88m6\xa9\x8a$\x9c0\xcb\x14F8\xeeMu\xde\x0bi\xb3\xcd\x05vy)\x85\x88R\xe2T&gt;\xf2\xd9\xe4\xe2W\xf8U\x07}\x15\xd2#\x89A\xd8*\xd5\x01+\x82f\xfe\t\xa74\x1a\ta\xfa+9"\xd6\x98\xd5\x032\'\xf74\xaa~\xa1\xf2Q\x80\xa2\x19\xb4\x9a&amp;H\xc5M\x90\xed\xa0(\xb3\x7f$]\xa5y\xa8`\xf1\x9c5B\xba\n\x8b\xc2S\xb4\x8bK\xee\xde\xae\x86\xd1]\x1dj,T\x15*7\xa8\x12P\xa9!3\x00H\n\xcf\xe1\xb3$\xa6\xb0\x1az&amp;\xd1\xd6\x83\xfe*\xe8\x92\xe2\x87\xc2\x0b\x8aw{\xa3x\x84^\xc6W\x13\\\x85\x17J%\xe2?\xc2\x9aJ\x11\xf4\xe0\xa4\x9f\xe5\x15\xe0=\x94\xca\xc3\x92\x9b\xfe\xaa\x1d\xff\x00(U+d\xf9-\x93\xcf\xd9ly\xa2U\xd40^\xb9&amp;\x03u\xce\x87\x1f$\xe32\xd3\xe4\x9d$\x1a{\'\x10d\xd3z\xda-x\x90\x8bF\xc3\x8cb\x13\x9ap\x84\xf1PW\xf3\x05T.\x00\xa9\xda\xc3T1\xca\xf5\xa5\xe5\x0c\x1e:\xe8\xc5\x06\x03T\xfd6\xd8n\x95t6\x884v\x18\xa8*Jl\tM\xdc\xbfp\xf4\xa2\xfdMg5d\xd9\x05\xd1\xbe(\xac\xa2\xfbl\xdd\x03\x02h\x9a\xda\x9cy+\xe6Ii\xf3Y\xdc\x1fD+.j\x02\xeb\xa4D#5u\r!e!\x16\x98\xe0\x83c\x05y\xc2\xef\x92\x91\x86x/HX\xac|\x94?\xcdc\xcd4\x11\xc57\t\xa2\x18\xd1\x0fur}\x93\xad\x9b!\xd1\x07\x01\x9a}\xa5\xa0.\x9ey\xa76\xee\xdakfO\xaa\xb1v\x0e\x08\\\x82\x01n\\\x15\xc9\x8ay\x82\x81\x9b\xd4\xaa~\xf9\x08\x8c\x96\nM\x15;Xj\x86\x95@V\xc0\xf1\xb7B\xb8\x1dT\xeb{R\xc6\xe6\xa8\xd2Z\xae\x80\xa3\xb0\xa2\xdaUB1\n\x98 \xd9\xa1O~\r\xf5DU\xd1&lt;j\x88\xcc\xb8\xabRj\xe3\xf6N\x19\x9e3\x82;\xcf\xaa\'\x14\xfb&gt;\xe9\xa6\xe5#\xee\xae\xd0\x85\xf1J\xbf&gt;\x89\xed}\x1c\xae\xd7\xd4 A\x8f\xe7\x05U\x8d\x16\xd0\x1c\x15#\x82\x97\x12\xb0\xe4\xae\xfd\x91\x0e\xd9@\xcb]\xcd\x0b\xfd\xe0\x9c\xc7\x06\xc0\x99\x85h\xf8\xf6N\x8cS\x81\x91\xf2Om%qN\x18A\x10\x9c?j\xce\xbeH\xe6T&lt;\xa3\xda\xc3\x0f$d\x85\xb2\xd9[&gt;2\x02\xba\rab\xd0S\xad\xedC\xdd\x99A\x8d\x14\x18+\xa3\xb1\xa2\x82\xa0\xa9\xc4-\x9a\x14f\x86\xf1P?0\x86\xf3V,\x12^\x98\x06\x1f\xe5EsT\xaa\xbb\nA\xe4\xa8\xd2\x00N\xb32\xd4\x1c\x05&lt;\x90\x8a-\xf1\xa8oP\xea\xeeSw\xdf\xc9m\x15x\xca\xae*\xeb\x9a\xa2V\xe3\x82\x0c\x13\x9a$\x02U%m\xba\xd1\xca\x83\xec\x83@*\xeb\xa2\x15\xe1\xb3\t\xe2a&gt;\xb9+^+\x82\x9cT&gt;\x9b\xd1 Ok\xb2T\xdbG\x15\xb0\xd5\xb2;Jx\x0b\xa0\xab\x81\xd5N\xd3t\x9c&amp;\xaa\xe0\x14W@\xec\xa8\xb1F\xf24\xd5\x12b\x13\xafP\x92x\xa7\x93&amp;\xd6\xaa\xef\xee+2\xaf9\xf5\xc0*\x8d\xc8\\&amp;&gt;$\x1df\xb1\x85\x12F\x08\x81(\xd5N\xa2\xdc\x15\x04\xee\n\xf2\xa1\xe6\x85\xc5\x04r\xd5U\x99\xd5:\xa8\xafl\xfa#t\x15-\xc3Q\xef\x02\xa6\x137\x15\xb8\xa8xT\x9e\xd6\x18U\xfd(\x0e(\xf4l[#\xc5\xdd\n\xe3]T\xed"\xd0\x80sX\x12\xae\x00\xa3\xb2\x9dU?%Dr\x80\x815\x1e\xe9\x8c\xa0\xba9\x94\'\x19\xfe\xd52L\x01\xba~h\xc7\x0f\x9a\xba\xd0\xdfU\x9a\x8b\x18\x9a\xbb\x14nB\x9az(QQ\x0b\x8a\xcdQV\xb2\xa9\x8a3\n\xf5p(\xc6&lt;\x96\x05WT\x99%I\xc7V:\xaf:\xb9,\x91i\xa2\x98\x95\x15\x0fW\xfe$\x10F\x94T\xedb\xcd\xd5\xc9t\xba\x7f\xfc\x97\xe53\xc5\xc0(Y\xb5\xd5E\xeesAN\xd2mC\xdc\x10\xb3kh\xae\x8e\xd4^WX\xaf\x13Z\xf3T[\xa3\xd9;31\xc7\x048\xbc\xfb\'\x17^1\xb8"elB\xa0E\xa1\xb0\xaa\xe0\x81\x13\x92\x99\x19"\x11\nF:\xa2\x90\xa1\xcaG\x15\xecP\x00\xd7\x15\x8e\xb8\xa6\xaa\x1dX\xf3\xd5\x12\n\xcd\xbe\x8a\r\n$\xc4\x0ea\x17\x01T\x04MPlDv\xdf\x92\xf5{N\x07\xf7\xa8\xb1g/\x16\x18\xd3U\x01\xc0\x14\xed.\xde8\xa1f\xd6\xec\xa0\xd6\xf6\xc1l!%8\'\x1c\xfd\x93\xb3Ny\xee\xab\xc6\xa6\x80+\xd0}\x14\x01\x82\xa6*\xbfE\xb5MU\xd47"\n\x95\x9a\xef(\xae\xe5\x19\xea\xa6\xbc\xa5qR\xa5RV\xe52!p!L\x82e]\xc5pCwmE\x16\x0fW\xb4\xc6sQb\xde^*\xe05W\x03\x84\xa7[\xda\x9e%\x13u\xee\x18\xa1f\xd1N\xb0\xecd\xa9ljq=\xc4F*\xb8/\x85\x8c\xfa\'\x1a\xb8\xab\x87+\xd8#I\xd5\xec\xab\xaa\xe9\xc5TsAW\xa9\x8a\xa9\xaa\n\x85\x04\x10\x0eA\xf9\xea\xa2\x90\xb8&amp;\x98\x13\xae\x14\xe4\xa3=@u8\xf6\x1b%~[\x84\xab\xfa[U\xdb!\xe2@\x05\x06\xb4\xd5^{\x80)\xda]\xb8ym\x17D\xc6\xd1@\xed)\xae\xba\xa5\x04\x0e\t\xb0\xa2n\xd9\xabla\x16\xc4\xd4\xefN\x85U\x8d\x14!d1R\xe8\x07\x04\x1c&amp;P\x8cP9\xa9UX \xa6\xb2\xb1\xe2\xa347\xa3\x08\xa3il\xd0V\x01Q]^\x8bz;\xb5\x11\xd4\xda\xed6\n\x93\x12\xafi5\xde\x14Y7\xc4B\x0ci\xaa\x92\xe6\x82\x9d\xa4[5\x832\x85\x9b\x18KU\xc0&lt;\x05\xd5%\x14\x17$\xd5f\xdc\xa4\xad\xf4U\xa0\xa9@Q\x0e\n\x87Q\xb3`\x82\x9d2\xa0D\xa2\x1d\x8a.\xf8\xa8\x85*\xab2\x84L\xad\xa3\x05M%e(\x992\x8c\xea%N\x94\xa8\xb0Y\xa8\xa2;\xa4&amp;\xea\x83\x1a\x80R\xa0\xf5\xb8\xf5\xa2\xcc\xab\xdaE\xd56\xd2\xa2\xcd\xbc\xbb/\x97S\x87d\x18\xd2\x83\x01\x13Tm\x1e\xe9(\xda\xdat\xae\x0b\xa2`\x11\xe0H\x08\x17\x02\xa9\xa8\xa9:\xa2K\xbd\x02s\x8c\x9a(\xa228,u\x1b\xe5\x9a\x8bQ*\x02\x82\x8e\xf2\x8c)\'UQ\xeaE\xb9r\xa0]\xdd\xc8a\x91SD\xe1\x81\xf2@\xf3BpX"\xa7\xad\xc7\xb0\x8b\x12U\xfd2\xd2\xb8/\x89C@\xec\xf0\xedE\x8b\x1f\\\x8a6\xf6\xae\xaav\x97n\xd6\x01L\xd0\xb1\xb2m\x14\x0f\x03D\x03\xf3\xd47\xa1\x96+2\x9c\xfe\x01\x06\xa2Hh\xc1\x11\xcdS\x15\n\x9ej\xf6\x93\xab\x86\xa8\x1a\xab\x8a\x9e\xa55\xca\x0c\xb6\xba\xb6|\x96\xca\xc5\x18\x90Q)\x872\n\xa0_\xc9[\xd4\xea\x1d\x9d\x10m\x8b\xd5\xed&amp;\xd4\xf1G\xa3\x07\xc4\x0b6\xba\xaa\xf9,iE\xce\xe6\xa1\xad{\x9bT,\xda)\xe0\xe3-ApM\x19\xa3\x92qA\xb9WV\x1b\xf5\x8bK@\xee\xbd#\xafE\xd1ilR\xd1\xcbT!\x81^\xaaF\n0U\xc35\xc1p\\U;O\xfaw\xd7%\xf9\xb6\x9c\xd4h\xec&gt;\x1c1\xa4\xab\xa1\xcd\x05\x1bG\xb8\x94\xed*\xd9\xaf-\xa04M\xb1\xb3\x14\xf0\xd3\xa8\x8c\x02\xde\xa0(\x08oY\xea\xc5\x12\xf3\xa8n\\\xf5p\xeca\xa5]\xd2Zw\x15~\xc1\x86r\xd4\x17\x15B\x81\t\xba\xca\xe2\xa9\xd8q\xea]\xd1\x9f\xc9^y;\xca\xbb\xa2\xb3\x97o=x\x15M\xb1c\xb6\x93\xb4\x8bSZ\'[\xda\xb1\x8d\xc4\x94\xdb\x1b\x16l\xa8\xf0\xc7%\x14\x08f\x16\xe5Q\xbda\x05E&amp;\xaa5b\xa4\xf5\xb8.\x1a\xf8u.\xb0\xa9t\xae\x92\xc0\x02p\na`\xa5VrU\x90\xa6\xab\x8e\xa1\xaa\x9d\xa4X\xb9\x92\xb6\xd9\xcc+\xba\x1d\x9d2\xf0\xcd\xb1a\xaa6\xef-\x0f\xa4\xeau\xad\xa8\xb6{P\xb2`\x1e\x16uJ\x08d\xab\n&gt;\x8a\x1c\x1b\x9a\xacf\xab\xd4\xe0\xb8v\x1c5\xc2\xcbS\xec\xed\xae\x0c\n\xfc\xb6\xf2\xd5\x81U\x85\x86\xf5T\x08\x90\xa1\x14\x16\xe5U\xc5q\xea\xe7\xafd\xf2E\xb3\\\x95\xeb{!\xfb\x82\xb9\xa2Y\xff\x00h\xf0\xa2\xcd\x84\xab\xc5\xd6lr.$\xabM:\xdd\x9b;3T\xcd\x1a\xc5\x94\xf0\xc5\xda\xe5E\x1a\x17F\xde9\xa8\xdbw\x92\x00O\xc4\xe5S\x10U\x14\xeb\x1d^\x1dA\xaa\xaa\xebJ\xbdhu_\xb6i\xe2\x80kG\x05\x9a\x91\x07\xc9\n\xab\xc3\x15z\xb0\x9c*\x1c5o\x84r\x82\x8e\xe5^\xa8C\xa9\xb3+\xa4\xd2E\x9f\x9a\xe9t\xdb!\xc5]\xb1`\xe0;N(u\xe1tLp\x0eN{\xc9\'4m^\xd64U\xc6\x134{\x06\x12\xdc\x94`&lt;-\xc6qG\xa2\x04\xe7\xac`\x14\x9cT\x98W\x8c\x0c1\xd4d\xf1X\xd2\x9d\x9f\x1e\xa8e\x9b\x94\x93\xa8\xb6\xeb\xb8\xa9cwB\xa7\x9a\xa0\x08(q\x84\x0cd\xa2\x8e\x1eh\xe4V\xf5\xc1qR\x14.\x1d\\uqW,m\x0f\x04mt\xcbb\x7fRy\xd3\xec\xee\x85\x16m\x9e\xb9\xea\x1e\xc5\x966D\xceI\xd6\xdaC\x84\xab\xcb\xfa\x9bn\x9d\xe2\x99!d\xc6\xb4\x0f\x0bEk\xa5Z\x80\x040bP\xb3h\x03-E\x18WD\x05C\x07\xcdV\xf21\xc5\x08\x1c\x91\xad\x15\x15u\xf3\xd5\xc7\xa9\x86\xae\x1a\xe0F\xa9p\x1cU\xcb&amp;\x85\xf96\x7f\xcc\x11\xae\xa3\x18f\xaf\x01*S\x9c\x8edj\x8cN\xa0\x86#V\x1a\xc6\xb0\xa7G\xb4\xe4\x87\xf5V\xdf\xdc\xa7O\xbc\xa89u0\xebOTu\x05\x93\x0c\xa7\xb9\xcfc\x1dDK\x89*\xd3N\xb7e\x93\x06u&lt;\x13t+\x0662\xed#\xb2\xc9]h\x1a\xc2\x08\x1c\xe1A\xba\xa8\x9f\x02\x05J\x86\x89\nA\xa2\x00*\xea\x1a\xeb\xa8,5NK=A\x8cs\xa1t\x96\xcf\xdd:\xbaKf\xd1CB\x9655\xa2\xb2\xb6\x83@\xe7\xc1\x0b\x8e+\xd1K\xc8\xb1\x1c\xd5\xbdf\xd3\xc9\x11\xb2\xe2\x8e(\xbd9\xa8oR\x14\x9e\xb5W\x14\xdb-\x12\xdaNJ\xfd\xb5\xa1\x1f\xa94\x12\xf2\x81\xd7\x86\xaa\xeb\t\xba\xc6\xbf\x96\xb8\x12U\xdb\xd6Lw5|\x94\xebG\xb5\xac\x12Jf\x8db\xd7\xbd\xbbf\xa5G\x86\x06\xd47TJq\x14\n\xd0\xfcJ\xe8\x8a\xa2\xf2\xf02\xdc\xad\x03$\xe2M%Z\x83h_\x84\xd2\x10\xb5\xda\n\x1cn\xe0rN\x8a\xe4\x83\x94k\xaf\x9e\xaa\xf5xk6v.\xae!K\x89\xd4\xe36\xb0\xb0Y+\xc5VB-\xb3xOx\xc7\x17!f\xc1NJ\x89\xba@i\x0e\xb8\xf1\x9a\xb7\xd1\xed\r\x9d\xb7\xa8W\xaa3B!7\x15+i\x0c:\xb5[\x97\xfd;\xec[\xde\xac\xa9M\x16M(\x10J\x08j\xdd\xabqG\xa8QE\x14Q\xae\xaf\xe9lL\x14^\xf7\x17\x19%J\xfe\xaa\xdf\xfa\x87\xb7dP&amp;\xd9\xb45\xb8\x0f\x0c\x18\xc7\x14\xdb\x7f\xc4m\x9b{\x0c\x16\xca\xdb\x805Q\x1b6w\xee\xde\xa2k,[M\x9f\xe5P.\x9c\x80C\x18\x8a/\xe9\xed\xb2\x87.\x92\xf9\x1b\xd7\xc5\n\xec\x8dS\xd4\xa2\xe1\xd4\xdd\xab\x82\x01\xd7\x13I\xa2\xbc\xe6\xb7yL\xb1\xb0\xb2\xb2\x03j%\x01Ev\xd0\xac\xe9@\x8a\x93\x8eH\xb4\x96\x13W\x15\r\x88\xc1\x0cQ\xe6\x87\xe5\xbc\xd3\x88[(\xaaH\xc5\x1a)r\x08k\xa22J\x86\x95ga\xa2\xbe\xe9\xdb\xb5\xa6\xa1c\xa3\xb2\xb5\xb9&gt;\xaa\xed\x9b9j\x1dy\xd4QG\xa9\xfd=\x8d\xe4\xfbw\x10H\x84^\xe2\xad4\xed&amp;\xce\xc1\xa3\x13T\xcd\x03Ee\x9bF^\x1f\xfa]\x18\xc1\xc5_\xfcI\xe4I\xa2\x86-\xa3\xec\x86\x03S\xb4\x8b{&amp;~\xa7\xc2\x0c\xb3\x0cou\xa2\x04j\x80\xd9\xcd\x0e\x89\xce\xc8\x05\xd2h\xc5\xd8\xd4\xa1\x99B\xaaN\xf4\n(\x84V\x1dJ\xeb\xe8\x9a\xe7\x1f\xba\xe9m\xa7S\xf4\xad6\xc9\xad\x19\xa8\xc0aMW\x1d0\xafG\xc9\x00\xef4\xdb\xcf\x12\x88\xfcX~\x9e\x8c\x11\xe6\x9ap*p\xa2u\x9e\xd7$\xdb{7\x11\x056\xc8\x06\xbc\xd0\xe0\xaf\x0f%\x00\x95t\x9a\xae\x94\xa2\xb1\xd7M[\'\x92\x16}\x03&gt;#\xf2A\x7f\xd3Yfn6z\xfcz\x85c\xae\x8b\x1dQz\xc1\xa7\x9a6\x8e5\xd4\xdb;#\xa4\xda\xb7i\xf8xp\xc6\x97\x13\x82:M\xbb\x9a\x0e\xc8\xa0_\xd1\xe9\xcc~F\x89\x8f\xee8 s[PJ\xbb\x89\x80\x81\xb7\xb3\x7f\x1cS@$\x91\xbd_l\x9c\n\xc1\xd9+\xd6\x0e\xb3\xde\n6z5\xab\x1d\x8b\\U\rsC}U\xf7*u2\x8duU\xd7wE\xb4#r.\xb4uu~^\x93o\x1c\x01T\xd4\x0eJ\xd6\xca\xac\x12\x8d\x93\x8d\xe6\x11\xe4\xbashY\x92c\xed\xda\xf2plJk\xb1p\xc5\x0b?\x8b\x02\xac\x9c\xd2:D,\xc1\x97w\x8f\xd10\xddaw$\xcb\x1b \xdb\xf9G2\xbaAu\x9eJ\xdd\xc6I\x80\xae\x01U\x1a\xa9\xabz\xe0\xa4\xd1\x1bO\xc5m\xeb\xdd\xa0E\x11a9S\xd4\rec\xd6\x1a\xf8\xea\xe3\xa8\xa3oihg\x13\xaa\xd3\xf1M)\xa4\xb7\xf2ZjU\x9d\x85\x9b\x18\xc6\xc0h\xf0\xe3G\xd1m+XE\xefq%:\xd6\xd2\xc9\x8d\xc4\xb8\x00\x85\x8e\x89f\xd6\xb8\xf4\x91R\xb4\xad\x1c\xb9\xcf\xa8M\xb3-\xbdC\xc5\x0b`\xc8x\x90|\xd6\xd6\x8e\xc9\xac\xca"B\xfc\xb2N&amp;\x81I\xbb4\t\xb6\x7f\x12\ru\xaboD\x94l\x9c\x18*N\xe5\xa5[\xfc\x04\x04\xeaQ\x1d\xca:\xf5\xd7\xd1h\x8e\x8c\xe9*\xba\x8d\x8f\xe0\xf63Cho\xae\x1a\xf1Vo\xc5\xa0\xab\x03z\xe8\xbb+E\x18\x12\x9aoE\xa3\xab\x9a\xd2&gt;\x1d+\xd5iN7\xbf\xa8\x93\xc2\x8b\xf1;3ey\xb7\xee\x88\xa2\xb7\xd3v:76\xe9Q\x17\xce\t\x96`\x08\\\x14!\xd5\xc8\xacLrF\xd7\xf1\x1d-\xc7\xff\x00p\xab\x16\xe9\x9a+\xad\xcf\xe5\x8bV\x97\xf2_\xf4Vv\x97\xa7\xa5.x\xe4T\xd6z\x86\x88j\x8c\xf59\x1f\xd4\x86j2\xea\xcb\x89N\xd2\xb4\x8b+\x16\x03/p\n\xcb\xf0\xed\x12\xca\xc6\xcd\xb9W\xc3\x86\x07\xbbr}\xb6\x92\xed\xad\x90\xa4\xa6\xe9zU\xa6\x99k\xdc\xb1\xa3DbP\\\x16\x8fl6\xac\x82c\x8c\xd8\xb8\xb4\xabm\x180\x16\x12Z"V\x91\xd3\x87\x1b7\x9b8\xc8f\xbf\x13\xb5|\xb6\xce\xe8\xc8-=\xe3i\xc7\xbd%9\xf5\xb5$\x98V\x1b\x88Vl3%\xc7\x8ac~\x15\x08n\xecNj\xe0&amp;\x8al\x1de8\xbb\rF\xd1\xec`\xc5\xce\x00y\xa6\xe8\xb6:&amp;\x8dR[f\x1b&lt;\x97\rU\xd5:\x82\xe1\xac)Y\xea\xc7W\xaa\x01qCTLy\xa6Y\xde\x9c\x98\xf7z\x04_ol\xe3\x89y:\xba/\xc3\xbf\x0e\xb2\xcd\xba-\x9f\xb8R\x174k\x8e\xbez\xb1G\x04\xed\xeb\x8ez\xf8\xeb\xf3\xd4\xeb\x96\xbam\xb5\x85\x1d\xfe\x93\x8f[?\x03\x8a\x1a\x1e\x85\x00\xed\xb8\xfb+Kw\xb9\xe59\xeekZ\xd9q \x003%\x1f\xc3?\t\xd14{A\x16\x916\x9f\xdcz\xcd9\x04\x13r\xd4\x06\xaa`\xa8\xb8j\xf9\xa0\xb8*\x15\x86:\x80\xc0/\x92\x16:5\xab\x8d\x1a\xc1%\r"\xdd\xefd\xdd\xf8gW\xf5\x7f\x8d\xe8-\xbb-c\xbaW\xf2eT\x97\x1d\xfa\xb1\xea\xd5p\xd4:\x94\\uq\xeab\xa4\x8a.\x87\xf0\xdf\xc4-0\x1d\x0c{\xa9$\x9c\xd3\xad\xed\xeclZ\xd2\xe2\xfbF\xb4\x01\x9c\x94\x06\xceA\x8dh\x1c\x96\xe9U\x11\xa8\xefTCz\xaa\xe2\xa9\x8f\xba\xaa\xc9\x1d\xc8\xeeB\xab\xf6\xe4\x84&amp;\x9f\xfe\xd5\xb7\xe3\x1as4v\r\x91\xb5h\xed\xccV:=\x8d\x9d\x8d\x8bn\xd9\xb1\xb7Z8\x0e\xc4\xf6\xd0\xd4t\xcd)\xe4\xe0\xc9\x02\xaah\n\xb4\xd3\xbf\x17e\xbd\xdf\xca\xd16\xdc\x7fw\xc2\x11\xf3\xd4w#\xd5\xe3\xd4\xaa\xe1\xaf\x86\xa2\xb1\xd5\xf2^\x9a\x9a4B\xcf\xfd\xdf\xa2\xae\xabM\x07D\xfe\xba\xd1\xdbZ]\x96\xcbc\x06N&gt;j\x9a\xe3\xe4\x8e\xae:\xb8\xea\xe1\xaf\x02\xb1\x84w\xeb\xa8\x19,\xd7\x1dX\xae\x8b\xf0=+\xf7\xda5\xaa\xab\xa4\xfcQ\xf6\x8d\xbb~\xc7Gu\xa3\x0b\xb0\x06\xf0g\xd5T\xe4\x01\xa5b\x02;\xd1\xde!\x1a\xa8\x9dX\xa2\xbeH\xfe\x90\xa3%\xc1oC4\xdeK\xf7\x15\x94\xa6\xd6H\xc7r\xd1\xff\x00\x08\xd0\xdbb\xc6\x8e\x9d\xed\x1d=\xa4\xf7\x9d\xaf\x8d;\x02\xb8u\xa7\xa8P\x00\x92S4=\x1a\xd1\xb7\x88\xb46t\x8c\x93\x9c\xaa\x87\xe0\xdf\x86Xh\xa6:S\xb7l\xed\xef?o\x05\xc7\xa9B\xb7oP3\xac\xa3k\xa76\xc1\xbd\xdb6G2V\xd1V\x9af\x93a\xa3YE\xfbW\x866L\tr6:-\x85\x9d\xeb\xce\xb3\xb2\xb3aw\xea6m\xba\xb8\xe5\xae\x99\xaa\xae=n:\xb1\xea\xd5a\xabr\x89\xa2\xbb\xa0h\xd6u\x83h\xf7\x7f\xe2)\xf3\xd4\x19o\xa5:\xe9&amp;\xd7\xa2\xd1\x87\x0b\xf3k&gt;\x96hc\x99\xe2\xa8\xa4\x84*\xb1\\\x16:\x86\x03,k\xa8\xea\xa2\xcd\x15\xbdpY*\x0e\xdc\xef\xd4z\xd0q\xf2\x84-\xf4\xbbp\xdc\x0e\xc3\x1d\xfb\x18TAG\xf1\x1f\xc4\x99\xa4\xda\xd9\x83\xa3\xe8\xbbn\x9f\x89\xff\x00\x0bT\xd7\xb4\xcbT,k\xab\x96\xbe\x0b\x82\xa2\x00\t\x9f\x9f\x0c\x93[\x0f\xa9kl\x9c\xea\xf0\xac{\'[\xdbt\xd0\x01\xbc\xe7Nf\xf1\x958\xa1k\xff\x00\xa8\x7f\r\x0e\xb3\x0fhs\xdeA\xc3e\x84\xaa5\xb8\x82&gt;J\x86\x17\x14i\xb4T\xe6\x85V\x1a\xcee\x0e%WV\xf9\xd7\xc5q\xe4\x8d*\xa9\xab%\x8d\n\'%u\x9a%\x98\xef\x16\xbaO\xf7\xea\xb36,y\xb6k_\xfdE\xbc0\xce\xdd\xcb\x1b\x9e\xdd"\xa74"d\xf1Xb\xb7\xa1^Z\x86\xfd]\xea\xfcZ\xa70\xa2\x17$\xe0\x8f4Q\xdcz\xd8#\xe5\xacv\x9c5\x06\xb4\x9d\xc2U\xb5\x98\x16L\x8e\x9e\xdc\xdc`85\xc7y\xe0\x9f\xd2\xdbt\xad\xbal\xbf&amp;\xec\xe0X`\xa1\xe4\x02?\x84\xfe\x0fab\xff\x00\xf5\xadOOi_\x89\xf8\x0fMF\x80u\xe0\x14z\x87\xa9\xbfX\xf4\\3\\\x17\xc9\x7fO\xf8}\xa0i\x87[K[\xf5P\xdfMA\x9a\x06\x91\xa6]\x17\xed\xadM\x9d\xec\xc3\x19\x14\xf3%W\x90\xf9\xaeK\x05\xee\xa1a\xd5\xcbr(\xea(\xa2\x88X\xa2\xbdP)\xbb\x90\x05\xa0\xf2\xf3\x89L}\xa5\xbe\xd9\x96\xf4\r\x88\xc7\x13\xa8\x8b\x0b\x02\xd3\x1b\x1aS\x8f\x1b\xefc?\xfeQ\xa5O\xb2\xa0\xa9\xd5\x10\x8e\xf2\x8e\xf4x(\x85\x06\xa4zj\x9c\x16\xe0\xb1\xd5\x8a\xe7\xab\x8a\xff\xc4\x00\'\x10\x01\x00\x02\x02\x02\x02\x02\x02\x02\x03\x01\x01\x00\x00\x00\x00\x01\x00\x11!1AQaq\x10\x81\x91\xa1\xb1\xc1\xd1\xe1\xf0\xf1 \xff\xda\x00\x08\x01\x01\x00\x01?\x10\xe4\xe3\x88{9\xe4\xf3\x05\xbdr\xc3\xe4\xcean"\xaf\xfd\xb9t"\xea\x01\x83bY\xbc\xf8\x97nY~s\xf9\xb8U&gt; :}y\x8d\xa4\xf5\x05\xae\xfc\xb3\x93\x8b\xdc\xec\xb9|\x94\xeaR(\xc6q\xc1{\xf8\xc6w\x89\xe6\xb7\xff\x00f\x16\x0e\x085\xa2hE|\x01ES\xafQ\xdcn_\x828f\xf4x\x8e\xf2\x12\xf3\xbfI&lt;\xd0\xe6\xbcz\x94\x7f\x8e\xa1lW\xe9\xf8)-\xe3\x97\xcc\xd5N\xad\x94\x1fVE\xc9UVLwT\xdcu\xc6x\xd4\xa1\xbb\xa6g+n\xf6\xf2A[\xa702\xc1\x02W\x04\xd9\rgr\x81\x16\x16\xda\x8b\xc4l\xad\xc0u\xed`o\x12\x8b\xbf\xdc\xf1j\xb1\x02\xb3\xff\x00bd\xdb\x89\xc6\xdcL\\~b\xdd\xee\xdf3.O\xf1\x13vT\xa7\xfb\x86\x9cg\x86\x1eF\xe6\xa7\xce\xe5&amp;eVi\xa2o\x88\xfcq\xb4\x8a\xf2\x87\xdfn\xa3\x90|\xc2\xff\x00\xc7\xdc\xd2\xa8/\xa69\xa7\x8d\xc9\x9e\x7fs\x17\xd0fj\xa7\x83\x11n\xb0\xf1\xea;i\x8d?\xd6\x96c\xf2\xb3q\xd5\xc6w\x1b\xad\x96\x9fP\xdf\xeb\xee\xa6Dj\xee\xabQ\xea\xb0\xc5!X\xdf\xef\x98\xe1\xa7\xab\x8a\x1b\x0f\xb9\xc3\x1cq\x11\xe4\xe4\x82V,\xaa\x8b\xbe\xfe\xa3\x18s\xb8\x07\x10\xa76@\xda\x8f\x0eb5/Gu\xd5A\xfb3\x03{\x81I\xa1\x13\x96\xa2qZ\x98l%\x1b\xb2Y\xab\xe7\x0ca8"\xb7\xfe%\xeb\x012\x93\xcb\xac\xec\x94\xbf\xfbK\xee\x07\xe0\xc9\xb8c\x89U|\x13\xdbo\xb9\xc7q\xcbi\xf2\xe3\x15\x14u^\x86sCyaxt\xb0=B\xc1s\x83\xd3\xa3\x12\xc3\xc4\xf1\x8d\xcffY~b\xbb\xdex\x8a\xa3x\xb2V\x08\x1e\xbe\xb1w\x01\x86\xcf\xfe\xb3S\xc9\x03\x1e\xa6jV\x0c\x93%\x1d\xf3.\xdcU\x0b.\xfb\xa9\xb2\x96\x19\xc9]u\x05\xc3za\x08\x93\x9c\xd7\xc2\xaeo\x1cD]_&gt;\xa3Ty\xe0\x99]\x84\xa2\xf8\xde\xa5]cOZ\x95ukp9\x81W\xe2\xe0\xba\xf7\x88\x85\xb5*\x90"\xda\xd7sv;z\x8bZB%w\x0c\xd5m\xd4/\xc8T\x03M\x8f\xf7\x1bxi\xfd\xcc=\xf2G\x17[\x98t1\xeb\xdck\xf70\xbe5\xf9\x8a\x85\\E\xe1\x0e\xe5\xdd\xb7~\x8e\xa5h\xbc\xb9\xd1\x10\xaf\x1cb]es3\xc6\x93\x18\xfa\xe6.\xbc\xb1Q(Z\x8d\xe9\xdd\xde\xb3+&amp;\xbf\xf2\'\x18\xfeeWUu\xc6s)h\x84\xaa\xb7\x04 a7B\xc4G\rx\x8f\xb7\nq*\xfe\xf5\xd4\xb5\x9e\xeb\xec\xc4\xd3\xa7\xea\x0fS$p1\x9fp\x01\x00w\xc6\xb1\r\xaa)Uq\xa9\xaa\x99^\xa6Z\xde\xb1\xe6ty\x08\x19\xba\x9as^\xea\x02{!\xe1\xc7\xc1\x81\xa3\xdc\xccx\xb8\xad[\xb8\xf9\xff\x00\xc4\xf2\xbd\x1dn9\xe8\xc4\xb6\xf9k\xcc\x08\x18o\xc4\x07Y\xb87\xaf\x8a\xdf\xa8\xb5\xf8\x8b\xd1Y\xf5\x16\xff\x00\xd4J\x1e\xf7\xf8\x97\xff\x00\xa7\x99YC/\x8d\xd4.\xc6\xb3\x03,\xcd;\xdc\xacQ\xc4\xfb\x94\xf0G\xc2jm\x162\xc4\x1fz\x8b\x7f\xc4ZV\xef;\xf5\r\x19\xae\x084\xff\x00Z\x81\xed\x00\x08k\xd4vG\xdcZ\xcc}\xc5\xac\xe3\xf3&gt;\xf9\x95\xc0\x1bh\x94m|Y2\x0e\xab\x99gmCv\xbdY(\xfcx\xb9W\xe6Tp"\x8a\x86\x9e%\xefM\xf7\xff\x00fd\xa63\xbcL\x96\xca\xde&amp; \xa3.\xc8qz\xf2\xf8\x82\xab\xf5\xc4M\xd3\xc4A\xbf1\xaf\xab\xab\rG&lt;\xbd\xe6T\x1aj#"\xb6\xea\x0c\xe6n\xb7\x9f\xb9\x90u\xcd\xff\x000\xfe\xfb\xdea\x12\xc6v\xc7,~\x9e3\xc1\x13\xc3A\xbcD[\xd5b\xb3q7\x8cL\x9a\xfc\xe7\x10\x1c\xdb\x89u\xd36\xd6\xc2]\xad\xb6s\x98^+}\xdc\xff\x00:\xaca\x84\xe2\x15\x0c^\xa2n\xbb\xe6[W(\x98\t\xb8\xb4]\xea#\xf8\x8ev\xfb\x1d\xcb\xbc4\xc3a\x8cV\xa5j\x9a\x95\x83$\r\xfe\xe5\x87\xb2QL\xd5\xc3\x9a\x8d\n\x12o5\x871\xbf\x9c\xb7\x17qk\x06\xf7\xc4\xaf\x19\x18_\x0b\xa8\x1bSp7\xbc\xdc\xd2\xf3\xc4\xf15\x15\xb2n.5\x92\xfd\xe67KV\xcam\xc4\x19\xcdo2\xb1Ni\x86D\xd6@\xc3d\xe7}\xe2Ub7N"\xe7\xa9\xf8\x8e~\xa2\xf1fe\x8b;\xcf\xbd\x90\xbb\xe6\xe1\xbb\xf3\xb9\xa2\n\xcaWP\xbd_?\x0b\xb8\xb9Y\xa2~\xd8\xdef\x1ct\xfa&amp;o\x93\xc9\x00\xf3\x8c\xc1\xac,\x00\x95\xff\x00\x12\xb3*\xb8\xcc\xd5\xf4\xd3-m9\xb9\x8f&gt;&amp;\xdagu\x99Ug\xaa\xb9g/\xed\x94q\x89X0\xdfq\x1d\xe5h\x88[\xfd\xad\xc4\xac\xe6\xdf\xd4E\xcd\xdf\xbcn\x17\xad3\xdb\xccC\xd7\xab\xdc\xde\x02\xff\x00\xdc\x0b\xf7\xfc0\xe6\xf3I\xcf\x88P&lt;L\xef+\x81\xf2[\x1bg\x92\xde\xa3\x91_\x97$Gu\x91\xbfP\xe1\xe66=_{\x88\xef\x9a\xfd\x18\x96\x8d\xbbak\xaez\x95i4\xdc\r\xdf\xaf0\x13o36&amp;s]T\x00\xab\xab\xaf\xe2\x01\xfek\x89\\\xff\x00\xcc\x00\x9e|G)\x9f\xdd\xdc\xc7\xb2\x9ee\xf0\xbdsP\xe0\xa8\x107\xcf7\xdc\x0e\xf1Fn\x14.\x99\xcb\xeb\xd4\xdb\xfd\xdcAqO&gt;&amp;C\x7f{F(\x8e&amp;\xeb\x8a\x1c[7w\xcf7\x03j\xa8\x1f\x8d\xf0C\xb23&lt;;\x97\xe6j\xdd|\'\xdf\xb8\xab\xc7qM]\xc7\xf5\xacJS^\x19\\Y\xe6\x06\x0b\x992\xe6\xbdB\x86z!U\x9f\x86\xa2\xe2\xa3\xc8V`h}T^\x92\xfcL6g\x98\x0bd\x17-\xae\xb1\x883\x15\\V\xbc|;z\xbdGY\x80;\x8b\xc0\xff\x00~%\x97x9\x96\xa9do\x17\xd6\xf8\x82\xa7\x1cj\xe1f\xbc\xdc\x1dT\xac\xd9\x12$\x1b\xea\x009\xf3qo+5+\xbb\xfa\xee5\xc1r\xac\xe6\xbf\xe2\xe0\x10|z!\xc9\xbf\xb9Uf\xaa\xf4F\x8c\xad\xb1\xady\x95u\x9b\xc4L^u\xf8\xf76k\x9d1cn\xe2\xb6\x0b\xcde\xf1:R\xafr\x98\xcfZ\xf1\x06\xb8\x0f\xdd\xccB\xc4j\xb25\x05\xdd\tz#k\xa3&gt;\xe57\xcbq&lt;Q\xc6\xe7\x19|E\xbc\xc3#\x89\x9d\xf1\x8c\x9d\xb2\xb7H\x96\xf7\x13\xce\xbd\xdc\xc4\x1e\x05\x9c\xed\xe3\xee\x1cb=\xef\xc6\xb1\tJr\xab\xef\xdc\\\xf3,\xbe9\xf3\xb9\x9d\xae\xf9\x95fo\\C\xea\xea\x01\x86\xf5\xd1)\x94\x11\xc5\xe2b-5*\x1aff\xb0z\x8d\xd2\x95\xc7z\x97\xefL\x12\xea\xca0N\xd5s#\xf4y\x89~\xf4\xc3\xa2&gt;\xa5\xfe\xa3\x8b\xdc\x03:\x88[\xf5/\x9b\x96h_]\xcbY\xcc4u\x9f\x15\r!&lt;\xdc +L\xd4\xd3\xc4w\xcc\n\x98\xd1\xd4&amp;\xf5\x1b:\x9b&gt;\xa1\x96\xbf\x19\xcc:)\xf5/J\xfan\xc9\xe1\xe7\xb8\x15\xe9\xf8\xeeq\xc4pe\x97/\x11[\x0eH\xbf\xf6\xf59\xff\x00\x10\xab\xab\xcdj\x06\xcey\x86{\x87\x15/\xae\xaa~I\x81\xce"\xbb\xde?\xa9\xe1+\x83\xef&lt;~&amp;\xd6;!V,:\x1f\x17\xc4\xc5\xb0\xbb\xcc0|&amp;]DuY\x8e]\x9b\xb9\x8c\x99\xcf\x9e\xa0\xafuS7\x17\xdf\x0c\xdd\xceX\x14\x95\x06\x06\x97;\xd7\xe3s6\xff\x00pW\xb3\x99\xc5\x113\xaeqx%\x16i\xe8#Y\xad\\3\xc6t\xbdy\x8a\x8b\xe5\xfdF\xf7\x8ck\xdb\x0e\xdb\xb7\x9d\x905u\xb3s\x00\x07\x1e\xa1\xb4Fs\xea\xd8@\xac\\7P/\x89`\xad\xe2\xa5\xca\xf48\x8a\x18\xae\x7f\x9c\xce\x1c\xcb\xef\xd5\xb9\x9a\xe3\x10;\xdf\xa8Z\x9f\xb3\xe0\xe4\x13\x95\xb7/\xe7\xe1h\xdf\xe5\x84\x18\xa9u\x97\xee;_Lc\x9f\xafp\x14\xdbP]+\xcf\xf1=o:\xdc\xa2\xb4O\xaf\x1b\x87\x12\xcb\x8bT]fY\x17\x17[\xfe\x19v\xf1\xf9\xf8U\xa8\xc0\xd9\xf5\x02\xc7\xa6x7\xe73\xb5\x95\x86_\x9a\xfe%\xd1\xa8\xe4\xb3n~\x0b\xaa\xfa\x9b\xf1\x0bo\x0b\xbf\xa9\xcc\x9f\x089\xeaf&gt;\xc9\xec%b\xa2\xa3]\x957C\xd6\xe3\x9b_y\x9a\xa7y\xc1&lt;\x98\x96\xaa5\xb8O9\xdc9\xd4;\x8f\xf7\x99Y0Y\x865N\xea5\xf7|\xc5\xbc-\x91\xf98\xe2\xb7\x1f\x96\x99U\xba\xdfpj\x8cj"\xd1\xba\xe2n\xfe\xd9\xfe\xea%U\x0cs(;\x9a.j\'\r\xc23t2\xd7\x9eY\xb3\xa9\xec;\xb6\n\xb5\x07\x18\xae\xb1\xf7Ps\x96\x9fd\x0e\x8e\xf9\x89g\xefl\xabw\xd0\xc4\xddo\xc4K\xaf\xd7\x81\x94ru\xeaW\xfc\x951\x9dA\x1e\x1a\x9c\x95uU4\x87O\xd9()}\\\xc5u\xde\xa6J\xe6\xc8T\xd5\xdca\rtG\xcbwM\xcbqpG\x9b\xce\xe6]\xf2\xc0\xe6\xb5P\xe4\x7f8\xb8e\xd2|\x06s\xde\xf3&lt;_,\xcd-\xb0 \xf6@19\xfaK(\xd3\xfd\xcb\xe3:\xa4\xd6e\xdb\x80\xdd_\xa8\x04/&lt;F\xc57\n\xff\x00\x98ep\xce\xfdM\x93\xd3\x14\x0eLK\xf4\x9b\xa8\xa2\xbf\xf2F\xc7\xab\xc93\x9b5\x0b~\xc9\x83\'\xc0Y\xe6\x1f7\x98\x06\xbe\x89\x8c\x18s6[,jw\xd6\xf58\rY*\xbdv\xc3\xb1Z\x94\x19\x9fS\x8f\x8ab\x81\x1f&gt;\x18\xf7\x8f `\xa9\x92\xbdN^1\xa5\xe2\x17\x88e\xe6\xe0{.\xa7\x1b\x97\xb55\xcf\xc76u\x1d\x153\x7f\x9cL\xd8\xbcE\xda`\xbb\x86+\xb8\x07\xbc\x19\xb9b\xd6%pj\xcf\x11\x8dt\xb2\xbc\xfb\xe3Q\xac\'?ly\x7f\x83\xb8\xd5y\xc2\xc5b\x17){\xc7U\x1a\xba\xb7\xe9\x9f\x9df\x0b\xe1\xd3\xdc\xcf&gt;*\xf7\x1co\x8c\xe5\xd4o\xddy\xc4\xc7\x8d\x9b\xcc~\xb1^Jf\x97Z\x8f\x05q\x0f/L\xe6\x06F\xfe\xdf\x11\xec\xc5\xdb\xcc\xc7x\xea\xf7\x03g\xcc\n_\xc2\x18\xfe\'\x8a}\xb0\x8e\x9f\xabe\x97\x17{\xe6\xe5\xb7\xac\xcc\xeb\x10\xe0\x946]Q,\xdc\xdd\x8e!L%\xec\xaa\xa9\\\xc7-\xdc\xac8\x8df\xf7+\xc3\xfc\xf7\x11Z\x88q\xac\xfd\x11\xcb\x93\xc3\x02z\x9a\x81\xafP\xabMJj\x8dw\x0c\xc4\xba*\xf1l|\x91\xf7L\xfcK\x0e&amp;\xbb\xa2\xf9\xcc\xe7\x12\x98\x00\xfa`\xb1d\xe27Pqp\xa9\xeejo\x88\xb49\xf8\x9dL\xb7\x1c\x1d\xc5\xac\x89\xbe\xe5\x01\xd9\xd6e\x9d\x99f\x9b&amp;\x89XlLNg\xb7\xd9\xf1\xa3?\xa8\xdc\x97\xc4\xa4o\n\xe6\xbd\xc7\xaa\xd49\xc8uW\x00_2\xe6\xa0\x98r\xcb7\xa8\xbb\xea[\xcb?\xc6\xf6\xc7\x86\xdf|2\xce&gt;\xbcD\xde\xc9x\xbbpC\xc5n\xb5\x03\x8d\xee`\x1c\x16\xc0qQ\xc6#\xfe\tJ&lt;\xe7\x86#Z\xd9\xee\xe2;\xcf03;\xb4y\x9c\xdbL\xcdu\xd4\x05"\x0e_\xb8\xf6n\xee`\x7f7\x12\xb8\x94\x99\xac\xf7u*\xb5\xde?\xf6Qv\xf8\xcf\xf5S\xbcL\x995\xca\\g\xc4\x13Esa\x98%\xb5\x0ci\x97\x9d\xc0\xcd\x7f\xb8\x0e\x1cf\'.}b[y\xee(\xbc\xee\xa5\xb7\x8a\xd4\xdd\xbd?P3U\x8e \xd9\x11\xe7Z\x9d\xd7P\xb3\xa7\xea\xe1\xb3\xc4\xbdq3\xc3\xc7\xea=\xfb\x94\xf5\xe6\xe3+\xc4|\xbf\xe2]\xf5\xea\xe5c\x19!\xc1\xdf\xee]\xc7\x9e\xb5)\xf1n\xaefJ\x95H\xdc\xd3\xaf\xea\x01\xc2\xfa\xf8\xa8\x8b\x9eca\xc0\xf0\x91\xcd\xd3\x9e*V\xb1\x8b\xfd\xc0\xa7\x8dz\x81u\x8a\xfb\x94s:\x98\x8cwX\xd4\xbe\xe3\x06\xddK\xef1\xb5D\xe4\xbc\x7f\x92\x19|\xfb\x83|\xf9#\x8akE\xd3l\xafX\xa7\x1cB\x81S\x05\xc4\x01%w\x7f\x0e\x06?\x19\rDc\x110\xe0\xae\xa6I^f\x03\xa8&lt;`\x9b\xb3\x9b\x9fl\xe4\xe7\x7f\xb9L^s\x16\xae\xad\x80^x\xeeX\xa3\xf6\x96\t\xfe\xa7\xbf\xd4\x0e\r\xd47^\xfb\xd5J\x0c8\xdd\\M~\xab\xceX\xe5#|\xd2\xd6~\xfa\x9b.\xe23\xee\xb3(\xac;fc\xc1\x97\xee\xab\xeaWG\xbb\xa3\xc6\xa5e\xefns\x98uN\xeee\x02Uc\'\xf3:*\xc8\x86\xac\xcc\xa7\xbc\x91\x06\xee\x8c\xfd\xc4;=\xc4\xdf\x9d\xc7\x85\x0bp\xb1Z\xc3^\xb4\xc3&gt;\xf3U\x0e,\xce\xab\xdc=\xc1\xf0\xd73%\xe7\x7fp\xc1\r\xd3-w/9s\x04\xe2\x99\xfd\x1c\xb0\x152\xf8\xe6\x01\xaa%\x9fH0+\x99\xd9~\xa7\x1a\xc3/\xa7\x9b\x8bD\xcd\xb8\xeb\x88\xb9\xad\xd4\xdf\x1c]n\x17\xb5\xac\xc2\xd4!\x9b\xa9\xc7_\t\x84\xa8SU:\x9d\\\xaa\xee\xf5\x1a\xf3{\xd4t\x8e8\x8e\xe8\xc5u&lt;\xaa\x97\xf5\x00\xc4:\xbf\xa81\x8a\xef\xa9gM\xd7Ya\x8a\xdc\x89\xea\x0e8\xaf\x10\xd4\xb2\xbd\x1e\xe1\x96=Y\xea\x059\x07y\x84\xbc\xb0\xa6\xf3p pj\xba-\x94\xacM33\x01H\xfd\xd7\x04$\x1aP}\xb4\xccH\xb8\x10\xbb\xd8\xf0BS\xe1\xb7\xaa`\x1c\x99e\xe6\xaew\x99[o\x13\x9d\xcf\x08\xb3\xe9\xc4\xf2\xb8\xf7N\xa1M\x97\xc9\x01\xa4\xbf\x14\xcb\xaa\xf7\xac\xc3Y\xbe\xe3W\xfefb\xf2z&amp;1\xcee\xb8cB\xe5_\xc4x\xb5\x9d\xccV\xa1\xb69\xfc\xcc\xca\xae?\x9e#\x882\xd4c3\xf2\x7fS{\xadq+W\xab\xd4\xaa\xad\xe0\x89T\x05j&gt;\xcb1\xea\xe0D\xd5\x91\xe59\xf1SsS-\x9d\xaa\x1a\xc3\xef\x18\xc4w\xec\xe3\x10\x06\xde(\xc3\x1f\xd7R\xb0\x15u[\x95m\x8d\xd4o9\xad\xe30\x19\xbf\xcc\xf08\xee\xa0\xd3\x8f\xbc\xc2\xb3&lt;\xaf\x19\x9a\xb8\xb9\xf2~w+\x0c\xf2\xd7\xfa\x88\xaf\xf1\x15\xe1{\xab\x96\xde\xdd\xfa\x99\xe6\x9fx\x87?\xaa\x80\xdd\xb8\xab\x8d\x8eaA\x81\n\xc1\xac\x9c\xcd\x1b\xd4\xa8\xb5\x9b\xe5\xdc:\x7f7?\xf3\x8d\x9e\xe74\x97\x05\xf0O\x052\xfb\xed\x98\xdb\xb4\xbfX\x94\\\xba\xd3\rc\xe3\xd4_\xfd\x9d\xd5\x1e9\xcc1\xce\xab\x04\x0b\xddX\xfb\x85]P\xf3PR4\x9cD\x16\x93\x1bp2\xc0\xaa\xa7#\xa7\xd4\xad\xc4\xa8\x1c\xdb\xd4P\xd4\xaal\xab\x1e=\xc7F\xf2\x15|+\x8c\x948\xe7\xc8\xff\x00\x86\x07\xa2\xd1u\xb8\xa5\x11x\x13\x90\xce|\xcb\x86\x82\xbf\x93\x10Ny\xca\xb3\x85\xcb\xf8e%\xabYq\xf7/\xad\xf0\xd3\x8eV\x00Uj\xd7z\x823\xd6\x9e/l\xde\xa5\'\xa2\xb1\xf9\x82\xb2Vf\xc5\xc4\xc3m\xaf6\xc4\xd2\x80\xbb\x9d\xd68\xdc\x01[\xa7\x13\x9d\x1a\x9f\xfb\x88\xb8\x8b\xaa\xd6*]d\x9a\xfc\\3\x82\xf5\x88\x05\xb2\xafW)g7_s\x1e"\xd7s\x925\x98\xdc\x83\xcc\x0c\xe3\x8b\xb8\xee\xf2\xb5\x929[\x1d\xb3\'&gt;x_0k\xdd\xcaMs(\xean\xab\xc4E;\x065wn\xf6\xc3\x1a\xe4d\xe3\x1a\x94u\xbe\thC:\xa3|bm\\W3L\xea\xb8u+w287\xa8o\x87\xd3\xe7r\xd4\x95\xfa\xd4O\x157\x9a#g\xe6\xc9\\\t\x8e\xbdM8\xdf\xe2&amp;\xf3_\xe6\x07\xef0/\x18\x80=\xb7n7\x99\xf8\xd3\x04%\xd7\xb9\xb3?\x87\x88\x16\xe8\x82\xab\xc0~\xa7\x87\xd7\xc1w0zj=T\xa3\x18\xfe\'\xda\x1a\x87v\xc6\xbf\xe7\x88u\xb1\x97\xef\x84\xc9\xaef\x12\x9a\x81\xfc\x18\xcc\x06zeaD\xd5\xb9]3y&gt;9\x87\xdf9\x8b\xb7\xdcY\xfc\x91t\xde\xbc\\qv\x13uo2\xb9\xb8S\x9e\x7f5\x179-p\x82\x00\xbbW\x9fp\n!\xbb_\xc8\xadL\x80\t\x9a7\xab\x1a\x8f\xa7CE\x19;1\xd4\x00\xa6\xf2Ui?Lu\xc6\xec\x1c7J\nH\x80wqW\xaa\x91\xd5\xa4h\x85\xb4\x90\xe77O\xab\x9d\xb3UW\xab?\xd6\xe3j\xa9\x97&lt;\xe5\xaf\xd45\xf9\xaeFI\x93v6y\xf7\xeaX\x0f\x00\xe2\x1e\x8a\xc1\x1f\xbdY\xeb\x89\x8c\xb0\x11\xe5\xa2\xe2\xdf\xf2;W\x7f\xa9G*\xf2\xd6\x03\xa8,4\t\xb6\xf9\xfc\xc2Q\x05\x15\x9b*\x87&gt;X\x84&amp;\x9c\xc5l[\xcc\xfe\\0\x1d\x86op;O\xce\xe5\x99\x82\x8a%\x12\xae\xa6\t\x9b\xd7\xa9Y\xbe\xe3\x9b?3\x96\xd1[\x87\xfe#\xb5\xfd\xca\xc5\x90e\xcf\x0fp\x94\xc7USk\xc4\xe5\xf9\'\xb3r\xa9\xb3\x85\x8e\xd6\xaf\xd5\xc4\xde\x1flM\x967\xc4G\x81\xae\xa5N|\xf73o\xea\xb7\xee\x1d\x05\x19\x7f,3h\xb7\xb8\x07!\xceH\x7f\x8a\xc9(\xc6"\x19\xce=\xd4N.\xbd\xcax}D9=M\x18\xba\xf5\x88\x8es\x03)\xdb\xee\xd9\xdd\xaf\xa8\xa0R\x9f\x95\xfef\xf3\xfb\x9cz\xa8\xaa\xb9\xcb\x0c\xb9\xed\x86\xea1\xad\xf7\xe9\x9a\xb15o\x10\x03\xfd@\xd6\xfcO[\xf7*\xa24\xee4\xb9E\xe2.\xcb\xadF\xd5\x1fm@q\x95\x99\x1dO\xc8\xe2?\x0785/yw\xcc\x0f\xbf\xae\xa5O\x10|\xe2o\x8f\xa8\xe2n\xf5\xb9fq)\x9ax\x97\xd6\xeb\xd9\x04b\xe3Z\xd3N/3\x17\xb6r\x17~D_\x85\xf4?\x9b\x82(\x96\x8a\x02*\xe2\xf1-\xd1\n\xf0^\\5\xe6\xe0\xb5\x92\x94\xb0x1\xe1\xee5\xc6\xf4\r\x8b\xd5\x9b\x13O\x0cz7ae\xb6\xb9k$T\xd2\xf3\x97\xa6~\x9b\xa8G\xa9\r\xd2^\xce\xa6,\x10d\xc3IK\xf9 \x01\x01\x81\xf7\x9b\x85\x99\x90/\xd4\x17\x1c\x15\xe3\x13\'\x95\x11uEQ(\xa6\xf2\x9espdM\x07\xb6\xf3\x05\xed\'\x14\x88\x8c0Z\xf7\xb3\xb7\x8fs:\xb7\x05\x15\xb5\x96\x05-\xc6:\xa5Y\xf1\x02\xc1\xad\xc2\xd1w_\x98)\xc3B\x1a7\xa0\xef\x82+]\x96\xf9\xfc\xf1\x16\x1d\xad\xbcQ\x1f\xbd\xb8\xe2\xe5^\x96\x05\xab\xf7\xdc\xf0c\xae!cQ\xe3S\'3\xea#S\x92\xf9g\xa9\xa3\x88\x9f?\xd4\xf6\xc4\xc2\xf1\xc4\x07\x02\x0b\xac\xe8\xe2x\xaf\xf9\xa9\x82\xd0\x8eGs\x9cG\x8b\x89\\{"Q\xef\xbdG\x9f$J\\;c\xae\x9a\xa8\xf7L\xceU\xb9\xc70\xebp\xf8\xccL93\xf7\x98\x9d\xf8\x8f\x07\xfc\x12\x9cY\x89X\x1d\xcd\x8c\xff\x00\xb8\xdf\xf1\x0b\xc6t\xf7\xc7qN_\x05\xf7\xbf\x16K\xb0g\x12\xc9\xbb\xc1\x8a\xb8q\xb7]EP7\xb9w\'\xf1\xb9P\xca1\xeam\xe7\xd9(\xc6\xb56T\xb2\xb0\x97\\\xc5\xb9Sl\xcf^\x98\xb7\xfaf|\xdf\xad\xc0\xca\xce\\\xb37\xd7\x1dKk\xb9^+\xee\xee{7&lt;\xa7\x98@\xf3\xf2\xea\x88\xfb\x8e3\xb8\x17owe\x7f\x11zl\xbc^q\xe2?\x13\xc5\x96d\xfe\x18J\x84\xfb\xb0{\x8fk@\xbc\x9f\xc5\xaa!h\x03k\xa3\xf1\x05\xb1Gy\x98\x8e`r\\V\xafLT\xda\x19\xa8\x1bi\xfc\x8e"\xcb$W{U\xd8\xf0\xe9\x97\x13q%\x87A\xb1\x8a\x9a\xe66\x1e#\x92\x05\x0b\xb2\x19[\x05\xc6\xa58\x1ex\xe1O\xec\x89\r\xa9\xbb\xf1|\xd4W\x10H\x99\xd4&amp;\xceO|\x91\x87\xad\xd7\xd5\x10I\x07;\xec\x85%\xa8\xa67\x92%\x95k\x9dYQT\xb5t\xecU&gt;\xaa\n\xca\x02&lt;+\x7f\xa9d\xc9p8\xb4\xe1\x02Q-\xa3@&gt;\xbc\x11\x15\xef*}\xf6\x93(j\xc0\r\xff\x00\x81.aE\xedC\xa3\xfb\x87Pl\xcfp\x04\xa6]\xfa\x818\x85\xf7\x0b\xaa\xa9D\xb1&gt;;\xf8\xd5\xf9\xea{gW\xd4\xe5\x9d=\xea&lt;\xd695)\xd3\x8a\xbe\xd8\xd1\x06\\\xb8\xde`X\xaf\x01\xeaj\x89\xc5q\xb8\xfb\x9b\xa0{\x8dZx\xd4\xaf3\x92e\xe1\x80\x15\x8d\xf36[-\xe6d\xfb\x96\xb3\xfd\x19\x88pk0\x17\xfb?\xa6\x1a\x16X\x117\x9c\xa5K\xe7\x1b\xd5nW\xd9\xfcA\xab\xfe \xad\xa6\x99[\xa5\xf1\x8a\x98\x88\x18\xea\x01L`\x96\xa8\xfa\xa9\x8bu(\xbb\xc1\t\xd9\xb2m\xc7\x10\xdd\xf4jW\xb9R\x9e=Y\x19\x93\x8f\xa9]\xdaE\xb6\xff\x00R\x84\xd8,b\xae\x85\x83h\xc1L\xd1\x89oU\xc9*0\xc2 z\xe3\x86V5R\xaeq\x89\x88\x06\x98\xf0\xe3\xf7\x14\xc1\xe9\x82\x9d\x8f?q\xf8\x95\x0e\x9fQ\xc32\xe8;hc\xcc`\xaf\xe4,\x00\xf7Y\x8d\xe0(i#a/q\x1c\x17\x98cc\xc1J\xdf,\xc3|^\x15\xdb\xd5\x92\xc4\xb3M\x02\x87\xb4\x81s5S\x16?U\x112\xdc\x06\xafj\xa3\xbb&amp;\x18Y\xb2Gl\xd2\x9e`\xfd\xef\x0be\xdc]w\xc0\x95\xf0\x9d\xab\xf1\x18-Ua8o\xba\xe2`\x9a\x1dA\x81m\x8d\x96\xf3\xd3(n\x18\xd3T\xec  \x00x\xa5\x97Z\xd2\xde\x88\x92\x1c\x07\xe6W\xb4\t\xbe+\x1c\xc7p\x06\x97\x9b\xc6\xa3+i\xadajW\xa2Q\xa9\xb6\xdd\x98[\x8b\x90\xdd^h\xed`\xea\xa5\x08\xc3Fl{b\x0e\x02T\xce\r\x85\xee\xe3\xd0\x94\x0em\xe3\xa1\x08\x16\xb7\x80\x12\xba\xca7y\xa0\xd5\xbd\xc4\x0e\x0c\x03\xb6(Z\\+\xb7)\xe3\xa8\xd5,\xf4\xadx\xbb\x88\xa6Z\xe5|s,se\xcf\x17\xf3\x81\x9c1\xd5_\xb8\xb3\xc11d\xe2\xe6\x14\xc0\xf3\x96\x1c\xe8\xb3l\xbd*\xcc\x18\xa9\xe6\x88\xf1\xee_4n8\xc0w5\xac\x03?\xf2q\xfec\xac6\x9a\x94&amp;\x17\x97\xa87\xba\xba\xce%WW\xd5@\x1e\x17\xa8u\xb2\xf3Q(\n\xc6\x18\x99\xc90\xac5(\x0b\xb37f\xae \xe0\x1f\xf3\x10\xdc\xfe\x9c\xea\x1esU\x9b\xf52\xe2\xc8sF\xeeP\xa9[9s0_\x83\xea\\\x88~\xb52\xf9\xaa\x9aq\x00\xeb\x9bg\xd1\xa9\x8e\x89Y\xc8\xff\x00\xe4\xcd_=\xc5\xab\xc7\x1fY\x82P\xc3\xad-\xa8\r\xeb\x1a\x9br@c_\xe6WEO\x0f\x98j\xe1\x8cN\xfc\x19\x95\x97\xc4&amp;919\x18\xe9|C\xbbx\x99\x87\x15\xb7\x0f\xa4\x95)\xf34\x02\xbcd\x8a\xedY\xb2\xcd\x9f\x0c\xb4Q\x98/\x15m\xff\x00\xad\xf8\xae\xe0\xfd\x91\xce\xbc\xba\x84/\x84R\xe7\x9by\x8b\xa9FF\x8c3\x97\x88`!\xa5{\xafC\x10\'[\x8d\xfb\xe6\xbfZ\x98[\xd1\x02\x8d\xe2\xd3k\x0b\x02\xe5\xe6\xc8\x18\x05\x96y\xa1\xde\x95\x82\x02\xd1\x08\x82\x87\x9c\x16}@ V\x0c[\xe8^a\xf7\x89C\xc1\xe2\xe5\x02\x83\xc5U\x1dA\xc8\xc3\xd9\x98QhR\x8eF\xa9\x98(V\x9c[\x84\x85~\xac\x0b\xdd\x8d\xccY\xaa\xaa\x0b(q\x1d\x16\xb9\xcc\xb4\xed\x91\xf2\xa0n\x0b\xc6\xd0\xb9\x95\xee\xa5\x9c#\x8fE\xc1&lt;\xc9\x16\x9e\xc69\x8a-\r\x14f\x80\xe0\x82Gd\xaa~\xcdK\xc8\x92\x0e\x1eo=\xac\xa8Et_\xac PS]M&gt;\xe7\xf0K\x81t\x9a\xa0\xe6\xbb{b\xd6\x10\xa5:=\xc3\x9bWZ\xb5\xfc\xf3q\x03;\xda4b\xa5\xd6[\xb6n\xb2\xc0\xaf\xf7\xf1\xcc\xd6b\xa1h(\x8e\xb9\xe6\xbb\x9fj\xea\xa1\x97+\xcdA\x8d;\xeaYVC\x07\x9f\x11\xf5\xe2u\x8eu\xa9\x8c\xcd\xe29\xcd~\xe5w\xa9F\xd2\x1ck\x14\xc7\x86mM\xb5\xc6\xe6\xf0\xado\xff\x00\'Wl\xfc\x19\xb8(7Q\x1czp\xd34u\xcb\x96\r\x8f\x0b\xee&amp;\xda\xb8\xd5~\xf1\xe6&lt;\xf8{\xb8\xe9\xd7\xdcS\x7f\x9c\xf9\x96\xaf?\x88\x1d\x91\xe9+\x15\xc4y}!\x14\xf8\xcc\xe8K\xd7\xd4\xcdM\t\x9f\x8b7u\x16\x993\x04\xa8\xff\x00\xfa\xdd\xcbV+\xe5\xbd\x90Uk\xfd\xf5\x0e\xad\x18\x8abQL\n\xac\x9a\x86g3\xeeu=1@\x81oGx\x82\x1c\xb8\xd8\x7f9\xa7\xe0\xa8\xf8\x83\x8c\xbf\x16\x0f\xb7P\x1d\xac\xcb\x9f\xe4\xac\xd1Q\x9b\xaf\xc0\xaa\x82\xdb\xd4\xc0"\x1f\xa0\x80\xb0\xba\xbe\x8b}\xf8\tte\xa7k\xcd\xd2\xb7\x04\x0ci\x9eP^\xd0\x83jKE\xceou\x05\xc2\xbeR\xbe\x9a\xf5\x03\x97P\x86\xfa\xe6\x81L\x0cY\xa9\xa0S&gt;O\xa1\xa8\\\xceh\xaf\x19\xe1a\xb1UL\x06j\xae\xc8\x085\xa3:G\r\x9ebR\x8a*\x1c\xa7\xf6D%\x82\x9b\xc0N` \x19\x18W\xf6v@]l\x85\x13;\xdc\xc9\xd9\x11\x9eB\n!\xa3;m\xb8\x01v%\x94V^b\xd2\x02\r\xd1\xebQ\xb1d\x0e\x15RA9@4\xbc\xb2\xda\xdf*\xe4\xfeV\xc6SM\xb6\xbd\x11\x0c\x81\x1f?\xfa\x80\x87a\xa0\xbe`\x9bY\xd2t\xdc\x91\x9b\x9d\x81J\xe5\xdb\xefQ\x8a;\x03S\xd1\xd9\xbe\x89\xba\xc0\x01\x0bW\x1c\x01\x04\xd9\x8b\x11\xb9\xe3\xfaD\x12("\x90\xc8G\x0eZm\xbf\xfc\x81\x8a\x0e\xc6\xdf\xc1\x0e\xd6\xb3\xc5:\xfb\x98\xdc\xeas4\xd6\xf7\x08\xd0\xdc~\xe2\xee\xea\x17\x93\xebW\x0e\xb1X\x95V&amp;\xa9S\xbc_\xc5\xf1\x1e\xca\xdc\xceT\xbf3\x86\x98\xee\xe2\xc3\x17\x9fDyq\xc3\x1bi\xbc\xbc$5\xa5\xcc\x17YxO\xf8\x86\x0e\xa3U\x8a\xc7\xdc\xbd8\xd5\x92\xb1\xacOt\xce\xf1|\xa5\x01\x1ee`~\xf1\nX\xce\xf1,w\xf7\x99y\x80\x81\x8b!j\x01\xe0\xf8\xbd\x1f\x1d\xc3\x8e\xe2\x0c\xc09\x96.+\xd6e\x9cc\x86^E\x83\xf7\x7f\xea\x0bF.\x82&amp;\xdc\xe2\xf55\xca*\xbe\x10\x9a\xac5\x0f\x15S\x1ec\xeapD\xb6\\Pn\xb0\xd4z\x9b\x00H\x00\xeb\x03\xf52\xcb\x01o\x83\xc2\x0f"\xf6\x8a\x866\xd5\xb7\x02\xea\x9bC\x17\xe7&amp;\xe5\x00\xd7\xddZ\xde\xf1\xc0\x95H\xa8@\x0cy5\x16p\xb4\xe9\xd6\xcd\x95x\x8b]\xbc(\xd5\\\x06\x19\xe8\x88`\xdfFOe\xfdF\xda\x8d\xc1\xb3\x80L\x0f5\x10\x99\x0bg\x0e\rS\xf7\x10\rE!/V`W\xcc\r\xb6\xbdXA\x08;\xc6\xfe\x92QE\x16j\xef\x7f\xe60\x01\xae1\x81\xf1q\n\xa5/\'I\x1c\xe42\x17\x8a\xd95\xa9Ye\xf3\x16\x9bA\xf4\x9d\x91L\xdb\xc8\x7f\\K&lt;\xc9\x07\x1c\x04\x10FKm\x07\x08w\xda\\\x9a\x1cL\xaf`\xcf4\xdb8}\xd1n\xddT5\xb5\xaa\x05?)\x88_i\xb6\xbbxjX\xb0\x06\x06U\xd0\xcb\xe3\xd2\xcf~\x0b\x8e\xcb\x13\x9e8\xd7\x01\xe8\x88\xa2\xc0+c\x8e\xf5k\xe2"\x8b%F$\xd7 L\x82Z\x04\x02\x07R)]wY\xfd\x1a\x86\x18^[\xfa\xc3\x0e\xef[\xc1\xb3x\x19\xc8\xa4{a\xe2;\xce\xe73^\xaa\xe2\x86d\xcf\x88\xb2\xe2\xe2o\x10[,[\x7f\x104\x07&gt;\xa0\x1a\x98\x89{&gt;\x98\xfa\x9f\xe2 T?S\x19\xfb\xd6\xe2\xe0\xd7\xd7\xf9\x8bY\xd6\xa3\xce\xe6WZ\x08*\xb5\xd0y\x98\x9a0\xae;\xe27q+\xdaM\xaf\xf6J\xd5w84\x1f\x99\xe6Q\x9c_\xdc6~\xea\xba\x8b\x83\xfe\\,c\\A\xc1\xeaV*\x99\xbb\x96n\xba\xd4\x1c\xcb\xe8\x96]8X\xa9A-\xd4ErAt\xf9\x96^\x00\xdc6(e-K\xafP1\x88f\xc2\x18\xcdC\xd5T\x0b\xe6\x06\xe9\x9eC\xe3Y\xcfqug\xd3\x1a\x80\x13\xa9\xbc\x18h\xd7*\xc6\xb1\x8b\x8c\x04\x054\x14\x1e&lt;\xbb\x8e6]B0\xb7HX~%*)P\x07\xb4\xd5\xf9\x99w\x934Qo\x96PQT\xa08~\x06!\x8d\xb0\x96\x8dni\xcb\xcb\x12a\x05\x0bt-M\x11h\x8ag\xc4\x1ce\xe5\x8c\x89\xd3\x95=\x18\x96\xec&amp;n\x97v\xae\x07R\xed\x1f\x85\xb8\x8e##\x16\xeff\xd5Q{\x82^\xe3\xea\r\xd2\xa6\xab#_\'01^\x01\xe8y1-\x90\x15\x9bn\x8a\xe1\xe6\xa0L\xaf?\xa5%\xef\x87\x00\xfef4\x81v\x04i`_\x82\\x\xb8iw\x82\xe5(\xd6\xd9\xc3\xb8\x8f\x13\x9b\xc1\xbc{\x89cvk\xdde\x05\x8d\xe6\x0e\x83\x04\xa7L\xe8\xd3\x82\xb4;b\xc4V\xc5h\xae"e\xe9\xa3V\xfd\x10\xaa\x85ZbD\x15\'\x1bG\xad"02\xb9D^\xaf\xa8;W\xa2\x8et\xe5C\xf6\x04\x1d\x83\xd5.\x11\x1b\xec`y\xa3\xb2\x19\x9b\xbcf\xe0f\x9e\xaa]\xdc\xbc@c\xf7[?\x98\xea\xa8\xb5\x92k\xcd@Zq\xee\xe5\xdd\xd6s)\xfd\xdc\xf1}\x19\x8e\xad\xb2\x1eB\xb1\r\x8675\xe9\xe6\xa0\x11xg\xa7\xef\x99\xde3Z\x9a\xae\xbf3\xf9\xfc\xcf\xbdq\x1b\x8b\xd4\xb6\x9f\xc4[#\xbfQ\xaf\x7f\x8cba5}x\xb9\x9d]\xcd\x06\xa7\xdb\xf4\xd5\xce\x0f\x12\x8a\xa2Qx+\xd1\x16\xdd1,\xff\x00r\x8b\xd6\xf7\x1e7\xf7\xa8\x8d;\xcd\xde\xa1\x95\x86i1(-ncA0\xb9\xf8\xb0r\xddT\xa7\x830\xe2\xa2\xe3\xfdc\x12\x81H\xae\xb5\xea*\xda\xfb\xc5\xcc\xa3g\xb2Q|\xd4\xbf@\xd3\xf8\x86T\xaf\x12\xb8&gt;=\xc4\xf13&gt;\xa3D\xa2\xe8c\xcf\xdf\xc1UcR\xac\xd0\xbd\xd6\x0c\xfd@=2mm\xb7\xe0h\x8a\xda\n\xdc\xf9\xe7)\xbfP\x920\x0e\x7f@\xff\x00\x15\x08Uc\xa8\xcdQ\x82\xda9\x9d\x11\xbav&lt;x:\xda\x9a\xeb\x19\x1a\x01\xe0\x1a\xdd\x19z!\xd0IM\x9d&gt;\x9d\xb0\x06UkJ\xa1\xa4\xf1\x11\x13N!d4r\xb5\xdf\xa2\xc3\x82P\xf96\x16_\xe2\x05)\xe9G\x10%\x14\xe4[\xb3\xd4,=C\x19\xf5\x9b\x8ev\x9f\xf0+/na\xa0W\xd49\xaf\x10"\xaa\xd2\xb8\xf7\xfd\xc6\xe5f\xe3\xc6u\x12\n\x14xo\x0c%ed\xf2\xd9\x15h\xda\xd1\x84"\xb0\xd5\x19\xbc\xaf1\x86\xe1k\x80\x82=\xa7GF\t\xb6(Q\xa8\x08\x9d\x06_\x1d\xb9\xe5`*\x10\x98\xc6V:\x9b(Q\xa1\xd1\xa2P\x00\x80\xe48Wi\xcc\xab2C\x0f\xf0\x10\xc395_\xa0\xc4\x1c?\xea\xc7\xc1v\xfd\xda)\x16r\xe3\xf3fP\x03\xb4\xa6;\x86\x06R\xd5\xd7U\xc4\xa2\x9a\xc5\x9c\x10\xf8Z\x1b,\xddG\xa3\xe2[\xc3\xb47\x05\x90\xd3\x16a\xee]\xd1\xe5\x88\x0f\xf3\x13\x9c_\xe8\x89\xfe\xb3(\xd0f\r_\xb6V\r\xeb\xb3\xf9\x9dj\xbae\xe2\xee&lt;o\xe3\xccn\xf5\x1e/\x8c\xd4k \xeb1\xe6&lt;r\xeel\xe2:\xe3I\xb2\x8b\x86AW\xebP\xdb\x00L\xef\x1c\\s\x17;\xe6b\xee\xbb\x89\xd9\x13tz\xcf\xf9\x9dQq\xaf\xe5\x8f\xd5\xd6.U\xc4\xc6\x9f\x1d_\x13\x8cN\\\xcdq\x0c\xd6\x98\xb2j\xa6g0\xec,\xb37\x11O\x1aM\xcc\xe4\xc5\xc6\xb9\x9dk\xf7?B\xa6/\xd3=\xca\xf8\xfc@\xd6\x08O$\xb1cy&amp;s\x8c\xf5\x03&lt;\xee\xc65\x81w\xa3\x0bV\xd7D{\xf1\xe6&lt;\xee\x9b\xf8\\j\x97\xf4^\xef\x80\xe7\xc4*\xa0\x0f\x94\xdfB\xf9Y\xa8A\x80\x169\x17@:\xe0@7\xc0\xb04f\xaeU\xcf2\xe8\xbb\xac)\xb5k\x84\xd8E\xcd\x9cn\x17\xb6\x8bl\x0e\x04@\xcaP\xf6\xdb4qG,e\x18=\xea\xef\xa7\x1e\xa2\xbbBJ9\x1a\xb5C\x8f*L\xdb\xbd\x17+\x84\x16\x02-\x9e\\T\xbb\x9eNP\x92\x0b^\xc5\x08\x92\xb4&amp;\xa2\xda\t|6}\x913kx\x94\xd6"\xbb\x05\xa2\xfd\xed\tfo\xfc\x909n\xf7t\x04J4\xddx\x98\x02\x93.5\x1a\x13m~\xaf\xb8\xe9\x84T\xdf8\xab\x81\xd1\x9a\x0e&lt;\\E\x9468\x02\xd9\x83\x11oD5\xd9\x02[\x8b\xe2\xd2\xcbj\xd3\xb7\xe8Jrm\xe3l\xc2\x14#w\xe5\xc0\xa5\xa0p\xd1\xc2\xe8T\xca\xac\x0c"\xfani`1\x03\xd0N\x89\xb5Q\xe1\n\xb3\xc4\x19`\x04\x1c\x97\x1c%\xc5\xad\x939\xe0\xab\xe1\xf1\x15\xa7$\xc0\xa0\xc3)3\x8d/\xec\x88\x95yr\xe7\x10* \xba\x07\x03\xe8\xb9}\xa3\'\x9dD\xf1W\xd9\x98:!\xb4\xbdQ\xe6__\xcd1\xba\x8d\xed\xee\xee/\xdb?\xcc\xfa\x8e\x9c\xeaj\xcco\x15\xa4\x9b\xc6~\xa3\x9c\xf8~\x17\x12\xb6\x95\xbf\xb9\xce\x8fP_\xeb\xd3\n\xa5\x9cJ\x01\xcc\xcf\x1eq\xee?\xf8D\x95W\x1e*\xae%c\xae\xdbg\xe0y\x89):+\x04\xca\xbe\xfa!\xab\xbf\x8e\x14\xc6#\x94\xe3\xeeqLt\xce\x863\xcfq\xb6\xb8\xbd@\xb7\xf8;\x99{\x16]\xc0\xe2T\x05\x17+\x01&amp;\xb8\xf2\xad@\xc5N\xb1\xf1\\\xceBk\xc6%\x1b#\xb7\x9c\x91n\xce\xb77p0\xd3\x8e*\x10\x83d\xa6L`{\x96lwun\xf7\xea\'Z\x80"\x8a\xcaq/\xe6\x18\xd4\xa3f\x02\xe5\xe5\xff\x00+5K\x85\xd9p3\xd7\\\xb0\xe2U\xaa\xf1G\xd1\x9f\xd4\xc8 #\xb7\x03P\xea\xc9\n\xd6\xb6\xf2\xecK\x19\x85IWK\xa9\xbcU1!:]h\xe1~Xh/\xc07D(,Q\x83Y}Tpl\x12\x8d\xea\xc2\xb8\xa8\xa8\xa6\x8bKs\xe5\x95\xb6\xde\xb8o\xd4u=]\x12\x07\xb87\xcd\xc5Q\x95\xf8Z1\x9as\xdd\xccn\xd1\xd9\x85e\xcc\xa5\xa0\x18\xaa\xdd[\x9ev\x84\xbbd^\x05{\xf3*K\nXp\x0b.#\x02+-\xbcLO#\xaa\xf2\xc3i-\xd9\xe3\x88\x88\x1d\xeb\xbau\x9e\x08,P8\x08,\x14\xa5\x91\xa2ZY\xe5I\t\x19/\xfb,"\x84\xe8\x1a0\xf9\x8f6\xde\xe8s\xd8\xcb\x10\\\x0c\x8b\xe0\xaa\x97\x9d\x93d\x07`\x92\x86eKj\xecD\xaa\xb9\x97\x8a==2\xeb\xaf\x1d0\xd3G\xf8\x97*o%\xddx\xc6N\xa54\xa8\xc6\x00\x0f\xf8N\xa5##H\xc2\xbb\xc4,\x13\xc8_\xdcPp\x8a\xad}\xb1\xab\xbbM{\xf0]L\x9a\xebp\xc3r\xb6s5A\xa9\x89S\x17\x96Q\x8dM\xe1?\xdc\xf1\xe0\xf8t7\xe6\xe7:\xc6j\xb0E\xbc\xcc\x9f\x0c\xe6\xae\xbd\xc0\xaa\xcc\xc4I\x8a\xfa\xfdO\xcf\xd6\xe2f\xb1\xe8\x88\xc3\x8c^H\x9aV\x1b\xcfS\x0b\xff\x003~\xe7\xddG\x19\xa9W\xb0\xfb\xc4\xb0\xba k\xd5\xe6\xe2\xa3\x9a!(rnl\x95\xc7=\xcdl\xca\x12\xfe\xd0\xb1\x81h\x86[[\x85\x1c\xc3\xebST\xca\x0f\x8dV3\rE\xc5\x13\rq\x1b3*c\x8b\x82\xd9\xa2\xc8\x1b\xa8\x8bA\xd5\xf0\x89\xb5]\n\x1e\xd8\xc1\x94\xe5Qn\xf9\xb6v\xc3\xc8\xed\xabT\\`\xe2;\n\xf4Z\x00\xc5\x98\xcb\x13+,kBF\xbc\xe7s2\xee\x02\x11|k\x1cB-\x16x\x1a\x1d\x11\x9f\x11\xb2{\x01KV\xf5z x\xb5V\x81\xbf\xf3L\xa6\xf0S6\x15\xe7P\xe6[\x85\x96\xeb\xc4\xbdO\xa5\xe8&lt;\xab\xe2^\xa1\xba-\x19\xdd6\xf3\n\xd4\xd2ez[\x0e\x82\xb1&gt;\xcfpi\x87\t\\\xaa\x1d\xb1\xc3d\xd8\x16j%\xac\x05s\xf5ls=({\x86\x8c\x05%\xb9\xab\x9a\xb1\xb0\x0cp\x91\xda[\xbb\xc0\x93-\xb4\xc0\xbf\xea\n`2\xbc w\n\xd9Z\xb8\xf5\xafD\xc3\xf8RY^]\xd7U\xb9o\x05\xec\xb8\xfa\x89\xcb\xfcW\x1c\x89\xcc\xc5.\xce\xb3&gt;\x9e%\xa8\x8ezc\xd8\x91\xd6\x02\xe0\xa2N-\xb9j\x91\xb8\xce9\x9c\x01\x8ax\x13Q*\xc2\xe0\x03\xfe\x18j\xa0\xb0\xbb\xb3\x9a\xd1\xcc\xb1\r\x94\xad\xd8\x9b]\xd3-ib\xd27i\x81\xeaV\x0f\x80)u\x18X/W\xb7\xdb\xba\x84\xe2\xe9h&lt;\xd7\xc1\x1a7f\x19J\xa8D5F?\\J\xccjj\xee\t\xb9s\xdb\xf1\xb1\xcf\xa8\xd5\xfej\x17W(\xeb\xf14pi\x8b\t\xbc1\xe5\xc7&gt;\xf7/4z\xc7\x8e\xa1\x1bV{\xb8a\xc2\xd5\xcbV\xd8\xe3\x8f\xf558%\x18\x13z\x80\xbd\x1dL\xef\xaf\xe2U\x00\xf8\x94Vi\xf7)\x1c\xb3\x18\xadr\xce\xb1\x84\xfc\xcf\xf1\x1cj\x97\x9b\x84^%\x8a*6\x80&amp;|\x91\xde?\xb9e\x7f\x12\xae?U\xb8\x1e\x13\xd3\x0fd\xfejV\xa7\xf9\x9d\xf5.!\x0c(\xe0\x8a\xddj\xa7\x10R\x153R~b\xff\x00\xc4\xa2j]\x9d\xaaP\xdbk\xfe\xe1\x04\x01\x90)\xc0\xd3\xe4\xb8\xf335\x94(A\x12\xfd\x9d\x91\x1dm\xd1\x82\x97\xdb\xf9\x8b.i(s\xdc\xa8$\xa3z\xc0\x1a\xfapC\xb3\xa8[\xca\xbd!\xda!\xd4\x1f\x01\x87B\x17\x8a\xa3\x91\x80\xdf\xdc\ry0\xa6\xe0\xc6\xcd\x81\xbdc\x116&lt;\x94\xb5~\xd8\xe3^v\xb7A\x15\x90\xd9]Ez\x13&amp;T="r0\xf8\x00\xc3\xa0\xe5i\x05\xdb\xa6=E\x05k\xd1\xf5\x1e\xab\xb0.;\xc1\x19\xf4l\xef\xa4\x0f*\x87\xf1\x13L\xa1\x83\xa2\r\x0c\x10\xb4\xe4\xa8K|\xdc\xbb\xad\xc4\xf4\xe1\xbe\xa1\xd5g&amp;\xe3`\xabiS\xd4\xbfx4\x0evE@\xfe\xf1\xea#\x08\x97w\xc2\xff\x00\x88B2\xaa\xc1N\xafy\x1d\xa1uT\xb5\xa3s!Pl\xc2\x8b&gt;\xe5\xcd\x80\x15wt,\x93\x05tS\x8d\xbf\xa9\xdc\x0b\xd8\xf3G\'0\xb5kTA\xc0\xeb\xc9\x00c\x8d\x8b\xb1w(\xb2\xf2\x12\x1em/\xac\xef\x1d\'[\x81D\xa3\x9a)\x9f\x08\xc5\x00\xbc\xa4\\j\x9e\x8e\x10\xd1\xbe#Y\xc4\xe7\x9e\'_\xc4\xdejWD\xed\xee\xe5\x16\xfb\xaa9\xa9\x8d\xd1\x1d\xea:\x1f\xb3\xb8\xca\xde\xee\xa2\xf3\x8d\xf5\x88\xee\x9e\xe1\xb7\x15p\xddb9_\\\xea&amp;\xfbs\x1c\xc6\xdeo\x88\xf6+\x1a\x95\xa8\x9e8\x1e\xc8\x86\x9ecM\x93\xd5L\xb3\xeaseE\xa3/\x1e\xe1\x98\xbf\xf3R\xc5\xdf$GK\xdes\x0bY\xaa\xcd\xb3\xb3\xf5\xbc\xca\x8c\x10-5\x87\xe2\xaad\xcf\xb8\x15*\xeaW2\xd2\x91\xa9\xbef\xf4~`z\x81x`\xf0pJ\r|\xe8\xe4\x9a\x18\x1e\x89\'\xdd\xca$\xa8_\x83\x9ev\xc3\xccHERi\xe9eAff\x80Z\xaf\xe6.\x16\x97".J\'(B\xd7\xa1\xce\xb8\xa2\x1e|\x86\xd1t\xea\xc2XRl2c\xc6)\n \xbb\x15\xd7\xa3o\xb8P4#\x9e/\\\x89V\x19\xab\xf3Hq{\xa0\x00zYv\xdc\x9aqR\xca\xd6\xa8l\xd7\xdc{\xcdyn\x0e\x1d\xd4\x0bT/EdT\xd1\x00)\x8aX\x95\x98\xef\xbbW\x08 \xb6U^l MH\x8b\xcec\xa0\x80I\xeb+.\xe4\xd9\xfc\x95\x02\xa6Z\x9f\x1c\x14^\xe2F\xb6\xaa+j\xe5oq\xa8\xa2\xa6\x10\xe8\xe9\x94\x0f\xec\x8bE\xbc\n\xe1:e+\x8b1\x9d\xa1V\xe8\xed97P6\xea\xd4]&gt;\xabL\x1aS\x82^M\x18\xeea\xb0/j\xd5\x0b\xd5\xf9\x948\xa8\xeaM)\xf6\xb9\xaf#\x1e\x8f\xe8\xee\xc6\xa2\x82\x86\xca\xd2\x0b\xd8\x9cy\xe68\xed\x1c\x14g6C\xc6\xc4\x06\x050\xea\xe1\xa0\xa1F\n\x18-a\x0e\xf0C\xba\xce;\x81Eq\xcdY\\\x97\xc4eB;\xaa\xdf\x9d\xb0\xac\n\xaa\xe2.s\xf8\xf1*8\x94\xcf\xab\xf7)\xddF\x89\xec\xf3\xf8\x8e\x08\xd0\xdc{\xf2\xcc\xdf\xee\x0f\x0f\xd1\xdf\x88l\x15Y\x81\xac\x1d\xd3\x1db&lt;\xdc\xcdk&gt;\xc2\xbe\xa7\xf0N?\xc4n\xcb\x8a\x14\x1fQ\xa2?\x9a\xc4\xe7\x8b\x9e6A\xbawQWO\xc5cg\xa9\xe9\xdaf\x14\xdcv\xff\x00y\x971\xc1\x87\xbc\xc0\x8e\xa1\x0b\xc7L\xcf\xeb\x10\xdc\x03\xe1\\\xde \x86\x7fr\xd7\xcd\xdc\\\xa9{\xe2\x03\x97\x1eZ\x87\x84ba/U=|w\xad\xcb\x88\xd4\xbe\xb9va*\x18\x9c)\xa6\x8c\xd3\xdd\xe2\xe2\xb2Q\x8a\x13#\x82\xf4\x13\x01\xc66\xda\\\x85\xc6z)\x8dv1\xae\xe2\xf1Q\xe1.\x9bz"\xce\x83\x03$r\xd3\x98\x8d\xa84\x0bs\xad2F\xba1!Y|\xb8\xb9\x85\xc6\xbc\x94&lt;%\n\x8d\xa8\xa0\xd5\x9d\x91\xb67\x91X\xfbbau4\xecm\x80\x9cZ\xc3\x7fP\xe4\x96\xd8A\xef(\xc9\x84,\xb3\xc7,\xa8LWp%\x17\x95\xbcjc&amp;\x0e\xac\xe2\xf9#\xc0\xcb\x8e_2\xb8\xa2\xf5m\xa1\xb8]\x01\xac\r`:\xa8\x95\xa7\xad\x86\x0f\xa2QYY\xa2\xa63,\x89@\x15-K\x06f\xf5\x88\x03o\x05\x91\x04(\xaa|=\xc7T/v\x1db\xe6\xe5\x1b\xab\x07\\=\xc3e\x97\x14h\xaf\x0eb\xbco\xd1\xa7U\x15o\xd1\x14\xcf\x96e\x14^P\x9a\xd7\xf6A\xd0\x12\x07^\xe9\xec\x87\xa0Pp1\xd0\x06\xea\x99\t\xca%\x8bT2\x0b\x1fzX\x8f"\xf6d\xc9\xc4\xb5\xb4\xb3og\n\x04\x92+\x15i\xbc:\xf5\x02S\xc3j\xa3\xe3\xc3*&lt;\xfa\xcc\xcf\xeet\xdc=\\\xdf~g\x1cJ\x98\xbd\x17-\xc3\x88\xcbg\x8c\xc5\x8c\x18\x97\xba\x1e\x0fPs.tqP\xd7\x87Q\\W]\xd4[\xe6)q^\xcf\xc6\xe6&lt;o\x9ea@\xa2r\xd5\x9c\xc5\xc6\xe6P.e\xa0\x8b\x8d\xea\xb7\n\xb8s-\xb2\xfb\xe6_\xc8\xd4\x06\xf19\x80\x9c\xcc\x05\x9f\xeaWP\x02R`\x9a\xddN&gt;+\x8b\x95\x02j0\x1c\x92\xce\xf7\x178\x81o\xde.a\x9e9\x8c\xc7\xd11\x83\xff\x00\x9e\x1d\xebq\tG[\x04B\xff\x00\x18\x96FAXD\x88\xc7+E\xbb\x17\xe5\xf4\x10\x8c\xce\x80\xc6\xa8\xbe\xcd\xc4\xa9\x92\xa5)\xd0\xb9]\x95\x16\xeb\x1fR\x06\xfb\x1d\x8a\xfaf\xf1\x1b\xe8\xe4\xb4\xa3\x90#\x0bK\x15\xf4=W\x13x\x0f\x08\x96Wc\xcc\xa2\x81\x92\x83\x85^\x08\x8d\x11\xc0*\xa3z\xf2\xc2\x14"\x90\x17\xbbg\xaf:\xe6\xccB\xdb\x00\xa5uP+\x02\xd8\x8b\x1a\xd5u\xb4\xad\xc5\x06\xe3\x7f\xae\xf30ZZi\xc90i\xeb\xb2\xa1\xc0\x86\xe9j\xd8\xab1\x1c\x0ek\xb68t;\x1a\xe5\x89\xa1{\x0b\x0ex\x8e\xd4\xd3\x01@8\xf1(\x034\xb6k\x15\x8895\x92\xf1\x13\xe4\xaa\xc3\x8a\xe4\x8b\x96\xcc\x19s^\x18\x14u2\xd3ez\x99P\x8a\xb3\xa0\xca\xe2)\x8b\xe8\xb1\xf5\x16\xae\xaeGt\xb51\x03@\x85\xc0\x94E\x009j\x83\xcc\x18\x80\x02\xd0\x8a\x0eIp\x16\r\x84K\xb5\xf0\xe6U&lt;\xb5\xb3\x98S\xab\x84\x1cn\r\x8c_\x9e\t]\xca\xd0\xc2\xab\xe0\xdb\n\xe6\x1b\x8a\xaa\xbf-\x1cB\x03\rT\xea\xf3\xf1\\\xca*\'\x1d\x13\xaaH\x91;\x99\xcc\xe4\xf3\x16\'8\xb3;\xb5\xf1\xf73\xd7)ejj`\xab\xc4\xce39|\xca\xf0ZJ\xa3\x15\x99A\x8f\xccG&gt;\xe71\xe7%\xe6\x1cqovE:\x86_\x96\xee2\x99\xcf1\x13\x92"\xe4\xc7\x9c\xcb\xaa_X8\xe2\x18\x18\xf5\x004N\xff\x00S\x03\x8fs\x06q8\xe3]\xdc\xaf\x1ba\xbc~\xb3\x02U\rT\xa0\x97\xf3\xdf\xacF\xde\xa1\xe1\x1c\x1c\xcb9u\xb5\xa9\xbf\x1fZ\x87\xb9\xa3\xe3|q\xf3Y\x890"\xbc\xc3C\xb9s5\x1f:\x8b\xd1J\xb7\x87_\xb79fA\x8e\x9f\x7f\x9c\xb1;\xad\xf6\xfbWS)\xd8^4\x8a\x1a\xae\xb2 \xfa\x8e\xb9\xb7\x9d\xb7\x17\\\xcaNi\xd1\x0f\x19\xaf\xda\x0b2\xe0\x10\x17\x05\x03\xba\xad\x03\xd2\xcaQ\xba\xa9\xe9\xe0\x94\x15\xa3\x81\x9c\xf4\xcb\xf4\x1c\x1c\xcc\x13n\xa5\xd2\xd5\xf8\x8a\xd1i\x9d\xef1\xdd\xb6\xf7\x86a(d\xcb)as|0\xe4f\x8cS\x91%\x96d\xd9\xac\xc0\xca\xee6\xe2_m\x15r\x88U\xb4q|L\xee\x93\x88\'(\xa1"\xa8\x8f\x84\n\xad\xac,\xe2[\xa5\xaf\xc1-&gt;\xcb\xbcc\x88\x1b\x9c\x96\xa4`\xc8+\x16\xf6\xe1\xfa\x96\xc5\x97\xcb.\x1b#Qr\xe4\xe4.\xaec9\xde\xcf\xf5.cM\x943w\x94\xccF\xf5"&gt;\xaf\x1e\xa0\xb9\x19\x14\xe8J\xa6\xf61\xd2eP\xb7%s\xe4&lt;M\x186\x07Wf_\xa6(-\xc6\x9c\xf6\x85\xe7\xc34!\x1616\xa4\xa9\xe6mR\xb1\xa3\xfd\xb2\x8bu\xf1X\xf2\xca\x87;\xccci\xb3\xb3\x8c\xcb\xb6\xe2\x8e\xe6\x03\xfc\xe2\x06\xa5\x19\xf4D\xc9\xeeQN0J\xdb\xea5\x94\xcfy\xa9\xaa4g\xd0M:6\x1b\xd4uX\xdbW(V\x0f\xfd\x8bF\xa0\x85\xf12\xa9\xe6&lt;\xc8\x0c\xf5\xbd\xcb]S\xeeZ\xcee-q(&amp;\xdf\xa9\xd4?\xd4&amp;~=\x92\xc8\xa0i\x98\xd9g\x15\xde`r?\xb9\x90\xf7\x9a\xc7\xc65\x92\x1e\xb71\xcb7\xf2x\xaf\x9a\x9b\x1e\xb6\x04\xadY5s\t\x80\x10\xf3f\xd4\x1c\xcb\x1b\xaa\xf6`8\xe6\x19\x04\x845\xf9"\xda\x1a\xbdc\xef\x98\xe5G\x80\x08\xfd\xc2\x17\xb2\xe5\xd30\x85\xb7\x82\xe8/&gt;"m\x01wd\x17\x1348\xe7ve\x87\x0c&gt;\xd8\xe6\xb9\xc7z\xf1*-7\xf5+d1Z"G\x18\xf5+\xed/\xf6\xc6S\xb8M*\xd2\xf5\x18\xa9^\xa2\xaby\xe0:\x8d\xe1\x8db0nV\xb5\t\x87\x19\x1cn\x14Au\x82\xb1\x88\x01\x82\xd63\xf5L\x18\x9a\x06\x90\xc5;\x86\x03V[\xa2\xb1\xab\x95*\xbema\xce\xaa2\x85\x05\xd6o\xf1+\x15\xad\xe4\xceB,\xf5\x9a\x82\xa2\xe2c\xae5\x14\xd9\x82\x9a\xcf\xbfZcM\x94\x1c\xb0 \xff\x001\xae\x01\xbd~#*7&amp;\x8ey&amp;\xe9\nQ\xb6\xb4\xfb9#\x8a\x91h\xe0\xd5\x1e\xc8\x16\x82\x1b\x12\xae\x9b\xf1/\x94\xca6j\xdf\x9e\xfe\x1cJ\xd4\xba\xbf\x8f\xb6fQR\xb6\xa4\xf3X\x89\x16)\x87\xc4+eC\xd5$Eu\xeed\x0f!\x8e.\x1c\x15\xbb\x81\x80\xf5931\x86!z\x9co1\xe1j\xe7\x80?q\xf1N1\xd4v\xe64YD\x03\x93\xf2M\xf5~8\xd4u\xe3nK\x81\xbdg\xce\xd2\x04\xcf("\xb5\x0b\xc6\'\xeeS+x\x8d}J\x98\xcc8\xc4\xbf9\x9b\xe9?\x89}Ls\x0e\x8f\x8e\xb0\xc1\x98\x155\xa9\xb8\xb3\x19\xa7p\x80\xb3\x1ee|S^\xe0\x8b\xbe%\x1e\x8ej\xaa\xe0"\xf9\xb9Q\xbf\xa5\xfc\x12\x90"\xa3\xbb7\xdb\xcc3a\xea\x91\xcc\x1a9\xa0\xe7\xea\x0e\x05\xca!\x86\xef\x04\r\x05\xd1sk\xf7-\n\xa0\xed\xb0\xfb\x8a\xb1\xb4;\xb0/v\x82\xdc\x90\xcb\xac\xd5T\xab\x04\xc4\xa41g\x88\x81b\xaf\xdd\xcb\xac[\xcb(j \xc6c\xe6\xac\xbd` V\xb5\x03c&lt;\xef\xf8"\x16\x14\n\xb7\xfc\xc2\x9c\xcf\x11\xe0\x1a\xd2j\xefP\xa0\x01\xb3\xeb\x8b\x96\xd3R\xed\r\x99\x96\x00\xf9U+3\xeam\xba~\xd7\x15\x10\x87aG\xdc\xa3`\xb6\x8e*)P\x9b\x10\xc1\xd9\xd9\x04\x89\xa0\x85\xd69]\x92\xe4\x11\xb5?5\x9d\xf0\x91F\xc08\x18o\x8f\xb8\x1f,\xcb0\x9c"%D"\xdd\xe9\xa4\xee:8\x88\x04\xd1i*\x1e\xdf`\xc8\x16z`\xa1\xdc\xc7\xfb\x9ffs1\xaco\x13&amp;\x8f\x8e\xe3\xe7\xf9\x87\x82\xa6\xb3^\xa0:\xcc\xac\xea"\x971_\xf9"\xae\xb9\xb5\xdc\xd5\xbe+p\x006\xdc\xce\xfdT\xa2^\x89\xf5\xc7\x11\xcd\xeb[\x95z\xbb\x98\xd3\xff\x00\xb3U\x1c\x9b\xb6\xaa\xfa\x8b\xc5\xc7\xbc\x98\xce&amp;V+\x8f\x1fS0\x96\xe7WqM\xf7\x99@\x15^&amp;\x89\xdf\xb9\xcf\xbf\x80,\xde\xe0v|wg\x13\x92k\x8c\xc2\xcc\xb7\x93\xed\xd4[\xf7\xea\x1c\xfd\xc7\xa2_\xc4\xaa\x98\xc7\xcd\xdf\xc6\xb5\xff\x00\xc2\xa8%;\xb9\x9d\x0e\x97\xe2S(6)U\xe5!\x02\x8b\xac\r\x84\xbb\x12\xc78\xc5K^CO\xf1(\xb87\xa4Z\xf48\x8b\x01n.\x97\xcfs`J\xdb\xc2\x08\xd9\xb9\x05\x17\x82:0\xf5Gyc\x18\x8e\x15*\xa5Uu\x1c\x81 \xe9\x82\xe5\x1c/C.V\x18}\xc1\xc143;\xa0\x0c1\xda\xcc\xa6\x1b\x9eX\x10\xdcZ\xc6\x9dqqE-W\x0e5\x15LU\x8b\xbf50\x15\xa3o\xf0\xb8\x98\xd8e\xdf\x99Q\xc1\x93)o\xcb,\x94\xea6\xd1\xbfdi\xd0P\xd9\x0eD\xe1t\xa2\xbc\x0c#\xee/.k\xbf$W\x80\x85\xbc\x9c~`-M\xcb\x03\x83W\xf5\x1bTP\x16J\x14\xc6\xe0\xc6\x014u\xad\x86E[\xfd\x89\x9eU\x88\xdd\xea\xbe\xc7\x89I&amp;j\xf6\x02~\x18\x16\x80\xa4?\x1b\xd7\xc7u.\xbeo3CZ\x9e\x8cN*"\xb5\xc4xj]yn\xe3\xc5VFl=\x91\x07S}\xc5q\xa9\xba\xb5\xdc\xbe\x8ey\x98b\xea}_\x89{\xce\xfe\xa3\xcd\xaar\xb7Y\xdb\x88\xdfR\xd5.\xb2\xd5\xc1i\xfewQuY\x83\xd7\x83\xc1\x00q\xea\x1d0\xb7\xe3\xef\xf3;\xe30%13\xa9w\x8bYf\x18fe\xb9\xb8\xba\xb3\x92\x0b(\xfc~\x9dC\x13s\xbfS\xb7\xe2\xa58\x94x\x95*&gt;\x06\x10s\x88V\xe8\xc7kg\xceR\x81\x05\x9dA\nV&amp;\xe9\xd7\x89[\xa5\x18\xc9}6L\x1e\x0e\xf9\x07\x11`\xaf\x03\xcb\x1eYr`\x1d\xe2R\x99&lt;\xda\x81\xeev\xae5_X\x94\x81\x14\x11b&lt;s/\xe4\xcb#\xf7\x16\xa0B\x00\xf0\xc1\t\x05Q\x10\x8f\xa3\xa9p\xc6\xc5\x8a\xf3\xeb\x88\xd6\xa0\x9d$HPG\xfc1\xf4V\xd7V\xc6 \xe2;\xf7\xd4[@T\xe2\xca\x7f\xdc"\x14\xe9Cb&lt;\x0f\xa7\xaf\x864\x10\xdf\xfd`\xc4\xa4\x0e\xe0\x00FE\'\xa3+\xf5\xa9P\xaa\x84l;l\xc3\xeb\x12\x9b\xabGZF&amp;\xac\x01\x18Kn\xbcT\xb9%\x0e\xb0\xccBU\x8a\xcep\x902W\x97x\xb1\xa9\xce\x80\x1e\xda\xca\xfb\x951\xe0\xdek?haG\x13\xf5.\xea\xb9\x9dK#/\xe1\x99\xb2\xff\x002\xaf0\xdf\xfb\x8e\x9d\xd5D\xdb5\x89V\x96\xdf\xe2\xa5\x16s\xf5\xbb\x9a\xd3\xadf\x1a\xc2=]\xc7\x05q\xfc\xcb\xf3g\xb8\xd7S4\xd1\x93E\xcc\x8f\x18\xf3s&lt;\xb8\xe7;\x95\xfb\xa8\xe0\xc3\x95\x8d&lt;sqZ\xf1,\x1d\xfe\xa5\xc1\xe7r\xb8gR\x85\xdc\xacJe\'\x12\xb4\xcf\xa9L\xeahz\xb9L\xba\xed\x9c\x9c\xd4-\xc4X\xfd\x7fp!=\x17\x0f\x8f?\xfc\xea\xf3(\x8b\x9c.;FNp\xa1R\x90H\xe5\x9c\x9b\x18\xd4t\x821\x90\xbdNEv\x08~b\x16s\x8bU\xe8\\\xb2\x9c$\xbf\xe4]Q-fn\xc2\xa2\xdc\xa7\xc8\x19\xb8b\x05\xb6\xd3\xcc\x08\xba\x00\xebe&gt;`k\xe9\x8fq\x8a*\\\xa80f=\x8c\xa2z\x00I\xbd\xb5\xba\xb8\x9a\xaa\xc8\xeb2\xb9\xd5\xf8\x99\x0b\'\xf0\xf8\x9fh\r.\xc8]Q\x93[N\x90\xeaU\xe2;\x1c\x08k\x047\xb4\x9ex\xa8\xf2\x86\x7f.\x1e6f\x03i\r\xd9\x81\xf78\xcc\xb0\x89{\xe2\xac[\x8aJ\x02\xca\xd8\xd2d\x18\x1f\x0b/\xea\xb8v\xa6 \x1c\x91R.\xc8\xd0\xb5\x8bhm\xde\xa2\xf0d\xc02\xe2\x98\x86\x8b\xad\x17]\x9a\x85\x8a8\x03\x86\xf7\x18\x07\xebp(.uz\xe7\xe39\xc1\xf7\xab\xfa\x9c\x05\xfd\xf9\x9c\\\xcfY\x9b\x99\xbf\x86T\xb81+f\x8fr\xca\xd7\xe3\xdc6SY\xbc\xca\x0c:\xc5\xc1A\xb8\xdb\xa4\x8d\x9f\x08\xe6S+\xd7\xb8\x8f:\x99\xcf?\x19\xf5}nU\xeb\xd4\xb98\xa8~5\x0b\xd3\xa9Z\x94B\x05\xd7\xa9\xae\'%\x1c\\9\xc6\xe5kq\x9d\xf8\x8a\x8f5.\xbcbb\x81\xbew5\x9cL{\x82\x8f\xaf\xfe\xab\xe7\xeb\xe1h\xb9U\x91\x10\x1a\xdb&amp; \xac\xa8r3\x1c\x81|\xe6\x04\x99\x0fC\xfbj:a\xbc\xdd\x9f\xa81\xfa\x04\xdb\xcbl\xbfq\\Z\xb7\xe4\xca\xc1\x0c\xf4\xaa\xfb\xc4\xb6\xae\xb4\x18\'\xc9I\x88\xb8\x14:\x07\xa9\x97E\xa0\xa8\xd38\r\x05\xc4\x92\xfe\xa2\xd0\x1c\xe0\x89\x8c\x8c\xb4\xab;\x94\x94\xc0\xa5Z\x88\x18\x8a\xd7\xb9C\x9c\x81\xa9Z\xb8\xae\x1eIi\xe8y\xa9x\x1eFm=\x81\xc3\x0e\x00E~\xb9\xf1,\x00\xe8\xe3,\xaf\x8b\\]\x14:\xa2\x15\xea\xd9C\xb7\x15\xcce\x1cl*{\xaaf\xdeN2\xff\x00 \xd4\xa4\x9d\n\x91o\xac\xc5J^\x81\xc9L?\x9a/\x8a3\xebe\xdd\xf7\x9d\x9ewx\x92\xf3\xb1Z9x\xcc\xeeej\xee\xe35\xbfp\x1a&amp;\xb9\xaf\x9f\xac\xcf\xb9\xe1\xf9\xee\xd9\x9b\x84+\xc7\xa9\xa6.&lt;1Z\xb7\xf7\xbf\x0c\x0b\xcb\x1c\x10Ph\xd1\xd9\x1c\x0f\xbf\xa8\xf9\xbdM\x9be:\tw\xa4\x95G\x8c\xe6;\xb8\xf2\xdf\x82\xe3^%\x9a5\xc6g/0\x00y\xaec\x0f\xf33z\xeam\x85\xe2\x1b\xff\x00p\xd1\n&amp;3\x88CX\xf10f \x95\xc0o&gt;Hw\xfc\xc3\xc3C&lt;p\xcf\x01\x00|?\x7f\xfc\xe3\xb8z\x95\xf0\xb4J\xaev\xb8\xe7Q|\xfa\xd147\xf8\x1f\x973\t\xaf\xb6\xd8:\xb8\xb0Q\xc4P\xd1\x9e\xa2,\x15i\x18&amp;M\xb2\xe9Wot\xe6\x12\xc5Vr\xb3\xdey`\x865\xc8A\xa2\xdb\xcc\xba\x00Z\xe5\x87\x9b)\xa8!\x08B\\\xa0\x8f\xe0 \xa4\xf7*\xbc\xc40\x02\xe5\xa9\xc3\x9f\x98\xfe\xc3\xa4\xab\x06\xd3\\\xa4\xb8T/,\x16\xa8:\xcc\x006\x1a\xddt\xc2v\x97\x14S\xca;\xd1\xaeU\xb2\x10V\x8b\xac\x89\xe2\xe1\r\x14\x03\xa4\xfa\xa0b\x8a\xa2\x0b\x0e\xf1\xa3U\xe61ay\xb4\xb7\xe9\x8d\\\x87nP\x82\x95M\xa2\xe2S\x86\xbd\xc2\xe2\xd3\x1a\x16"\xf2Td\xff\x00\x0c\xba\n\x8d\x86\xb3\xfa\x95\x06ej\xefY\x9c\xe6y\xb8\xfb&lt;N\x19U\xf1\xe3\xad\xdc\xa7\x9b\x86\xbe3\x19h\x93\x07\xccwJ\xc5\x90+u{-\xa8\x03\x025\xd1\x03\x1cO\xa9\xd5\x1e\xbe6\xfcr\xfd\xe6?\xcd\xcb\xcd\x99\x8d6l \xd0\n\x98\xf8\xad\x10\xe2\x13\xdfSR\xf9\xb2h\xf8Sg\xc4\xd9\xcc\xabJfq\xfb\x99X\x84\x03\x07\xa8\x1e`k\xe0\xe2:\x9f\x98k\xe0\xaa\xc4\xc4\xed\x94\x10\x82\x84\x96U|sw*\xd4yn\xae\x1fd\x0fL_\xe38\xb9\x9dI/\xad\x08%\xed\x94F\x92:8a&lt;\xab\x949\xf0;f\x11+f\x8a:\x0f\x04D\xcb\xc9\n\xa7\xf9\x9a\x11\xf2rN\xc1U\x88g\xab\xf9f\xdd3\xa2S\x841\xc6\xdf\xd8\xc5A`\x17\xee"\x053\xa8\xa8[\xaa\'\x8e\xb9\t\xf0\x00\x08e\x9a3\xce\xae-k&lt;qP\x15\xc89\xba\xc4VTi\xa6\x15X\x01\xa4.\x06\xb0\x7f\xe0\\2\xea\xa6\xb4\x1f\xc4\xc04\x06\xec%\xfa\x8d9\xc6\xb7\x08\xf8\xd9\x11v\x0cQc\xb5\xa2\xca\x9b\xf5NP\xbc\xbc\xc1\x18\x17\xee\xf5(\x00Z\xa5\x83\x06\xdf%\xef\x17\n\xaa5\xe4\xdc"\xfd\xcdW\x05\x04g?\x1d7\xff\x00\xc3\xaf\x08\x9b\xc7\xc2\xd6o\x159\x8a\xbe\x91\r\xe7\xd70\xb8j\xa6Z\xcd\x1f\xab\x83\x05K\x98=\x7f3a\x83\x89\\{\xbe&amp;:&amp;|\xc7&lt;\xca\xce\xbfS\x9f7\x19x\xc4i7\xacC\x1e\xba\xbf\x8d\xdc\xc5\xbf\x98y+\x8c\xc35\x8f\xc4\xf0jo\x04\xce/\xee\x18*[R\xa3/\xb2Z\xa5\xc2w\xcb\xab\xccse\xc33_\x1d\xcb\xf9\xeb\xe3\x7f\x1c\x93p\xd4F\xc3\xb8\xa8W\x9cR\xd7\x9c\xc4\x84\xbd\xf3\x7f\xcc`\xe8\x9c\xe5\x02\xbd\xafL\x10\x87\x10\x02\xd1\xe8%\x18+\xf3\xfc\xca;\x0f\xb2 \x95c)\x90\xb7\xb5\xea`\x96\xf1f\xd8R\xc3Ga\xa9\x83\x9d\x15J_\xd4\xa0hI\xba\x1f\xf7R\xa2\x06\x7fp\xcc(\r\xab\x10\x11Op\x04WH\xe7P\xd2\xbeqy\x1ao\x0c\xba&amp;i\xa2\xfe\xda\x89=\xa5b\xea\x18E\x90B\r|[9\xa6\xe5\xc4]\x81\x17\xc3\xfb\x8de\x8dYp\xb3\x06P\xa4iN\xbc\xcb\xa1\x8a\xdfj\xf5\x03G\r\xf0\xb5\xf7\xc8\xeca#A\xad\x94\xf3\r\x8b \xdc\xf5l\x19\x81JL\x03|6j\x10\xc4\xd8R\x06\xaf\x98W\x8f\xdd\xe6\xf63\xde\x18\xc2\'\xefi\x18\xdaY\xdb\r\x85i\xac\xc5l\xcby\xba\x95\x87^\xf3:\x9d\x13\x99\x8cJC\xfa\xf9\xff\x00\x82UL\xcdty\xe2l\xf1R\xb74b\xb5\xbf\xcb\x00\xae\xa6\xe2J\x0f\xe8\x81\xbce\xa9W\xbfr\xb3\xa9\xddF\xa9\xc4\xaf\x18\xad\xfb\x8f`\x8cy*y\x1a\xf9 :fwMB\xe6aS\xea\xa13+\xfcN\xe7\x98\x99\xa2x\xe5\xa9)\xdd\xc2\xe7\x1b\x87\xc7\xe7\xeee\xf8\xbc\xc2k\xea\x11\x94\x92\x83n\xb1\x15_\x9a\x1eV&lt;\x0b\xf0\xb64\xfc.,\xc3\xaac"\xe9\xf7\xfa\xf1\x18E\xcdR\xf1\xef\x94ii\xfa\xc4.\xdb\xc3Z\xad\xcb\x18-a\xe3\xb5\xf5\x00\x05\x01@[\x06\x1a\xbdf\xa5\'\x87C\xff\x00\x84\x06\xa4\xbd\x19\xfew+\xa2iW\xd1\x0c\xe9\xcc\xb5\x15\xe3\xbf\xb8\x1ej\xa7=G\xf46\x8c\xaa=]m\x89\x85\xbf\x105\x0b)\x16n\x82\xbc%\xda\xaa\xf8B\xae\xe5+K\xf0\xdf\x0c\xca\xc5\x0e\x9e\xe1r\xd9\xdf\x94\x958\x1aA\xb6\xf8\xf7\x1d\x15\x04D\x00\xe3\xa9b\x01\x04K\x07:\xe3L\x01(i\xb2\xa6K+}y\x97\x06z\xb5\xf5\xccb\x80\xd3-\xd4z1\xb8hv\x08\xb7\xdd\x1f\xe6\x15\xbd\x86j\x9f\xa1\x18\x10\x8e\xfc\xf5\xb2\xc6V\x82\xf2M@\x16\n\x86\rb\x14h\xb0\xaf!2\x82\xb7\xe6\xa62\xd3\xeeTE\xd4\xd5\xd9SSF\xfc|\xb6G\xdf\xc7\x9f\x8d\xbb\xfcL\x99\xbc\xe2X&lt;\x91\xd2?\x88+\x1a\xda\xe7\xf1\x03I\xec\xf7+Bw\x1a1Z\x8d\xee\xe3\x1dG7Z\x8f\xd0\xbfQ\xbc\xbd\xff\x00X\xa8\xda4z\xcc8\xcc\xcd\x80N\xe5fcC7\xaa\x86*}\xccC\x06;\xe4\x97\x9c&lt;C\x0c\x91\xb9\x80e\x87\x89D\xc7\xc5C\xc7\xc6\xfex\xf8\xa0\x86*\xf6K\xc9v\xdf&amp;\x89v_8e\x12\x06\xb8\xb3\n\x97q\xcc\xc4\xb6\xe2\xa0|*\xcd[\xf8\x8b7\xe6/\xf9\xb8\x12\xa1|\x0f\xd5\xc3\xd7j\xe7,\xebv\xe5.\x90 \xb8\xb2\xde\x9d\xbe\xe5\xd1)\xdfy\x89Z\x1d\x99\xa5\xfa\x8b\xb7z\xado\xc6\t`#\xc9\xc5}\xbb}C\xc4\x10k\xda\xd5\xcc\xe9\x9f}\xc2\x16\xef\x92\xb5\x12\xdb{\xa2\xf5p\xdbOZ\xcc:\xb3\x0f\x1c\xc2\xfc\xa1\xfe\xf5\xe0\x95\xa8\xf6\x81\xa0\x06\x01\xb8H\x10\xc2\xbd\xc1\x9e\x060\xa4\xac\x00\xf6\xd9\x11~\x84\xab.9\xbb\x18\x81+\xc0d\xb3a^\x087\xc0\xba\xcbf\x96\xe3i\xb9\x0b\x1d\x86q\x17N1\xa3\'\x8dT\xb9\xcdnJ\xb9T\xfe\xe3e\x05f\xdd\r\xeb)NGY\xd8\xf2ff&gt;@H\xd4\xb1f/\x15\x1b)gW\x154\xa9C\x0c\xbe \xa2\xa2F6mq\r\x9936k\xe3\xdc\xc4\xc7\xf3&gt;\xe7\x1b\xfb\x8du&lt;E\\ \x08\xf3Q\t[\x87\x14}\xf9\x86\x91\x1d\xdct\xc7\xdc\xc6\xbe\x10\xac\xcd8g2\xab\xae&amp;\xb6\xb7q6^\xbc\xcd\xc0\xbdM|f\xb7+\x04Y\xaeIRf\x0cn]\xa6\x04\x81\x19e\xba\xed\x83\x86\xa7\xa3\xe3371\xf1\xf5\x08\xc3\xe5Q,3*\xad\xae*\xb3\x92#\xfeJ\xfe\xae21qY\x8cR\x8feLt\xc0W\xefz`6\x97\r\x14\x80\x07\x92\x10\x7f\x12\x84\xd7u\xbd\x19\xa8A\xa6\xe9v\x96\x01\xdf\x12\xe0V\x9c\xa4z|#E0W\x16k\x88\xd6&lt;r6\x87\x92XX\x83{\xa7\xd6%4\x0c\x15\xc2X\xdf\x80\xe8\xfc\xc0\x97K(\xe3\x1e\xfc\xc0I\x8b\xf1Q\x19\xa39\x81e\x05f\x16p\xbe-\x8fh\xe7\x9b\xe28:\x19b\xbf.\xda\x08\x0c i\x8f\x1cE\xdf]\x068{\xf3L\x1auE[\xd84\xdc\xaf]\x87\x8bn\x85\x9e\xb1c\x1b^\xb3@]\xad=\xc5d\xee\xfa\x9a\x03D\xae(n\xd3#t\x06\x9fP\x10\x86\xed\xb1/\x1aHZ,MP\xb7\xea}\xa0]\x17\xf18yp%\x89pH\x11\xf3\x9d\\\xde\x05\xbb\x06\xea\x1f\xa8\xac,\xac\xcf\xf8\x8d\xc6\xdc\xf3\x1dpOG\xc7&amp;&gt;/W)8Ln]\xc7\xe6\xa5ulg\xda\x98\x1a\xae\x08l5vndC\xdc\x7f\xcc\xc6~\x1cS)\x8d[\xee\xf3\x1e6^X\xed%\x11\xf2\xe7\xc9*y&gt;1\x8b\x9c|jT&gt;%jE+\xcb\xcf\x17\x18\xb9Y\xe4\xb8g\x10\xa3\x89\xef\xa8{\x95\x87\x1f\x1ey\x9a\x9c\xbf\x1d|\xff\x00\x88\x01t6\xc2\xf6+q\x01\x95\xf1&gt;\xc1\xb1\xdf\x10\xb0\xa6e%\x08\x9b\x12\xf5\xa2\x95,u-A\xdc\xb4\xd6\xc1\x1b\x1al\xb0+\xc6f(\xb5\x96\xd3\xfb\x82V1\xfaX\x8a\\\x0fj\x8d\x95H\xb7\xb4\xcc\xd9G\xcc\xa2&gt;t9\xfc\xce\x02\xbc\x8b\x96\xe8\xee\xccf\xe7xX\xde;\xaa\xf7\xbe\xea`\n\x1a\xc7N\xea\xb4K\x05\x163\x1c\xba\xfc\x12\xe1n\xb4\x1e\xa5\xbe#Gi,\x02Z\x87f\xf6\xcb\x01D\xd7\xde\x0cY\x8d\x8d\x9ca\x8a\xb1O\x9e-6N\x01\xabO\xc3,F\x99\xc9\xbeO\xeeW\xc0\x87\xa3\xe6\x04^\x97\x0bA\x88\x04\xb7uZ&gt;K\x8c\x0e\x91\x92\x8a^\x8d\xef\xc4n\'\x93\x8d\xde\xd0U\xe2"\xa1p\xba)\xc7\x86a\x19c\x807F@f=;;\\~q\rp9t^i\x12\t~\xd0\x7f\xcc\xc5)\xecc\xc4U\x93{\x9d.9j[\xd88\xcc\xaa+\xfeX\x9e\xb703L:\x99\t[\x9c\xee\xb5\x03\xe3\x8f\xb9\x83\x7f_\x14\xe1\x8a\x9f\x99m\xd7\x17\xc3\x89\x91b\x8cb\x1a=!MN\xb1\x19\x8egz\x8d]\\\xb38,\xa7\x9d\xb2\xb3Q\x15\xf7879c\x85\xeb\xdf_\x1fs\xa0\x95+S\xc1\x10\x10,nk\xf3\x0c\xf7\xc4YG\x8c[:\x98\xfa!\xee\x1cN\x9f\x8fp\xe2fT\xaf\x9a\x0c\xbe\xdd\xd4t\xed|G+9\x0ej\xb8\x8c,2\xa1\xb6Q\x1d*\xdb\xcdF\x8dTtd\x99-ZVf\xe2\x940\tO\xb9A\x19\xbbt_\xf3\x1f8\xdbO\xed \x8d5\xeb,Mdk\xdc\xb4\x01D4\rq\xc5w\xcc5\x00.0\x0c\xf4\xd9\xb9\xae\xad\xd3A\xd6\xa0\xb4)\xbdd\xbf\xd4\x10`\xceyS\x88\xab\x0b\x80\x1flh\x0bP\xa5vm\x8d\x1d\xa2\x96\xfdT\x06\x06\xa9\xbb\xfc\x97\x0f+\xc3C\xb81\x93\x81~\x02Z\xfa\xaa\xab\xfb\xfc\xcb\xa0\xc5b\xce\x1f2\xed\xb5\x85\xd7\xa9r\xd9\xa3\xa7s(\xb6\xfd7\t\xc5z@k\xd5\xc4\x00\xafn6\xee\xc9\x88-qxG\xcf\x98\xf7E\xcd\x13\xad\x91U\xea\x89E\xae\xb0&gt;.\nL\xa7\x9a\xb7\xe4K\x8d2\xa8\xb7+o\xc5\xc2&lt;\x99\xa2*\xfd\xe2\xa3\x85Z\xe8\xba?\x04v\xa1,\xc0D\xcaw\x85\xb9H\xe2\x05\x04\xcb\x1b4\xce\xa6y\xb2\x1a\x99\xaf\x85\xb2f\'s\xdc\x1a\x9b#\x10/\xf33U\xddO\x0c\x98\xad?Y\x97\xe2w\xba\x8e#\xe6W\xf0\xcb\x01o\x13\x8a\xbe#\xa7\x11\xbc\xc6\xe3\xccw\x8f\x83z\xea\x7f\xb2xn}\xc5@\xc1\x0c3%Rw\x18\xbdL\xa5\x99\xaf\x10kX`\x0c\x04%[\xf7&gt;\xa70\xbc\t+O\xcd\xee\x15\xe6x/\xe1h\x82\x1c\xf1\x0f"\xc5W\xce\xf2\xd4e\xc3I\x08\x8e6J\x0e#\x1a\x95s4:f\x88\xdaS6d\xeei\xd5\xc9\x8c=\xcej\x9fJ\xa9\xa0\\\x0e\x8f\xa6^?\xcfp\x91Q{\x96\x0b@\xfe\x89\x86\x80 \xcaj\xf9\x83\x86\xe8e,_X\xa2\x0ftx\xbb&lt;rT\xe2S!T\x98\xbe\xb2\xc8Z\x0ejUhco\xc4\xd0\xa6\xfd\x1a\x1c$v#\xa4\xeb,\xd8\xbaqz\xe0\xceeQz\xda\xbe\xa5i\xf4_\xa9Ptt\xd6\xbf\xa9m\x03&amp;\x9e\x1b\xe1\x95\xa5\xc5\xa6\xf5\xe3\xccT&amp;\xc3E\xbf\xdc\xa8\xe0\xb40\xa4}\x91\x8aI\xbb\xe2\x9b\xe3r\x95\xb6\xd8J\xc6NS\x11\x16\xb0KU\x97\xd3\x18\xc0;\'Nh\x07\x04\r\xb2\xc8E}\xd002\x98\x03\x17\xd9\xa7\x0cZ\xda\xd3NT\xcd\xd7\xca_\xabj\x19F\xb0g"\x97v2\xaeg\x1an\x10^\x18\x98\xcf\xc5i\xf8s\xb8\x1c;\xa9s\xa9\xacd\x94B\x1ag\x97\x9f\x8d\x1d\xf1\x18\xf0\x0f3"\xbf\xde\xe7Cf{\xdc\xa4\x94\xff\x00\xf0\xea\xf9"q88k\xa9\xa1\xac}\xd4n\xbfs\xcc}|^\xabR\xb19\x9fo\xc5\xd0\xeb\x1b\x80\x16\xe24\xb8g\xfa\xf3\x15\xfc\xe2l}\xc0\x16\x1b\x98\xb8V*\x05\xfcfk\x89\xaf\x8a\x957y\x94?\x15\xa1{\xdcG1\xb2\xa8\xe2\xe0!\x9c\xccw]C\x01M\x05M\x12\xcd\x1c\xc7\x17O3&lt;h\xe05\x88\x92@\xc5q\x04\n\x1a\xe6\xa4)\xe3\xd1S?\xca\xf2\xee.XT\xb5y\xf1-l\xff\x00\xcc\xd6\x9b\xec\xe2\xce"j\x90\xaeZ~\x88V\xcc\x1d^\xbe\xbb\x88Z\xf2]\x0bm\xfa\x98d}\xb8,\xe8\x8d\x16+\x03\xc5_\xf2\xcaE\xd1\xfd3c\x1c/W\x8c\xc5\xae\x987\xbd\xdck\xa1\xfa\xed\x82\xca\xf9\xae;\x14\xe7\x8e\x81u\x0b)\xb0M)\xb0\xe2\xf9\x88\xab)\xec\xd0#\xba\xedq\xcc\xed\xa6\xea\xf3\x99\x9dZ\xa8V\xfe`\xb7\x8bs\x80 \xbdfU\x15z\xa2\'\xb4A\r\x19\xb1Y\xe0+\x84\xb6E\xda7XZ\xf1\x98]\xc9\xe9Y\x8e\xebL\xb7]\xa1x\xc1\xeelS\xcd\x9c\xbc\x90)5\x9b\xa5\xcc\x81F5\x05\x08B&gt;\x913\x18\xca\xbf\xea&amp;\x12\x19\xd3+\xcd2\xf9f1\x9fr\xba\xf8\xa3\x92\x1b\xf8\xc0a\xb2\xe2=A^H(\xd6\xa9\xf85\xbcL\xf1\x1e7\x89^\xbf\xdc\xe5&lt;\xc6\xcc5\xceg:\xd6b\x7fQ\xe6\xf5\xb68\xa9\xfe\xf7:ru\x89T\xc25\x88\x01X\x9e\x08\xb9~\xf9\x8a\x8d\xb9\xfc\xca\x0c\x99\x9aW8\xdc\xc4\xe7sG\xc7p\xa8\x13\x9d\xff\x00\xf1z\x82A\x95sPd\xe1\xbcBx\xb5x\x8a\r1PF\x8cjP\x04\xaa\xcb\x97y\x81\x7f\xf3(\xb2\xfa\x82X4j\xb1L\x1c\x80\xe7l\t\xceV*\xe9\xf6\xdc\x0f!\x8a\xcb\x80\x94\xa0*\x98\xeb\xdc\xb6\xa9\xb2\xbc\x18\xb8U\xd6Y\x85~o\xd1\x0e\x0f\xb0\x19\xa9\x86k&lt;\x0e\xe3\xdb"\xb1\x9c@\xa1#\xb7\xa8\xb5\x1aV\xc1\xe0\xd5\xfb\xce# x\xb6\x16\xb2\xdb\x07,\x05\x8d\x15\xcf\xe2\xe1J\xbe\x8fH\xae1\xbaF0\x069\xeb1\x00\xe4\xe4LE\xe4\x0bR\xdf\xf4\x837[K\xc3`\xf5s/nK\xcf\x8f0\xdep\xe5\xaa\xeb\xc3*-y&lt;\xf8\x07\x0cf_\xdd\xdfQl\x9d\xe0\xa5\x95\xf7\xbc\x0c\xa3\xa2\xb9p\xd5\xf0\xc1,+-+\xfd\xb8\x97\x10\x9f\x14\xe7\xc9\x89Q]KA\xb7m7,\x98\x1a\xe2\x03\xec\x96\x9b\x11\xee\xde\xc6R\x16_Mj\x14\xd4\xcc\xef3\x9a\x9b\xf1\xf0T\xab*r\xe6\x1f\x99\xdco\xfd\xc4f\xe59\xdc\xd6\x15\x7f\xd7X\x81\x86\xaf1\xcf\xab)p$\xd3\x88\xd1\xce\x08\xe2\xa7\x88\xeb\xae33\x82\xd8\xa5\x17(\xeao\xfb\x8c\xccx\xcb\x003\xfcKq\x0478\xc7\xdc\xb13\xef8\xc6#c\x05\xc23\xe0\\\xac\xa9M\xce\r\xfc\xd3P\x1a\x81\xf1Q\xff\x00\xe1h\x84m\x1b\\\xbd\xaa\x8bDf\x97\x97\x93s&amp;4jRB g\x8e v\xb1\xc0\x95\xf7o\xe6^\x98q\x80k\xeajO[\x130\xcbX+1\xa1\x9a\xbc\xe2\x1e.r\x81\x07\x17\x800\x11b\xc2\xf97-\x95AF#`a|B8\x15 \x06X\xa3Q#\x03\xd6\xf7\x9dq\x1a\x88\x81\x9dC\x8a\x99r\xc0\xb1\xbf;\xda\xcb\x10\xdaU\xf1Z\x8a\x16\xf6\xafu\xd134\x96\xa7\xc6a\xc2\xe8\xef\x08\xe9e\x1awo\xbe\xea"eS\x8f\x0c\xbb\xc4)6\x19g\xf0\xcaG\'\x8e\x8d\xea \x83]\xd9\xd7LcF\xb4\xd9\xb7\xdc\xbe\xa0\xb9\xb3\xc63\xa8\xbd|^s#M\xe5\'3v\x1aEp\xf6\x9c\xd3)\xbb\xc0i\x974\xd1\xa7\xa8\xa2\x9a5\xbb8\xee%\xbb;\x03\x07X[\x8a\xc8\x0fJ61\xa4\x16:X\xf7p\xbfX\x80\xaaXM@\xa1\x8e!\xa9\xdce[1\xe2\xa2b\xa2f\xa5q)\xeav\xe2}E\x95\\@\x86o\xea&lt;\x9c\\#\x931\xaa\x16+*\xae\x85C\xb0\xe3\xe3\\}O\xd6~:\xb48\xd4\xb2\xd9o|$\xed\xa3u8\xdf\x1a\xf59C\x99\x89_\xf1\x86}\xd4\xba\x84[\x00(\x9e\xd9g\x9bj\xee-3\xbd\xb2\x80\xc5C\x17:\xb2T\xfc\xe6\x159\x9dc\xe4\xf1\xff\x00\xcd\xd40s)\xe5\x10\xc3\xa9qE\xc3\xbc\xb5\xea\x10\xc8JC\x15\x1c\x1f\x00^\xe0\xf5x*V[\x9e\x06Q\x81\x9b\xc2\xac{fP\xd5\\\x82\x06\x84\xfa\xa3\xcb4\x08Q\xd2\x02\x01\x90\xefj \xaa*\x9e\x0c\xc6[Pc\xcb\xc1\x14s\x9e\xe8\xf0a\xb9\x90.\xaf\x81\xcfq[)m\x0b\xcc\x02\xd0\xa4\x174\x8d\xf1\x02\xf5\xb4m\x8a\xb1k\xa7\x88\x82\xaa\xe9\xfc*3\xd1\x90\xd3\x02\xd4a.\x9e\xcd@\xa3+\xb4~\xb2F\x99O\x17,\xaa9\xa6\xfd\x18e\xa5\xd0\x9b\xad\xd7\xd9\xc4@\x04q\xcf\x18\xed\x82\x04\n{i\x88\xc4\xf1\t\xbe\xbd\x90,\x14\xf0\xc8u\r\xca\xdar+}\xdb2\x8c\xd1\xc5\xa2\r\xece\xb7\xa5\xc8\xd3@w\x84\x89\xc0\x0f\x03\x87\x9dD\x16\xb84?\xbdMi&lt;"\x7f\xb1\x81oG\x9aJ\xeaZ8\xe9(}\xe2\x08[3\x8a\xc9)z \x9cj9\xf8\xdcesS\x8d\x11\x95\x8dJ\x9cJ\xf0G\x01\x88\xcbA\x92\x1e\xe1h\x94\xd4\'\x10\xc1\xe9+\x18\tEj4e\x15\xfcNt\xeeQ\xc6\xfd\xc7\xefU\x1eee\x9b\xc1\xd4\xd9\xf9\xf5\x1e\xaf\x8dM\xe53\xeb\xe1\xa0e\x86\xd9c\xbc\xbb\xcf\xb8\xfc\x1f\xd2kj\xa1\x01+\x07P\x9f\x7f\xfcUVf&lt;\xcd|w\xff\x00\xc0\x15\xf7\x0c\xad\x84\xc2Qx)\xfe\xa1\xa6\xac\xbe\xa5v\xe1\xe4\xdb+\x8f\x1f\x01P\xc7o\xf1\x89\xb7\xce!M\x97\x16QgX\xb8\x92\xda\xef*\x8f\xa1\x95\x80Q\x9a\xbf\xddMCX\xbb\x89}\x07\x06\x08\x12\x80Q\xf8\x94Y\xe3\xaa\\\xa0\xd5j\xb6\x08.\xa5\xd2G\xa3\x83\xc1\t)uOu\xe2\xe6`iz\xc5\\@pl\xce\x05\x97~*\xa2\xe9EE\x02e\xcc\xa77\x9b_8g\x13\xc4Z\x7f\xe5MU\xc5\xd0\xfe8\x82\xd6U\xd5\xdc\x18\x95J\xeeQM\x18U;\x0b\x19U\x0b\x06\x96 \x18\xa3\xbeW\x1bb\xcb\xce;\x88\x1d\xe8\xdeY\xaf\xef\xa9\x88+\xa3\xecf-^,\xd3\xc7?PR\x9f\r\xae%9 rA`#\xe1\xbd1\x17\xd4\'\xf4\x94`!\xc2\x96xuc\x11\xc2r\xbc\xfc\x915\x8aQ\x8c\xd1\xf4\x90\x81)v\xaa\x1f\x0c\xd2\xd5cB\x8b\xfc\xc6\x05\xae\xfe\xe0\xdaZ{\xfc\xfc\xbfq5l\xf11\xc7\xc3\xf1Z\xb2]o\xff\x00\x87\x98\xe9\xc7\xa3\x7f\xdd\xc0\x87|\xba\x0e\xa5e\x00\xc6~\x1b\x8c\xa3\xe7\xb8\xf3(\xcd\xce\x0f\xe2:\x88v5*V\xf7\x07Y\x96n\xe3\xabx\x99\xd3\x0c\xb3\xd7\x82\x98\xf9W\xeb\xfb\x82\'\x99\x9e#\x0f\x8e\xbe:\x84\xab`PM|\xadf\x1d\xab\x04;&lt;\xdb\xb9C6\xde\xa2\x86\x9c\xdc\x1d\x0b\\b\x18u;\x8b\x13*\xc7:4\xdfd\xaddd\xb8[7\xb7\x17k\x00mt-L\xd5Z\xe6\xed\xf8!\xd6.Z1M\xc7\xe5\x18\xac\xd9\xb687\xee^\xd1g\x96\xdb\x98\x14J:\xb4\xeed\n\xbcOr\xe5w\x06k8\xdcm\xa0V\xc6q\x99H\xb1X?\x95\xc4 \xe3j[\xb7q\x83\x8b:\x88%\x1b\n^9\xac\xc4\xb5V\xf0W\xfeA\xc9\xba\xfe*\xeel]`\xefD\xb2\x1c\x03\x1dY.\x82\xee\xb7[\xfb \xa0*\xaa\xa1\xc1\xcc+\xc5%\xe4\xf3,;\xbas\x0c\x00go\x15\xab\xb9f\xa4\xad\xdeC\xc9\x0b\x12\xef\x15F\x14N\x1f1\x18j\xf0\xbb\x9f_\xb2\x1b\x80\r%N2S\x0c+U\xc2\xa4\xf2\xd5L\rES\x85!\xf4(7kMd0\x11B\x92e\xe0^J\x9c\x00;Mk\xea\xb1\x070\xcf\x0f\xf1+\xa1m\xdb\x88\xca\x80d\xe3s"fW\x89Us\x9f{\xcc/\x9a\x9dUC3D\xeey\xf8\xcb\xf8\x84\xc5TI\x9b&gt;\x7f\xb9\x88\x9a\x03\x9b\xdc\xa2\xae\xff\x00\x98b\x0e3\xfec_\x1c}\xc0\xb61i\xc71\xc7\x13$5\x1a\xf8#\xb8\xca.\xa0QF\xf4\xd4p\xcb\xa8`\xc7\x9f\x8a\x81)\xa9_\x1a\x9d\xfcTI_\x15\xe28\x19U\x9f\xa8\xc7\x01Qa\x87\xb6\xc2p\xf1\x0c\x12\x8dT\x7f\xb9\xbb\xa9K\xb3*\xf0\xfa\x8cy!E0%\xa6\xc8\xed\xc1\x84\x1bR\xed\x03\xaecSJ\xadf\x89af\xf4\xdd~\xa16\xceZ9\xe2!\xedZr\xadL\xd2\xc9x\xf7\x11T+9&gt;j\xfdD\xabo+\xbf\x0c\x02)\x8a\x06\xfc\xba\x8e\xa5\xa5/\xa1.c\xaa\xd7F\xbe\x96X)[\xbe\x86X\tY\xb2\xf5\xa2R\x15v\xdc\xc89(\x9dS\n\x95\xc0[\xef\x86TS\x19\x061\xc2S`\xdd8{`X_[\xb3Lh\xbb\x13\x93R\xb5\xd8\xd1\xa9\x1f1\xaa\xca8\xa3\x88-+\x1e*\xf2J\xc2\xd0\x01\x8e[\x94j\r\x94\xbc\xc0*_\x14p5\x1c\x04\xd5 \xe4+h\xec\x9b!\xab\xff\x00\x0e%\x0c4K\xba\x1c\xff\x00\xe9\x01\x95\xaa\xb8\xa5:c\x0c\xe9\xa5i\xbe\xaedP\xf3wdr\xb8\xe6\x8c\xfa\x84D\xce\xf7\x98\x8e[3y\x0e_\x8a\xf1*\xa5k\x12\xb9\x94rJ\xf8\xacJ\xde=\xcaz\xe2tT\xcdXEZ%7y=\xc3^\xd6\xfb\x8c\x0fR\xb3*\x19m\x8f\xac\xca\xab\x98\xeaw\xcd\xb2\x9b\x89\x8f\xa9X\xd4l\xacw\x1a\x15\xe6{7-\xb0\xf2\x9b\x96F\xf8\xea*\xd3(\x98\x86\x00\xf1\xf0?\'\xc5\xe5\x9c\xee\x18\x96\xff\x00\xf3\xe7\xc0\xed@\x1a\xcf\x8c\xe6\x19\xbb\xc9\xba`\xca8\x02{\x95\x18\x80*\xbd\xe6&amp;J\x97m&gt;\xa1\xddf\xb5,\xa3SZ\xbcx\x89\x06\xf9\xdb\xd78\x80$f\xe5Tqe5\x03\xaa\x1a\xa1\x03\xe2\x1ca\xce6M\xcd\xb4\xe5b&amp;\xd9Z\x14\xfbQ\x02\x8eh\xc0wq\\)\x0bk\x8b\xd8C[\xca\x99\xb7\xb2\xea"\xd1\x85j\xfce3o\x10\x07\x8a\xeb\xfb\x96e2\xad\xe0\x88`\xa2\x8a\x1b\xd7,\rzW\xe1\x9c\xc2\xba\xb6\xb8C\x9f,\t\x9a\xaat\x1a\xe2\xa2WX\xa5\x1e\xb7\t,\xd8\xbd\x97s\x9d\nD\xb7I\xb41\xbefP\xb1x\xa6\xac\xd37\xc5!\x814\xc2MU\xef\x05Y\xd8\xee0\xe8\xcd\x89\x8d\x1c\x91\x95Z\xf1\t\xc9)\x0f`\xf0M\xefd#\xa3{+\xf2\xfaf\x03\xc2\xc2\xcc\x8d\xef\xd4(J\xb3\xc6\xb3\xb9Q\xde\x1a\xb3\x87\xc9\x00\xed\x88\xd2\x9a\x8c\xb6\xdb\xba\xba\xfe\xb1\x11DS\xa3\x88\r&gt;\xa2[\r\x9b\x82b\x84\xff\x00\xe3Q\x95\xf1\xcc\xbbw1&gt;\xb3\x18\xc7\x9f\xf8\x8e\x98\x16\x10Z\xad\x9cAX8\xf8\xcf\xc7-]\xc2w3\xbb\x99\x8b\x1b\x98\xc7\xc5,-^\xfc\xde"\xd3^\xe72P\x13=\xfc0_\xfe~\xa7\x11\x8f\x10\x9b\x8bPd\x1b\xfd\xa5d\xc8\xbb\xae.U\xdd\xc4\r+\x95*U\xcbf8\xab\xfe\xea\x00\x12\\\x1eQ\xdd\x962f\x1d_&gt;\xa14\x13\x8c\x04C\xc1f\xad\xf4\xb8\x84D\x95\x82\xc7\x0c\x14\x07X\\\x04\xb1\x1c;\\jW\xf2\xa0\xb8P\xf94k\xb8!L?\x93\xfe\xa2\xa6d&lt;qU\x13\x84\xb2\xca\xc7P\x9c\x06@\xf5\xa2P\n]\xda^\x1a\x1box\\f\x16\xb1\xce\xe29\xee\x02\xa3Q\xbe\x1c\xb7\xdd\xcb\x80\x15.}\x92\x8a\x85\xa5a\xfe\x19E\xeb\xfa\x9d+z\xad9\xa6,\x10\xc7!\xa4\xec\xf5)\x82\xa9z\n\xfb&amp;8\x02\xb2/\x0f#\x12\x14\x0br\x8d\xeaXYx\xe7.\xaf\xe2\xe0J\x04\xd8=\x1b\xfb\x88!F\xab\xc4\xc7\x17\xc3\xf9\xe9\x99\xcb\x82\x8a`\x1dC\xd6(4t\xf0\xc19\x8e\xf42\xcd4\xdf\xb2jkz1\xb3\x88\x01[\xe2\x93\x88\x95\x06\x8au\x02\x85#\xb2b\\\xd4e\xf1\xf3\xefR\xd2g\x9f\x13\xc0\xcc\xde\xe3t}\xc3\x12e\x8a\xe5\xb9\xbf\xca\x8f\x045t\xa9\xb3\\\xcc\xd6\xdeb]\xe22\xf21\\9N\xe1\xd4\xf1\x88\x8ej\xfcG\x96\xbe\xd8\xe4\xb4\xbfy\x8a\xef\xd6\xe6\xfb\xb1\x00\x8dVe\xdc\xbc\xc3\x8dBu=\x13=\xcb\xde?\xf8w\xf3U\xcf\x0c\x0e\xaf9\x8a}\xa8\xa9HK\x00\xe0\x94\x16|\xad\x13\x08\xb8\xad\xb7\xc6\xe5y\xd7x\x88m\x18v)\xb9\x8c\x06\x8c\xe4\x99S^\xf7\x1a]\xe8\xc8\x07\xf7,Z&amp;\xda\xb2,\xee;5\xafG\x04\x14T\x03\x8b\xb1\x9e\xa1\xb2\x0e\x0b^bt\xa7,\xbcSAF\xa6{\xf5\x97\xfcB\x14\x1c\xaf\x06uq\xda\xb0\t@\x9b\xe7\xee0\xca\xdb\x17\xbf\xf8"[H\xad\xbc`&amp;\xef0tvCE\x1d2\xf1\x18\x02\xf7}\x97\xcb\x01Mi\xc9\x8c\xd4\xad\x94\xa1a\xc5M\x87R\xb5\xf0-dYB-\x8d\xe3d\xbe8\xe7\xef\xc4\xa6*Q\xc3\xab\xf1\x08\x05\xb6\xb8h\xca\xa8\xd5\x06Z+M\xf1\x9dW2\xc5\x98P\xdd\xbf\xc41\x81\xb3\xd2\x95\x00\xad\x9a\x14\xd6\x93\x88\xb0x;ze\xc6\x85\xef\xc4\x18\x82q\x98l\xa3\xf82\xa9\x8ax\xcb\x1f\x86V\x85\xe2\xf0\x12\xcfn\xf6U\xc6\x03H\xb1q\xf4\xca\xb0\xa9\xa2}Kq\x98\xbf\x19\xb9\xbe&amp;Ys\xeaY\xb2\xe5\xa4\xb6\xe3\xa3\x04Q\xae\xb1L\xb1\xb1\x03\x83\xa0\xc6\xe3\x05\x9f\xc5D\xd6\xa3\xc4\xf6zc\xear\xfe\xe6f\x96\xd2\x06z\x95\xcc\xaa\xc7\x8f\xc4y\xe5\x89\xcd\xfa\x9d\xdfp\x82\x84\'\x84ff8\x9e\xb3\x0f\xde\xe1\xdd\xcf\x1f\x17\xe6u\xf1\xc7\xc7\x7f\x067\xb9x5\xb8\xc0d\xca\xefv\xed\xe6\xe0a\xe8\xd9\x0c\x85j\x1dC\xe3Fc}\xe6\xe56\xe7V\xd4\xc0\x8f\xc3\xc6\xe1QY\xcf\xb8\x895\xc7\x10(\xd4\xe8\xdf\xb5\x95\x06\x9d?\xb7P\xbfR\xb0;\xa7\xab\x8b\xa9\x00e\xb1\xfa\x8a\x84E\xe7O\xa0\x8dDD\x05\xee\xe2R\xf1\xcd\x1fl+\xcd\xc3WOu\xb8\xbbkI\x86\xe0U7X\x0f\x1c5+Ay\xa29m\'\x063)\xa3J\xc0\xefm\x9f\xa2^\x8dK*\xef\t\xbfqXq^wY#J[h\xdf\x98Uf\xec\xb1\xaa\x83M\x92\xf4\xder`\x00\x1e3\xe2\xa1%\xb6\xa3\xc7\x10\xef\x1b^\xa3\x9dU\x891\x86]R\x82\xf9\x14\xff\x00$KR]\xbc\xf9\x8ap\x0c\x86\xa0\xbd\xb75\xbd\xf7IqL\x9d\xff\x00\x14L[\xc2\xe8!M\x1b\xc0\xff\x00\x99@\xa4n\xb0\x956\xe3&gt;)Q;T*\x86\xc8\xd0\x98\xf9\xa7:\xc4\xa4(\xa7J\xd8\xb3-\xc3\x8a\x08\xa6\x0c\x14\xb1\nCFo\xe3\x8a\xf38q;\xa9\xee\xe6wSZ\x9fS9\x9a\x9fX\xf8\xd2\x92\xab.T\xf1\x94\xfa\x91\x00\x1a\xf7X\x95\x88\xf31\xca\x9b\x89{\xa9DNk\xeev\xde%|:\x8d\xa9\xa6TV\x8b\xc4\x12\x1a\xa2j\x9f\xe6sW*U\xfb\xe3\xb9\xff\x00\x11\xde\xbe7\xa7\xf3+;\xf9&gt;.\x7f\xa8\x80V\n\xafd\x0cn.&gt;\x06\xd0\xaf\x945_\x1e\x14\x03_+(Mq\x12\xcbF\xeb1\x85\xff\x00\x89\xa0\x1bE\xbdX\xc3\x99+t\xe9\x84\xb2u\x1c}\x11m\x02\xdb\xd0\xc3\x82\xd7\xd0YO3Z\xb5p\xcf\xa8\xe5\x95\x131\xf6\x98\x8a\n\x0c\x87\x05\xed\x95\n\xb4\xe7\x18\x80Ko\xadgWR\xd6\xfdf\xea\xcf\xc4j\xd0r\xa7\x18\xe3\x99u\x9a\xb3G\xbc\x1b\x97!Q\xa1\xef\xfa\x95\xd4\x95\xba\xe3\xa0\x99\ru\xa2\x9d\xc1%\xb6\x9dz\xcd\xc4\xa8^Q\x9f\xeeYAE(&gt;z\xf7\x17\x88\xb7\xd74)\x994\x01L\xfe\xc8\xf1M\xa2\x99v\xa0h\x0f\xdcm\x0c\xe6\xb1\xd9\xa1\xbf\xb7\x88\xdd\xa6\x9ej[\xab\x94aaMoG\xf1\r\xc1F\xceH\xb5\x9a\xf1PP\xc2\xdb\x8ci\x88\x97\x16\xf3c\xa8\x9a\xd4\xd6k0\x97\x19\x1e)\xeaS\xda\x83O\x85\xc02\xeci\xb9\xfdF\xeb\xf0\x97\xaf\xa8\xe2\xd81m\xb0M4}9\x8c\xc3\x85\x19\xa9\xae\xcf\x8b;\x95\xa6\x16J\xa6\xa5\xf54\xbf\x17R\xb3\x1f2\xaf\xd5\xca\xed\xa86\xf8:\xc6!\xe7\xac\xfa\xe3\xee\xe5t\x8e\x8d\xbc\xc3Y\x95\x9dd\x8fs\xd5\xcf57_\x04\xee\xd9yb\xe8\x8bw\xdc\xc7S\xeauS\x89~\xab\xe3_\xfc\x9e\xa7\xd7\xc7S\x92\r\xdf\x13\x10\x19\xe8\x86\xb4\xeb\x11e\xe5i\xe6=\xa9\xd6``@\x00\'P\xf5\xf1\xcc\xbd1\xa2/v&lt;n3`\xf2\xf8\xd4,\x15\x97v\x15\xc0\x07\xf5\x15\xb7obR3x)\xb2\xeb\xf8\xb8\xd1EL`&lt;\xbcJ\xa4vd\x1f|\xb5\x07-\xc0V\x06\xa5\xe0\xf4X\xe0\xbd[\x15\x92\xf3\xca\xb7\xb8}\x0c\xa62C\x97\x1a\xdd\xa7\xf4\x87]\x97\x05\x95\xad\xee\xb11d\x00\xa3\x04y\xbd\x11\xfc\xd9\x1c\x1eIW\x84\xc5[\xce\xd8\x89.\x01\xcbcz\x94QeV*\xb8\x88W\xab\x17\x9djT_;\xb7|L\x8eh\xaa\xd1p\xc8\nJ\xea\xb9 \xd0/\x15u\xe4\xd4a\xd1\x01\xeb\x10hM\x17\x7f\x84(pVC\xef9\x89L\xe5\x01\xe1 i"\xd7\x9cE\x10\x9a\xe2\xf12m\x7f\xb4\xdcwr+dN\xaf\x07gW)\x96\x82&gt;\xcfP*\t\x84_\xe9\x18\x82\xd0\x14\xa8\x11\xaf\xbb+\xe1\xa8;\xdf\x8f\xfaq\x03\x9a\xe7l\x188\x01eJM\x86\xf9%tl\xd1\r\x868\xd4_$\xbb\xa9\xd4\xfa\x86\xb8\x9e7\xcc\xf31\xaa\x97\xe7\xeep\xe7\xe2\xe3\xb7\xd4\xdaKT\xbd\x9f\x9f2\xf2\x0e\x89\xc4X\xc7\xaf\xe2\x7f5\x1e\x16&lt;\xc5w=j\xbe1\xc6H1Z\x97\xef\xd4F1s\xc6\xe3\xeb\xe0\xe7\x9f\x9c|\x9f\x0b\xed\xc4\xf1\x1f?\x00\x10s\x8c\x12\xa8~\xd7\x07\x83\x9bCu\x82\x87P\x83\x89\x93\xe0\x97\xf1\xb3\x10%7\xe2\xa0X\xd0\xf7\x1e\x96\xbc&gt;\xe7R\x8a\xcd\x90\x8a\xcf\xa8\x06\x1c\xe12\xb2\xbdA\x15b,\xee\x8fk*#AA\xa6{H\xb2"\x96\x94\xa1a\x00\xcdb\x8a\x0f\x00@4\xe5\xe8_\xab\x83\xe6\x16\'\xf7w\x10[5\x0c\xd0\xf4j\x87\x99\xa5=\xa3T\xda\xcfp@\xa8U\xa1\x95\xedYyM\xdb\xa7#\x89\x92a\x04C\\\x884\x0b\xd3\xa5\'\x12\xc0\x18\xd3z\xb0\x8fGJ^*\xe5U\xe8SNM@]\xadA(v]{\x07p\xad9\xc0\x83km\x1af\xec0\xd2\xde.S\xaeq\xe2-I\xaa\x8bE8\xa4\xf7\xe2)v\xa6\xeb%\\\xe3\xbd2\xae\xd9\xa5 5\x92\xf0\x90\xaa\xb8as\x1e\xdab*Ua/\x0f\xf33\xd9\x80\x0f;S\x98h\xf7\x04\xcd\xd8\xbb"\xae\x01\xc0\xf0\xf1\x02\x06\xc7\xa3\t\xe4bC\x12\xb2W\xdd18)\xad]!vcu[`H\x98k_\x98\xfb|t\xc2&lt;\\\xbf\xe22\xb4\x92\xb7&lt;\xd4\xcd|\x92C&amp;\xd1g\xb50T\x18I\xdf\xc5\xddf-u\xf1\xd7\xc5\xbcLq\x1e\'S8i\x98\xb8\xde\xeaU\xc7\xbf\x9aZ#\xcc\xa2k\x99s\x03\xf1ss=E\xa1`&gt;\x98}\xe2r\x8d\xed\x8e\xca\xd3\x86\xdb\x84\x8c\xdc@`A_\x1b\xaf\x8f_\x1a\xb0\x92\xd2\xcb\xbf\xccH\xaf\x0fS`o\x86*\x95\x0c\xb8\x0ei\xb2\xf7\x11bZL\n\xaa\xcf\x104G!o^X\xc2\xae\'\xe5\xe8\x8e\xb6=\xdb\x03\t0\x1d\xa7\x93\xa2QM\x93|\x1e\x10\xe26\xe8\x1e\x18\xb1\x81\xa1K\xad\xdc\xb30\xf5Y\xc7\x86(0h)8\xaec\xdco\x95\xac\xb06\xc8b\x08\x15Zm\xb9\x9e\xd8\xab\xec\xc5iX\xa5&gt;\xb8\x85\xb5+8&gt;\xe568\xb1\t\xb7JQ\xc5\xde`\x00\xab\xbc1\xaa%qN\t\xee\x1b#+k\xcc\x18\x06_Z\xd5\xc0\x06m\x05\xc6Ax\xb5\x7f\xb5\x94X\x88l\xf4HW\nJ\xcb\x0e\xa3\xc1H\xb8\x1c\xe6`]c8qK\x8b\x81p\x9a[\xad\xf37\x00*\xe1C!\x91\xe4\x02\xc5\xe9-\x80p\xbe\xe3\xc0l\xe2\xf9\xf7\x17R\x19\x9eC\xc2g\x89\x81f\xf7(\x16\xfcu\x99\x89\xcf\xfb\x9fq\x9fS\xe8\xde\'2\x9dBg\x99{\x9d\x93c7.\xa4CU\xbcM\xf1\x1e\xa3\xccq5\xc4\xef\xc4}|9ng&lt;E3\x167[\x94\xfa\xe2c\xe2\xf3\x89\xc6\xe6&lt;J\x99\xff\x00sO\xc3\xf0\xe7\x1f\xdc\xcf\xdc \xa7\xf9 \xfd\xb1Lh\xedI\x12\xc9\x0b\x1c\xf1\x8a\x80J\x87\xc1;\xf9y\x8e\xbc^^fA\x94\x8c\xa5\xd5\x1b\xeb&gt;#6(\xaec5\rb\xfc\xc7\xac9\xce0\xdf$\xe8&gt;\x15\x1f\xc1\xc2\xbf&amp;\x8cG\x03\tZ\x00\x9c\x92\xbe\xee\x0bz\xf6\x96\x1e\xc3q\xa3W\xdf1p\xf4\xd1\x9c\xf7\x05\xd6]\xb6W?\xd4\xdfZ\xd9\x8c\x8b\xf19s\xa7yaa\x8c\x18\xc5\xfe%\x0b\x196v/?P\x96c(]\x16x`\xe1r\xa0\x9a\x1e\x12f%R\xd3\xc5a\xb4\xbdN\x14\xfe-\x97-A\x99mxw2\xc9\xb1Y\xc7\x98+\xc7\x9a\xfcV#\x16\x12\xa9\x9ep\xd5G\xd2\x9d\xd6\xd8\xea(\xb5\xb5\x807Q\x8f\x07\x0b\xf3,\x1b\r#\x86\x98]D\xb0\xca\x1a\xb9\xb0K\xbe\x15\xb2\x1b\xe9u\x90\xc4DJR\x9a\xcb.\xaeTCF\xac\xdf0\x1d\xd3\xd8W\xd3/\x94\xcd*\xf5,\xcazu\x06\xb8\x07-\xc1M&amp;\x18\x95\x06$]J\x98\xa2\\^X\xae\xb5/k)\xc6g\xaf\xfc\x9c\xbfQ\xceI\xd4\xba"\xe6$\x0c\xae\xd8\xae\x16\xa5\xc2\xae\xcb\xdcg0\xb2wz\x87r\x9b\x02\x7f\x8d\xc5\x96\xcf\xb9\x97\x8e\xa7\xd7\xaf\xb8\xa9\xe3t\xe2/\x9e&gt;?Sc\xf1w\xcf\xa8qS\x89\x9b3\x15\x07o\xc7\xe8\xf9\x08\x19\x91\x84G7mQ\x03\xb7\xfc\x90L\xa3\x94\x00\xa0\x9au\xf1s\\|\xebq\xf5\x1a\xda\xfe\xa5\xee\x1d\xfec\x8df\x92\x8d\xc2\x03\xf6\x19%X\x07\x169\x84\xcc\x07[c\xdc3\xbb\x9f\xd4\xe6\t\xea\xaf\x8b\t\x8c\xd1ts\xf4\x84\xac\x17\xc2V\xbd\xd4E\xbc\x9b\n\xc4\x13d\xbb@\xf5\r\xa6\xf0\xf0K\xe1J\xac\x82\xea&gt;\x98s\xe4L\x05&gt;K\x99 \xbf)\x9e\xeb\x96\xf5\x98U\x80\x8a\xc5\xa9\xa7{\xc4t)W~\x1d\xa7\xf4\xca\xdc,\xe6i}\xc4A\xa2P\xddK4\xb4\xd5\xf8\xd1\xf9\x8a\x96L\xf7\x02\xcc\x1e\x0e\x9e\x7f\x11\x02\xcfM7\x15\x1a\xde5\xf8\x8a\x9d\x15\xaa\x85\xb3\xd6\xb53i\xeb\xfd\xa6|\xc1\xa2\xff\x00\xeb`\xda\xc3\xba\x83\x95\x93\xaa\xa8:!\xbb\x03\xaf8\x8b\xb0\x00\\\xee;5\x86Z\xcd\xfdA\xd8V\xef\xbd}0\xaa\xdbf\x1d\x11\xab\xca\xe1\xdc \xd1X\x83\x15e\x93fe\x84\x1e\x99\xd6\'\xf3\x0f|N\xdb\xdc\xef\x89\xa7\xea)/\x88\x00"s\x1d\xbb\x98\x99\x8e&gt;5\xf8cy\xae\x869\x8d\xdc\xbdN\x11_&gt;\xfe3v\xd17q^\xbe3\x9af~3S.\xa7\x89\xf8\x99\xea8\xb6\x17z\xaf\xcc\xa9\x86\xe9\xba\xd4\xbf\xa8\x18m\xcc\xe2\xf8\x06\ro_\x19\xf8\xff\x00\x1f\x15\xf1\x9dG\x99\x9e\x97\x1b\xc2!\x91Y\xa8IA\xaa\xce&amp;\x03_Y\x9c#l\xee\xb9\x89\xc1W\xe2F\x80^Wo\xe5!\x8a\x9boO\xf6\xcc\x02\x96\x9a?\x83\xbf,D\x03\xb9\xd5\xff\x00u\x0e\xb2\xe9\x82\xfay\x85\xb6\xc7.b\xb3\x86\x93\xee\r\x8b;\xbb\x8bY\x94\xca\x1e|Q\x89j\xd6\xe0\xcf&gt;\x98\x95k\x8d\xea\xaeb\xa9\xab\xad\xb0\xb3p\x17\x8ap{\xfe%\xad\x8a\x00-\xd1\xc9\x149\xcb\xfeu0\xa9\x9f\xcb1\x8c2\x01\x93T\xc5|\xb5\xbc\x98\xfef\x06s\xe7QG\xf8)\x89Z\xb6\xb5-\xbf:\xa6^m\xbf\x11L\x11\xc6wq\xac\xd6\xae\xf8g\xd4\xce2\x83c\xd4\x17\xa5f\xc5\xb8\x14\r\xfd\xb1\xf66\x08\xb3~\x8d\xc6\xb7\x8b\x14\x11\x82\xacu/t&amp;\x0b\xd4t@\xe0\x97x\xa9m\xe6]\xd5\xc5\x82\x97\x9fpzX;\xf8\xc9\xe3\xe3\xbc\xf5\xa8W+\\\xcao\xac\xb5T(\x19\xf9\xb0\x8fS\x88\xaecr\xb5\x83\xe3?\x1d\\E\x14cV\xcc\xf9\xd6\xe5\xf9\xf9\xb85\x7f\x96d\x9a\xf8\xb6fd\x0f\xfa\xe0:\xa448\xfb\x88Y\xbc&amp;,\x95\xce\xa0\xe1g\x10)R\xe3l\xces3\x99s\xf5\x9f\x9e\xf3?R[tqlR\xe0\xf3\xfe\x86\xa5K\xf9\xab\x97\x9c\x83\xcdb\x05+U\xbd%\x92.\x94n\'oag]\xb2\x92\x8fX\xe4\xfbE\xaa\xc0\xc0\xd5[\xc7\x82-\x83m&gt;l\xc2\x0e\x03~`T\xc8\xbf%\x847\xc3\x8a\x80Xw\xb6\xa6\xd0i\xa7|J:\x0fK\tB\xdf|FYk9{\x8d\xca\xaa\xf3/TY\xba\xf3\x7f\xc12\x81!w\xe5q\xa8k\x1d\xa8\xbd^\x8cA\n,\x16\xba|TF\x19o\xf0\x82\x84i\xac\xe1\x86a\xe6\x98B}\xba\xacO\xb4\x016\x02\xca\xb6\xfb\x97\xbc\xea\x1a\xdb\x8f\x17\x88\xc1\xe5\xc5x\xa86FZo\x8b\x95\xa2\r\xb34\xe8u\xff\x00\xb0\xc0H7\x97\x05\xcc\x8f\x84\xd9\xfc\xce\x82\xe6\xf1\x10\xeck\xdec\xf1J\xf8\x80x\x0e\x18\x81\x1d\xd6\xf5\nm\xadA1.\xa9YmK\x97|\xcbJ\x83\xcc\xb7\x0e\xa18\xab\x8bC\x15\xe5+h\xcd\xb6\x88D./Z\xc40\x1f\x19\xc4\xbf\x11\xf3.\xe7e\xce\xff\x00|\xcb\xbcM\\n\xa6o\xfe"\xf9\xc1,\x95\xaa\xfc\xcb\xddj\xf3\x00\xc0M\xee\xe7u7\x0f\x1f\x1fS\xc7\xc5\xcd\x0c\x17N\xb0\x8c\xd2+\x13\t[\xc7\xa9q"\xa1\x87\xa2?6|]\xfc}3\xba\xc4\xb2 \xee_)D\xe5\xf16\xb9\xa9[WZ\x1e\x12\xce\x9ew\x01\xa4]0W\x0f{\x95[ib\xece\xd1\x88\xf6\x80t\xaa\xd4!\xdc\x0c\x97E\xf8\x97\xf0\xe2\x8eV\x1cV[3\x1d\xa7\x15\xaeYq\x039\xa7\xe8j\x02\x00\xfb\xba\xea$\xe1\xf6\x8da\xbc\xbf\x1e*d\x1b\xea\xa8\xd3\t\xa7g\\\xdc\xbf\x0c\xb7\x8end\xb6q\x7f\xf5E\xa5\x15\x11w\xe95o\xb9H%\x0e}@WE\x8d\x1ec\x0e?\x96YH\xad\xb7\x10\xd4\xbb\xde\xe0\x86n\xfa\x85\xb3\xd3\xcb\x02\xb9\xd16\x0efC\xce\xfd\x1e"\x8e\xe8\xe5\xee;uv9\x85Z\x03\xb6i\xe5\xce\x83\x0bD\xe0L\xfe`-\xae\x02dF\xb1x\x8f\xa5\xdaU4QC\x16\x0c\xf1\x01\x8a\xb9p\xc5sr\xe5\xc1\xdb7\xc4\xb9x\xd7\xc5\xea8fs\x9c:\x94\xde\x16\xa9p\x04\xc6UF\xb9\xf8\xbd\xce\xe6\tm\xd1\x1a\x8e.^\xa3\xea9%\xe9\x97f\x98\xb7\xfe\x19vY.c=\xc6\xb3iw1\xf1r\xefM\xfc\xdf\x0c\xaa&lt;\xec\x0b\x076\xaaM\x9e\x8eQ\x8f\xa4\xa9\x06\xbe5\xf1\xad@\xaf\x9d\xc7\xcf\xca\xc5f\xc8\x97!r\xff\x00\xa5\xea9E\xc2\xe2\xe5\xcf\x1e\x9dA\xda\xfc\xd1\x7fD\xe7W\xd8\xe3\xf0@\x8b\x85\xfdO\xc6\xd3\x05\x9d\x11\x06\x0e\x0c\x0f\xee\x03)8R\xe5-U`\xceK\xd3\x034\xebN\xb7l\xd9cl\xbc\x06\xe9\xefD\x1eWW\xf9\x80\xe3?\xd7\xa8\x86\x875\xc4&lt;\xba\xea\x1a?^\xa1\x1b\xe8f\xc8R\xfc\x18\xef~\xe23\x83\xb7\x15\xfb\x96\x0c\xad\xad{\xdc\xa1\xa7\xdd\xca\x18\xedw2\xee\xa1L\x8b\xbf\xaa\x95%!\xef\xa6\\\x1c\x9e\xf5\x13b\xf8-"f\x01~a^\x88\xe2_\xf8V`Z\x81o;\x8a6)p\x99\xc6\x89\x8e\xa9\xec\xcc\xb6 zC\x18a\x14\x02\xcf\xd4\xa6\x00\xe6Q\x1aj+\xea\xa1\x8e\xce `\x89\xab\x83\x9f\xa8e\xbf\x8b\xcbR\xea\xeb\x19\x97\xfb\xfb\x83qS\x87\x9b\xc3\x1f\xb5#B\x1eJ\xb9\xba\xcc\xba\x9b\x963\xf1+\x14N\xf7\xfe\xa2\xdeq\x15\xc7\xdcj9\x9a\\n\xc8\xba\xb3\xebL_\xc4\xbdM\x8d\xa4\xe2_p\xc9\x8f\x8b\x9e\xd9z\xf7\x18\x16\xa0\x06\x07\x89\x9f/A\x00\xc9+nR`\xc1\xa8\x01\xf0\xce\xa1d\xc2~\xa7:\x8c\xe5\xbe%\xf9\x97\x88\xae\xd6R6\xcd\xdc\xc0\xb2x\x8b\x94\xfa\x98\xb7\xf4\xfee\xbe\xae\xf0\xdb\rMk\xee\xbe\xf5\x08K\xae2\xe1_[e\x16\xea\xbc\xe0\xfa\xa9\x91\x15\xa01OD()U\xb5\xbb\xaf\x12\x97V7\xe6+Iu\xb5\xc4&gt;\xcd\xc1C\x8aNX"\xb4\xd6y\x81\xb0\xbe\x8d\'\xd9-\x80\xaa\xff\x007\x10\xdc\xe5\xc5\xae\xba#\xdd\xe7%\xf7\xf7R\xfb}\xfa\x99\xd9\xf7{\x9c\x7f\x0b\xe3s1\xd2\xee\xea\xe5++\xc1{\xc4+.\xab\r6\xd4\xc8\xaf\xfa\xe6+\xb2\x1b\x80\xfb\x8d\x81\xb7\x01\xab\x9d[\xc0y\x8a\x0b\xce\xb1\tnj\xda\xdd\xc2b\xd2\x86\x18\xdbQ.\xaec\x85\x1cg\x88.\x17\xf32J&amp;\x10\xd8\xafo\xdc\xd1\x96\x8e#\xba\x8a\x99\xf3(&gt;\x92]\xbb}\xe2a3\x0b\xe0\x8f*\x96c\xcb\xf0\xb7\x10\xa4\xfb\xef\x9a\x97\xfc\xca\xa8\xeb\x96P\x0e\x10QWI\x12\xce*\xb5=\xea\xe5\xd7\x04\xbf\xc7S|\xea\\\\\x1f\x17\x82y\xb8\xb8\x1f\xcd\xf9\x97\xb6Y\x8c\xee-k\x1b\xd9S\x90\xb9]\xc3\xcc5\x83\xe3\xeb\xe2\xfd\xeb\xe0\xc3.:Xol\xd4\xea\xd6w\x0e\xe5\x06$\xa6\xf8\x81\x82\xd7S\x0c\x12\xf3/\xc4\xe3\xd3\x05x\x87\xc7\x99\x99\xc4\xcfS\xab\x97\x0b\xb3\x1eb\xd6\xe0\xc2\xf7m\xc1(?\xb80\xdc\xb5\xa8\x1bLx%\xc5\x85\x903\n\xe6\xf2n\x1a\xe9\x1d\x00D\x12]\xcafC\x9bM\xacQ\xe5\xa2\x8b\x81\xac@\x15\x1f\xb75f%\x8d\xa2\xed\xff\x00\xd9n\x0bUp\xd6K\xf3\xfef\xe8}7R\xd2i\xc9p\x19^\xb00\xae?\xf3*U\x1b\x1f\xb8U\x17\x8e\xb3\x1b\xf2H\xe2\x15p\x81\xcf\xf73#\x00&lt;b\xa6\x8d\xfdn)Zc.\x06\xfcB4\x10\xc6\x18\xa9UfYaPT\xde7\x05p\x06\xed\xb8\x0c^\xab\x1c`\x97\x1b\xc9\xe1.\x011\xd6\xa5\xd6R\xe9\x85\xee\x9aW\xb8.\xaa]\x9c6:Xa\x0bp\xdf\x9ey\xdc\xe1p\\o\x9e&lt;Ck\xceY\xc9\xa6_\xa9uY\xc9- \xc7^\xbfQWe\xc3\xb0^\x88\x07\xf1=\xa5\xd7\x05\xd7S98\x9c\xceL\x8c\xb6\x82\xa2\xee}s/D\xb7\xbc\xd6\xd9};\x97D_w\xccq\xe7?\xbf\x83\xe1\xb3\xf13\xf1\xf7.\xb8\xa9qrq\xa9\xa5Q\xf3^`\x98\xb8\xfb\xf8\xc0\x08\xaa].e\xdd\xc3&lt;\xdb\xcb\xdc\xddu(\xea~\xfdM_\xc7\xa9x}\xfc=\xdc\xe5\x13\x9ec\x0b\x02\x99\xac@R9\x83L\xde\xa6j\x08\x1a\xd8&amp;w~aX\xa9\xab\xfeH\xed\xd0\xb7\x06k\xddD\x80\xe1m\xcc\xa29y\x84\xcdm\nU\xbf|C\x0bJ&lt;\xdc\xb7M&lt;\xcb\xd6\xef\x96f\x80{\xdc\xa5j\xbb\xf1\xdcB\xb9\x0cKC\xbf\x15d\t\xf6!\xca\xa6%\x045\x1c:\x1d\xef\x17\r\xb1\x06\xa7\x08E\x88\xb4bA\x8b\x94\xba=T\xa7\x89\xefW2b\xe4\xc1V\xe1\x87^B\xb5\xdc\xbf\xdac\xb2\x12U,\x1f0V\xdag\xf3\xe1\x82;\n\x81\xa8\xd5q\xeeZ\x0eH\xb2\xca\xbf\xe2]6\xfbeq&amp;\xcd\xf9\x8e\xeb\x9b`\xb5\x0c\xbdB\x98\xbc&lt;j\rq\xcc\x1d\xed\xc6%\xee^jd\x9e\x93-\xd6\xa0\xbe\xc3\x1b\x81M\x88\xfd\x12S\x0e"\xf0%\xc7|\x90o2\xf9\xeb9\xf8\xd1\xce\xa2\x9d\xc7\xdf\xee]\xe7&gt;l\xdc]\xf9\x86\xcf\xfa\xa7\x17q\xa6\xe3\xceLSxG\x10\xff\x00\xad\x99\xd4\xd7\xa9\xd5\xcc\x07\xc3\x98\xbe\xe3\xa2\xf1\x08\xd0X\\\xb7\xe6\x1a\xe4\xc1\xc1k\xe2\xda\xf8\xf32\xcf!/\xe7_/q\xaf\xf8\x81\x8aJ\tt\x86\x89\xcb\xd3\xea?\xc6Rf\xeb\xea\x7f\xb7,\x9b\x82\x8c\x05\xd7\x02\xdc\x0eE\xa7\x1c\xcf\x98\x04(\x19\xeaR\x86\xad\xda\xbb\xa8U\xc3\xca\xba\x84;&lt;\xe6^`\xc7\xae\xf5\x03^.\xa9\x85\x8c\xee`]_\x19\xd4c\xbc\x11\xc2\x9c2\xe8\x7f\x92\x01\x04v_Q\xeb\xa5\x8ai\xe7\x89\x88&lt;f\xa3\x9b\xb86\xe1\xc3p\x91\xb9^\xf8CwiA\xb1\xd9\x02\xd4\xb4\xd3U\x0e\xc0\x99D\xb6\xba9\x0c\x11\xc4\xde\xff\x00\xb8\xa2+kW\xfeg\xbb&amp;n\\\xd4\xc4U{\xd4\xdf\x075\x19Y\xd7\xb8&lt;]q\x07\xcf0\xe4#\x85\x8e\xfa\x97\xca\x8dh\x96\xd5\x85\xfa\x97O\xdc\x1c\xea5\xadA\x0f\xf1P\x8a8\x7f\xf71\x9b\xc9S!Gwd\xc2\x8d\x12\xec\xbbu2\'\xb7l\xbb\xe6\xe0\xea\xe3M\xcb\xd6#m\xdf\xa9{\xd4,^?\x82+\xcd-\xcc\xb4s\xa9b\xb5^\x1dj6\x9c\xe5b3}\xf1/y\x98\xeaj]\xdc%L\xcc\x0c \x8b\\`\x0bj\xb4\x8bf\xa8\xc5\xb2\xc6\xbe\xa1\x90\x13uS\xcdF~a\xaf\x8a\xd7\xcb\x03u\xf1Y\x95\xc4\xa8\xda\n\x86\xaaZ\x04&gt;c\xc2\xa7t\x05\xac\xb2\x89\xa7\x83\x84\xfeb\xcd\x16^\rb:\x186\xd4\x03|\x93\xc6\x08`2\xbd\xf3~\xee8RR\xb3\x0eQY\x88xLm!\xc0\xc3\xfc\x91(\xa7\xc4R\xc1\xf7,\x8c\x1b\x94"\x0b\xba\x97j%\xb8\xe6W\x04\xf8k\xfa\xb8\x99y%\x89ar\xb8V\x01\x8e \xe5\x9b\xaaO\xef\x10\xb4\xb5S\xa7\xa8\x8e\x1b\xec\x84g-\xe4\x89c\xc1S(,(\xf5\x88R\xa9\xfac\x0b\x0f\xfd\xf7\x1e\xc1\xe4\x9b?PP\xb7\x9a\xdd\xce\rT\xd0\xdc\x11\xc7\x9c\xc3\xcf\x11j\t\xcf\xdc&gt;\xd6]n\t\x8d\xdc!Z~\xa5\xa1\xd4\\\x96\xff\x00\x1b\x06\x0c\xcb1\xb8\xa7Xf\xf4^"\x9d\xbb\x8b[\xc5\xce?\x92(\xee\xab;\x8a7\xa3\xf9"\xef\x7f}\x11\xc2\xc7)\xdcS\xa7\xee&gt;\xb9\x8ex\xfdj+\xc13\xf1l\xbe\x16b\xa2\x9d\xee8\x0c\xb3\x81W\x1b\\XL0\xb5_v\xc2\xcc\x12\xe5,\x0f3\xd7\xc7r\xfcB\x8a\xf0C\x8dFp\xcf\xe1\xea^\xe6\xdejW}|b\xa7\xb9\xd7\xa9\xde%\xd0SyD9\x87;\xcc\xb5\xa1C\x9e\x08\xf26vE\xbe\x18\xcec9w\xc9\x1dd\x10W\xaf\xb8TT4\xdc\x01T\x97\xea\xf75\xd6K\xba\xe6V\xfe*\xa2\x1cq\x99m\xbb\xb8\xf1j\xcd\xd4\xc0\xdd$\xfem\xb9\x8e\xd7q\xb0\xa7\xeaf\xd3\x17\xaan5\xbcb\xf7\x0b\x10\xaek\x8c\xcd\x1c&amp;a\x9a?\xc4a\x94+]0_{\xcaW\x85Ajb\xd7\xa9\xb0Vp\xef1\xcc\xa1Ek\x98\x96i\xe4\xc4\x00(\xd1\x1b-X\xf7\xc3\xaf;\x81N}1\x15U\xc6\x1c\x0c\xf3\x06\xa9\x02\xa1ec\x06u-\x02\xaa\x08\x85\xf6\xc5\x0cV9\xe6\x0e\xc2\x8b`\xee\x9f\xcc\xd1\xeb\x89\xb3\x7fqL\xa3(\xdf\xbb\x06\xb3a\x15\xc4\xca\xef0\xce\xe7\x1b\xf7\x8b\x97n\xe6\xbf\x1a\xbb\xdcZ\x1d\x7f\x13\x0cx\xdf\xb9\xaf\xe4\x18\xbey\xfc\xc5\xb5\xe3\x9f1w\xaf\xc5\xcf\xfb\xd1\x04\x1a\xd4\xb3\xfd\xb3\x04\xbf\xfc\x89(\xa6r\xce\xeb\xb9q_2\xf4h\xd4\x13\x1b\xccD\xb6\xb2\xd6\xe4\x82\xd0j\xb5\x0cE\xf8\x0fx\xf3.T\x1d\xcb\x98\x9b\x9dN\xb5\xb9\x8b&gt;;\x95\xa7\xe1\xc8\xf5Z\x9c\xbe\xe0\xa9\x8a+ik\xb9\x9e\xaeR\x1e\xbf)\x17v\x15\xac\x970\x9b\x07^\xbdJ\xd5\xcb\xb7m3\x15]~\xad\x9b\x97\xd7_q\xe1|o\xde\xe5\x85\xdb\xcf\xac3&gt;)x~\xe16\x87\xdb\x1c\xd2)\xc5\xd5\xc5@L\xff\x00$\xab/\xe4\xd7\xeeWF\x14\xcai\x9e\'\xdf\xb9\xc7Q7x/s\x1a+\x17\xcf2\xb6\xe3PF\xbf\x99\x81\xaey\x80\xe7\x18\xccp\xdd,\x13\xedphUe\xbb\xde\x18\xb0Q\xe8\xa7\xa8\r!\xbd\\\x02\xc2\xf98b\xaa\\a\xbd\x90R\x8e\xfe\x868!\x9e\xbb=J48U\xaf8\x97\x96o\xd6 \x1d\xaaI\x8b?\xa8\xb3\xef\x8b\x85P\xef=\xc7\xfa\xebPN\x8e\xe1\x93\x98\xb9o\xcb\x04\xfdq\\\xccg\x85V \xf1\x7f\xdd\\}\x97\xdc\xfa\xcc-{\xb9\x1a\x9bk\x11u\xb11\x07\x19\x8bo\x0c\xf7N\xa2\x8f2\xc4_\x0c\xfb5\xcf0j\xb8\xcc\x1fn&amp;\x1c\xee(\x89g\xe7\x11\x8e~\xcfL\xddLb\xe5\xd0\x99\xcd&gt;l\x973\xaa\xb9z\xd5\xcc\xce\x18H\xd0\xa2i\xa6#K{A\n\xe2L\xa4\x13D\xb9\x9f3\xb9C{\x95\xf2\xcb\x99\xb9r\x9e\xa5o\xe7\xc7\xc3\xe9\x8d\xcb\xf5\x16XV\x071\x98j\xbc\xf1\x0e\xf1\xde\x18sC.(\xf1\xdc\xe0o%\xe8\x8f\xe8jU\x05\x96V\x0cB\xefw\xee\x08\x8d\xf2\xe3\x98\xd0\xa1\xc7\x1c\xc7\xcfKy\x95\xda\xe0\xbf9\x99\xf4=g\x8285\xe4\xd6\xea\x1d(W\xd6\xae\x1d]Q\x1a\xef\x84wts.x\xdck\x9a\xa9s\xf9E\xe0\xd8\xcc+\x1b\xe1\xeaZ\xdf\xdc.\x02\x92\xf2(\xd9\xc4\xcb\x94\xff\x00:\x97\xd1\xcd\xc0\xd8nb\x96\xb5W1\x1b=os\x14a:\x80\xac\xe1\xee^ov\xec\'\xbe\r\x0c\x02\xf08\x808\x1b\xd9)u\xc48\xa4\xb82\xee\x9c9\x82\xfc\xc0\xc6\xb8\xe3\x89\xe9\t{1\xf5\x0b\xadb83\xaa\xd5V\xa7vF+\x0e\x7f\xba\x03\x01\xacR\xee\xea\xa1\xa5{\x89\xab\xddW\xa8\xd5\xf7-K\xdf\xd4m\xfe;\x8a\x86"\x8ag\xf2G\xcf\xf9\x95\x97\xc3\xad|?\x87\x88\xb8K\xb9\x9eZ\x7f\x7f\x07w=\xcc\xe5\xb9lS,EkC\x17\x15\x14V\xeez\xb0\x0f\x04\x0f\x9c@\xaa\xcc\xe7S8\x9c?\x04\xe2\x13\xc7\xc6(\x99\xc5\xc0j2\xb7\xef\xe5\xfb\x9e\x98\xcc\x84\xfa"\xb7~\xa7~Z\xbe\x06\xd9@\r\xf2\x19\x8b\xd2\xd4\x07r\xb2\xc8\xf1\x02-\x96\xce\xa6aN\xb4\xb9\x87\xcbgz\xc4\xd11Y\xdc&amp;\xcdb\xa5\xefh\r\xd9\xe2;\x88\xfd\x17\xa9a\xb4\xc5x&amp;\xb2\x9b\xea\x1e:\xc97\x9d\xef\xeb\x7f\x88\xb2\xff\x00\x94\x8e:\xac\xd6%\x19\xd26\xcd\x7f\x82$*\xb7\xe2r&gt;}\xcb\xf1X\xc0i\x94\x99\x0e\xec\xc1e/\xf9%\x08\xb5{\xbe\xa0mr\xdc\x85\xcc\x91T/\xce\xa6@5\xab\xb2(\x0c;\xe6b\xa5\xea\xc1\x81&amp;0:\x83l\xd6\xee\x01\xdb\xeer\xcb\xd5W\x12\xfa\xf4\xd4\x1bJ\x83\xce"\xe5\xfc\xc1\x82\xd9\x8c\xdc\xb5\x94\x96F\x99A\x8f\x97\x1fmu-.\xc8\x9eS\x95u)\x85\xceq/\x15W\xc12\xd5\xba\xe7\xb8\x9c\xe7\xee\xe5\xdeJ\x97\xd2\xdf\xa9u\x9f&lt;\x95-\xc6\xe5\xa9\xcf2\xc6/&lt;M\xde\x7f\xa8\xd6\xf7\x17\x9bw\x17\xe3\x19\xb7&gt;\xe7\x1eIq\xbc\xd63&lt;\xe0\\N7\x03\xc6\x93\xa6\xe06\x18\x81X\xeb\xe7\x18\x9a\x95\xf1\x8f\x8e\xf7-\xc5\x92\xbc3\xc4\xd6#\x1b\xf1/\xe1\xf5\x82&lt;\xca\x05\x8c=M\'EFT,\xb1\xcce,my\xe1DF\xc5u\x83\xd3(R\xe4\x80X\xac\xe2\xa8\x99/zt\x11\x83\r\xf1\x1c\xbf\xd49q\x83y\x98X&lt;\xc4\xa5|\xe6\xf1O\xbee\xb1]\xcb0WF"k\x1aM\\K[;\xba\x9b\x8aq\x074b\xf8\xea_b\xc6\xc5C%\xfetO-\xe9\x83\xd2\x02\xec%\xfe\xef?\x18\xb2\xf0&amp;$\xc9\x91u\xa8\xe6S\xcbx\x94\xa8e\\\x92\x02\xc80\xeb\xa9\x83@m\xdfr\xac\xe9\xb6\x9c\x8b\xcf\x92VX9\xe3|\xca\xc6(w\x99P\xa7\xb5\xf8\x82\xb6\x07\xa6;]\x1a\xb9PJ\x96\xaa\x86|\xfe\x17\x12\xb8\xc4\x1a\xe8\xc7\x9egC\x89\xa5\xd4\xc5\xdf1\xd2\xca.\xbcE\xf7\xff\x00s\x0cT5\xc9\xccPuj\x81\x82\xa2\x0c\xdd\x10\xec\xef\xfc\xc5\xde\x07\xb8f\x8b\x1d\x9eaZ\xa0\xd4P\x97\x7f\xde"\xf3\xc4\xd5cD\xc1\x97\\\xf3\xa9\x85.[\xfdTS\x9f\x80\x8c\xb7\x1d\x8f2\xfcy\x87\xa8=K\x82\x15\xd0A\xca\xd9\xd3r\xe0+\xfc\xa3xH*\x08\x9b\xad\xe2\x01\n\n\x8bQ\x9cg\x9d\xb3\x8f\x80\xaa\xc6u:\x9b\xbc\xdf\xc5n\x14\x04C\xc5\xb2\xb8\x9cc\xa9\xbf\x8a\xf5\xc4\xa8\xdc~\xd9t\x1bh%\x13\xcc,R\xda\x8a\xcc-a\x18\xbb\xd1\xf5\x15un\xbc\xc0\xe7\x97\xcf\x12\xa1i\xbf\xfe\\U\x1cmZ\xb8\xc5\x95}JE\xa3\x17p\xb9td\xd4\xb3\xcey\x80\x05\xfex\xb8=\xfd\xf3/\x13\x15&gt;\x87\xc4NL\xd3\xbb\x97\xf3a\n\xb2\x10\xfa\xa8k\xbd\xdf\x14\xb1O\xdf1\x93_\xe332\x14o\\b\x10_\x82_\xbc\xc2Z\xdc\x8d\x90cZ1\xbc\x91\xb3\xe3LY\n\xce\xc81\x8d\xb7\x00\xdao&gt;`\x8b6~\xa5\x9f\xa2\xd3\x0c\xd0qb\x06\xbcIC&amp;\\\x91\xbbp\xcf\x89\x92\xf2\xea\x06eWg\xa8U\x97\xfbh\x95\xf3r\xb5\x88f\x8bx\xe2V.\x932\xf4\x8e\xbd\x11\xd1yy\xd1\x1a\xe7J\xe3\xdd\x9bL\xead\xb8\xc5\x1a \xfb\xc1\x03\x1a\x9eG-\xe7\\\xc1q\x8cTp!\xc7\xeag\xce\xe3\xf0\xfajj\xd3\xf8\x94\xf2\xc6\xd3\x8c\xeeRr\xe7\xdf\xc3uC\xcef\x82\xc7\x88\xccY\xc3\xcc\xbaLC\xfd\r\xcb\xbb\xccL\xd6\xad\xe9%\x82\xefQ\x9b\x9b\x94\xd6Eg(\xa0\xd5C\xe2\xdcq9\x9c\x95\x0c\x96\xcel&amp;\xf4|\xebd\xfa\x9cC\xe3\xc2\xc1\x9a\xaf\x90\x15\xf5\x01\xb22\xc1\x8c\xa1QX\x90\xda\x88\x13\x08\x05\xbc\x84\xacS\xb7HS\x13n\xd9\x9dS\r9\x08\xac+\xb64\xcd\x0f\xdeQ\x1ds\x86Q\xa8o\xee\x8dGK\xee\xee"p\x95\xe3C\x11\xc0m\x83\x98\x0etU\xe3$\xdb4wf`\xacd=\x92\x9b;\xf1\xf9&amp;\x05\x05\xb3/]f^\xd1\x9a\x12\x95YV\xb0\x8f]bX\xbdR\x9c\x99\xf1\x1b\xc9u\x1d\xb1J.\xe1\xea\xb4\x17)\x90\xb7\x0b\xab\x8b\xb2\xbfp\x05\xf8\xc0\x9e \x0e\xedx\xf3\x1a\x07\x86z\x80Fl\x1d\xfa\x81^\xba\\\x90 PH\x99\x1a.\xe0\x95\x06we\xc6`\xbds\x16v\x19h\xe3q\x87#P\xa1\xf5\xeai\xf9w\n\xadg\xd2J&lt;[C+j\x9c1\x15K\xc3Z|\x9e\x88\x0bV\x86z\x8f\x07W\x99a\x827\xff\x00T\xa5\x7f}\x13N^X\xe2\xf0\xe2j/\x94\x8a\xb2\xe6\x17\x7f\xf5L\x99\xbdv\\\\\xccQ\xf5\xc4/&gt;\xf3\x15\x1d:\xd4\xdf\x9f\xc14\x7f\xae\xe3\x91\x1d\x19x\x98\x89\xfc^c\xf3\xac1X\x01\x8a\x93j\xc7(\x88\xa8\xd4\x0b+@\x81D\xc5{\x9e\xa5\xc3\xba\x95\rJ\xddTq\xa2.\x98\xb41\xff\x00\x95\x88[\xb3\xe7\x96^\xfe,\xeaa\xb8\x84\xc5\x95\xdbP\x88+\x9a\x89\x97q\x8b1\r\xab\xe4`\x85\x10Y\xcd\xbdA\x15\n\x0e`\x1f\xbd\xbcL\x11,\xa0\xaa\xa2X\x17k\xf3.)e\xf9\xc4!\nwFM\xdc`\xcc|\x8b6\xc5\xca\xeb\xf9\xbe\xa3\x93\xdd\xe3{\xfe\xe2\xbb\xb3\xf7\xb8\x8b\\\xed\xaa\x94\x98i\xf5P^2Q\xddEr\xf5\xe9\xdcp6\xd9\xab \xb8\x00\xf3\xf7\xa9Wh?\xfb\x14\x06\x02\x0f\x866T\xea\x15\x12\xc1)\xde\xbcJ{\x9a1|@ua\x9a\xaee\x89\xb3\xe1\x83\x06\x82\xb1\xdcU\xb5\x02\xefR\xe5\x8a5\xed\xe2_vi\xad\xd7\xaf\xf7\x13\x01\x94\xdb\xbf\xcc\x10\x8c\xfe\xa2\x88\xd9JVM\xc1\xa5\x8a\x9f\xcb\x02h\xe5\xa7q\xcc\xd8\xc1h\xad\x8f\x99\x8f\xa7\xc1(\x97x\xb8!\xc5K3\xc0K\xc7\xde\xd9\x90\xf4c\xb9Z/\xed1\x91\x9e}\xc3\xb7R\xa0\x1fk,j\xaa\xc2\x04\x06\xf3\x11\xc1\xe6\xa5\xd6\x9a\xb9\x83\x9c\xd4(E\x98\xe7\x82c\t\x82\xe5\x12\xc1\xc4\xe8.\x02\x9b1\xdc\xad+\x11f\x8d\xcc4!\xfc9\x81U\x1d\xb3Z8\x88\xdb\x9a\xc9\x17\xcb\r\xda\x828\xc9\xb7\x87Q\xad/Q\x02&gt;\x80\x94w\xc8B\x00\x18\xe2\xa6\xbf\x12\xf3\x7fL\x1f\x13&gt;~6\xfcyJ\xf8\xfa\x84\xacq\x01\xf8\xdb\x13P\xb9\xcc\xd5L\xca/p\xbd)3Qu\xf5\xcc\xbbcP\xb7\xdb\x8c\xb0\x92\n\xf1\x15\xeb`\xde\xd7\xd1\x05\x16\x95d/\xdd@GJ\x1eu\xe6\xa1\x9f&amp;\x846yb\xeb\x94\xd05~\xc9~\xa2\x9bkQt\x17\xa2&lt;A\x0c\xe5\xa6\xbb\xf14m\x8e#\xcepF\xaa\xc6\xaf\x1d\xf8\x89l\xe2\xb6|\xfa\x82\xe0\xbcq\xcd\xc0\xc2\xca \x94\\\xd9qo\x08\xadz\x89qZs\xfe\xa2\x94P\xd5\x11\x06\xf9c\xc4B\x1b\xd7\x9ecz\xb2\xc58\xdc\xe4\n\x13`e\xf8!\x95B\x99\x0fR\x8a\xe6_\xa8Pt\xec\xec\xf33A\x9cg\x98\xa9\xe6\xc7\x15\xcb\xa3\x11\xd9\xbd\nV.\x14\xb67\x04\xa5\xd2\x0f\xf3\x19(09\xae\xc9c\xe8\xd5s\xc0\x00\x14.\xa5\xcfd0n`\x1dx\x95\xaa\xee\x02\xd9\xb31\xa7O\x19\x98V\x9c\x8c\xc9\xbcT0\x88\xdc\xa6\xcdtNW\xfb\x9b\xd9\xa5\xb5\xa2\xae\xe0\x11ln\xb4U\xc5aKq\x98\x10s\xaa\xa8\x85\xe6\x00\x12\xf4\xd4\xd7\xdb\xd4\x11\x01&lt;\x91[K2\xbd,\xa79\x95I\xf4\xc6\x85\xdc\xdb|TC\xdc\xb2\xb0\xfd\x174z\x8a\xff\x00J\x99\xe2\x1b\xf2U\x116\xf2\x18\x8a\xdd\xac\xb8\xb5\xb9\x80\r\x04.\xee7-}\xa4\xd5[4Y3\x03\x17l/w\xa9\x9e~\x1f\xb6f\xf8`\xee\x1e\xb8\xf8\x02.\xe5\xb2\xe5\xc5\xad\xc7\x0b\x80fL*R\x1eMD&amp;\xe3-K\xd8}}J\x04\x05^ 0\xbf\x00ac\x08E\x92\xb2/g\x96V\xb48\x0e\xfc\xc5@\x05\x95\x1a\xa2 P\x1b\'\x16\xc2\x1b\x03\xdf\x8cJ`e\xa6"\x01M\xd35\xf2g]\xca\xcb\xc2c50\xf3\xe3\xbc\x98\xfa\x85z\xde\x89MV\x97d\xd0\xeb\x19\x83\xa3*?\xe7\xdc/W\x17T&lt;\xc4+e\xd7\x13\x7f\xb5\x1dL7\xf7\x9f\xdc\xa3\xc0\xc6~\xa5\xc4\xe0\x9f\xbab\x18d\x08\xa5\xc7p\x92\xd0W#.\xdf\xbf5\x05\xa4\xa3\x93m\xccL{\xcc[p\xb0\xe0\xbbe\xc9\x96`\x86\x91\xc3\xf7+\x92\xca2Q\x9f\xf0\xc1V^\xd5\x9f2\xfa\xa9g\xd8\xc09\xa6\x0b\x1a3.\x0bbs3\xd3\x0ew),g\x83O\x98W\xa6\xe5\xc5^\xf5\\\xcc\xc7\xa9w\x85=D\x00\x0f\xcc\xf0\x7fz\x9c\x930\xe59Gl\xca\xd3\xb6\xf1\xab\x88\xb49\xd42\xc8\x15\xc3z\x04\x01^\x8d\xc1\xaeW\xd4\xb1y\xcd\xe2t3X%\xa1\xaf\xa8-\\1\x16\xf3\xfa\xe6\x03{\x98Y|~\x89\x95w\x11\xab\x1c_\xf1(\xcd^h\x8e\x15\xd6}\xb2\xeetEl\xf5\xee\xa2\xe35\x1d\xa87\x19/\x90\x8d&gt;u\x19"\xba\\\xee\x89N\x94\x17\x02\\\xaf\xdc\xb6\xf52\xfeh\x96\xean]|h#\xc4\xcb\xb3\xe2\xd9S[\xf8f~|ED1\x88\xc9*\xb2A\x85\xcb\xcc\x15\xd0\xbb-p\x85\x9e\xea\x11[\xaa\x9c\xab$\xe9\r\xbe\x88\x8d\xe8\x87\x15k;F\xafU+T\xbb}\xc2_n\x13\xe8\x88\xcd\xa7$\xaa;\x9au(\xae*\xfc}\xc1\\\x94x\x83p\xdf4\xc3\x0c\x07\xdb0U\x9ee\x15QZQz\xff\x00\xae\r9\xd7\xbb\xf60\xa8\xff\x005\xa6/\xaf.%\xff\x00\xf5\xf7=3\xaaq\x00F\xb8\xb8\x83\n\xa4\n\xfe\xd2\xc4r.\xf8\xb8\xee8\xf6\x8a\xc3\xa9U2\xf5\x1d\xce\x9a\xe3y\xd4\x18\x8a[z\xddB\xc8\xe7p\xeb\xca\xc9p\x89\xe4k9%\xb1\x83\x98\xda\xb3\x1b\xd4]4\xc2j\xad\xd7\x1b\xd6%\xbe\x15v-\xc1\xdc\xc2\xc1b\x1a\x85J\x0e[\xd7\x12\xadS\x0e\xdcq\xccd\xee\xb9\xacA\x19\xc2\xc5\xd2\x9c2\x99\xdb\xb6]Fk\xdf\xee\n9F\xd8u\xc5L\xde\x07\x1f\xa8Y\xa1\\3F\t\x9e\x11,K\x98\xff\x00\x80AE\xf1\x19M\xe8\x9c\xef2\x8cuf!\x9bYsYY\xf7G2\xf5\xcf\xeaZ\xab\xa37e\xf2]\xc6\xc5\xbc\x92\xda\xdd\xd6\xf1\x16\x985\xdcq\x93\xc4v\xee\x8b\xf4C5\x93Z\x89\xc1\xc5~\xa5t\xd1\xd5JV\xe9q\xc7\xfd\xa8{\xd9\x89yva\xe7S\x99\x04&lt;O.\xa7\xf9cW\x04\xbb\x98\n+r\xa9\x87\xf3=/\xa9U-\x9b\x97\x99\x85\xdc\xf3?\xb8c3\x1f\x18\x95\xe6\x15(^a\xd8\xa0\xb2\xcbq\t\xca3\xd6\x13]\xab8\x8e\xd1\xcb\xba\t\x81\x93NWmDEt\\\xbe\x92\x8a\xd9\x97:\x07\xda\x107\x83\xc6\xe58\xc0\n\x07\xe2\x01\t\xa1\x9e\xe6/\x84\xdf\x10\xd4\xcc\x1c\xc8\xb8.\xb8\xcdD\xc2\xd9y\xca\x91h\x07\xbc\xf31\xb8\xa2\xcc\x7f\xbf1N7\xfb\x8dO\x9b\xa8;(\xab\xcc\xad\x10\rc\xa6SM^XY\x97\xcc\xb4h7\xa7\xf7s\x134s\x9f0\x065\xff\x00\x1b\x8b\x94sW\xeb\xe0/d\xb3U\xb1^\x16\xaaX\x1dn\x88k\x85\xf1W\xf7/X9\xeb\xf7\x07\xc2\xbb-W\xdf\x89v\xb2\x0b\xce\xb3pH\xd9\\\xe7\x0c\xcbd\x93\xeb\xfcE\x1be\x9b\xed\xd20\x13\x9e\xac\xd5@\xb5\xdcv\x90\x85\x05\xb9/&gt;"\x04)\xcbn\x8cT\x05e\xe6\x84\xbf,Ixe\x7fbib\xc2\xe0h,\xd4\x06\xcd\x8b\xb9\x985z\x1c\xf1s&amp;\xb3{\x0f\xe6Z\xec\x80\xc7R\xec\xc1\xd5.\x01\xcaFo\x99\xaa\xe8W\xd4\xcd&gt;\x1d\xc5JPb\xd1\xfe\xf7\x11r=\xcc.B\xfbf\xddmw;\xab\xb0\xac\xc0\x14\x07\xb8\xf6\x8f0\xd3\r\xff\x00\x11\xd6\x02\xf3\x8d\xc0\xb45z"i\xdb\x9bu\x16\x8c\xd7\xe3-\xc0Q`8\xbeu-\r\xd6\xa5\xd9+\xb9f\xda\x89\x1f\xd6\x98r\xc0\x00\xd6%\x06.g\x87\xea.&amp;&gt;\xa2\xf6\xddA\xbc\xceB=B\xde%Js=\xa5jp\xcc\xc7\x12\xcf\x81\xcf\x1f\x1d\xd1\x08*\xe6\x8b\xb4\x11\xda*\xbb\x98y\xf1\xc2\xb3\x02\x82\xdd\xb5!F/\xc3W\xa8\xd6\x92\xdc\x1f\x11\xc2\r"P\xbb\x06\x95\xbc&gt;\xa0V\xef\xac\xd8q\xe2\x18x5[`\x88\n\x02\xd8\xe5\x99l1\x9ab\x11?\xc9x\x87\x83y\x01lPp\xed\xbb\xbb\xc4vK\x8c\xf2\xc0r\xb1\x8ah\xc68\xcc\xa2\xb3\xbf\xc4\x1d\x0c\xfaF\xb9\xd3\xcdy\x8b\xdb\xbbX\xb5\xba\xbc\xbe\xa5k\x07lT\xd4R\x05s\xae\xa5\x1c\xdbhh\xe7\xee\x11\xf1\xa8SMK\xd8\xec}e\x97n\xc6\xee\xa1\xe2\xd7\x172(\x16L\x01\x9b\x04\x18\xc3\xb6K\xa3qx\x8e\xb3l&lt;\r9\x85\xd2\xb7Y\xa5\xbe\xec\x99\xde\r\x92Vfw\xc1\xa9KL\x08\x963\x0e\x89\x02\xc2kG\xf9\x82-\x0f&gt;\x88\x08.\xcb\xd90*\xe6\xf4nU\xae:}\xca=\x0f\x9f=D!w\xab \x8b\xba\xdc\xc2,}\x0b\xc0\xb1\x8cV\x15 pK\xc1\xb8\xab\x07\x0f\xa0\xed\x10\xa0-\xbcO6W%AE";\xbf\x12\x86\xd9C\x075\x12\xd4\xb9\xd5sr\xcb\xa0\xe9I\xb3\xc2\x93\xd4L\x19\xff\x008\xdc\xb4h\r\x97\x8a\x81\x1b&lt;\xd1\x8a\xf2\xc09\xbe\xf5\x14\xd2\xa6\xa9\x8arXr\xc5\xe3?\x8eb\xd7\x97\xf7\x8ee\xae\x97[\xd7\xf1\xa8\xe9\x19bec\x86\x87l\x06\x85\x1b\x06\xd8\x17\xc6!\xbe2z\x82\x1f\xec\x97\xf8\x8b\x89\xa7d\xbfP\xee\xe7.\\\xcdV~3\xdea\xe5\xd6\xe5i\xe7\xdc\xef?\x1b\xba\tVB\xbe8\x8b\x1c\xba\x12\xfd\xc6@\x97nf\xd9\x918&lt;T\xc3I\x03\x90\xfdE\xd7^#\xad\xdaR\xef\xc3-g\xd2\xef\xb9\xa6\xcdL\xe7b\x0c\x05\xad\xc6\xad\xdf\xb9\\5\xde.\xdc`\x94&amp;\x1c\xb5\x0b.\xe5le\x81K\xba\x98\x95uCu\x00\x94\x06=n\x01\xbd&lt;Jq\\k\xb8\x06\x81\xcex\x95+\x1bnQ]\xbc\xb5/\\o\x13]\xd6h\x95\xbb\xdf\x12\x96\xd7|@T\x85\xfd\xcd\x14%\xa6/&gt;#\x90-\xf0\xddGk?\x7f\xe9*\x98&amp;*\x94)\xcd\xc6\xf6\xb9U\x8b\xc9\x00\xd1\x9ci\x99\x1e+pT\xd9n\xff\x00\x11\t\xf4\xeelc\xf7\x9f\xfd\x94\xb7\x8b\x95AC\x87\xcc\xca\xe0*q\xc6+0n\x8f1\xc4]\x05@9J\x06\xd2\xa0\x96k/\x18\xc47\xc5.\xe2\xd1X\xfa\\\xad\t\x89Fy\x0e\xf7*\xc5\x17o\x1a\xc4)M\x96\x9cG1\x82\xb6\x96\x98\xe2Y\xa9\xde.Vo\xfd\xdf\x99\xdf\xa6&gt;!\xb0N\xedfQ\xc9\x8fG\xd4H\x98\xd3&gt;&gt;\xe0\x0c)W\xa0\xdc\xa0N5\x00\xa1\r\xf7\x10\xb1M\xa8%6\x82\x94\xb8\n!Wc\x96\xeau\xb5\xebq\xc8\xa9\xe2^)\xf0u\x06\x8fn&lt;\xa4\xbb\xb3\xf4\xf9\x97\xcb\n\x1c\xe6\x95\xfb\x83NS\xea\xb5\x11\xd3\xfaCp\xb4V\x08\xae+w\x04\x86IuR\xb8\xab\xf3\x1d\xbeS.\xc9J\x95\xc4\xf2K_p\xc4\xbf\xacB\xf6\xe7\xd4T\xde\xe5\x8c\x13\x96v7\x0b\xb9e\xc2\xa1S\xea\xa2\xd0\xaf\x15r\xd1i\xada\x84\xd9\xca\xbb\xba\x8a[4G\x00!o\x16_l\xe9\n\\ps\x19|\xb8\x8af\xe4\xad\x11\xb6\xc3\xed\xab\x98\xa8\x1b\xe3DNk\x9f\x16\x93\xb0\xea\xeaX\xc2^\xee7\xa3\x03\x85n#\xff\x000\xc58?\x88-s\xf9K\x04\x0c[P&lt;\xb3\x1aQ\xce\xbc\xd4\xa0h\xda\xcdr\xf9\x94?\xb6\x97w\x00_"\xf6\xf9\x81\x8e\x10\xcaV\xb2)f\x9c;\x94}Z&lt;\x81\x1ee\x91o\xb3A\xc2\xce\xdf"[;\x9b\xa6\xde7\xd73\x05v\xf7u\x12Z\xd1\xf7\x109D\xed\x95Ct\x05y\xcb\x05\xf9\xdf\x0c\xd8\xff\x00\x81qTV\xa5W\xb6\xde\xe5o\x1e\xa5sgC\x03v\xd6\xfa\x95\x96\xf0J:W\xa9\x8a*\xb8\xa2"-b\xb5\xab\xfc\xcbg\x1f\xbeH\x8d\x91\x05\x18\xdc\xedZ\xed\x84\x8c\x8a\xa6#4I\xfd\xc2_-*\xfbf\xcd\x06\xd2"\x880\x0791B\xa5K0u\x02\xd1V8\xdc\x01u\\\xb0\xfbl\xe9t\xb8\x1d\xd4\xae\x8f\xbc\xcaQ\x9b\xaf\xeb\xdc\x05\xb6\x8b\xac2\xd4%\xec\xbb\x85\xa5\x9c\x18\xc5^ 4\xec\xdez\x86\x05\xe1\x8d\x91\xc1\xe8\xd6\x0e`\x12\x84\xc9r\xceY\xe2\x15\x97\xec^\xe3r\xdetAK\xc2\xe6\x82s\x1d\xf1\x9d&gt;I\xf8K\xee\xa7?\x15\xd5L\xbb\xd6\xa6&gt;\xd8Y\xee_\x08&gt;}E\xbd\xd4\xa0n\x1d\x0ef\x0f0\xc5\xe7\x89\xea\r\xc7&gt;\xfa\xf8\xad\\[\xebp\xa7\x04\x04\xa6\x94y\xa9x\xd6R\x87\xcc\x84Y\xdf\xbb\x8e\xb1\x0bn\xe9\x96f\xf8\xaa\x8d\x1b\x06w*\x99\xad~\xe7E\xa8\xef0J3L\x06.\x15\x8d\xfa\x9a\xe2\x7fiB\xbfQ:\xe1\xf5\x13\x03\xd9\xd50\x17u\x8d\\\x00\xbb\x18\x9c\x96\xbc\xfe&amp;k\xe8\xc6sp\xb7N\xa5\x17\x83{\xe2\x00\tF8s-\xd6QW\x95\xb5U\xc1\xaf\x11\x96S\xc7\xc4\xa7b\xab\x04w\x1e\x1c\x11\xbew\x13\xdc\x85s\xe7&lt;\xdcsD\n{\x8bB\xafVT\x08\xc1\x80-\xdb(c\x17\x7f\xa8?\xc3\xf6@;\x8be\xb2\xa1]\xd1e\xad\xd9\xc6v\xc1YY[\x89\xa0\xc6\xbc@\xce\xabz\xc3\x01\x90\xf3\xe70\x17\x05^\xdbe\x1b\x17\xfbH\x98\xf3\x14\x10\x99\xc0\xc2\xd6w\xa5\xc6\x87\x01\x95\xb0u\xe9\xd4\x0bP\xa9\xcbq\xe9\xb7\xf8g1\xda\x8c0\x9d\xf6\xfbI\xe9\xd4\x10v\xaa\x12\xe0\xd1}@\xa9j(Q"\xe0\xbf\x7fp\xb5d4\xea\xe6k\x06E\xcf\x12\xceI\x93Q5r\xc1\xa6\x80Cd\xd5\xe8\xc5L\xbc\x9ag\x15\xafu\x01M\x12\xae\xec{\x8d\x98.6s\xea\x1cZ\xd3\xac\xcb9\xb3\xd1\xaf1G&amp;\xfdf8Y_Lf&amp;I5px k"\xd5\x0c\xb7\x1a\x99\xca\xf4&lt;Bg\xc4\xec\xbfs&amp;\xb8\x86r\xd6\xf5\r\xca\xf1-\x0f\xbeu\x12\xd14e4\xa6\xe6\xd7\x0c\xde\x8a~\x17-\xdb\xea\xa6\'\xdc\ns\x1c\xb7\x08\x05\x05\xdd\xf0C\x15\x8c\xb6,Y\xb6\x96\xd6\xb9\xf7,\xd0\x15h\x0e\xd5\x81\x02z\xda\xdb\x0f\x1a\x91L\xc3\x1fq3F&amp;\xa3\xb4Jh\xfdD\xce.Qe\xc6\x95\x11\xa2\xb3\xee6\xc0F\x8bx\xff\x00\x100o\xcf\xb7.\xe2\x0ev\x05\xc1mm\x94(\xdf\xf9\xa9j\xf38[&amp;\xfc\xca\xba\x1b\xfe\x0f\xd4\xb6okg\xd3\n\x0f\xaf\x10\x0c\xf7\x00\x9c\xdc/\x8c\xbc\xca*\x18\x08\x96\xd69\x8f\x1d\xd8&lt;\xaa\xd8\x08\x8a\x83V\xc7\xe7\x1b\xab\xca-tD\xf9\x11\n\x00)\xe3\x12\xa5e\x8eP\xaaM\x0b\xcb\x04m.V\x19D\xa2\x87\x03_LA\xcd\xabx.U\xddf\x00\x9d\x8c\xc1\xa1\xa7\x92\xf5S\x84u\x9e5\x12\x80Zl+\x84\xb8\xe1zg\x07,8\xdb\x03t\xc8 \x9a\xb0\xee\xe0\x81\x04\xcf\x1d\xcb\xcf\x1a\xa9\x92\x91\xb0\xd3\x13W\xae\xae\x0b\x85!\xab\x86J/5\x8b\xf3\xe2S\xc0\xf8\xe6\x1d\x8cb\xbe\xfd\xc0\xa6\x139&amp;&gt;n\xb1\xc8\x96\xf1\x1bn7\x8ai\xb44\xcf\xc1\x00Z\xd1cN\xdf\x969\xb5t\xb7\xc4\x04l\xba}T\x0bo\xf6tC\xa5\n\rn\xe2\x82\xb2\xc6\xbe\xe6\xb8&amp;j\xa5\x85\xf3D\xb8sbB\x81\xd5y\xb9B\x9c\xea-\xde\xb8\xc4\x1d\xae\xeb\x17\xe5\x8b{Q\xd7}\xce:7\x84\xfb\xdc\xcePxs\x037\xf5\xbd\xac\x06\x11x(#\x00\xb6\xbc\x98\xb5\xcb\x0b\x01s\xc7\x19\xa9\xc6n\xf9\xfa\x81l\xb3[x\x99\xc52\xc6R\xce!~w\xdd\xe6_\x0b\xc4\xb5j\xe6\nb\xcc\'3\xd2{\xb8\x8ej\xaeS\xabc\xfb#i\xc5\xf6O\'\\\xcc\xa6X\xbb\x83\xba\xacM\x1b\xc5\xe6\x16{Yc\x8d\x81Mr\xd2\xb2\x8d\x156\x0bG\xee&lt;\x0b\xc8\xacZ,p\xf6\xf9\xbb`6\xf6:{\xb8.}0\xb3\xd7\xe24m#\xae&lt;2\xff\x00\xf2&gt;\xe6{\xfc\xc0\xec\x9b\xf1)\xe51,\xb6W/i\x13\xb6\xf3\xb9T\xbf\xd4\xa6\xff\x00F/\x1eb\xdd\xaa3x\nV\xc6%\xec3\x1f&amp;\xec\x88\xd3\x91\xdd\xc3\x97\xf4:\xe6P\xe6\x19\xbb\xbf{\x89\x8b\xccq\xc9)\xe5\x04\xba\xa4\nl!\x0fl.v(\x9ea\x134\xaa\xdeag\x19\xee\x92,\x10d\x0c%F\x88K\x16\xf0\xa6h)kx\xc1\x1b\xa2\xb1\xc3K\x82\'V\xfb\xa8h\x0e\x8b\xf3U\x98Z\xad\x17wW\x0c\xcc\xde\x9e\x82UX\x13\xfb\xf1\x0b05\xba \x1a\x02}\xdb\x12\xa6m\xe5\xfc\xef\xd4\x17/\x99\xa1\xba\xfc&amp;#g 3\x9cq92\xeb\x86X/\x05\xaf;%;6~\xa5\xb6\xd61\xb2f\xd5\xc3-\xb5w\x83x\x8aAmozx\xccK\xbb\x93\xec\xa7\x9f\xe2r\xc6\xdf\x94\xd7\xaa)1[\xa0\xda\xd5m\xad\xd7\x99H\x02qA\x1c}\xc2\xf7\x17\xac\x0c\xaasr&amp;o\x18\xd2\xce\x0c\xf0&gt;\xbac\xbe\x13x\xc4`N\x87\x8a\xafp^\\pc\x8e\xa6\x02\xc1U%^\x88*\xf3x\rf\r\xb7_&lt;\xc7/\xca\xc6\xac%,R\xd6Vo\xf1/\xc1E^7\x12\xbc\x87\x9dE\xe9c\xba\xdc\xdb4c\x16s\x17E\xe3\xc4-B\xdbH\x1e1R\xd4W\xa8.\xf5\xd4Y\x0e\xe0\'[G\x01\x9e!Fa\x86\xf9\x08:\xa3=35{ \xf8\x99\xa6\xcf\xbb\x89\\&gt;\xa0\x97\xb6\xbc\xcc\xaa\xa5\x8b\xc6u\xddB\xeaUV*R\xb5P\x1d81\xdeJ4F^\xd1\x1b\xd4\xdb=\xce&amp;\x97\x99\x12\xbb4\xa8\x06\xc81\xbc\xc4\x86\xda\xb1D\x18\xed"X\x08\x03\xd1%\x18:?\x9d\xcc\x80\xf7\x9a\xa8\x84\xc5\x81\x89l\x83\xce\'\xbe\xe6}\xb5?N%\xe4\t\xc8&amp;SP\xa1o\\N\xbc\xca\xd9Y\x8d\xe7\x9d2\x84\xaf\xf0\xce\\f\xe6lC\x8d\x98\x94\xde\xdd\xb9\xd4\xc8\x0fQ\x1c\xdb\x8a\x8d3Z,D\xac\x8fm\xce\x1f\r\xf8\xb6aE\xa7&amp;+o\xa7\x8a\xbf\xd2]\x03\x18\x15\x16\xd2\x17\xeb&gt;\xe4\xaf\xac\xaa\x01eZ\x9e}=K(\xed\x9b\xd6\xae\x00_\xb3\x97\x99\xcd\xbfK\x80\t\xbb\xc8&lt;\xc1\x15\xc6\xea\x07y7L\xe4\xd9\xb30\xe7\xbc\\+\xad\x84\x1bUe\xaa#n(\x96]i{\xc9r\x92\xdc\x1b\x98^.\xb0\x11\x059\xa2\xa9\xb9@0\x14{\xcc\xdcVi\xd3\x15\x0e\xc4p-\xd2\xe6\x9a\xa8\'\x8f\xa1\x0bU\xac\xba"\x8b\xb0\x05\x12\xc5-\xb1\xd6Kc\xd3(\xb3[\xf8\xd4p\xebs\x98\x94\t\xcd\xd8\xaa\xea\x89 \xd3ht\xb7\xcc\xaa\xb7F{+\xd4\xb7\x17\x8d&lt;?u\x1b6\x0e\x12\xfd\xf7\x12\xc9\x92\x8f\xde|\xcc\xac\xc9\xbf\xe7!\x987L\x92\xae\xefL\x15\xb7\xb72\xcc\x00j\xea\x94\xc5\x075\xe7\x17\xb8rE\\6\x99\x8e\xdd\x973x\x16g\x7f}L(\xa2\xb4\x11U\x14\xf0\x81\xbc0.\xae\xc9)\xd3\\kQc\xd83\xea\x7f\xff\xc4\x000\x11\x00\x02\x02\x01\x03\x03\x03\x04\x02\x03\x01\x00\x02\x03\x00\x00\x00\x01\x02\x11!\x03\x101\x04 A\x12Qq"02a\x13\x81#3B\x05@Rr\x91\xb1\xff\xda\x00\x08\x01\x02\x01\x01?\x00\xd9\xed\x8d\x9a\xd9\xf8\x10\xb3\xb3{P\x96\xefj&lt;-\x91-\xe8\xaf\x03\x1dl\x95\x89n\xf6B*+\xb5\xae\xc7\xc6\xcd\xf6\xb1\xb1+\x10\xb0&amp;&gt;w[p^\xde\x0f\x05\xb2\xf7\\\xee\xf7[y]\x88[{\xefB\xb6\x9fe\x8fu\xbboom\xde;\xb9\xbd\x96\xee\x86\xb0\'\xb2[\xbf;\xad\xec\xbd\x90\xbbl\xae\xf5\xbb\xddr\xf7|\xee\x93\x16\xcd\xad\x96\xed\xe3ty\xdd\x9e\xe2]\x8f\x93\xdcB+\x83\xcfc\xfd}\x8a\xd9\x8f%\rev\xd0\x97\x05mx\x1e\xc9\x142\x87\xb2\xe4[1\xec\x84y\xd9\xa3\xd8B\x1f\x82\xb3\xbf\xb0\x8a\xa6V\xfco}\xab\xf7\xd8\xc5\x94x=\xb6\x96\xde\x13\x11\xec7E\xbd\xd5\xf6=\x97\r\x8bg\xc1\xe3d\x85\xb3\xddx\x12(\xa3\xfa\xdf\xcfj\xda\xb7\xf3\xb2\xc6\xef\x81\xed\x15\xbb\xdd.\xc7\xba\xf1\xbb\xe0\xf0!r"\xbb\x17\xc7\xff\x00\x01\x9e{_ev\xa1o\xe4{-\xd9B\x10\xb2{v\xc5\xfe\xb6]\xaf\xec7L\xe7\xb1\x9c\xbd\x90\x8bF\x1e\xf4$\x85\xb3\xe0CB\xec{\xa5\xbb\xddQ\xec&gt;V\xcd\xbf\xb8\xc5\xd9\'\xce\xd6!q\xb3\xec[\xbd\xd0\xb6l\xf0-\x97b\xd91\x0f\xb6\xfb\x9b\xed\xf1\xb3\xde\x84\xb7l\xb5|\xed\xeaK\x96K\xaa\xd3O\xd2C\xa9\x84\xa3\xc9\xfc\xf0\xc52\xef\xce\xe8\xf01\xf8\xd9p/\x1b#\xdfe\xb2\x16\xf7\xbb\xf8\xed\x7fa\xed\xe4\\l\xd9)ylz\xf1\xa7\xe4\x9fW\xe8\xd5\x8f\xb0\xfa\x98(\xc9\xdeQ\xa9\xd4\xcesu\x84\xcfS\xbb\xb1j5dugb\xea\xa4\x94N\x9f^:\xb1V\xf6Okc\xdb\xc0\xb9\x16\xde\xe5\xf6!\xec\xb7\xf3\xbd\x14&gt;\xfe\x0bc\xe3e\xb3\xe1\x9a\xda\x91I\xc5&lt;\x8fR\xa7/bNM\xe4\x8c\xe6r&lt;\t\xb1p\x89K\x84ij=9&amp;\x9f\x93KQjE4\xc5\xb5\x0ft\xf8\xd9\xd5\xf6\xf9\x10\xda\xbe\xd4-\xdfr\xec{\xdaF\xbe\xb2\x8c]3WZr\xd4m1z\xaf,\x9cR\x84i\tP\xf0\x98\xecN\xcd?c&gt;H\xaf\xd9\xa1\xaf-9*x4\xa6\xb5"\xa4\xb6\xbe\xc8\x8bf-\xd0\x87\xc9\xc1\xcb\xdb\xc7ke\x8fe\xb5\x8fd\xcb\x11&amp;\xa2u=R\xd3\xe0\xd6\xea\'9Yl\xd0\x83\x92v\x89\xaaH\xa8\x8fd\xa8\xd1\xa74j\xc7\x96&amp;Q\xd0\xeb\xd4=-\x8fR5df\xa5\xd9\x1d\xe4\xf6LB\x11y{.\xf6\xf6[-\xec\xb1\xe4\xa2rpVk\xf5/\xd3\x85\x83SU\xcd\xbb\x1a\xe5\xb2\n\xda4!ZqU\xe0\xd4Rm\xa3\x8b\x1b\xd9yf\x8a\xff\x00,(\xd6_C\x7f\xb1\x0b(nQj\xb9%\xaf*\x8d\xbe\x0e\x96~\xa8\xfa\x85\x9d\xe3\xb3\x1fb\xd9y\x1fg\x9d\x98\xc7\x9d\x93b\xdd\x9c1\xf3\xb5\x9dWQ\xe9\xb8\x92\x9c\x9by\x12\xb7&amp;\xf9\x1c[\xbb4 \xbf\x91}8 \xfe\x96NY&amp;\xed\xe0y&lt;\x7fb\xb2-\xc6J\x8dU\xfe*\xfd\t\x11y\x1b\xf2N\xde\x11\xd3\xea\xfa"\x91\xa7+[\xc7\xc6\xcf\x8d\x96\xc8[Yg\x8d\xebg\xd8\xad\xed\xc0\xf8\x1b\xecxM\x9dWP\xbdRBm\xe5!G$\x93\xf4\xba4\x13\xab\xfd\xd0\xf1\xa7\x82o\x0e\xc7\x82\xc4\xca\xc1\x18\xdc\xe8\xd5\x7fCC^\xc5P\x93h\xfe7\xe9#:gI\xab\xea["#\xc2\x1fj\xdb\xdf\xb9\xb1\x9e\xdb\xd6\xcce\xe1\xf6&lt;\xa6\x8dl\xea\xcd~\xcc\xa5\x81\x9f\xf3\xcd7\x83M7\x08"\x7fL\tJ\x9eF\xefd\xc5\xc2f\x9e%h\xd4\x9e="yG\x828L\x87\x06\xa6%\x93\xa4\xd5\xf4\xc9/\x16A\xdcS\xf1\xb2\xe0n\x89q\xdb\x1e6\xf0g\xb5\xefUbL\xab\xd9\x97\xd8\x90\xd18\xd6\xac\xeb\xdcQe`t\xfd8\xf2A_\xf1D\xea\x12Q\x1f#[E`\\$\'\xc3\x1b\xb93\x84,28i\x90NQI\x9dT~\xb7\x82\x18gM?T"\xaf\x84-\x9a\xb2B\xec\x8d\xd6\n\xfbky&gt;\xd42j\xb5g\xf2I4\x9b\x1a\xf4\xff\x00DW\x0f\xc5\x1a1\xbdx\xfcY\xd5I+L\xab\xb2\x9ak\xd9\x93^\x99\x11\x12\xe1\x8f\xc6\xcf&lt;\x89U\x11\xc9\xa2\xf0\xce\xa6\xd9T\x8e\x93_\xd0\xfd&amp;\x94\xbdH[=\xd6\xd1\xfbu\xbbx\x18\xf7[\xc9\xd6\xac\xfeY&amp;\xdb%\xc9\x04i$\xb5%\xff\x00\xe2ur\xcdU\x9a\x92\xb6\x92:u\xe9\xe7(\xd7K\xd5dy\x17\x81\xff\x00\xd1\x83\x97\xfa\x13D\x11\xa3\x8e\rW\xeaW\xe7\x81\xe0\xa6\x9cN\x96K\xd0\x85\xb3{3\xce\xcb\x8d\x9f\xdb\xb1\xbe\xd4&gt;6\xea&gt;\x9dmE\xec\xc5\x96\xac\xf3\xf2Aedx\xd4\x9f\xc1\xae\xfe\xbeM\r\x19\xea\xcb\t\xbc\x90\xe9\x1a\x8eRGU\xa4\xe2\xda"\xb2.G\xc0\xd9\x05\xea\xe5\x18\\"5\x8c\x9ak\x16I\\o\xf6%t\x89\xa3\xa5\xd7\xfe7M\x9az\x91\x9a\xc1u\xdc\x86=\xde\xe8\xf1\xd8\xc6\xec\xb7\xba[1\xbag]\n\xea_\xef%\x8dY\xa0\xbe\xb8\xa2\xeeZ\x87Q\x06\xa6\xd2:\r\x15\r4\xdf,kA\xc6Ir\x96\x0e\xb3N\xe3\xea\xf2U\x10\xe5\x0f6\x86\x8e\x9bMU\xb3^\x11\xb6\xd1\xa6\xf3\x93M}7\xfa\x1a_\xc7\xfbR\x12\xac\x92\xca3\x16\x8e\x86WY\x1f\x1d\xcb\xc1\xe4}\xb6\xb7\xf1\xbb\x1fb\xf03\x1b\x7f\xe8\xc6\xb5!/te$ygM\x1f\xad\xb7\xc2V[\xe7\xdc\xd4\xd5\xfa\x99\xd1\xb5=\x14\xc6\x92\xe0\xea\xb1\xa6\xd8\xdd\xdd\xfb\x90\xe5\x13\xc4\xda=\x0e\\\x1aZ\ti\xa3\xa9\xd3pf\x9b\xceM\x1bp\x7f\x03_C\xf9#YC\xe4\x9a:9\xa4\xd0\xf8]\xa8^\x07\xcfr\xa7\xb2\xdd\xb3\xcfb\xd9\xb1\xed\xff\x00\xa1\x05-(\xba\xe1\x9e2D\xd3\xfa4&amp;\xfc\xcb\x04\xb0\x91\xa9\xcbg\xfe\\\xd7\xa6Qlq~Y\xd7\xeaR\xf4\'\xc8\xf3\xfd3Az\xb5"\x9a5]\xea\xcb\xe4\xe9b\xa4\xd1\x14\xb85\xf4\xfdP\x92b^\x99\xd34?\x06\xaf\xc1k\xf8\xbeYo\x92\xb2\xc9\xa4h:\x9a\xafr\x19\x84{U`C\xcb\x1fz\xdd\xf6";=\xf5`\xb54\xe7\x1ft4\xd3\xf4\xfb3M[f\xaa\xafD/\x0b\x92\\#P\xe95\x7f\x8eh}Lk\x1e\xc7Q\xaa\xf55[\xb1;gG\x0fT\xdb~\x11\xaf\x8dY\xfc\x9d\x0c\x9f\xae\x98\x95\xb2i\x1a\xb1\xf4\xeb?\x93K\x10\x7f\x04\xa3\xf4@\xe4\xbf\xaa\x89\xac\x1d:\xbdx\xaa\xf2~\xbbP\xb6|\xed\x9e\xc5\x9d\xdb\xeeC}\xbdn\x87\xa7S\xf9"\xb0\xf9:m)I\xfa\x925\xe1\xe9\x95g\x8b\x1d\xb7D\xd1\x1cP\xb5\xdaO%\xd9\xa3\xa6\xe6\xd1\xd3\xe9z#tuQ\xa9\xd9\xd2\xca\xb5 \xc5\x8af\xa4\xd2\x8c\xa4?\xf2;#\x8d?\xe8\x9f\xe3\x05\xfa$\xaa\x84\x92\x92d\x91\xd1A&gt;\xa3&gt;\x17g\xbe\xd1\xe4\xf1\xf6\x10\xa8x\x18\xb8\xecH\xa1\x8f\xb2pS\x83\x8b4\xf4\x9e\x94(\xea\x13\xbb\x1b\xca5\x95~\'\xc1X\xa3KFS\xa5\\\x1d7L\xe3+\x12\xc5\x1ddnTi\xb7\x19\xc4\xd3\xd4N*\xdf\x83\xac\xd7\xc7\xa53N^\xe5\xfd6\x99\xab\xcc~\x11,\xb2\xc5\xf8\x1d\x02\xb9jK\xf5\xdc\xb9\x17\x07\x17\xde\xb9\xd9\xbe\x07\xb6|o\x1f\xb1\xeeu\tx\x1avj\xc7\x81*\xb3N\x1e\xb9%\xfb4\xb4T"\xb0\x88\x96u\x9av\xac\xfcfF\x7fO$\xe4\xd9\x17\x91&lt;\x1a\xcb\x8f\xdcEm[\x17,\xe2\x8e\x8a&gt;\x9d9\xcb\xdd\xf7G\x91v{n\xb6cy/\xb5\x0e\xdf\x7f\x83\xa8X\x1f\xe6\xc9\xc6\xe8\x9c}(\xe8\xb4\xfdm\xca\xb0\x8a\xa1J\x9eK&amp;\xbdp\xa3\xa8\xd3p\x9f\x05\xd0\xc4/\xc4\xd4w\x1d\'\xe6\xa8\xb6\xacO\xc9\xcb\x8f\xc9\xa7\x0fF\x9cc\xfa\xee\x8f"\xf3\xf6d\xfb\x91\xc2/=\xc8\xac\x1a\xa94\xcdH\xd4\x90\xcdK\xc6\x0e\x9bO\xf8\xf4\xa2\xbfD\xd8\xa0\xda\xba\xe0\x84\x1bD\x0e\xbe9\xba\x1a\xf06\x88\x94\xfd)\x91\xce\x92~\xcco%\xac\x1d&lt;\x1e\xa6\xb4P\xfb\xa3\xc9t\x87\xc7{\x18\xfbQ.\xf8\xa1\xb2n\xd3&amp;\xac\xf4\xb3OMJhC\xcc\x94H\xc61\x8d\x0f\x82\x0f2:\xe7p$&gt;H\xa1\'H\xd2\x8bq\x9f\xb1T\xccR?\xf3\xf4\xf19\xb5\x9e\xf8\x96\xe8~;\xe4\xef\x1d\xc9l\xdfr\xe4XD\xe4Hk\xeak\xc1W\xc1\xa1\x1f\xa9\xbd\x93\xa9#\xd4YMM\xfb3\xad\xfcZ\x1f%s\x81pC\x83\xa5\x8d\xc6F\xb4=:\x8e\xcd\r\x07\xab5\x8f\xa6\xc8\xc6:pQ\x8a\xef\x8f;=\xd6\xed\x9c\xe4\xbe\xd4;\xefCX%\x99\x0f\x82|\x9aj\x8d%\xce\xc9z\x8a\xad\xae\x9f\xf4u9i\x13\x8bL\x81\x84\'\x8aH\xe9)i\xa4OAj\xb4\xcd=8\xe9\xaa\xa2]\xf0\xd9\xf8\xdb\xce\xf4I\xf7-\x9b\xfd\xf7\xc4w[2q\xc9\x1c\x1aWL\xa1s\xba\xcc\xdf\xc1\xd4\xa9z\xf0J\xd4\xd1\x18\x8e9\x15\xe0\xe9\xe5D\x18\x89w\xc5\x9c\xb3\x97\xb6i\x0c^\x0c\x9eG\xdbG\x08}\xfc"v\x96\x08N\x9d2\xec\x90\xf9!\xf8\xa1p\xcef\x85L\x9b\xf4\xa6A\xba\xb3\xa8\xbb\xc7\xb1\xe9\xfa\x93\xb2k\xd2\xb1\xe4\x86h\x96(\xd1u$DD\xb7}\x90\xa3\x16&gt;K/e\xbb\xeeo\xbdr&gt;\rV\xe3\x16\xcd9\xc6\\\xa5b\xc0\xf6\x83\xc1tz]\xda\x12\x91+o"\xe1\x1a\xfeH\xc7\xea\xb2j\xf8\x12\xa1\xe5\xd9\x16\xd6Q\xa5+\x8ab\xaeG\xdf\x1e\x0f\'\x91\xac\x9f\xae\xc5\xdc\xb8\x1fw\x82+#\xcb5\xdf\xd2icV\xafi\x0f\x914&gt;\x08I\xaaV7X\xb1\xa8\xcb\x91$\xea\x8dx\xf25\x87\x91r&lt;#\x929|\x9a1J\x08K\x1fb&lt;\x1e\xfb\xfbm\xe5v\xf9&lt;\x88o\xecxbGQ$\x91\xa6\xa3)]\xe4\x8f\x9c\x97l\x97$d)\xd3)\x19Cr\xbf\xd1\x0c\x1dL\x92C\x7f\xff\x00\x05\x82m\x8f\xde\xc5\xcavt\xf2\xb8"\xf0\xfb,[\xc4\xf7\xdd\x16_\x7f\x84&gt;\xf4\x895\x84\x8a\xa4k\xc6\xe2=9\xb7\xf4I\xd1\xa3n\t1,\xb3S\x08|Z\xe4w\x82\x12\xa5E\xd9c\x9d"m\xc9\xa1\xa1e\x13W\xe4\x93\xac\t\xe5\x1d2\xb8#\x8b\xec\xad\xbd\xf6\x8f\x07\x87\xf6\xd0\xf8\xfb\x08\xe5\x8f\x83^~\x98\xa4i,\xb14&lt;6j\xabHG%\xe4\xb2Re\xdbc\x88\xe2\xc7\x8e\x0c\xbeG~\xa6y\xb4t\xb2\xff\x00\x1c{\xafx\xf0/\xc5\xf6p\xcb/\xf5\xda\x91\'\xc7\xd8\xe1\x11\xa2L\xea\x8d\'\xe8y#\xc0\xd1&gt;\x08\xd2|\x89\xa1\x1evK,\xc3[M\xf9Hm\x8f\xc8\x8e\x8d\x7f\x8e6HK\xbd:\x89\xff\x00"\xdd\x8b\xb5,-\x9fz\xc9\'\x94p\x86u\x19d\x14\xad}\x0cL|\x13\xafH\xa3bMy#\xc7\xf4y+%\xd3e\x97D\xab\xd3d\xe5\xec!y\xf6:\'zke\xd8\xf7K\xe9\x1e\x17e\xf6\xc7i}\x88\xab9\x91"L\xd6\xcbK\xd5F\x95\xd5e\x89pV\x19%\xc6J\xa7\x94{\xb2\x1cn\xf9\xd9\xa4\xd17\x82L\xb2&gt;N\x8b\xf0\xd9vx\xd9\x0f\x08\x7f\x8fg\x8e\xd4\xb6o\xec,E\x90X\xb2l\xd4\x9bn\x89B\xe4AR-&lt;"\xda\x1f1\x1f\xe4\xceZ\x13\xf0&gt;\x0628~\x96b\xeb\xc1\xae\x9aH|\xf2$,\x1d\x1bN\x0f\xec\xbe\tp^\xcbe\xd8\x86\xeb\xec,\xb2n\x92K\xdcj\xa2j1M9\r\xbbT\'\x84VFj?L/\xc8\xdb\xc51S\x10\xe4)[\x1b\xbc\x92\x8f\x12G\xa5J\xa9\x9a\xceK\x0c\xbc\x89p\xc7\xca:7\xca_e\xda\xa2O\xb1\x89\xd9n\xf8\xd9!\x12\xef\xc9\x04%\xeb\x9f\xc16kJ\xa2G,_\x97;J\xc7\xc15\xea\xf4\x92\xc1\x1c"\xae\x99,\xd0\xb9*\xd3\x17\x05\x1a\xdc\x08M\x18:\x0f\xfa\xddq\xda\xbc\x12\xe6$\xf7\\\x0bt\x847C\x7fc\x84i\xac7\xeeO\'P\xdd\x9ao"\xb7\xa8F\xebm]N\x12\xe4\\1\xe5\x88WC\xe4^\x08\xb2\x9eI\xcb\xd3L\xd7\x92\x92\xc3"\x84\xb6\xe8\x9a\xa6\x85\xda\xc4G,\x7f\x94Q.vkns\xba\xe7i}\x85\xc9;t\x90\x93\x8c\x12\x19\xd44i+lr\xa6\xdf\xaa\xb2i\xcdI`r\x1a\xb7b\x1a{{"\xeeY#\xc31\xeae\xd1?\xc5\x92dV\x05|\x14to\xfc\xb8\xe0]\xf1\xe5\x1f\xf6O\x91\x1e6\xf0-\x93&lt;\r\xfd\x88\xab"\xfdZ\x9f\x04\xe46k5\xeaf\x95Sf\xb3W\x93\xa6\xe0\x96\x11\x9a\xc9\x1c\x9e2^K\x17$sc\xc6K&amp;\xd3\x8c\x97\xb0\xea\xd52-4Yr\xc9\xd2:\xd4B\xef\x8f(\xff\x00\xb2\\\xf7&amp;r\xd0\xdd/\xb2\xfe\x94i,[%\xc9&lt;#Q\xdc\xd9\xa7\x14\xa3\xc9*\xb6\xe8\xe9\xe4\x9c\xb99$ig\xd4\xff\x00e\\Yy\x1f\xe2aP\xbf*\x1a\xf7\x12Tjc\x03Y\xb1\xa5\xc8\x92\xa3\x83\xa7u\xa9\x0f\x929K\xbe&lt;\x8b\xf3cc\xc6\xfeD!\r\xde\xef\xb5rO\xc20\xa2\x96\xda\x9f\x8b\x1aNN\xd8\x92Qt\xc9z\x15\xdb4\x96o\x14,\xa4K\x8c28\xb4\x88\xbf\xa6K\xf6W?#\xb7K\xd8I\x92YL\xaeD\xa8\xd4\x92\xb6\x9e\xc8_\x8b=^\xac\x1aI\xa7\x1f\x92\x1f\x8a\xec\xa2\xb6\x87\'\xfd\xc8|\x8f\xb5\rR\xfb(\x8a\xf5M\xbf\x08\x95m\xaa\xe91\xb4*pd\xd4H\xbb\xaa^H5I\x12^O\xfe\xccXW\xfb\x11W)#\xca$\x9b\xc1yCt\x89\xca\xe7\x91\xe4\xd0\xd1\xb7l\xd6\x8a\x8b\xc0\xb3\x92\x1f\x94+\xdc\xd3w\x15\xdf\x0eD\xbe\xb91\xf3\xda\xf3[M\xdb\xfb/\xe9\x89\xa6\xaa\r\x8fmo\xc5\x8f\x16\x8d?\xae,\x94\x1c\x93EF\r%\xe0\xd1\x97\xad\t\xe6\x9b$\x92\xe3\xc9\xc6\x0f(\\\xc8\xe2\x86\xb08\xda*\x956kA\xfa\xad\x1aZ-\xd0\xb4\xfd+\x06\xad\xa9g\xc0\xa3dZ\xc1\xa7\xf8G\xe3\xbfO\x96G\xfe\x8f/tVvl\xbb\xfb\t[&amp;\xee\x91,%\xbe\xbd\xd3%*\xac\t\xff\x00\x8e\xea\x87);\xafq\xa96\xbc\x1a\x14\x89\xc9E\xa6\xf9\x13RV?;.$\xc6\xf8&lt;\x1c\x13\xaeF\xbdXD\x17\xa4\xf5rO/"K\xc3\x1b\xa6i\x7f\xae\x1f\x1d\xfa|\x91\xe2_;-\xd8\x8e_\xd9J\x91\xa6\xafQ\xcb\xd8\x9b\xce\xfa\xfc3\xcb/\xe8\xf7\x1d\xb9,\x17rQ\x14\xbd1k\xff\x00\xdb%9j:"\xfe\x93\xcd\ra\xb2\x1cQ.R\x17\x0fi&gt;bF4\x8bW\x92uM\xa1\xbb\x15\xf9\xdbA\xde\x9c&gt;;\x99\x05\xcb\x17\xe2\xfb\x97\xda\x93\xa8\xa3K\t\xbfq\xf3\xbe\xbf\x0cI1\xe3M\x93\x92J\xbc\xb3O\xd3\x12Ri&lt;\x89\xf0\xec\xd1\x9eZ\xf0)\xdc\x9b"\xd4\x93#\x86K\x98\xb35!&lt;\x7fC\x8b\xf5Y&amp;\xa8su\x9eO\xe5|r)[x\xf2&amp;&gt;j\xce\x9f\xfdP\xf8\xef\x8f\xe3!*\x8b\xec[#\xc7\xd8\x8a5\x1eh\x7fL+\xb3Ua\x8b\x0c\xd4k\xf8\x8fS\xc8\x9ck\x87d\x9d\xb1+T\x99\x16\xe3$,8\x91\x92N\xacYD\xa3\xc1\xee*^\x07$\x99\xa9*\xb8\xb69\xd9WL\x8a)R\xceFt\x9f\xe8\x8fzu\t\x9c\xc5oH\xafa\xe0_eZL\x87\xd52n\xddvO\xf1g\x13\x7f&amp;\xb7\xfa\xcf\xe8\x94\xaa4E\x97L\x93\xb4\x99\t\\\x11\xcbMx4\x9d\xd9N\x98\xf8l\xfco\xe4r5\xdecCT\x90\xa5\xcd\nn\xc8\xc8\xbc\x9d\x1e4#\xde\xddi\xff\x00b\xfcw\\\x8f\x9d\x97\xd9\x9b\xc1\xa6\xaa-\x8f\xb2\x7f\x8b\x1f\xe6\xfeM_\xf5\x11\x8d\xdex&amp;\x90\xad\x0c\x8f\x83K\xca+\x04q$\xca\xb4K\xf1g7\xf2Vl\x9cnf\xa1\x08\xb2\x92\x12*\x99\xd1\xbb\xd2\xef\x97\xe0/\xc7\xb6\x8a\xfb\x08\x93\xb9P\xf1\x1a\xed\x97\x0c\xd4\x8dM\xd1\xaa\xff\x00\xc4&gt;y\x1dQY\xa2\xb8\x12\xc1\xa4\x95\xab)\x8d:DZi!\xf9Es\xf2S\xc98\xfb"J\x98\xbc\x0f\x9d\xfa\'zo\xbew\xe9G\xfc\xae\xc4Yo\xecp\xac\xd3^\xa9d\x97=\xadZ\'\xa6\x9b:\x87\xe9QHm_\x19\xaeH\xc6\xf2\xfc\x1c\xb1.\x7fB\x8ai\x11\x8d"\x8a\xce8#*cy\x18\x95\x12\xa6\xa8\x9chL\xb1~\x98\xce\x8a5\x07g\x9e\xe9\xbf\xc4|G\xee\xa5d\xdf\x08\xd3U\x17!\xf7J\'T\xf3C\xe6\x8f\x15~J\xaa\x13\xe4\x8e}?%SDSMm\xc39\x1b\xe0\xb45d\xe3\x82\xe9\xedM\xba4t-\xdc\x8d%J\x96\xf5\x8e\xc9\xff\x00\xcf\xc0\xfcv4#\xdb\xbe+$\xb2\xd8\xf1\x04\xbb\xda\xb3\xacU49\x11ce\x90\xe1Q\\"\x84zs\x96]"c\xc1\x17h\x9a\xb1\xe9\xda\xc2\x1e\x83Ti\xe8\xb6\xd3!\x14\xa9Q\x15E!\x0c{\xea&lt;\xd0\xc4\x95l\xb6\xa5\xb7&lt;w]"\x0b\xd54M\xb6\xfb\x97\x05`\xeb4\xae6\x87\xa5$\xae\x84\xd2\xbfq;bj\x9f\xc9\xa7\x1e\n\xc5\x89\x142\xb8d\xd6OM\xd0\xa221\xe38=)d\x8cH\x90*\xb6h\xacl\xb9%\xf91\xf2\x86\x9fj\xeeD\xe9R4\xff\x00\x16\xfe\xc7\x81\xab\x1e\x94Z:\x8e\x9a\x9d\xc5\x1e\x99]P\xb4e\x8f\x93N\x14\x88\xc6\xd1T\x8a\x1a\x1eh\xab\x14\x07\x15L\xa4\xd0\xb0\xbe\x0f\xa5\xd1\x17\xb4;\xa3\xca\x1f,|\xec\xbd\xfb\x17\x1d\xc8r\xb6\xd8\xf1\x14\xbe\xcaw{I*\x1e\x94\\\xac\xf4\xa2\x88,\x14Q\x9c\x8a%]\x08\x97\xe2\xf6X1B\xad\xa1\x81v\xc7\x94&lt;\xc8|\xad\x98\x9e\xcb\x8e\xf7\x88\x89\\\x92&amp;\xf3\xf6\x1e\x10\x92\xa3#=\x90\xf6\x87\x1bQTV\xf2\xe0\xac\x94\xe8\xcf\x02\xa4.H!\x08i\xe0\xa2\x9d\x8b\xf2\x17+\xe4ke\xf6\xa6\xf8F\x9f\xfd1\xe7\xb6\xfb[\xa1\xde6h\xf2\x88\xf0&lt;\x99\xc6\xf6X\xc5\x81\x8cX\x13\xb7\xc1\r\xabg{C\xf2#\xca\xf9\xdd/\xb3\x15\xe4n\xdbg\xe3\xa6\x97\xbf\xdcee\xb2Od\x8c\xed\xe7w!f\xc6f\xe8^FrC\x14\xbb\x97\x92\x1f\x92\xda\xb7]\xafi}0\xb2+\xd4\xe2\x89\xbf\xb4\xf6\xad\x9f\xb1\\\x19T=\x9f\x1bdD8\x18\xd0\xb1_\x07\xc0\xae\x88s\xdbb\xf2C\x94\xbf[,w-\xd2\xb6O\x94\xbd\x8d5\x96\xfd\x87\xcf\xda{\xd0\xf9g\xb2+\x03\xecOh\xf0&gt;O,H\xe1\x9c\x91\xab\x17o\x86C\xf2\xfe\xb6]\xcb\xc6\xd6G\xcb&lt;\xb6,i\xfc\xfd\xb7\xc6\xde\xc3cdm\x97\x96&lt;\xedT\xbb\x17\x03\xe4\xcb,_R"\xc4\x9e6\xbb\x1b/g\xc3!\xcb\xf8\xfbsiF\xbd\xca\xbaD\xfd\xbe\xd2Og\xb5%\x96rG\x91\r\x1e6h\xf6\xb1%{r\xd9\xe4H\xfd\xd9\xcf$l[U\xde\xd8\'\xf8\xff\x00d\x17\xe4\xf6_a\x12\xa7?z \x93m\xfb\x0f\xed\xd8\xf6yB!\xceN\x19&amp;,\xee\xd0\x96V\xd1\xe6[{|\x9c4!W\xb0\xb8\xed\x9f\x82\x17\xf5}\x9a\x12\xac\xb1\x11\xc4&gt;v\x7fc\xc1\xe3g{\xa2\xb2\x86\x9a|\x8d\x15\xb3\xda+;C2\x97\xc0\xd1\xe0Y#\x13(\x8b\x11\xe7j&amp;\xb1\x16C\x87\xf3\xb2\x18\x8a\xd9\x9e\x11D\xdbQ\x8a\xfd\x94\xf0\x89x^\xdfmq\xb32\xecdo\xd8\xf2\x87\x81\xbe\x06\xe8WVUQDP\xcd*\xf5K\xe0\x9b\xa4\x89Zk8co&gt;\x97\x822t[de\xcd\x0bd\xb6\xd4\xe1\x1a|l\x9e\xefl\x8b\x81\x0f\xea\x9b\xf6D?+\xf6Ln\xd8\xfe\xca\x1a\xa2\xc6\xea\xc56\xff\x00\xa4FwK\xc8\xa5R\xf4\x97\xc7\xc1c\xda\xbd\x86.J\xaa\x1f\x0c\xd3\xc4\xbf\xa2Qr\'u\x14E%\x18\xaa&amp;\x9c\x1f\xa9&lt;2\x14\xe2\x85\x89R"s\xb252\xd1\x05Q\xddq\xd8\xb6\xe17\xb2\xc4\x17\xef\xee,\xc52\x96pj\xfe"J)\x12MJ-!e\xdfj\xc0\xf8G\xa5\xa4\x863\x86\x99\xcd\x13T\xd0\x87\xf8\xb3M\xd2_\x04\x9dH\x8b\x17\x02&gt;\rJ\xba^\x11\x1f\xc5m}\x8by\xb7J+\xcb*\xda^\xec\x975\xf6\xdb\xc3#\xf8m\xab\x9aG\x92\\2\x0f\xe9\x8b\x1b\xc8\x96\xe9&lt;vb\x87\xe0\x8b\xc17q\xbf\xd9J\xf9=W7\x06FI\xb4\xbd\x8dWQ\xb4if*\xcbE\x88\x9a\xa9H_\x8a\xdb\x14^{_\x18\x1b\xb92\x1c\xfc!\xbb\xef\xf3\xd9+\xc2\xf7\x1b\xa8\xd1\x1c\xa4\xc7\xf9W\x94\xcb\xfa\x90\xfc\x8b\xf0\xd3\xf7\xc8\xddQ\x1d\x92\xc6\xc8ke\xc2\xfd\x8e$\x9f\xa1d\x83nS\x8b),\x99\xfeh\xbf\x14B?\xe4\x94\x89}T\x92"\xaa*\x85\xb7\xb1.X\xaa\x97\xd9J\x91\x0c&amp;\xfd\xc7\xd8\xfb^\xd2\xfc\xa3\xf0z}^\xa2\r\xc64\xc7\xfe\xeb\xf7"\xff\x00\xcc\xd0\xd7#\x9f\xd5\x05\xf2/\xa9\x89`\xaa\x15\x8e\xc5\x92UO\xdc\xf6&lt;/\x83\xf7\xe0\xc3\xe4z*\xdbLp\x95r8IQ\x18JV($\x85b\xd9\x0f\x97\xf2UEl\xb7b\xa7\xbf\x91\xe1W\xdcJ\xdd\x8a\xea\xfd\xd8\xe9\xaa\x1c\x1cf\xaf\x82\x9f\xf2M\xa8\xb2\xa6\xe9\x0bG\xea\xb6(\xa4*[-\x95X\xfc\xfcmY\x1a\xcf8\x13[*EdIl\x98\x99b\x1f\x91q\x1f\x81\x17^\nx\xad\x91\x85\xbc3%{\xb1\xaf\xb0\xf8b\xc2G\xb6\xdc\xed\xe7\xb1\xb1Y~\n\x1f;\xd5\x94\x92\xc0\xad1\xf2\xf6\xc6\xeb\x02\xe0\xf0{\x8f\x84!\x19\xda\xbb \xb9g\xbe\xed\xfd\x89\xf0\x97\xbb\xee[\xa7\xb2\xe5n\xf9\x17+v{n\xb6\\\x0be\xc4\xbe6{\xa366\xf6\xfa\x8eE\x84\xb7|\x0f\xec&lt;\xb2\xb3\xf6&lt;\xedb\xce\xf0\xe5\x9c\xd6\xcf\xb1m\xe4[\x7f\xcc\xbe\x05\xca\xf9\xdds\xde\xc7\xbb\xfb\x1c\xb6\xc5\xbb\xddv!`|m\x1f"\xed\xf6\xd9Yy\xa1mx\x90\xb9]\x9e{\xdf\x1b\xbd\x9fg\xb9\xe0\x88\xbb\x91\x7f\xad\xac\xf0\xc47\xb4c\x83\xca\xec\xf0\xcf""\xca\x16\x06&lt;FDy\x8e\xdc\x0co{W[\xff\x00\xff\xc4\x00.\x11\x00\x02\x01\x03\x04\x01\x03\x04\x01\x05\x01\x01\x01\x00\x00\x00\x00\x01\x02\x10\x11!\x03 1A\x04\x1202"Qaq\x13\x05#3@B\x81Rr\xff\xda\x00\x08\x01\x03\x01\x01?\x00\xd9}\xb7\xa3\xa2\x18\xea\x84&gt;\xb6*7\xb1\x0f\xdd\xbd.\xea\xbd\x8b\x0e\x8a\x96\xa3\x1dR\x10\xde\xce\x84=\x8a\xae\xab\xfd.\xaa\x87\xb1*7T!\x8d\xecH\xe0{\x11\x7f\xf4\xf9\xdbas[\xf5EF\xf6*\\uTc\xd8\xbd\xc5^\xd7\xfa\xbc\x89Q\xd6\xc2\xa3\xaa\xe6\xac\xbe\xcbm[oU\xb1o[/D\xa9r\xf8\xaa[Q\xcd\x10\xea\xbf\xd4T\xe3;\x9b\xc5P\x862\xe2-V\xf6*#\xba\xacU\xef\\R\xfb\x95~\xc3\xda\xea\x84\x84\\\xbdb\xaa\xea\x85K\x8c\xbe\xd6&gt;}\x86\xbd\xf7T!S\xba*\xb1\xba\xaeEN\x8b\xf4XU[\x10\xea\xebloc\x10\xaa\xcf\xb5P\xa8\xea\xaa\xe8\xa8\xab*\xa1Q\xfboe\xf7*\xb7TX\xb0\xc7D$Y\xda\xf6\xa5\x9b\xe1\x11\xf1u$\x93\xb0\xfcYE\xf0\x7f\x04\xb3\x82\xcdt\\\xb8\xc7E\xbb\xedU\xb1\xf3D\xfd\x8b\n\xd5\xe6\xab\x8av]\xd6*\xec\xfe\x16\xacC\xc6\xf5i\xc8^&lt;\xdc\xa2\x9a\xe4\xd2\xf1\xe1\x04\xbe\xe5\x92\xc5\x89A&gt;\x87\x08\x8f\xc7Wf\xbe\x8b\xd3\x97\x18\xa3\xd8\xa9\xd7\xb2\xbd\xc4-\x8b4[\x11\xa3\xa4\xee\x9d\x88\xc14\xb1\xc24\xe2\xa2\xae\xd0\xe2\xaf\xc1\xc5\xb0,\x8e.\xc3LQ\xb6M]5\xa9\x16\x9a5t\xde\x9c\x9ac\xa2\xaeGE\xb7%\xc5\xed%Km\x8e(\x86\xe9f\xcd\r)I\xaf\xa4\xd3\xd3\x8c`\x93]\n(\xbbwC\xe1\x9c\xd8\x8a\xc1bj\xc8k\x03\xe8\xf24V\xa2x\xc9\xa9\x07\tZ\x89U\x8f\xd9^\xe3\xd8\xba\x11\xd0\xbb\x1b"\x9bx&lt;\x7f\x19\xcd\xf0ix\xea6\xc0\xe2\x91\'dE\xdd\xba,\x1c\xd3W\xe3"/\x11\xfd\x12G\r\x1en\x83\xf5z\x97b\xd3whq\xb0\xc5G\xfe\x92\xc2uuB\xa2&gt;\xe4#\xeb\x95\x8d\x0f\x1d]]\x1a:J+\x08J\xcb(vh\xd6\x9d\xb50\xc8\xbe\x05\x91.\x05\xc2#\xc1\xad\x9d)\x1ar\xbc\xd2\xfc\x12D\xb9\x1cT\x93?\x81\'&amp;y\n\xcd%V:*\xb3\xed\xed\xa4Z\x8cuHT\xb0\xcf\x1fF\xee,\x86\x9aI_\x92\x0b\xd2\x8b\xdf\x93ZX\xc14\xfdI\x89Y"\x0b\xb1!\xe0D\x95\xe2\xd1\xa6\xff\x00\xb9\x7f\xcd\x86\xbb$\x84\xac\xac$\xad&amp;ki\xfa\x9bd\xd7\xa5\xba1\x8a\xb6-\x82\xd5^\xdb{\x17Ub\xcbG\x8d\xa0\xf0F6Bc5^l_\xeb\xc9\x15\x9b\ttv4qtJI)3I}Cx\x1a\xbb/\x8b\x97\xbd\x918\xb6y:N9\xab\x16\xcb\xed[\x95Yz\xa1U\x91\xf9#\xc6\x8d\xe1\x16\xc7ea\x0c\x9bJRd36\xcd8\xab\t#\x0e\x8d\x1a\x9f\x16B9O\xf0K)\x0f\x04\x9d\xd8\xe5\x94r\xb0y:w\x8b$\xad!\xf1D-\xcb\xda\xbe\xc5\xcd-V,4x\xff\x00\xe2\x87\xe9\x12w\x17(\x96\t;GQ\xb3C,\x82\x1c\x8b\xe4\xe5\x0c\x92\xba\x12I*M\x16I\x1a\x8e\xd243\x13R7F\xbc\x1cf\xc9*\xaa\xda\xabm\xb7:\xa4*\xcb\xaa.Q\xa1\xfe(~\x91\xea\xcd\x84L\xd6\x95\xb4e\xf9g\x8a\x95\x90\xe4\xe3\xc2\x15\xdb\x1a\xc1\x16&lt;\xddV\xe3\xc94j\xf2\x8f\x14j\xf7&lt;\xbf\x1d\xbc\xa2qq\xc3~\xc3\xf6\x1fT\xbe\xc4$*.\xc7H\xf2\x8d\x1f\xf1B\xdfd%k\x9d"L\xd5~\xad8\xff\x00\xfa4\x12QF\x9c=R\xf5&gt;\rV\xbd?O74\xdbqw"\xf02\xe3b"\xf2L\xd5\xcc\x91\xa1\xf4\xb6\x84\xd9\xa8\xbdPg\x90\x9a\x95Rt\xefb\xd8\xfd\x94\x84\xaa\xc6\xe8\x97\x07\x8c\xef\xa1\xa7\xfa\x1e)&gt;\x1f\xe8Y\x84\x17\xe4\x86 \x89N:zwn\xc4\xbc\xc8\xfa\x95\x99\xe3j\xc6q\xe4\x8fcb\xc9*+\xa1\xf6O2X\xec\x85\xbd\x7f\xf87c\x95c\xcb\xd0\xf5p\x8dM9E\xe7\xfd\x17T%^\xc7H\x89\x1e\x04\xbdZ1_a\xe5^\x9a\xb8\x84\x98\xb0\xa0i\xe6(\xf3\xf5\x9c\xa4\xa0\xb8\x89}T\xd3\xe9\xb3\xc1\xd4\xb4\xdcK\xe0\xe9\x9ayK\xf4H\xd7\x93\xc2L\x85\xdc2}\xd1\'i\xa2/\xfb\x8b\xf4I\xe5DXh\x9a\xbag\x99\x17\xd2\x17;X\xe9\xddsKm\xecE\xb61\x11T\xfe\x9d/\xa7Q\x1f\x82\xf7\xcd\x8dg\xf4%\xdbi\x16\xbc\xacA%\x1b\x1ev5\xbfhM\x9e%\xde\xaaI\x96\xb4R\x1ff\x9c\xaf\x18\x92\x9aI\x9a\xbeCz\x8c\xf1uT\xad\x92_&amp;kYM\t\xafZ\xfd\x0e\xed\xc5\x88|4yp~\x99\x16\xb3\xdc\xc5\xed\xa4-\x92x\xa2\x12\xa7\x837\x1dV\xaf\xca/\xdd$\xef\xab\x14\xbaW\x13W"\xee\x7fR\x8b~\x99$&amp;\x8f\xe9\xdaK\xe6\xd7\x08f\xb3\xb4$\xcd/\xf1\xc7\xf4ysqM\xa2M\xf2x\xda\x9e\x99\xac\xe1\x8f6f\xb7\xca?\xb2\xdf\xdd\xff\x00\xca_\x02g\x90\xaf\x16J\xde\xa9Y\xf7\xb5\x8c^\xdcV6\xc8BY\x12\xb54\xa7\xfcz\x90\x97\xd9\x89\xa7\x14\xd7\xd8dd\x9b\xfd\x8b\x96i\xb6k\xe9\xff\x00$\x1a\x17\x89+\x9a\x1akKJ1\x1f\x0c\xf2\xe7\xe9\x8cW\xdc\xd3\xcc#\xfa&lt;\xe8\xff\x00ln\xc8\x83\xb3L\xd3~\xa8D\xd6W\x92\xfd\x89\xder#{\rb\xe4]\xcf)\xdbJO\xf0w\xb9\x8b\x8d\x96\xab\xaaB\xd8\xf8\x1b\xb9\x12;&lt;-oT?\x8d\xbc\xa3[R0\x8eY\xa7\xa8\xe5w\xf9"\xf0i4H\x86\x9a\xbd\xc7\xdb\xb9=D\x8f+S\xd5$\x91\xe3\xca\xfah\xf2!\xea\xd2\x90\xd7F\x94/$\x88\xfd)!\xe6D&gt;R\x7f\x92-\xd8\xbd\xe2E\x9e|\xda\xd1K\xee\xebj\xb1\xf2-\xfd\xd1r.6\xc9\xf4\\\\\x89[f\x9c\xe5\xa78\xc9}\xcf#Y\xeaJ\xcd\xe0\xf1\xde\x08\xe6?\x93E\xfd\xcb\xa1I\x13\xd4Q\xec\xf2&lt;\x84\xd3\xb0\xe4\xdb\xbb&lt;i}\x08\xba\x94Zf\xae\x8c\xbdn\xc8\xf14\x1aw\x92$\x91\xc4\x8d&gt;%\xfb#\xc1\xc28\x91\xfdFX\x82\xa5\xa8\x8b\x0e\x8be\xe8\xc7H\x8bky\xe6\x91Ksm\xb3\xc7m\x11j\xc6\x9c\xb2\xcb\x92\x97\xa6&amp;\xb6\xb3\x94\x9d\x9b\x19c\xc4\x9a\xe1\x91\xb0\xf4\xe2\xd9\x08\xd8\x90\xd6M?\xfa\xfd\xd1\xf0\x7f\xf4y\xb2\xf5j(\xfd\xabj\xcb\x81\xfe=\xa4\xb1\xb5\xb1\x91BV\xda\xce\xd1\xa0\xdd\xf9\x17\xc0\x84\xb2BW\x92&lt;\xb9\xfab\x92yb\xcbw\x14OM\x99\x07\xe8\x99\xa158\xf2,\x8b\x17\x19{I\x9axz\x9f\xb1!\xab\x8e\xd1R\x7fdN\x7f\xc9\xa9)n\x97\xb0\xdd"\xb7H\xe4\x82\xdd7\x8aia\x91\x96\x19\x1eM\'fyZ\x8ez\xbf\x84i\xc6\xe6"\xd2\xb94\x89\xa3\xc4vL\x8b\xe2\x93}\x11yd]\xa4\xc5O/Qi\xe8\xcf\xf3\x84F\x8bc;^\xc2X\x17UT|\x0cK"\xdd1,\x91V\xb0\xb0\x84\xecKRQ\x8bw\x1bm\xb6\xcd&lt;A\xb2Z\x92\x9b\xb9\xeb\x93j\xec\xd6\x8a\xf4\xc5\xa3\xc4\xba\x99\x8c\x1e\xac!\xb3\xeez\x92\x9aW\x13\xbaG\xdc\xfe\xa3\xab\xea\x94`\xba\xcb\xaa\xaa\x19k\xba\xdbb#\xb9\xbaAq\xb9\xbb\x0f&amp;\x9a\x16\x19\x1e\x06\xd2\xe7\x93Q\xfd\x14\xd3NP\x9a\xfc\x0e-QK\xd5\x0b\x1e7\xc9\x1c\xc4l\xe4g\x91?D\xe2\xd1\xa34\xe0\x8f#\xc8ZP\xfc\xd8\x94\xde\xa4\x9bo;;T\xe8\x93\xc0\xb7\xa5\x91b\xbdU\xf6%\x94%\x9d\xd2"AYR\x0e\xe8\x9f\xdc\x9b\xc2\xa4%\xe8\xf5?\xc19\xfa\xad\x81d\xb3\x8c\x0f\x19f\xe2xL\x93\x17\x06o\x93\xc8\xce\xa1\xa5\xae\xe1\t~\x11\xa9\xa9-Y]\x91[-Y\x16\xdd\xd9\x15E\xb2C"\xb8\x16\xe9rF\xb0v\'yap\x89\xf2\xa9lQ\x13\xf8\xc5\x1e?\xc4x\x8d\xc6\xfb\x14\xb0\x89\x1a\xcb7%Ho\x91v-\xd6-EY\xb1\x11[\x9b/sN\xd7\x1cn\xa8\x99\x16\xac\xd0\xf9#\xc9\x18\'\x12pk64\xe1w\xc1\xa8\xach\xddD\x94\xad\x0b\x91m\xbf\xc1~\x91gcU^,\x9ft\x86\xde\xcb\x92\x10\xb7*\xaaI\xd9\x0c\x8a\x17\x1b\xa4\xf1M(\xdd\x93MU\x12\xe4\x89\x19Y\x12\x92\x92\xb34\xd4}6\xee\xc6\xaf&amp;\x9b\xc2F\xa4\xac\x91\x1c"\xec\xe8\x9cpjE\xa6\xce\xc8\xf1\xba\xc4\xb9\x11l{H\x91\xd9\x15\xc6\xf9\xb1rh\xac\xa2Y\xd3\xe0x\xab"\xec\xcb\xdd\x16\xb9\tI`\x9bw\xc9\x06?\xa8\xb9t\xf2\xd0\x89\xfcMYe\xed\xb6\xc9v.=\xb7\x847q-\xaa\x8f\x81\x8a\xf74"\xc96\x95\x89*!\xab\x8e=\x91v\xc3\x11\xea\xb0\xda\x93!\xf7\x11k\x89\n\xf7%\xc3F\xbaWbB\xda\xa9.\xc5\xc5\x19obLYdR\xdf\'\x8aG\x93M\xd9\x91\x9cm\xf5#Z\xd7\xc3\xa4{B\xa4\x97e\xcc\x89;\xa14\x92\x13.C6\x17\xda\xc3\xe1\x9a\xf8\x90\xb2\xf6\xda\xb2\xf6ztn\xc8\x96H\x8b\x8d\xf3y\xa4\x15\xcd(\xfa\x996\xd2X%\x97\xc5"\xec\xc7\xfa\x1d,$&gt;\x05!K\x04Zd\x18\x9d\xecH\xf2\x12\xf5\x91\xd9}\x92\xe4\xed\n\x8f|\x9e\x06Ag{\x1ei\x05\x83A\x1a\xaa\xe3GDy\x1a\xb9a\xe2\xc8\xe8\xe0tBD"\xactK\'\x93\xf3\x91\x1d\xd6\xa3\xe4K(\\{-\xde\x91\xc6\xf9\xf1E\x96$h\xbc\x13\x92\xb3\xb3%H\xf2\'\x81\x92gB:-\xc5#{\x9aj\xd1t\x92&lt;\x95i\x91\xe2\x9c\xee|\x8b\x9a=\xaa\x92\xe0dU\xda\xf6$\xe9\x04#F6F\xad\xafq\x8cO&lt;\x179\x1a\xa2\x17\x03\x17$#\x9b\x8b\xa1\x8d\x9eVf%d\xb7\xbe(\xb9:\xdfrn\x90[{\xa3vC\xa6\x9a#\x12.\xc9\x92\xa3B\xec\\#\x846$Z\xccC\xe2\xe7\xe4\xd1\xb3e\x92\x1acXg\x92\x9a\x9d\x1e\xe7E\xcf\xb1\xd0\xdd\xc4\xae\xfd\x89\xe1QrC\x94[\x04xw%\xcd\x11\x05yS\xaa$4.\x08\xcb\xa6\'cEE\xe5r&gt;.\x84\xd8\xdd\xd1\xe5/\xa9{\r\xd1ru\xb1\xd6O\xaaAw\xecO\x9aA]\x90WhxF}.\xc3\xac]\x9b\x12\xbdc\xc0\xd2t\xb6K\x1aWR\xe0\xe5\x16\xb0\xcf3\xe5\x1fbGb\xafutdE\xb2\xd5xC\xcd4\xd6\r$O\x81b.\xc4\xb9t\x84{\xb8\xf9\x16\x12\xaa\xe0u\x82RVf\x92\xb5\xae\x87G\xc1\xe5\'u\xecK\x81\x11\xdf*A_\xd8\x93\xa7h\\\x1a&amp;\xa5\xd2D"\xda\'\x07\x17D\xdaHbb\xe5S\xfeFZ\xe9\x08\x82\xc9\x08\xa2\\\x1c\x0e\xd6&lt;\x94\xbd;]e\xc5!\xbeL\\\x91^\xc4\xf9:d\x15\xdd4V\rSK\x84k\x96\xc9\xda\x19\xd9\xd5\xe8\xf8\x1f\xfc\x88D\x13\xbd\xc8Q\xac\x8e\xc7\x93\xf0\xf6\'\xc0\xb8!\xc0\xc4=\x97\x12\xbbO\xd9\xe5\x8c\x82\xb2\x11\xa7\x84\x8dG\x93O\x84\x8de\xf4\x8f\x02D\xba\x1f\'H\xb6N\x99\xcck\xa7\x91,&amp;p\xc9]]\x16\xba&lt;\x85\xf4=\x9dl\xd4\x13\x16\x11q:5GH\xab*\xad\xb3vGB\xbbbDyB\xe0n\xf2!w\x84N\xf6%\xc9\x17Gk\xa1t.\xce\x99\x1c\xa6qjiE\xd91.\xbf\x04\x9d\xb9\x1b\xb9\xc1\xaa\xef\x19\x0f\x97\xbfPB-N\xea\xf9"\xae\xfd\x99\x0f\x08\x82\xa49\x12\xc0\xd7\xd4\x88\xa7\x8b\x12\x894\xee\'m\x9c$.\x18\x99b(\xd3K\xd0\x8b\xfaY\xad\xaaiI\xb4\xc6M}2\x1f/|\xc5\xc2:[R\xc0\xc8,_}\xc6\xec\x8eG\xc9\x15eM&lt;\xc9\x08\x95\x94\x8fU\x8f\x918\xa4\x86\xaf\x94E\x9d\xd1\xf0\xa8\x9eD\xcb\xe7\x06\x8e\xa2\xb7\xa5\xb3WYqs\xd7\xeaf\x93V.;\xd9\x92\xf9K\xf7\xbeb\xe1\x0be\x8b\xd1q\xecM\xe0BWw\xae\x97\xc8J\xe3_ZL\x8cQt\x8dgr*\xe9\x9c;\x08\xe7\x83\xec\x8b\x1f\xf5H\x89\xfarI\xdcQWF\x9cp\xac\x7f\xe0\xd2h\x97\xce_\xbd\xf3&gt;\xdb_\xb7\'v&gt;\x08.\xeb\xa5\xf2Bb\xf9!4\x8fJ\xb3\x918\xfa\xb2\xc8AEd\x9a\xc9k\t\xe5\x0c\\\x1fj%\xd8\xdfE\x9d\xf8 \x9d\xc8\xac\x18\xb0\xd5\xcdEi\xcb\xf6-\xd3\xe5\x1d\xaa-\x9f\x7fe\xf1F\xc8\xacWO\xe4\x85\xc3#\xf3"\xb2M\xb6\x90\x92l\xf4`\xd5\xd3\xb2\x1a\xfaI]:#\xb4&gt;Y|\x11Wh\x8e\x95\xf2\x7f\x15\xb2+$\x86pk\x7f\x96[\xe7\xc9n\x0b\xd5\xd1\x8b\xd8\x9b\xc0\xac%wO\xb5 \xfe\xa4tA}b\xc0\xd3\x12q\xb1\x92i8\x8f(q\xbeG\x811\xf2\x86\x99fi\xc2\xf6b\xb2.+\x97\x1bV\xb9\xe4+j\xcb|\xb3-\xef\xd9\x97#vV \xbb\xaa#\xd5\xc5\xf1D&gt;hK\x81+\xc92\xc8IXd\xd5\xa4\xce0\xcdA1&gt;)\x18\xe4\xd2\xed\x10,\x87eGk`\xf2\x7f\xcd*=\xaf\xe6Z\xcd%\xb1\xf0uG\xbd\xf0,\xb1\xe6HK\x0bb\xe5\x10W\x81\xa7\xf3\x1c\xf8D[\x1b\x1b\x1b\xc1\xa9\xd0\xf24\x9ab\x17*\xb0x#\xc1s\x91\x8d`\xf2\xb1\xaa\xf7\xff\x00\xd9\xddY\xd2\xa3\xf6&amp;\xc5\x82*\xf9\xda\x8d\'\xf4\xa3O:\x84\x12\xe4\xc5\x1f\x14\xd4\xe4k\x17\x10\xd5\x9dQ\x07\x92.\xe8\xb0\xb8f,3\xcb\xbf\xf2o_#\xb7\xb1\xd2\xd7\xf6\x1eIa\x10X\xdd\tX\xd1Ww"\xa5bX\xb0\x96\t\x12yd\x9d\xee&lt;*I`B\xa4M9u\xb1\xb7\x93\xca\x92s\xdb\xf6\xa49\x90\xb6\xb2\xfb\xd8\x95\xd8\xee\xd8\xb0\x96\xe4\xcf\x1b(\x83\xc1\xff\x00W\xb5\x1a\'\x8b\x89\x8d\xdc\xe0y\x17$N\x8c\xdd\x9aN\xcc\x8bW.6\x91\xad\xe4[\x08\xd4w.\'\xb1\xf0C\x96.\xea\xfd\xa9p,\x10\xcc\x98\xe9\xd6\xc4\xcf\x16Xdb\xad\xc9jK\x06\xa1t_6$_\x05\x88\xe0Y\x19\x1c23\xb3?\x99\x1a\xba\xdd"M\xb2b\x10\x9d_\x04;\x13\xab\xda\xb6\xda\xec\x93\xb4H,^\xb6Ke\xcf\x1fS\xd3,\x8bUYd_U\xac\xe9$j;\t\x8d\x8d\x8a\x91.7v!\xbeK\xb2Ld\xce\xe8\x9d\xe9q\xf0C\x86.\xf6*\xe4[\x18\x87\x99$p\x92\xdf\xcb\x16\x08\xea5\x96\xcd\x0f"\xd8l\xfeX\xda\xe3\xd6Vf\xa4\xee\xc6\xf2\x8e\xc6\x8e\xc4^\xc3\x98\x9d\xe4\x8b\x92\xe4d\xa91\xf3\xb1\x0f\x82\x1clt{\xdf\xd8\xe1\x10\xcb\xbf\xb0\xaa\x9bG\xad\xa8\xf2)Ro"\x96(\xb9/c\xd4\xd8\xc8|\x96\xdb\xdc\x9e\xe6\xf0C\x84\'q\x8fc\xdd\xcc\x89pC\x0b\xd8\\\xd5\x17B\xa4\xb9\x12\xc0\x9a\x1b\xc0\xeb\x1f\x92\xabC\x19:\xfd\xeb+\x0b\x8a\xb7W\xbe$\xb9K\xdcT\xb8\x86\xae\xe9a\x8e\x89\x0b\x0cn\x8e\x8c\x9e\xe6u\xb9\x8a\x99\xac\x85\x81fW\xf6\x96\xc5D[\x03\x1f\x15C\xea\xad\xbcQ\x933\xbb\xaa\xf5\xec\xfc\x98\xdd\xa2AYU{j\x97\x17W\xa6\x1a\xd9.j\xd5\xe8\xc9\x8fnG\xc29\xa2\xf6\x1b\x12%\x96\x96\xfe=\x84t!Kwb\xe2\x97\xc0\xf2\x86K+w\xd8x^\xdb&gt;\xc5\xbe\xbfmU&amp;\xc8\xa2TE\xdd\x15{buwC\x1e\xcbQ"|\x16\xd9g\xb9|\x87\xc3!\x95\xb7\xba}\xaa\xc8\xd6\xee\x8e\x88\xbe\xc7\x84\xc4t\x7f\xf2g\x91\x8c{\x1d\x17(\x9f\x1e\xd3\x17\x04\xb9B\xc2\xad\xa8\xb6\xb1qT6:-\xb2\xe0CxG\xd8\xe8\xe4cC\xdb\x0f\x91\xa9\xbdQ\x0c\xfc\x1c\xcb\xfd\x0b\x8e\x89\xda\xa9\xd2\\R\\\x0b\xa1\x1cdm\x0c|\x0cu\x83\xbc\x8dN\xb7:\xf2\xc8\xe5\x8f\x82&lt;{k.\xfb]-\xba\\\xaaM\xe1\x11\x8d\xc8\x8e)+\xb2K%\x90\xf0:;t"\x1f&amp;jr\xb7\\\xe6\x9c\x11\xc2\xb9.\x90\xb6t\xf7\xc6\x88\xf4\xd9+\x92\x8d\xac\xd39[o_\xfa\xa3\xe0\x8b4\xf9l\x94\xae\xd9\x06\xa4\xad\xd9,1\xf0K\x9d\x90\xec\x9f5U\xb5yv\xa2\xcc\x98\xbd\xa7\xc1\x1eX\x8d?\x92\x1b\xbc\x9b\x16SG\x18\xab.\\\xb9s\xbat\\\x83\xe6\x91v\x92%\x96\xc5\x1b\xc5\x93Ve\xeb\x0e\t\xf3\xec\xc5f\xe3dW\xb6\xcf\xfae\xf2i\xbc\xde\x91\xc3%\xf2h\\\x8f\x9a\xb6f\xd4E\xc4\xcb\x11\x8b\x8b\xfd\xa1\x0e?Le\xf9\'\x1bE3K-\x9a\xb8\x9b\x1d\x19\x1e\t&lt;\xfb\x0b\x91a\x13\xe8^\xe4#y2q\xb3\x12\xb4n%\xf4\xdc\x8a\xbd\xbfe\x9f\xael\xec\x95\x1d/\xc5"1`\x86Y\xa8\xb1\xa6\xff\x00\x04U\xc7o\xe1\xf4\xf7ry\xd3\x84E\xf4\xdc\x97#\xa3 \xbe\x94&gt;vX{[\xbb\x11\xd7\xb4\xb8#+46\xa4\xcc-\x1b\x1e\x95\xfc\t\xfeD\xeda/\xa2N\xdd\xa2VC\x90\xe5L\x0f\x19\xa2\xe0\xed\x97\x13\xb0\xb5\xbe\x94\x88\xeaE\x1e\xb8\xbe\xc9j$\x87;\xb2C\xa3!\xf1C\xcc\xa5\xb9lU\xef\xd8e\xadD\xec\xc5\xa8\x9cl)G\xd1\x15q\xca*\xed1\xeb;\x0ewe\xc7\xc0\xe8\xb8\xa2\xe0l\xc5/K\x8d\x97\xa38\x19\x1e\x10\xfeN\x9d\x0bt\xb8\x11z%\xecK\x94\x84.+\x95\xdb\xd9\xd2\xa3\xea\xa8\xea\x97\xda\xe9z:.\x11\xdb\xf6d\xf2\x95\x11\x9fg\x92\xdb\x1f\xb2\x89;E\xd5Q\x0e\x9d\x16\xafh\xe9\xfe\xbd\x8cQ\xe6TB\xa7B\xda\xc5E\xbd\xd1\xba\xc4\x9f\n\xa8y\xa3\xe8\xbe\xc6\x85\xccG\xf1\x7f\xaa\xbd\xb8\x10\x8bQ{\x0cT^\xda\xe4F\xa7[._k2/\x94G\x84\xff\x00U\xebm\xaa\xb6\xad\xaf\xa3\xb67\x96\x85N\x87V:\xb3\xb1\x13\xcb\xfd\x17\xdc\xebv\xf8\x11\x1f\x92%\xf1\x91\xd1\x9d\xa8Gg\xff\xd9\r\n--a942d3c5cedcd9e507487bfff40b8951\r\nContent-Disposition: form-data; name="additionalMetadata"; filename="additionalMetadata"\r\n\r\nabcde\r\n--a942d3c5cedcd9e507487bfff40b8951--\r\n' 
 </msg>
<msg timestamp="20250205 13:17:53.882" level="INFO">POST Response : url=https://petstore.swagger.io/v2/pet/75ac93e4-e3aa-11ef-b24c-744ca1d2e576/uploadImage 
 status=404, reason=Not Found 
 headers={'Date': 'Wed, 05 Feb 2025 10:17:53 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT', 'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization', 'Server': 'Jetty(9.2.9.v20150224)'} 
 body={"code":404,"type":"unknown","message":"java.lang.NumberFormatException: For input string: \"75ac93e4-e3aa-11ef-b24c-744ca1d2e576\""} 
 </msg>
<msg timestamp="20250205 13:17:53.882" level="TRACE">Return: &lt;Response [404]&gt;</msg>
<msg timestamp="20250205 13:17:53.882" level="INFO">${RESPONSE} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20250205 13:17:52.997" endtime="20250205 13:17:53.882"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE.text}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:53.892" level="TRACE">Arguments: [ '{"code":404,"type":"unknown","message":"java.lang.NumberFormatException: For input string: \\"75ac93e4-e3aa-11ef-b24c-744ca1d2e576\\""}' ]</msg>
<msg timestamp="20250205 13:17:53.892" level="TRACE">Return: '{"code":404,"type":"unknown","message":"java.lang.NumberFormatException: For input string: \\"75ac93e4-e3aa-11ef-b24c-744ca1d2e576\\""}'</msg>
<msg timestamp="20250205 13:17:53.892" level="INFO">${RESPONSE_PAYLOAD} = {"code":404,"type":"unknown","message":"java.lang.NumberFormatException: For input string: \"75ac93e4-e3aa-11ef-b24c-744ca1d2e576\""}</msg>
<status status="PASS" starttime="20250205 13:17:53.892" endtime="20250205 13:17:53.892"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE.status_code}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:53.892" level="TRACE">Arguments: [ 404 ]</msg>
<msg timestamp="20250205 13:17:53.892" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:17:53.892" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:17:53.892" endtime="20250205 13:17:53.892"/>
</kw>
<kw name="Convert To String" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE_STATUS}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:53.892" level="TRACE">Arguments: [ 404 ]</msg>
<msg timestamp="20250205 13:17:53.892" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:53.892" level="TRACE">Return: '404'</msg>
<msg timestamp="20250205 13:17:53.892" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:17:53.892" endtime="20250205 13:17:53.892"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${RESPONSE_STATUS}"</arg>
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:53.904" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:53.905" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:53.905" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.902" endtime="20250205 13:17:53.905"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:53.906" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:53.906" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.906" endtime="20250205 13:17:53.906"/>
</kw>
<doc>Test Description:Update pet image with formdata using non-existing pet id 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:17:52.974" endtime="20250205 13:17:53.907"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:17:53.909" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:17:53.909" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:53.911" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.909" endtime="20250205 13:17:53.911"/>
</kw>
<msg timestamp="20250205 13:17:53.912" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.909" endtime="20250205 13:17:53.912"/>
</kw>
<status status="FAIL" starttime="20250205 13:17:43.135" endtime="20250205 13:17:53.912"/>
</suite>
<suite id="s1-s1-s2" name="02 PUT pet" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\pet\02_PUT_pet.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:17:53.929" level="TRACE">Arguments: [ ${CSVFILE}='pet.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:17:53.931" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:17:53.931" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:17:53.932" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:17:53.929" endtime="20250205 13:17:53.933"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:17:53.933" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'pet.csv' ]</msg>
<msg timestamp="20250205 13:17:53.933" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_03'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_04'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_05'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_06'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_07'), ('Type', 'Negative'), ('Description', 'Create pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_08'), ('Type', 'Positive'), ('Description', 'Update pet name and status with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_09'), ('Type', 'Negative'), ('Description', 'Update pet name and status with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_10'), ('Type', 'Negative'), ('Description', 'Update pet status with formdata using invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_11'), ('Type', 'Positive'), ('Description', 'Upload pet image with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_12'), ('Type', 'Negative'), ('Description', 'Update pet image with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_01'), ('Type', 'Positive'), ('Description', 'Update an existing pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet by providing non-existing id to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_03'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_04'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_05'), ('Type', 'Negative'), ('Description', 'Update pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_06'), ('Type', 'Negative'), ('Description', 'Update pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_01'), ('Type', 'Positive'), ('Description', 'Retrieve pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_02'), ('Type', 'Negative'), ('Description', 'Retrieve pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_03'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by valid  status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_04'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by invalid status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'), ('Type', 'Positive'), ('Description', 'Delete pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'), ('Type', 'Negative'), ('Description', 'Delete pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:53.933" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:17:53.933" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<status status="PASS" starttime="20250205 13:17:53.933" endtime="20250205 13:17:53.933"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:17:53.942" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:17:53.942" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<msg timestamp="20250205 13:17:53.942" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.942" endtime="20250205 13:17:53.942"/>
</kw>
<msg timestamp="20250205 13:17:53.942" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.928" endtime="20250205 13:17:53.942"/>
</kw>
<test id="s1-s1-s2-t1" name="TC_PUT_pet_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:53.942" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:53.942" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_pet_01' ]</msg>
<msg timestamp="20250205 13:17:53.951" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Update an existing pet with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:53.952" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_01'), ('Type', 'Positive'), ('Description', 'Update an existing pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{...</msg>
<status status="PASS" starttime="20250205 13:17:53.942" endtime="20250205 13:17:53.952"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:53.952" level="TRACE">Arguments: [ 'Test Description:Update an existing pet with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:53.952" level="INFO">Set test documentation to:
Test Description:Update an existing pet with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:53.952" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:53.952" endtime="20250205 13:17:53.952"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:53.952" endtime="20250205 13:17:53.952"/>
</return>
<msg timestamp="20250205 13:17:53.952" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Update an existing pet with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:53.952" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_01'), ('Type', 'Positive'), ('Description', 'Update an existing pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{...</msg>
<status status="PASS" starttime="20250205 13:17:53.942" endtime="20250205 13:17:53.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:53.952" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:53.952" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:53.952" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:53.952" endtime="20250205 13:17:53.952"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:53.962" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:53.962" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:53.963" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:53.952" endtime="20250205 13:17:53.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:53.965" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:53.965" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:53.966" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:53.964" endtime="20250205 13:17:53.966"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:53.967" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:53.967" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:53.967" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:53.967" endtime="20250205 13:17:53.967"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:17:53.967" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:17:53.967" level="TRACE">Return: 1738750673</msg>
<msg timestamp="20250205 13:17:53.967" level="INFO">${SECS} = 1738750673</msg>
<status status="PASS" starttime="20250205 13:17:53.967" endtime="20250205 13:17:53.967"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${ID}</var>
<arg>${PET_02_ID}</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:53.972" level="TRACE">Arguments: [ 9223372036854766780 ]</msg>
<msg timestamp="20250205 13:17:53.972" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:53.972" level="TRACE">Return: 9223372036854766780</msg>
<msg timestamp="20250205 13:17:53.972" level="INFO">${ID} = 9223372036854766780</msg>
<status status="PASS" starttime="20250205 13:17:53.971" endtime="20250205 13:17:53.972"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:53.974" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.id' | 9223372036854766780 ]</msg>
<msg timestamp="20250205 13:17:53.974" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:17:54.002" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:53.974" endtime="20250205 13:17:54.002"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${NAME}</var>
<arg>NAME${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:54.002" level="TRACE">Arguments: [ 'NAME1738750673' ]</msg>
<msg timestamp="20250205 13:17:54.002" level="TRACE">Return: 'NAME1738750673'</msg>
<msg timestamp="20250205 13:17:54.002" level="INFO">${NAME} = NAME1738750673</msg>
<status status="PASS" starttime="20250205 13:17:54.002" endtime="20250205 13:17:54.002"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.name</arg>
<arg>${NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.009" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.name' | 'NAME1738750673' ]</msg>
<msg timestamp="20250205 13:17:54.009" level="INFO">Update JSON with expression: '$.name'</msg>
<msg timestamp="20250205 13:17:54.038" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.009" endtime="20250205 13:17:54.038"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${CATEGORY_ID}</var>
<arg>101</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:54.040" level="TRACE">Arguments: [ '101' ]</msg>
<msg timestamp="20250205 13:17:54.040" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:54.040" level="TRACE">Return: 101</msg>
<msg timestamp="20250205 13:17:54.040" level="INFO">${CATEGORY_ID} = 101</msg>
<status status="PASS" starttime="20250205 13:17:54.039" endtime="20250205 13:17:54.040"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.category.id</arg>
<arg>${CATEGORY_ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.042" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.category.id' | 101 ]</msg>
<msg timestamp="20250205 13:17:54.042" level="INFO">Update JSON with expression: '$.category.id'</msg>
<msg timestamp="20250205 13:17:54.063" level="TRACE">Return: {'category': {'id': 101, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.041" endtime="20250205 13:17:54.063"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${CATEGORY_NAME}</var>
<arg>NEW.CATEGORY.NAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:54.063" level="TRACE">Arguments: [ 'NEW.CATEGORY.NAME' ]</msg>
<msg timestamp="20250205 13:17:54.071" level="TRACE">Return: 'NEW.CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:17:54.071" level="INFO">${CATEGORY_NAME} = NEW.CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:17:54.063" endtime="20250205 13:17:54.072"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.category.name</arg>
<arg>${CATEGORY_NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.072" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'string'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.category.name' | 'NEW.CATEGORY.NAME' ]</msg>
<msg timestamp="20250205 13:17:54.072" level="INFO">Update JSON with expression: '$.category.name'</msg>
<msg timestamp="20250205 13:17:54.105" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.072" endtime="20250205 13:17:54.105"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHOTOURLS}</var>
<arg>https://abc/002</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:54.109" level="TRACE">Arguments: [ 'https://abc/002' ]</msg>
<msg timestamp="20250205 13:17:54.109" level="TRACE">Return: 'https://abc/002'</msg>
<msg timestamp="20250205 13:17:54.109" level="INFO">${PHOTOURLS} = https://abc/002</msg>
<status status="PASS" starttime="20250205 13:17:54.109" endtime="20250205 13:17:54.112"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.photoUrls[0]</arg>
<arg>${PHOTOURLS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.112" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.photoUrls[0]' | 'https://abc/002' ]</msg>
<msg timestamp="20250205 13:17:54.112" level="INFO">Update JSON with expression: '$.photoUrls[0]'</msg>
<msg timestamp="20250205 13:17:54.138" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.112" endtime="20250205 13:17:54.139"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${TAGS_ID}</var>
<arg>201</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:54.142" level="TRACE">Arguments: [ '201' ]</msg>
<msg timestamp="20250205 13:17:54.142" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:54.142" level="TRACE">Return: 201</msg>
<msg timestamp="20250205 13:17:54.142" level="INFO">${TAGS_ID} = 201</msg>
<status status="PASS" starttime="20250205 13:17:54.140" endtime="20250205 13:17:54.142"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.tags[0].id</arg>
<arg>${TAGS_ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.144" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.tags[0].id' | 201 ]</msg>
<msg timestamp="20250205 13:17:54.145" level="INFO">Update JSON with expression: '$.tags[0].id'</msg>
<msg timestamp="20250205 13:17:54.165" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.143" endtime="20250205 13:17:54.165"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${TAGS_NAME}</var>
<arg>NEW.TAGS.NAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:54.171" level="TRACE">Arguments: [ 'NEW.TAGS.NAME' ]</msg>
<msg timestamp="20250205 13:17:54.171" level="TRACE">Return: 'NEW.TAGS.NAME'</msg>
<msg timestamp="20250205 13:17:54.172" level="INFO">${TAGS_NAME} = NEW.TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:17:54.165" endtime="20250205 13:17:54.172"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.tags[0].name</arg>
<arg>${TAGS_NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.173" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'string'}]} | '$.tags[0].name' | 'NEW.TAGS.NAME' ]</msg>
<msg timestamp="20250205 13:17:54.173" level="INFO">Update JSON with expression: '$.tags[0].name'</msg>
<msg timestamp="20250205 13:17:54.196" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.173" endtime="20250205 13:17:54.202"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${STATUS}</var>
<arg>pending</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:54.204" level="TRACE">Arguments: [ 'pending' ]</msg>
<msg timestamp="20250205 13:17:54.204" level="TRACE">Return: 'pending'</msg>
<msg timestamp="20250205 13:17:54.204" level="INFO">${STATUS} = pending</msg>
<status status="PASS" starttime="20250205 13:17:54.202" endtime="20250205 13:17:54.205"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.status</arg>
<arg>${STATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:54.206" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]} | '$.status' | 'pending' ]</msg>
<msg timestamp="20250205 13:17:54.207" level="INFO">Update JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:54.231" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'pending',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}</msg>
<status status="PASS" starttime="20250205 13:17:54.205" endtime="20250205 13:17:54.231"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:54.233" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:54.233" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:54.233" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:54.232" endtime="20250205 13:17:54.233"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:54.235" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:54.235" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:54.235" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:54.235" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:54.235" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:54.235" endtime="20250205 13:17:54.235"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:54.235" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:54.235" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:54.235" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:54.235" endtime="20250205 13:17:54.235"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:54.235" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:54.235" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:54.267" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:54.267" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:54.235" endtime="20250205 13:17:54.267"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:54.267" endtime="20250205 13:17:54.268"/>
</return>
<msg timestamp="20250205 13:17:54.268" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:54.268" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:54.235" endtime="20250205 13:17:54.268"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:54.268" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:54.268" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:54.268" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:54.268" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:54.268" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:54.268" endtime="20250205 13:17:54.271"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:54.271" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:54.272" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:54.272" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:54.271" endtime="20250205 13:17:54.272"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:54.273" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:54.273" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:54.303" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:54.303" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:54.272" endtime="20250205 13:17:54.303"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:54.303" endtime="20250205 13:17:54.303"/>
</return>
<msg timestamp="20250205 13:17:54.303" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:54.303" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:54.268" endtime="20250205 13:17:54.303"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:54.309" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'pending',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:54.314" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:54.872" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:54.872" level="TRACE">Return: {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:54.872" level="INFO">${RESPONSE} = {'seconds': 0.561297, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766780, 'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'}, 'name': 'NAME1738750673', 'photoUrls': ['https://abc/002'...</msg>
<status status="PASS" starttime="20250205 13:17:54.303" endtime="20250205 13:17:54.872"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:54.872" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:54.872" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:54.906" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 9223372036854766780,
 'name': 'NAME1738750673',
 'photoUrls': ['https://abc/002'],
 'status': 'pending',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}</msg>
<msg timestamp="20250205 13:17:54.906" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766780, 'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'}, 'name': 'NAME1738750673', 'photoUrls': ['https://abc/002'], 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}], 'status': ...</msg>
<status status="PASS" starttime="20250205 13:17:54.872" endtime="20250205 13:17:54.906"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:54.908" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:54.908" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:54.934" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:54.934" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:54.907" endtime="20250205 13:17:54.934"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:54.937" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:54.937" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:54.937" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:54.935" endtime="20250205 13:17:54.937"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:54.938" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:17:54.938" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:17:54.992" level="TRACE">Return: 9223372036854766780</msg>
<msg timestamp="20250205 13:17:54.992" level="INFO">${PAYLOAD_VALUE} = 9223372036854766780</msg>
<status status="PASS" starttime="20250205 13:17:54.937" endtime="20250205 13:17:54.992"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:54.992" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:54.992" level="TRACE">Arguments: [ '"9223372036854766780"' | '"9223372036854766780"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.001" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.001" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:54.992" endtime="20250205 13:17:55.001"/>
</kw>
<msg timestamp="20250205 13:17:55.002" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:54.992" endtime="20250205 13:17:55.002"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.002" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.name' ]</msg>
<msg timestamp="20250205 13:17:55.002" level="INFO">Get value from JSON with expression: '$.body.name'</msg>
<msg timestamp="20250205 13:17:55.028" level="TRACE">Return: 'NAME1738750673'</msg>
<msg timestamp="20250205 13:17:55.028" level="INFO">${PAYLOAD_VALUE} = NAME1738750673</msg>
<status status="PASS" starttime="20250205 13:17:55.002" endtime="20250205 13:17:55.029"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.031" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.032" level="TRACE">Arguments: [ '"NAME1738750673"' | '"NAME1738750673"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.032" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.032" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.031" endtime="20250205 13:17:55.032"/>
</kw>
<msg timestamp="20250205 13:17:55.032" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.030" endtime="20250205 13:17:55.032"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.034" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.category.id' ]</msg>
<msg timestamp="20250205 13:17:55.035" level="INFO">Get value from JSON with expression: '$.body.category.id'</msg>
<msg timestamp="20250205 13:17:55.060" level="TRACE">Return: 101</msg>
<msg timestamp="20250205 13:17:55.060" level="INFO">${PAYLOAD_VALUE} = 101</msg>
<status status="PASS" starttime="20250205 13:17:55.033" endtime="20250205 13:17:55.060"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.063" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${CATEGORY_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.064" level="TRACE">Arguments: [ '"101"' | '"101"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.064" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.064" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.063" endtime="20250205 13:17:55.064"/>
</kw>
<msg timestamp="20250205 13:17:55.064" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.062" endtime="20250205 13:17:55.064"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.065" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.category.name' ]</msg>
<msg timestamp="20250205 13:17:55.065" level="INFO">Get value from JSON with expression: '$.body.category.name'</msg>
<msg timestamp="20250205 13:17:55.090" level="TRACE">Return: 'NEW.CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:17:55.092" level="INFO">${PAYLOAD_VALUE} = NEW.CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:17:55.065" endtime="20250205 13:17:55.092"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.093" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${CATEGORY_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.094" level="TRACE">Arguments: [ '"NEW.CATEGORY.NAME"' | '"NEW.CATEGORY.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.094" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.094" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.093" endtime="20250205 13:17:55.094"/>
</kw>
<msg timestamp="20250205 13:17:55.094" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.092" endtime="20250205 13:17:55.094"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.photoUrls[0]</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.096" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.photoUrls[0]' ]</msg>
<msg timestamp="20250205 13:17:55.096" level="INFO">Get value from JSON with expression: '$.body.photoUrls[0]'</msg>
<msg timestamp="20250205 13:17:55.129" level="TRACE">Return: 'https://abc/002'</msg>
<msg timestamp="20250205 13:17:55.130" level="INFO">${PAYLOAD_VALUE} = https://abc/002</msg>
<status status="PASS" starttime="20250205 13:17:55.095" endtime="20250205 13:17:55.130"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.132" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PHOTOURLS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.132" level="TRACE">Arguments: [ '"https://abc/002"' | '"https://abc/002"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.132" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.132" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.132" endtime="20250205 13:17:55.132"/>
</kw>
<msg timestamp="20250205 13:17:55.135" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.132" endtime="20250205 13:17:55.135"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.136" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.tags[0].id' ]</msg>
<msg timestamp="20250205 13:17:55.136" level="INFO">Get value from JSON with expression: '$.body.tags[0].id'</msg>
<msg timestamp="20250205 13:17:55.161" level="TRACE">Return: 201</msg>
<msg timestamp="20250205 13:17:55.161" level="INFO">${PAYLOAD_VALUE} = 201</msg>
<status status="PASS" starttime="20250205 13:17:55.135" endtime="20250205 13:17:55.161"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.163" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${TAGS_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.165" level="TRACE">Arguments: [ '"201"' | '"201"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.165" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.165" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.164" endtime="20250205 13:17:55.165"/>
</kw>
<msg timestamp="20250205 13:17:55.165" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.163" endtime="20250205 13:17:55.165"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.165" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.tags[0].name' ]</msg>
<msg timestamp="20250205 13:17:55.165" level="INFO">Get value from JSON with expression: '$.body.tags[0].name'</msg>
<msg timestamp="20250205 13:17:55.193" level="TRACE">Return: 'NEW.TAGS.NAME'</msg>
<msg timestamp="20250205 13:17:55.194" level="INFO">${PAYLOAD_VALUE} = NEW.TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:17:55.165" endtime="20250205 13:17:55.194"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.196" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${TAGS_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.196" level="TRACE">Arguments: [ '"NEW.TAGS.NAME"' | '"NEW.TAGS.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.196" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.196" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.196" endtime="20250205 13:17:55.196"/>
</kw>
<msg timestamp="20250205 13:17:55.196" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.196" endtime="20250205 13:17:55.196"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:55.196" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 9223372036854766780,
          'name': 'NAME1738750673',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:54 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.561297,
 'status': 200} | '$.body.status' ]</msg>
<msg timestamp="20250205 13:17:55.196" level="INFO">Get value from JSON with expression: '$.body.status'</msg>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Return: 'pending'</msg>
<msg timestamp="20250205 13:17:55.225" level="INFO">${PAYLOAD_VALUE} = pending</msg>
<status status="PASS" starttime="20250205 13:17:55.196" endtime="20250205 13:17:55.225"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${STATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Arguments: [ '"pending"' | '"pending"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:55.225" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.225" endtime="20250205 13:17:55.225"/>
</kw>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:55.225" endtime="20250205 13:17:55.225"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:55.225" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.225" endtime="20250205 13:17:55.225"/>
</kw>
<doc>Test Description:Update an existing pet with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:17:53.942" endtime="20250205 13:17:55.225"/>
</test>
<test id="s1-s1-s2-t2" name="TC_PUT_pet_02" line="106">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:55.233" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:55.233" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_pet_02' ]</msg>
<msg timestamp="20250205 13:17:55.237" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create pet by providing non-existing id to in update request payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:55.238" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet by providing non-existing id to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ...</msg>
<status status="PASS" starttime="20250205 13:17:55.233" endtime="20250205 13:17:55.238"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:55.239" level="TRACE">Arguments: [ 'Test Description:Create pet by providing non-existing id to in update request payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:55.239" level="INFO">Set test documentation to:
Test Description:Create pet by providing non-existing id to in update request payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:55.239" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:55.239" endtime="20250205 13:17:55.239"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:55.239" endtime="20250205 13:17:55.239"/>
</return>
<msg timestamp="20250205 13:17:55.239" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create pet by providing non-existing id to in update request payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:55.241" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet by providing non-existing id to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ...</msg>
<status status="PASS" starttime="20250205 13:17:55.233" endtime="20250205 13:17:55.241"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.242" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:55.243" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:55.243" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:55.241" endtime="20250205 13:17:55.243"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.245" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:55.245" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:55.245" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:55.244" endtime="20250205 13:17:55.245"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.247" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:55.247" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:55.247" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:55.247" endtime="20250205 13:17:55.247"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:55.247" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:55.247" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:55.247" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:55.247" endtime="20250205 13:17:55.251"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:17:55.252" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:17:55.252" level="TRACE">Return: 1738750675</msg>
<msg timestamp="20250205 13:17:55.252" level="INFO">${SECS} = 1738750675</msg>
<status status="PASS" starttime="20250205 13:17:55.252" endtime="20250205 13:17:55.253"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:55.254" level="TRACE">Arguments: [ 1738750675 ]</msg>
<msg timestamp="20250205 13:17:55.254" level="DEBUG">Argument types are:
&lt;class 'int'&gt;</msg>
<msg timestamp="20250205 13:17:55.254" level="TRACE">Return: 1738750675</msg>
<msg timestamp="20250205 13:17:55.254" level="INFO">${ID} = 1738750675</msg>
<status status="PASS" starttime="20250205 13:17:55.254" endtime="20250205 13:17:55.254"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.254" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.id' | 1738750675 ]</msg>
<msg timestamp="20250205 13:17:55.254" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:17:55.285" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 1738750675,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.254" endtime="20250205 13:17:55.285"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${NAME}</var>
<arg>NAME${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.285" level="TRACE">Arguments: [ 'NAME1738750675' ]</msg>
<msg timestamp="20250205 13:17:55.285" level="TRACE">Return: 'NAME1738750675'</msg>
<msg timestamp="20250205 13:17:55.285" level="INFO">${NAME} = NAME1738750675</msg>
<status status="PASS" starttime="20250205 13:17:55.285" endtime="20250205 13:17:55.291"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.name</arg>
<arg>${NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.293" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 1738750675,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.name' | 'NAME1738750675' ]</msg>
<msg timestamp="20250205 13:17:55.293" level="INFO">Update JSON with expression: '$.name'</msg>
<msg timestamp="20250205 13:17:55.322" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.292" endtime="20250205 13:17:55.322"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${CATEGORY_ID}</var>
<arg>101</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:55.323" level="TRACE">Arguments: [ '101' ]</msg>
<msg timestamp="20250205 13:17:55.324" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.324" level="TRACE">Return: 101</msg>
<msg timestamp="20250205 13:17:55.324" level="INFO">${CATEGORY_ID} = 101</msg>
<status status="PASS" starttime="20250205 13:17:55.323" endtime="20250205 13:17:55.324"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.category.id</arg>
<arg>${CATEGORY_ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.325" level="TRACE">Arguments: [ {'category': {'id': 0, 'name': 'string'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.category.id' | 101 ]</msg>
<msg timestamp="20250205 13:17:55.325" level="INFO">Update JSON with expression: '$.category.id'</msg>
<msg timestamp="20250205 13:17:55.351" level="TRACE">Return: {'category': {'id': 101, 'name': 'string'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.325" endtime="20250205 13:17:55.352"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${CATEGORY_NAME}</var>
<arg>NEW.CATEGORY.NAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.353" level="TRACE">Arguments: [ 'NEW.CATEGORY.NAME' ]</msg>
<msg timestamp="20250205 13:17:55.353" level="TRACE">Return: 'NEW.CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:17:55.353" level="INFO">${CATEGORY_NAME} = NEW.CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:17:55.353" endtime="20250205 13:17:55.353"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.category.name</arg>
<arg>${CATEGORY_NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.354" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'string'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.category.name' | 'NEW.CATEGORY.NAME' ]</msg>
<msg timestamp="20250205 13:17:55.356" level="INFO">Update JSON with expression: '$.category.name'</msg>
<msg timestamp="20250205 13:17:55.380" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.354" endtime="20250205 13:17:55.380"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHOTOURLS}</var>
<arg>https://abc/002</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.382" level="TRACE">Arguments: [ 'https://abc/002' ]</msg>
<msg timestamp="20250205 13:17:55.382" level="TRACE">Return: 'https://abc/002'</msg>
<msg timestamp="20250205 13:17:55.382" level="INFO">${PHOTOURLS} = https://abc/002</msg>
<status status="PASS" starttime="20250205 13:17:55.381" endtime="20250205 13:17:55.382"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.photoUrls[0]</arg>
<arg>${PHOTOURLS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.383" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.photoUrls[0]' | 'https://abc/002' ]</msg>
<msg timestamp="20250205 13:17:55.384" level="INFO">Update JSON with expression: '$.photoUrls[0]'</msg>
<msg timestamp="20250205 13:17:55.410" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.383" endtime="20250205 13:17:55.410"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${TAGS_ID}</var>
<arg>201</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:17:55.412" level="TRACE">Arguments: [ '201' ]</msg>
<msg timestamp="20250205 13:17:55.412" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.412" level="TRACE">Return: 201</msg>
<msg timestamp="20250205 13:17:55.412" level="INFO">${TAGS_ID} = 201</msg>
<status status="PASS" starttime="20250205 13:17:55.412" endtime="20250205 13:17:55.413"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.tags[0].id</arg>
<arg>${TAGS_ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.414" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | '$.tags[0].id' | 201 ]</msg>
<msg timestamp="20250205 13:17:55.415" level="INFO">Update JSON with expression: '$.tags[0].id'</msg>
<msg timestamp="20250205 13:17:55.439" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'string'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.414" endtime="20250205 13:17:55.439"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${TAGS_NAME}</var>
<arg>NEW.TAGS.NAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.441" level="TRACE">Arguments: [ 'NEW.TAGS.NAME' ]</msg>
<msg timestamp="20250205 13:17:55.441" level="TRACE">Return: 'NEW.TAGS.NAME'</msg>
<msg timestamp="20250205 13:17:55.441" level="INFO">${TAGS_NAME} = NEW.TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:17:55.440" endtime="20250205 13:17:55.441"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.tags[0].name</arg>
<arg>${TAGS_NAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.443" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'string'}]} | '$.tags[0].name' | 'NEW.TAGS.NAME' ]</msg>
<msg timestamp="20250205 13:17:55.443" level="INFO">Update JSON with expression: '$.tags[0].name'</msg>
<msg timestamp="20250205 13:17:55.469" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.442" endtime="20250205 13:17:55.469"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${STATUS}</var>
<arg>pending</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:55.470" level="TRACE">Arguments: [ 'pending' ]</msg>
<msg timestamp="20250205 13:17:55.470" level="TRACE">Return: 'pending'</msg>
<msg timestamp="20250205 13:17:55.470" level="INFO">${STATUS} = pending</msg>
<status status="PASS" starttime="20250205 13:17:55.470" endtime="20250205 13:17:55.470"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.status</arg>
<arg>${STATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:17:55.472" level="TRACE">Arguments: [ {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'available',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]} | '$.status' | 'pending' ]</msg>
<msg timestamp="20250205 13:17:55.472" level="INFO">Update JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:55.495" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'pending',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}</msg>
<status status="PASS" starttime="20250205 13:17:55.471" endtime="20250205 13:17:55.495"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:55.501" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:55.501" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:55.501" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:55.495" endtime="20250205 13:17:55.502"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:55.503" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:55.503" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:55.503" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.503" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:55.503" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:55.503" endtime="20250205 13:17:55.503"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:55.503" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:55.503" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:55.503" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:55.503" endtime="20250205 13:17:55.503"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:55.503" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:55.503" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:55.536" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:55.536" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:55.503" endtime="20250205 13:17:55.536"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:55.536" endtime="20250205 13:17:55.536"/>
</return>
<msg timestamp="20250205 13:17:55.536" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:55.536" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:55.503" endtime="20250205 13:17:55.542"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:55.544" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:55.545" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:55.545" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:55.545" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:55.545" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:55.544" endtime="20250205 13:17:55.545"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:55.546" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:55.547" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:55.547" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:55.545" endtime="20250205 13:17:55.547"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:55.548" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:55.548" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:55.573" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:55.573" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:55.547" endtime="20250205 13:17:55.573"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:55.573" endtime="20250205 13:17:55.573"/>
</return>
<msg timestamp="20250205 13:17:55.573" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:55.573" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:55.543" endtime="20250205 13:17:55.573"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:55.582" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'pending',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:55.585" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:56.183" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:56.183" level="TRACE">Return: {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:56.183" level="INFO">${RESPONSE} = {'seconds': 0.603212, 'status': 200, 'reason': 'OK', 'body': {'id': 1738750675, 'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'}, 'name': 'NAME1738750675', 'photoUrls': ['https://abc/002'], 'tags'...</msg>
<status status="PASS" starttime="20250205 13:17:55.573" endtime="20250205 13:17:56.191"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.192" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:56.192" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:56.219" level="TRACE">Return: {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
 'id': 1738750675,
 'name': 'NAME1738750675',
 'photoUrls': ['https://abc/002'],
 'status': 'pending',
 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}</msg>
<msg timestamp="20250205 13:17:56.220" level="INFO">${RESPONSE_PAYLOAD} = {'id': 1738750675, 'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'}, 'name': 'NAME1738750675', 'photoUrls': ['https://abc/002'], 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}], 'status': 'pending'...</msg>
<status status="PASS" starttime="20250205 13:17:56.192" endtime="20250205 13:17:56.220"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.221" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:56.222" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:56.247" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:56.247" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:56.221" endtime="20250205 13:17:56.248"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.250" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:56.251" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.251" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.249" endtime="20250205 13:17:56.251"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.253" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:17:56.253" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:17:56.279" level="TRACE">Return: 1738750675</msg>
<msg timestamp="20250205 13:17:56.279" level="INFO">${PAYLOAD_VALUE} = 1738750675</msg>
<status status="PASS" starttime="20250205 13:17:56.252" endtime="20250205 13:17:56.279"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.281" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.281" level="TRACE">Arguments: [ '"1738750675"' | '"1738750675"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.281" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.281" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.281" endtime="20250205 13:17:56.281"/>
</kw>
<msg timestamp="20250205 13:17:56.281" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.281" endtime="20250205 13:17:56.281"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.283" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.name' ]</msg>
<msg timestamp="20250205 13:17:56.283" level="INFO">Get value from JSON with expression: '$.body.name'</msg>
<msg timestamp="20250205 13:17:56.309" level="TRACE">Return: 'NAME1738750675'</msg>
<msg timestamp="20250205 13:17:56.310" level="INFO">${PAYLOAD_VALUE} = NAME1738750675</msg>
<status status="PASS" starttime="20250205 13:17:56.282" endtime="20250205 13:17:56.310"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.312" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.313" level="TRACE">Arguments: [ '"NAME1738750675"' | '"NAME1738750675"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.313" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.313" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.312" endtime="20250205 13:17:56.313"/>
</kw>
<msg timestamp="20250205 13:17:56.313" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.311" endtime="20250205 13:17:56.313"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.315" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.category.id' ]</msg>
<msg timestamp="20250205 13:17:56.315" level="INFO">Get value from JSON with expression: '$.body.category.id'</msg>
<msg timestamp="20250205 13:17:56.340" level="TRACE">Return: 101</msg>
<msg timestamp="20250205 13:17:56.341" level="INFO">${PAYLOAD_VALUE} = 101</msg>
<status status="PASS" starttime="20250205 13:17:56.314" endtime="20250205 13:17:56.341"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.343" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${CATEGORY_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.343" level="TRACE">Arguments: [ '"101"' | '"101"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.344" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.344" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.343" endtime="20250205 13:17:56.344"/>
</kw>
<msg timestamp="20250205 13:17:56.344" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.342" endtime="20250205 13:17:56.344"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.345" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.category.name' ]</msg>
<msg timestamp="20250205 13:17:56.346" level="INFO">Get value from JSON with expression: '$.body.category.name'</msg>
<msg timestamp="20250205 13:17:56.376" level="TRACE">Return: 'NEW.CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:17:56.376" level="INFO">${PAYLOAD_VALUE} = NEW.CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:17:56.344" endtime="20250205 13:17:56.376"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.381" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${CATEGORY_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.382" level="TRACE">Arguments: [ '"NEW.CATEGORY.NAME"' | '"NEW.CATEGORY.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.382" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.382" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.381" endtime="20250205 13:17:56.382"/>
</kw>
<msg timestamp="20250205 13:17:56.382" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.380" endtime="20250205 13:17:56.382"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.photoUrls[0]</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.384" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.photoUrls[0]' ]</msg>
<msg timestamp="20250205 13:17:56.384" level="INFO">Get value from JSON with expression: '$.body.photoUrls[0]'</msg>
<msg timestamp="20250205 13:17:56.410" level="TRACE">Return: 'https://abc/002'</msg>
<msg timestamp="20250205 13:17:56.410" level="INFO">${PAYLOAD_VALUE} = https://abc/002</msg>
<status status="PASS" starttime="20250205 13:17:56.383" endtime="20250205 13:17:56.410"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.412" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PHOTOURLS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.413" level="TRACE">Arguments: [ '"https://abc/002"' | '"https://abc/002"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.413" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.413" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.412" endtime="20250205 13:17:56.413"/>
</kw>
<msg timestamp="20250205 13:17:56.413" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.412" endtime="20250205 13:17:56.413"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.415" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.tags[0].id' ]</msg>
<msg timestamp="20250205 13:17:56.415" level="INFO">Get value from JSON with expression: '$.body.tags[0].id'</msg>
<msg timestamp="20250205 13:17:56.442" level="TRACE">Return: 201</msg>
<msg timestamp="20250205 13:17:56.442" level="INFO">${PAYLOAD_VALUE} = 201</msg>
<status status="PASS" starttime="20250205 13:17:56.415" endtime="20250205 13:17:56.442"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.444" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${TAGS_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.445" level="TRACE">Arguments: [ '"201"' | '"201"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.445" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.445" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.444" endtime="20250205 13:17:56.445"/>
</kw>
<msg timestamp="20250205 13:17:56.445" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.443" endtime="20250205 13:17:56.445"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.446" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.tags[0].name' ]</msg>
<msg timestamp="20250205 13:17:56.446" level="INFO">Get value from JSON with expression: '$.body.tags[0].name'</msg>
<msg timestamp="20250205 13:17:56.472" level="TRACE">Return: 'NEW.TAGS.NAME'</msg>
<msg timestamp="20250205 13:17:56.472" level="INFO">${PAYLOAD_VALUE} = NEW.TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:17:56.446" endtime="20250205 13:17:56.473"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.473" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${TAGS_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.475" level="TRACE">Arguments: [ '"NEW.TAGS.NAME"' | '"NEW.TAGS.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.475" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.475" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.474" endtime="20250205 13:17:56.475"/>
</kw>
<msg timestamp="20250205 13:17:56.475" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.473" endtime="20250205 13:17:56.475"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:56.475" level="TRACE">Arguments: [ {'body': {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
          'id': 1738750675,
          'name': 'NAME1738750675',
          'photoUrls': ['https://abc/002'],
          'status': 'pending',
          'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:56 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.603212,
 'status': 200} | '$.body.status' ]</msg>
<msg timestamp="20250205 13:17:56.475" level="INFO">Get value from JSON with expression: '$.body.status'</msg>
<msg timestamp="20250205 13:17:56.503" level="TRACE">Return: 'pending'</msg>
<msg timestamp="20250205 13:17:56.503" level="INFO">${PAYLOAD_VALUE} = pending</msg>
<status status="PASS" starttime="20250205 13:17:56.475" endtime="20250205 13:17:56.503"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:17:56.505" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${STATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:56.505" level="TRACE">Arguments: [ '"pending"' | '"pending"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:17:56.505" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.505" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.505" endtime="20250205 13:17:56.505"/>
</kw>
<msg timestamp="20250205 13:17:56.505" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:17:56.504" endtime="20250205 13:17:56.505"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:56.505" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:56.505" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.505" endtime="20250205 13:17:56.505"/>
</kw>
<doc>Test Description:Create pet by providing non-existing id to in update request payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:17:55.232" endtime="20250205 13:17:56.505"/>
</test>
<test id="s1-s1-s2-t3" name="TC_PUT_pet_03" line="197">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:56.512" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:56.514" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_pet_03' ]</msg>
<msg timestamp="20250205 13:17:56.515" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet with payload missing mandatory field [name]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:56.515" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_03'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payl...</msg>
<status status="PASS" starttime="20250205 13:17:56.512" endtime="20250205 13:17:56.515"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:56.515" level="TRACE">Arguments: [ 'Test Description:Update pet with payload missing mandatory field [name] \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:56.515" level="INFO">Set test documentation to:
Test Description:Update pet with payload missing mandatory field [name] 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:56.515" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:56.515" endtime="20250205 13:17:56.515"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:56.515" endtime="20250205 13:17:56.515"/>
</return>
<msg timestamp="20250205 13:17:56.515" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet with payload missing mandatory field [name]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:56.515" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_03'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payl...</msg>
<status status="PASS" starttime="20250205 13:17:56.512" endtime="20250205 13:17:56.515"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:56.522" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:56.523" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:56.523" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:56.515" endtime="20250205 13:17:56.523"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:56.524" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:56.525" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:56.525" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:56.524" endtime="20250205 13:17:56.525"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:56.527" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:56.527" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:56.527" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:56.525" endtime="20250205 13:17:56.527"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:56.527" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:56.527" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:56.527" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:56.527" endtime="20250205 13:17:56.527"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:56.527" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:56.527" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:56.527" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:56.527" endtime="20250205 13:17:56.527"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:56.534" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:56.534" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:56.534" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.534" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:56.534" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:56.534" endtime="20250205 13:17:56.534"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:56.534" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:56.534" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:56.534" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:56.534" endtime="20250205 13:17:56.534"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:56.537" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:56.537" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:56.574" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:56.574" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:56.537" endtime="20250205 13:17:56.575"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:56.575" endtime="20250205 13:17:56.575"/>
</return>
<msg timestamp="20250205 13:17:56.576" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:56.577" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:56.532" endtime="20250205 13:17:56.577"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:56.577" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:56.577" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:56.577" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:56.577" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:56.577" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:56.577" endtime="20250205 13:17:56.582"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:56.583" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:56.583" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:56.583" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:56.582" endtime="20250205 13:17:56.583"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:56.583" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:56.583" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:56.610" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:56.610" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:56.583" endtime="20250205 13:17:56.610"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:56.612" endtime="20250205 13:17:56.612"/>
</return>
<msg timestamp="20250205 13:17:56.612" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:56.612" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:56.577" endtime="20250205 13:17:56.612"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:56.614" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:56.614" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:57.203" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:57.212" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766784,
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:57 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.592818,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:57.212" level="INFO">${RESPONSE} = {'seconds': 0.592818, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766784, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'statu...</msg>
<status status="PASS" starttime="20250205 13:17:56.613" endtime="20250205 13:17:57.212"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:57.212" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766784,
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:57 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.592818,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:57.212" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:57.242" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766784,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:57.242" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766784, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:57.212" endtime="20250205 13:17:57.242"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:57.244" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766784,
          'photoUrls': ['string'],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:57 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.592818,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:57.244" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:57.265" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:57.265" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:57.243" endtime="20250205 13:17:57.265"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:57.272" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:57.274" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:57.274" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:17:57.274" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:57.271" endtime="20250205 13:17:57.274"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:57.274" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:57.274" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766784,
 'photoUrls': ['string'],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:57.274" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:57.274" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:57.274" endtime="20250205 13:17:57.274"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:57.281" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854766784, 'category': {'id': 0, 'name': 'string'}, 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:57.281" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:57.274" endtime="20250205 13:17:57.282"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:57.283" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:17:57.283" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:57.282" endtime="20250205 13:17:57.284"/>
</kw>
<msg timestamp="20250205 13:17:57.284" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:57.274" endtime="20250205 13:17:57.285"/>
</kw>
<msg timestamp="20250205 13:17:57.285" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:57.274" endtime="20250205 13:17:57.285"/>
</kw>
<doc>Test Description:Update pet with payload missing mandatory field [name] 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:56.505" endtime="20250205 13:17:57.285">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s1-s2-t4" name="TC_PUT_pet_04" line="223">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:57.285" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:57.285" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_pet_04' ]</msg>
<msg timestamp="20250205 13:17:57.294" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet with payload missing mandatory field [photoUrls]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:57.294" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_04'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request...</msg>
<status status="PASS" starttime="20250205 13:17:57.285" endtime="20250205 13:17:57.295"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:57.298" level="TRACE">Arguments: [ 'Test Description:Update pet with payload missing mandatory field [photoUrls] \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:57.298" level="INFO">Set test documentation to:
Test Description:Update pet with payload missing mandatory field [photoUrls] 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:57.298" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:57.295" endtime="20250205 13:17:57.299"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:57.299" endtime="20250205 13:17:57.299"/>
</return>
<msg timestamp="20250205 13:17:57.300" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
             ('Type', 'Negative'),
             ('Description',
              'Update pet with payload missing mandatory field [photoUrls]'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])</msg>
<msg timestamp="20250205 13:17:57.300" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_04'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request...</msg>
<status status="PASS" starttime="20250205 13:17:57.285" endtime="20250205 13:17:57.300"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:57.303" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:57.304" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:57.304" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:57.301" endtime="20250205 13:17:57.304"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:57.304" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:57.304" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:57.304" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:57.304" endtime="20250205 13:17:57.304"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:57.304" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:57.304" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:57.304" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:57.304" endtime="20250205 13:17:57.304"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:57.312" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}' ]</msg>
<msg timestamp="20250205 13:17:57.312" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:57.313" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:57.311" endtime="20250205 13:17:57.313"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:57.315" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:57.315" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:57.315" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:57.314" endtime="20250205 13:17:57.315"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:57.317" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:57.317" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:57.317" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:57.317" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:57.317" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:57.317" endtime="20250205 13:17:57.317"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:57.317" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:57.317" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:57.317" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:57.317" endtime="20250205 13:17:57.317"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:57.317" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:57.317" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:57.351" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:57.351" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:57.317" endtime="20250205 13:17:57.352"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:57.353" endtime="20250205 13:17:57.353"/>
</return>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:57.353" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:57.317" endtime="20250205 13:17:57.353"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:57.353" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:57.353" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:57.353" endtime="20250205 13:17:57.353"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:57.353" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:57.353" endtime="20250205 13:17:57.353"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:57.353" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:57.353" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:57.419" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:57.420" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:57.353" endtime="20250205 13:17:57.420"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:57.420" endtime="20250205 13:17:57.420"/>
</return>
<msg timestamp="20250205 13:17:57.420" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:57.421" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:57.353" endtime="20250205 13:17:57.421"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:57.423" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:57.425" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:58.053" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:58.053" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766785,
          'name': 'doggie',
          'photoUrls': [],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:58 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.62883,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:58.053" level="INFO">${RESPONSE} = {'seconds': 0.62883, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766785, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': [], 'tags': [{'id': 0, 'name': 'string'}...</msg>
<status status="PASS" starttime="20250205 13:17:57.422" endtime="20250205 13:17:58.053"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:58.053" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766785,
          'name': 'doggie',
          'photoUrls': [],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:58 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.62883,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:58.053" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:58.086" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766785,
 'name': 'doggie',
 'photoUrls': [],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:58.087" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766785, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': [], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:17:58.053" endtime="20250205 13:17:58.087"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:58.088" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766785,
          'name': 'doggie',
          'photoUrls': [],
          'status': 'available',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:58 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.62883,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:58.089" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:58.114" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:58.114" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:58.087" endtime="20250205 13:17:58.114"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:58.117" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:58.118" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:58.118" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:17:58.119" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:58.115" endtime="20250205 13:17:58.119"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:58.119" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:58.121" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766785,
 'name': 'doggie',
 'photoUrls': [],
 'status': 'available',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:58.123" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:58.124" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.123" endtime="20250205 13:17:58.124"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:58.125" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854766785, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': [], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'available'}" ]</msg>
<msg timestamp="20250205 13:17:58.125" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.125" endtime="20250205 13:17:58.125"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:58.128" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:17:58.128" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.125" endtime="20250205 13:17:58.128"/>
</kw>
<msg timestamp="20250205 13:17:58.128" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.119" endtime="20250205 13:17:58.128"/>
</kw>
<msg timestamp="20250205 13:17:58.128" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.119" endtime="20250205 13:17:58.128"/>
</kw>
<doc>Test Description:Update pet with payload missing mandatory field [photoUrls] 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:57.285" endtime="20250205 13:17:58.128">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s1-s2-t5" name="TC_PUT_pet_05" line="249">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:58.133" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:58.133" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_pet_05' ]</msg>
<msg timestamp="20250205 13:17:58.136" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
             ('Type', 'Negative'),
             ('Description', 'Update pet with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:17:58.137" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_05'), ('Type', 'Negative'), ('Description', 'Update pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\...</msg>
<status status="PASS" starttime="20250205 13:17:58.133" endtime="20250205 13:17:58.137"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:58.139" level="TRACE">Arguments: [ 'Test Description:Update pet with payload having invalid status \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:58.139" level="INFO">Set test documentation to:
Test Description:Update pet with payload having invalid status 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:58.140" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.137" endtime="20250205 13:17:58.140"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:58.140" endtime="20250205 13:17:58.140"/>
</return>
<msg timestamp="20250205 13:17:58.140" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
             ('Type', 'Negative'),
             ('Description', 'Update pet with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:17:58.141" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_05'), ('Type', 'Negative'), ('Description', 'Update pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\...</msg>
<status status="PASS" starttime="20250205 13:17:58.132" endtime="20250205 13:17:58.141"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:58.142" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:58.143" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:58.143" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:58.141" endtime="20250205 13:17:58.143"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:58.145" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:58.145" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:58.145" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:58.144" endtime="20250205 13:17:58.145"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:58.147" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:58.147" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:58.147" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:58.146" endtime="20250205 13:17:58.147"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:17:58.147" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}' ]</msg>
<msg timestamp="20250205 13:17:58.147" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:58.147" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:17:58.147" endtime="20250205 13:17:58.147"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:58.147" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:58.151" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:58.151" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:58.147" endtime="20250205 13:17:58.151"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:58.153" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:58.153" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:58.153" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:58.153" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:58.153" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:58.153" endtime="20250205 13:17:58.156"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:58.156" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:58.157" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.157" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.156" endtime="20250205 13:17:58.157"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:58.158" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:58.158" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:58.183" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.183" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.157" endtime="20250205 13:17:58.183"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:58.183" endtime="20250205 13:17:58.183"/>
</return>
<msg timestamp="20250205 13:17:58.183" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.183" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.152" endtime="20250205 13:17:58.191"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:58.192" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:58.193" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:58.193" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:58.193" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:58.193" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:58.193" endtime="20250205 13:17:58.194"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:58.194" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:58.194" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.194" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.194" endtime="20250205 13:17:58.195"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:58.195" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:58.195" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:58.223" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.223" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.195" endtime="20250205 13:17:58.223"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:58.223" endtime="20250205 13:17:58.223"/>
</return>
<msg timestamp="20250205 13:17:58.223" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.223" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.191" endtime="20250205 13:17:58.223"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:58.223" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | body={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:58.234" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:58.803" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/pet HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:17:58.803" level="TRACE">Return: {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766786,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'invalidStatus',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:58 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.572977,
 'status': 200}</msg>
<msg timestamp="20250205 13:17:58.803" level="INFO">${RESPONSE} = {'seconds': 0.572977, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854766786, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': ...</msg>
<status status="PASS" starttime="20250205 13:17:58.223" endtime="20250205 13:17:58.803"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:58.803" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766786,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'invalidStatus',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:58 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.572977,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:58.803" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:58.836" level="TRACE">Return: {'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766786,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]}</msg>
<msg timestamp="20250205 13:17:58.837" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854766786, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:17:58.803" endtime="20250205 13:17:58.837"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:58.838" level="TRACE">Arguments: [ {'body': {'category': {'id': 0, 'name': 'string'},
          'id': 9223372036854766786,
          'name': 'doggie',
          'photoUrls': ['string'],
          'status': 'invalidStatus',
          'tags': [{'id': 0, 'name': 'string'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:58 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.572977,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:58.840" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:58.865" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:17:58.865" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:17:58.838" endtime="20250205 13:17:58.865"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:58.867" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:58.867" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:58.867" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:17:58.868" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:17:58.866" endtime="20250205 13:17:58.868"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:58.869" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:17:58.871" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 0,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_PAYLOAD}={'category': {'id': 0, 'name': 'string'},
 'id': 9223372036854766786,
 'name': 'doggie',
 'photoUrls': ['string'],
 'status': 'invalidStatus',
 'tags': [{'id': 0, 'name': 'string'}]} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:58.873" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}" ]</msg>
<msg timestamp="20250205 13:17:58.874" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.872" endtime="20250205 13:17:58.875"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:58.875" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854766786, 'category': {'id': 0, 'name': 'string'}, 'name': 'doggie', 'photoUrls': ['string'], 'tags': [{'id': 0, 'name': 'string'}], 'status': 'invalidStatus'}" ]</msg>
<msg timestamp="20250205 13:17:58.875" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.875" endtime="20250205 13:17:58.875"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:17:58.875" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:17:58.879" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.875" endtime="20250205 13:17:58.879"/>
</kw>
<msg timestamp="20250205 13:17:58.879" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.869" endtime="20250205 13:17:58.879"/>
</kw>
<msg timestamp="20250205 13:17:58.879" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.869" endtime="20250205 13:17:58.881"/>
</kw>
<doc>Test Description:Update pet with payload having invalid status 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:17:58.131" endtime="20250205 13:17:58.881">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s1-s2-t6" name="TC_PUT_pet_06" line="275">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:58.884" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:58.886" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_pet_06' ]</msg>
<msg timestamp="20250205 13:17:58.888" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
             ('Type', 'Negative'),
             ('Description', 'Update pet with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:58.889" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_06'), ('Type', 'Negative'), ('Description', 'Update pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:58.885" endtime="20250205 13:17:58.889"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:58.890" level="TRACE">Arguments: [ 'Test Description:Update pet with no payload \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:17:58.891" level="INFO">Set test documentation to:
Test Description:Update pet with no payload 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:17:58.891" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:58.889" endtime="20250205 13:17:58.891"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:58.891" endtime="20250205 13:17:58.891"/>
</return>
<msg timestamp="20250205 13:17:58.892" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
             ('Type', 'Negative'),
             ('Description', 'Update pet with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:58.892" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_pet_06'), ('Type', 'Negative'), ('Description', 'Update pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:58.884" endtime="20250205 13:17:58.892"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:58.894" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:58.894" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:58.895" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:58.893" endtime="20250205 13:17:58.895"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:58.896" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:58.896" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:58.896" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:58.896" endtime="20250205 13:17:58.896"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:58.896" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:58.896" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:58.896" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:58.896" endtime="20250205 13:17:58.896"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:58.901" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:58.901" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:58.902" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:58.901" endtime="20250205 13:17:58.902"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:58.903" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:58.904" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:58.904" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:58.904" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:58.904" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:58.904" endtime="20250205 13:17:58.905"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:58.905" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:58.906" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.906" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.905" endtime="20250205 13:17:58.906"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:58.906" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:58.906" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:58.940" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.940" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.906" endtime="20250205 13:17:58.940"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:58.940" endtime="20250205 13:17:58.942"/>
</return>
<msg timestamp="20250205 13:17:58.942" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.942" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.903" endtime="20250205 13:17:58.942"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:58.945" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:58.945" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:58.946" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:58.946" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:58.946" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:58.945" endtime="20250205 13:17:58.946"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:58.946" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:58.947" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.947" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.946" endtime="20250205 13:17:58.947"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:58.948" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:58.949" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:58.973" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.973" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.948" endtime="20250205 13:17:58.973"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:58.973" endtime="20250205 13:17:58.973"/>
</return>
<msg timestamp="20250205 13:17:58.973" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:17:58.973" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:58.943" endtime="20250205 13:17:58.973"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:58.973" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:58.983" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:17:59.572" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/pet HTTP/1.1" 405 None</msg>
<msg timestamp="20250205 13:17:59.572" level="TRACE">Return: {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:59 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5918329999999999,
 'status': 405}</msg>
<msg timestamp="20250205 13:17:59.572" level="INFO">${RESPONSE} = {'seconds': 0.5918329999999999, 'status': 405, 'reason': 'Method Not Allowed', 'body': {'code': 405, 'type': 'unknown', 'message': 'no data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:17:59 GMT', 'Con...</msg>
<status status="PASS" starttime="20250205 13:17:58.973" endtime="20250205 13:17:59.572"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:59.572" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:59 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5918329999999999,
 'status': 405} | '$.body' ]</msg>
<msg timestamp="20250205 13:17:59.572" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:17:59.605" level="TRACE">Return: {'code': 405, 'message': 'no data', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:17:59.605" level="INFO">${RESPONSE_PAYLOAD} = {'code': 405, 'type': 'unknown', 'message': 'no data'}</msg>
<status status="PASS" starttime="20250205 13:17:59.572" endtime="20250205 13:17:59.605"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:17:59.607" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:17:59 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5918329999999999,
 'status': 405} | '$.status' ]</msg>
<msg timestamp="20250205 13:17:59.607" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:17:59.632" level="TRACE">Return: 405</msg>
<msg timestamp="20250205 13:17:59.632" level="INFO">${RESPONSE_STATUS} = 405</msg>
<status status="PASS" starttime="20250205 13:17:59.606" endtime="20250205 13:17:59.632"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:17:59.634" level="TRACE">Arguments: [ '"405"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:17:59.634" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:59.634" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.633" endtime="20250205 13:17:59.634"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:17:59.637" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:17:59.637" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.636" endtime="20250205 13:17:59.637"/>
</kw>
<doc>Test Description:Update pet with no payload 

 Expected Result:405 

</doc>
<status status="PASS" starttime="20250205 13:17:58.883" endtime="20250205 13:17:59.638"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:17:59.638" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:17:59.640" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:59.640" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.640" endtime="20250205 13:17:59.640"/>
</kw>
<msg timestamp="20250205 13:17:59.640" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.638" endtime="20250205 13:17:59.640"/>
</kw>
<status status="FAIL" starttime="20250205 13:17:53.915" endtime="20250205 13:17:59.640"/>
</suite>
<suite id="s1-s1-s3" name="03 GET pet" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\pet\03_GET_pet.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:17:59.653" level="TRACE">Arguments: [ ${CSVFILE}='pet.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:17:59.654" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:17:59.655" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:17:59.655" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:17:59.654" endtime="20250205 13:17:59.655"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:17:59.656" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'pet.csv' ]</msg>
<msg timestamp="20250205 13:17:59.657" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_03'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_04'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_05'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_06'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_07'), ('Type', 'Negative'), ('Description', 'Create pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_08'), ('Type', 'Positive'), ('Description', 'Update pet name and status with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_09'), ('Type', 'Negative'), ('Description', 'Update pet name and status with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_10'), ('Type', 'Negative'), ('Description', 'Update pet status with formdata using invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_11'), ('Type', 'Positive'), ('Description', 'Upload pet image with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_12'), ('Type', 'Negative'), ('Description', 'Update pet image with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_01'), ('Type', 'Positive'), ('Description', 'Update an existing pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet by providing non-existing id to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_03'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_04'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_05'), ('Type', 'Negative'), ('Description', 'Update pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_06'), ('Type', 'Negative'), ('Description', 'Update pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_01'), ('Type', 'Positive'), ('Description', 'Retrieve pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_02'), ('Type', 'Negative'), ('Description', 'Retrieve pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_03'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by valid  status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_04'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by invalid status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'), ('Type', 'Positive'), ('Description', 'Delete pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'), ('Type', 'Negative'), ('Description', 'Delete pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:59.657" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:17:59.660" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<status status="PASS" starttime="20250205 13:17:59.655" endtime="20250205 13:17:59.660"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:17:59.661" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:17:59.661" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<msg timestamp="20250205 13:17:59.662" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.661" endtime="20250205 13:17:59.662"/>
</kw>
<msg timestamp="20250205 13:17:59.662" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.653" endtime="20250205 13:17:59.662"/>
</kw>
<test id="s1-s1-s3-t1" name="TC_GET_pet_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:17:59.664" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:17:59.665" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_pet_01' ]</msg>
<msg timestamp="20250205 13:17:59.668" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve pet with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:59.668" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_01'), ('Type', 'Positive'), ('Description', 'Retrieve pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:59.664" endtime="20250205 13:17:59.668"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:17:59.670" level="TRACE">Arguments: [ 'Test Description:Retrieve pet with existing id \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:17:59.670" level="INFO">Set test documentation to:
Test Description:Retrieve pet with existing id 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:17:59.670" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:17:59.669" endtime="20250205 13:17:59.670"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:17:59.670" endtime="20250205 13:17:59.671"/>
</return>
<msg timestamp="20250205 13:17:59.671" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve pet with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:17:59.671" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_01'), ('Type', 'Positive'), ('Description', 'Retrieve pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:17:59.663" endtime="20250205 13:17:59.671"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:59.673" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:59.674" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:59.674" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:59.672" endtime="20250205 13:17:59.674"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:59.676" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:59.676" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:59.676" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:17:59.675" endtime="20250205 13:17:59.676"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:17:59.676" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:17:59.676" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:17:59.676" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:17:59.676" endtime="20250205 13:17:59.676"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:59.681" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:17:59.681" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:17:59.681" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:17:59.680" endtime="20250205 13:17:59.681"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:17:59.683" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:17:59.683" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:17:59.684" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:17:59.684" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:17:59.684" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:17:59.683" endtime="20250205 13:17:59.684"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:17:59.685" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:17:59.685" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:59.685" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:59.685" endtime="20250205 13:17:59.685"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:17:59.685" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:59.685" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:17:59.726" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:59.727" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:59.685" endtime="20250205 13:17:59.727"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:17:59.727" endtime="20250205 13:17:59.727"/>
</return>
<msg timestamp="20250205 13:17:59.727" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:17:59.727" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:17:59.682" endtime="20250205 13:17:59.727"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${PET_01_ID}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:17:59.727" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet/1738750664' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:17:59.733" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:00.283" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/pet/1738750664 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:00.283" level="TRACE">Return: {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:00.283" level="INFO">${RESPONSE} = {'seconds': 0.554868, 'status': 200, 'reason': 'OK', 'body': {'id': 1738750664, 'category': {'id': 100, 'name': 'CATEGORY.NAME'}, 'name': 'NAME1738750664', 'photoUrls': ['https://abc/001'], 'tags': [{...</msg>
<status status="PASS" starttime="20250205 13:17:59.727" endtime="20250205 13:18:00.283"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.292" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:00.292" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:00.320" level="TRACE">Return: {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
 'id': 1738750664,
 'name': 'NAME1738750664',
 'photoUrls': ['https://abc/001'],
 'status': 'available',
 'tags': [{'id': 200, 'name': 'TAGS.NAME'}]}</msg>
<msg timestamp="20250205 13:18:00.320" level="INFO">${RESPONSE_PAYLOAD} = {'id': 1738750664, 'category': {'id': 100, 'name': 'CATEGORY.NAME'}, 'name': 'NAME1738750664', 'photoUrls': ['https://abc/001'], 'tags': [{'id': 200, 'name': 'TAGS.NAME'}], 'status': 'available'}</msg>
<status status="PASS" starttime="20250205 13:18:00.292" endtime="20250205 13:18:00.320"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.323" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:00.324" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:00.349" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:00.349" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:00.322" endtime="20250205 13:18:00.349"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.351" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:00.351" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.352" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.351" endtime="20250205 13:18:00.352"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.353" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:00.353" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:00.376" level="TRACE">Return: 1738750664</msg>
<msg timestamp="20250205 13:18:00.376" level="INFO">${PAYLOAD_VALUE} = 1738750664</msg>
<status status="PASS" starttime="20250205 13:18:00.353" endtime="20250205 13:18:00.376"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.382" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.383" level="TRACE">Arguments: [ '"1738750664"' | '"1738750664"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.383" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.384" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.383" endtime="20250205 13:18:00.384"/>
</kw>
<msg timestamp="20250205 13:18:00.384" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.382" endtime="20250205 13:18:00.384"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.385" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.name' ]</msg>
<msg timestamp="20250205 13:18:00.387" level="INFO">Get value from JSON with expression: '$.body.name'</msg>
<msg timestamp="20250205 13:18:00.412" level="TRACE">Return: 'NAME1738750664'</msg>
<msg timestamp="20250205 13:18:00.413" level="INFO">${PAYLOAD_VALUE} = NAME1738750664</msg>
<status status="PASS" starttime="20250205 13:18:00.385" endtime="20250205 13:18:00.413"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.415" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.415" level="TRACE">Arguments: [ '"NAME1738750664"' | '"NAME1738750664"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.415" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.415" endtime="20250205 13:18:00.415"/>
</kw>
<msg timestamp="20250205 13:18:00.415" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.414" endtime="20250205 13:18:00.415"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.415" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.category.id' ]</msg>
<msg timestamp="20250205 13:18:00.415" level="INFO">Get value from JSON with expression: '$.body.category.id'</msg>
<msg timestamp="20250205 13:18:00.444" level="TRACE">Return: 100</msg>
<msg timestamp="20250205 13:18:00.444" level="INFO">${PAYLOAD_VALUE} = 100</msg>
<status status="PASS" starttime="20250205 13:18:00.415" endtime="20250205 13:18:00.444"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.445" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_CATEGORY_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_CATEGORY_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.445" level="TRACE">Arguments: [ '"100"' | '"100"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.445" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.445" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.445" endtime="20250205 13:18:00.445"/>
</kw>
<msg timestamp="20250205 13:18:00.445" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.445" endtime="20250205 13:18:00.445"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.category.name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.445" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.category.name' ]</msg>
<msg timestamp="20250205 13:18:00.445" level="INFO">Get value from JSON with expression: '$.body.category.name'</msg>
<msg timestamp="20250205 13:18:00.476" level="TRACE">Return: 'CATEGORY.NAME'</msg>
<msg timestamp="20250205 13:18:00.476" level="INFO">${PAYLOAD_VALUE} = CATEGORY.NAME</msg>
<status status="PASS" starttime="20250205 13:18:00.445" endtime="20250205 13:18:00.476"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.476" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_CATEGORY_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_CATEGORY_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.476" level="TRACE">Arguments: [ '"CATEGORY.NAME"' | '"CATEGORY.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.476" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.476" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.476" endtime="20250205 13:18:00.476"/>
</kw>
<msg timestamp="20250205 13:18:00.476" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.476" endtime="20250205 13:18:00.476"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.photoUrls[0]</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.484" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.photoUrls[0]' ]</msg>
<msg timestamp="20250205 13:18:00.485" level="INFO">Get value from JSON with expression: '$.body.photoUrls[0]'</msg>
<msg timestamp="20250205 13:18:00.512" level="TRACE">Return: 'https://abc/001'</msg>
<msg timestamp="20250205 13:18:00.513" level="INFO">${PAYLOAD_VALUE} = https://abc/001</msg>
<status status="PASS" starttime="20250205 13:18:00.482" endtime="20250205 13:18:00.513"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.514" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_PHOTOURLS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_PHOTOURLS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.514" level="TRACE">Arguments: [ '"https://abc/001"' | '"https://abc/001"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.514" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.514" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.514" endtime="20250205 13:18:00.514"/>
</kw>
<msg timestamp="20250205 13:18:00.514" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.514" endtime="20250205 13:18:00.514"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.514" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.tags[0].id' ]</msg>
<msg timestamp="20250205 13:18:00.514" level="INFO">Get value from JSON with expression: '$.body.tags[0].id'</msg>
<msg timestamp="20250205 13:18:00.542" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:00.542" level="INFO">${PAYLOAD_VALUE} = 200</msg>
<status status="PASS" starttime="20250205 13:18:00.514" endtime="20250205 13:18:00.542"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.544" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_TAGS_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_TAGS_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.544" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.544" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.546" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.544" endtime="20250205 13:18:00.546"/>
</kw>
<msg timestamp="20250205 13:18:00.546" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.544" endtime="20250205 13:18:00.546"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.tags[0].name</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.547" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.tags[0].name' ]</msg>
<msg timestamp="20250205 13:18:00.547" level="INFO">Get value from JSON with expression: '$.body.tags[0].name'</msg>
<msg timestamp="20250205 13:18:00.572" level="TRACE">Return: 'TAGS.NAME'</msg>
<msg timestamp="20250205 13:18:00.573" level="INFO">${PAYLOAD_VALUE} = TAGS.NAME</msg>
<status status="PASS" starttime="20250205 13:18:00.547" endtime="20250205 13:18:00.573"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.574" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_TAGS_NAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_TAGS_NAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.574" level="TRACE">Arguments: [ '"TAGS.NAME"' | '"TAGS.NAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.574" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.574" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.574" endtime="20250205 13:18:00.574"/>
</kw>
<msg timestamp="20250205 13:18:00.574" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.574" endtime="20250205 13:18:00.574"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:00.574" level="TRACE">Arguments: [ {'body': {'category': {'id': 100, 'name': 'CATEGORY.NAME'},
          'id': 1738750664,
          'name': 'NAME1738750664',
          'photoUrls': ['https://abc/001'],
          'status': 'available',
          'tags': [{'id': 200, 'name': 'TAGS.NAME'}]},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:00 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.554868,
 'status': 200} | '$.body.status' ]</msg>
<msg timestamp="20250205 13:18:00.574" level="INFO">Get value from JSON with expression: '$.body.status'</msg>
<msg timestamp="20250205 13:18:00.603" level="TRACE">Return: 'available'</msg>
<msg timestamp="20250205 13:18:00.603" level="INFO">${PAYLOAD_VALUE} = available</msg>
<status status="PASS" starttime="20250205 13:18:00.574" endtime="20250205 13:18:00.604"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PET_01_STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:00.606" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PET_01_STATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PET_01_STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:00.606" level="TRACE">Arguments: [ '"available"' | '"available"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:00.606" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.606" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.606" endtime="20250205 13:18:00.606"/>
</kw>
<msg timestamp="20250205 13:18:00.606" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:00.606" endtime="20250205 13:18:00.606"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:00.606" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:00.606" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.606" endtime="20250205 13:18:00.606"/>
</kw>
<doc>Test Description:Retrieve pet with existing id 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:17:59.662" endtime="20250205 13:18:00.606"/>
</test>
<test id="s1-s1-s3-t2" name="TC_GET_pet_02" line="82">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:00.613" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:00.613" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_pet_02' ]</msg>
<msg timestamp="20250205 13:18:00.617" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
             ('Type', 'Negative'),
             ('Description', 'Retrieve pet with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:00.617" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_02'), ('Type', 'Negative'), ('Description', 'Retrieve pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:00.613" endtime="20250205 13:18:00.617"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:00.618" level="TRACE">Arguments: [ 'Test Description:Retrieve pet with non-existing id \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:00.618" level="INFO">Set test documentation to:
Test Description:Retrieve pet with non-existing id 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:00.618" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:00.618" endtime="20250205 13:18:00.618"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:00.618" endtime="20250205 13:18:00.618"/>
</return>
<msg timestamp="20250205 13:18:00.618" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
             ('Type', 'Negative'),
             ('Description', 'Retrieve pet with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:00.618" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_02'), ('Type', 'Negative'), ('Description', 'Retrieve pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:00.612" endtime="20250205 13:18:00.618"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:00.622" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:00.622" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:00.622" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:00.618" endtime="20250205 13:18:00.622"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:00.624" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:00.624" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:00.624" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:00.623" endtime="20250205 13:18:00.624"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:00.626" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:00.625" endtime="20250205 13:18:00.626"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:00.626" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:00.626" endtime="20250205 13:18:00.626"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:00.626" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:00.626" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:00.626" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:00.626" endtime="20250205 13:18:00.626"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:00.631" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:00.631" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:00.631" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:00.631" endtime="20250205 13:18:00.632"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:00.632" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:00.633" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:00.672" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:00.673" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:00.632" endtime="20250205 13:18:00.673"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:00.674" endtime="20250205 13:18:00.674"/>
</return>
<msg timestamp="20250205 13:18:00.674" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:00.675" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:00.626" endtime="20250205 13:18:00.675"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_ID}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:00.676" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:00.676" level="TRACE">Return: '7a405446-e3aa-11ef-97ad-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:00.676" level="INFO">${NON_EXISTING_ID} = 7a405446-e3aa-11ef-97ad-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:00.676" endtime="20250205 13:18:00.676"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${NON_EXISTING_ID}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:00.676" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet/7a405446-e3aa-11ef-97ad-744ca1d2e576' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:00.682" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:01.245" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/pet/7a405446-e3aa-11ef-97ad-744ca1d2e576 HTTP/1.1" 404 None</msg>
<msg timestamp="20250205 13:18:01.245" level="TRACE">Return: {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "7a405446-e3aa-11ef-97ad-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:01 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.566268,
 'status': 404}</msg>
<msg timestamp="20250205 13:18:01.245" level="INFO">${RESPONSE} = {'seconds': 0.566268, 'status': 404, 'reason': 'Not Found', 'body': {'code': 404, 'type': 'unknown', 'message': 'java.lang.NumberFormatException: For input string: "7a405446-e3aa-11ef-97ad-744ca1d2e57...</msg>
<status status="PASS" starttime="20250205 13:18:00.676" endtime="20250205 13:18:01.245"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:01.252" level="TRACE">Arguments: [ {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "7a405446-e3aa-11ef-97ad-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:01 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.566268,
 'status': 404} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:01.252" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:01.279" level="TRACE">Return: {'code': 404,
 'message': 'java.lang.NumberFormatException: For input string: "7a405446-e3aa-11ef-97ad-744ca1d2e576"',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:01.280" level="INFO">${RESPONSE_PAYLOAD} = {'code': 404, 'type': 'unknown', 'message': 'java.lang.NumberFormatException: For input string: "7a405446-e3aa-11ef-97ad-744ca1d2e576"'}</msg>
<status status="PASS" starttime="20250205 13:18:01.251" endtime="20250205 13:18:01.280"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:01.282" level="TRACE">Arguments: [ {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "7a405446-e3aa-11ef-97ad-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:01 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.566268,
 'status': 404} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:01.283" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:01.308" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:18:01.308" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:18:01.281" endtime="20250205 13:18:01.308"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:01.311" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:01.311" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:01.311" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:01.310" endtime="20250205 13:18:01.311"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:01.313" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:01.313" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:01.312" endtime="20250205 13:18:01.313"/>
</kw>
<doc>Test Description:Retrieve pet with non-existing id 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:18:00.611" endtime="20250205 13:18:01.314"/>
</test>
<test id="s1-s1-s3-t3" name="TC_GET_pet_03" line="102">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:01.315" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:01.319" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_pet_03' ]</msg>
<msg timestamp="20250205 13:18:01.321" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve pets filtered by valid  status'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:01.322" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_03'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by valid  status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:01.315" endtime="20250205 13:18:01.322"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:01.324" level="TRACE">Arguments: [ 'Test Description:Retrieve pets filtered by valid  status \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:01.324" level="INFO">Set test documentation to:
Test Description:Retrieve pets filtered by valid  status 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:01.324" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:01.322" endtime="20250205 13:18:01.324"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:01.324" endtime="20250205 13:18:01.325"/>
</return>
<msg timestamp="20250205 13:18:01.325" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve pets filtered by valid  status'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:01.325" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_03'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by valid  status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:01.315" endtime="20250205 13:18:01.325"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:01.327" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:01.327" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:01.327" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:01.326" endtime="20250205 13:18:01.327"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:01.330" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:01.330" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:01.331" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:01.329" endtime="20250205 13:18:01.331"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:01.332" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:01.332" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:01.332" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:01.331" endtime="20250205 13:18:01.333"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:01.334" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:01.334" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:01.334" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:01.333" endtime="20250205 13:18:01.334"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:01.336" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:01.336" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:01.336" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:01.336" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:01.336" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:01.336" endtime="20250205 13:18:01.336"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:01.336" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:01.336" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:01.336" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:01.336" endtime="20250205 13:18:01.336"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:01.339" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:01.339" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:01.373" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:01.373" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:01.336" endtime="20250205 13:18:01.373"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:01.373" endtime="20250205 13:18:01.373"/>
</return>
<msg timestamp="20250205 13:18:01.373" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:01.373" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:01.335" endtime="20250205 13:18:01.373"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/findByStatus?status=pending</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:01.373" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet/findByStatus?status=pending' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:01.384" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:01.947" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/pet/findByStatus?status=pending HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:01.947" level="TRACE">Return: {'body': [{'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766161,
           'name': 'NAME1738748084',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738748085,
           'name': 'NAME1738748085',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'id': 9223372036854766217,
           'name': 'Dodo Dance',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 2037, 'name': '7qsTji64Cs'},
           'id': 7814,
           'name': 'vAjyNkvh5Q',
           'photoUrls': ['RXSGIYFcQT', 'TmwEU0sVML'],
           'status': 'pending',
           'tags': [{'id': 7064, 'name': 'r0FpKmVu1F'},
                    {'id': 2827, 'name': 'SSJBW156AR'},
                    {'id': 311, 'name': 'KXdlgjCjSq'},
                    {'id': 6001, 'name': '6xXUK3Z7VQ'},
                    {'id': 3878, 'name': 'cM3OenGA5L'}]},
          {'category': {'id': 6400, 'name': 'F12h6BACEj'},
           'id': 8858,
           'name': 'ycZkM9shvK',
           'photoUrls': ['Cjg74phrow', '10US9kdNze'],
           'status': 'pending',
           'tags': [{'id': 1791, 'name': 'GHSF5206z2'},
                    {'id': 242, 'name': 'NKWyrtQjkI'},
                    {'id': 4074, 'name': 'Zff0IbX6nL'}]},
          {'id': 9223372036854766459,
           'name': 'dodo',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766525,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766528,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766546,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766556,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766570,
           'name': 'Kuki',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766780,
           'name': 'NAME1738750673',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738750675,
           'name': 'NAME1738750675',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5643830000000001,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:01.952" level="INFO">${RESPONSE} = {'seconds': 0.5643830000000001, 'status': 200, 'reason': 'OK', 'body': [{'id': 9223372036854766161, 'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'}, 'name': 'NAME1738748084', 'photoUrls': ['https...</msg>
<status status="PASS" starttime="20250205 13:18:01.373" endtime="20250205 13:18:01.952"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:01.952" level="TRACE">Arguments: [ {'body': [{'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766161,
           'name': 'NAME1738748084',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738748085,
           'name': 'NAME1738748085',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'id': 9223372036854766217,
           'name': 'Dodo Dance',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 2037, 'name': '7qsTji64Cs'},
           'id': 7814,
           'name': 'vAjyNkvh5Q',
           'photoUrls': ['RXSGIYFcQT', 'TmwEU0sVML'],
           'status': 'pending',
           'tags': [{'id': 7064, 'name': 'r0FpKmVu1F'},
                    {'id': 2827, 'name': 'SSJBW156AR'},
                    {'id': 311, 'name': 'KXdlgjCjSq'},
                    {'id': 6001, 'name': '6xXUK3Z7VQ'},
                    {'id': 3878, 'name': 'cM3OenGA5L'}]},
          {'category': {'id': 6400, 'name': 'F12h6BACEj'},
           'id': 8858,
           'name': 'ycZkM9shvK',
           'photoUrls': ['Cjg74phrow', '10US9kdNze'],
           'status': 'pending',
           'tags': [{'id': 1791, 'name': 'GHSF5206z2'},
                    {'id': 242, 'name': 'NKWyrtQjkI'},
                    {'id': 4074, 'name': 'Zff0IbX6nL'}]},
          {'id': 9223372036854766459,
           'name': 'dodo',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766525,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766528,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766546,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766556,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766570,
           'name': 'Kuki',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766780,
           'name': 'NAME1738750673',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738750675,
           'name': 'NAME1738750675',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5643830000000001,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:01.952" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:01.984" level="TRACE">Return: [{'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
  'id': 9223372036854766161,
  'name': 'NAME1738748084',
  'photoUrls': ['https://abc/002'],
  'status': 'pending',
  'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
  'id': 1738748085,
  'name': 'NAME1738748085',
  'photoUrls': ['https://abc/002'],
  'status': 'pending',
  'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 {'id': 9223372036854766217,
  'name': 'Dodo Dance',
  'photoUrls': [],
  'status': 'pending',
  'tags': []},
 {'category': {'id': 2037, 'name': '7qsTji64Cs'},
  'id': 7814,
  'name': 'vAjyNkvh5Q',
  'photoUrls': ['RXSGIYFcQT', 'TmwEU0sVML'],
  'status': 'pending',
  'tags': [{'id': 7064, 'name': 'r0FpKmVu1F'},
           {'id': 2827, 'name': 'SSJBW156AR'},
           {'id': 311, 'name': 'KXdlgjCjSq'},
           {'id': 6001, 'name': '6xXUK3Z7VQ'},
           {'id': 3878, 'name': 'cM3OenGA5L'}]},
 {'category': {'id': 6400, 'name': 'F12h6BACEj'},
  'id': 8858,
  'name': 'ycZkM9shvK',
  'photoUrls': ['Cjg74phrow', '10US9kdNze'],
  'status': 'pending',
  'tags': [{'id': 1791, 'name': 'GHSF5206z2'},
           {'id': 242, 'name': 'NKWyrtQjkI'},
           {'id': 4074, 'name': 'Zff0IbX6nL'}]},
 {'id': 9223372036854766459,
  'name': 'dodo',
  'photoUrls': [],
  'status': 'pending',
  'tags': []},
 {'category': {'id': 0, 'name': 'dog'},
  'id': 9223372036854766525,
  'name': 'haska',
  'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
  'status': 'pending',
  'tags': [{'id': 0, 'name': 'small'}]},
 {'category': {'id': 0, 'name': 'dog'},
  'id': 9223372036854766528,
  'name': 'haska',
  'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
  'status': 'pending',
  'tags': [{'id': 0, 'name': 'small'}]},
 {'category': {'id': 0, 'name': 'dog'},
  'id': 9223372036854766546,
  'name': 'haska',
  'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
  'status': 'pending',
  'tags': [{'id': 0, 'name': 'small'}]},
 {'category': {'id': 0, 'name': 'dog'},
  'id': 9223372036854766556,
  'name': 'haska',
  'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
  'status': 'pending',
  'tags': [{'id': 0, 'name': 'small'}]},
 {'category': {'id': 0, 'name': 'dog'},
  'id': 9223372036854766570,
  'name': 'Kuki',
  'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
  'status': 'pending',
  'tags': [{'id': 0, 'name': 'small'}]},
 {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
  'id': 9223372036854766780,
  'name': 'NAME1738750673',
  'photoUrls': ['https://abc/002'],
  'status': 'pending',
  'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
 {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
  'id': 1738750675,
  'name': 'NAME1738750675',
  'photoUrls': ['https://abc/002'],
  'status': 'pending',
  'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}]</msg>
<msg timestamp="20250205 13:18:01.984" level="INFO">${RESPONSE_PAYLOAD} = [{'id': 9223372036854766161, 'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'}, 'name': 'NAME1738748084', 'photoUrls': ['https://abc/002'], 'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}], 'status':...</msg>
<status status="PASS" starttime="20250205 13:18:01.952" endtime="20250205 13:18:01.984"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:01.984" level="TRACE">Arguments: [ {'body': [{'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766161,
           'name': 'NAME1738748084',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738748085,
           'name': 'NAME1738748085',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'id': 9223372036854766217,
           'name': 'Dodo Dance',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 2037, 'name': '7qsTji64Cs'},
           'id': 7814,
           'name': 'vAjyNkvh5Q',
           'photoUrls': ['RXSGIYFcQT', 'TmwEU0sVML'],
           'status': 'pending',
           'tags': [{'id': 7064, 'name': 'r0FpKmVu1F'},
                    {'id': 2827, 'name': 'SSJBW156AR'},
                    {'id': 311, 'name': 'KXdlgjCjSq'},
                    {'id': 6001, 'name': '6xXUK3Z7VQ'},
                    {'id': 3878, 'name': 'cM3OenGA5L'}]},
          {'category': {'id': 6400, 'name': 'F12h6BACEj'},
           'id': 8858,
           'name': 'ycZkM9shvK',
           'photoUrls': ['Cjg74phrow', '10US9kdNze'],
           'status': 'pending',
           'tags': [{'id': 1791, 'name': 'GHSF5206z2'},
                    {'id': 242, 'name': 'NKWyrtQjkI'},
                    {'id': 4074, 'name': 'Zff0IbX6nL'}]},
          {'id': 9223372036854766459,
           'name': 'dodo',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766525,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766528,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766546,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766556,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766570,
           'name': 'Kuki',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766780,
           'name': 'NAME1738750673',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738750675,
           'name': 'NAME1738750675',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5643830000000001,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:01.991" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:02.018" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:02.018" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:01.984" endtime="20250205 13:18:02.018"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:02.021" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:02.021" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:02.021" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.020" endtime="20250205 13:18:02.021"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:02.023" level="TRACE">Arguments: [ {'body': [{'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766161,
           'name': 'NAME1738748084',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738748085,
           'name': 'NAME1738748085',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'id': 9223372036854766217,
           'name': 'Dodo Dance',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 2037, 'name': '7qsTji64Cs'},
           'id': 7814,
           'name': 'vAjyNkvh5Q',
           'photoUrls': ['RXSGIYFcQT', 'TmwEU0sVML'],
           'status': 'pending',
           'tags': [{'id': 7064, 'name': 'r0FpKmVu1F'},
                    {'id': 2827, 'name': 'SSJBW156AR'},
                    {'id': 311, 'name': 'KXdlgjCjSq'},
                    {'id': 6001, 'name': '6xXUK3Z7VQ'},
                    {'id': 3878, 'name': 'cM3OenGA5L'}]},
          {'category': {'id': 6400, 'name': 'F12h6BACEj'},
           'id': 8858,
           'name': 'ycZkM9shvK',
           'photoUrls': ['Cjg74phrow', '10US9kdNze'],
           'status': 'pending',
           'tags': [{'id': 1791, 'name': 'GHSF5206z2'},
                    {'id': 242, 'name': 'NKWyrtQjkI'},
                    {'id': 4074, 'name': 'Zff0IbX6nL'}]},
          {'id': 9223372036854766459,
           'name': 'dodo',
           'photoUrls': [],
           'status': 'pending',
           'tags': []},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766525,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766528,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766546,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766556,
           'name': 'haska',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 0, 'name': 'dog'},
           'id': 9223372036854766570,
           'name': 'Kuki',
           'photoUrls': ['https://i.pinimg.com/736x/0a/60/fb/0a60fb2afb246fd0bc8796ae7022e5d2.jpg'],
           'status': 'pending',
           'tags': [{'id': 0, 'name': 'small'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 9223372036854766780,
           'name': 'NAME1738750673',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]},
          {'category': {'id': 101, 'name': 'NEW.CATEGORY.NAME'},
           'id': 1738750675,
           'name': 'NAME1738750675',
           'photoUrls': ['https://abc/002'],
           'status': 'pending',
           'tags': [{'id': 201, 'name': 'NEW.TAGS.NAME'}]}],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5643830000000001,
 'status': 200} | '$.body[0].status' ]</msg>
<msg timestamp="20250205 13:18:02.026" level="INFO">Get value from JSON with expression: '$.body[0].status'</msg>
<msg timestamp="20250205 13:18:02.050" level="TRACE">Return: 'pending'</msg>
<msg timestamp="20250205 13:18:02.051" level="INFO">${PAYLOAD_VALUE} = pending</msg>
<status status="PASS" starttime="20250205 13:18:02.021" endtime="20250205 13:18:02.051"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"pending"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:02.053" level="TRACE">Arguments: [ '"pending"' | '"pending"' ]</msg>
<msg timestamp="20250205 13:18:02.053" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:02.053" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.053" endtime="20250205 13:18:02.053"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:02.055" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:02.055" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.055" endtime="20250205 13:18:02.055"/>
</kw>
<doc>Test Description:Retrieve pets filtered by valid  status 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:01.315" endtime="20250205 13:18:02.055"/>
</test>
<test id="s1-s1-s3-t4" name="TC_GET_pet_04" line="128">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:02.055" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:02.061" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_pet_04' ]</msg>
<msg timestamp="20250205 13:18:02.064" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve pets filtered by invalid status'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:02.065" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_04'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by invalid status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:02.061" endtime="20250205 13:18:02.065"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:02.067" level="TRACE">Arguments: [ 'Test Description:Retrieve pets filtered by invalid status \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:02.067" level="INFO">Set test documentation to:
Test Description:Retrieve pets filtered by invalid status 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:02.068" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.065" endtime="20250205 13:18:02.068"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:02.068" endtime="20250205 13:18:02.068"/>
</return>
<msg timestamp="20250205 13:18:02.068" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve pets filtered by invalid status'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:02.068" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_pet_04'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by invalid status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:02.055" endtime="20250205 13:18:02.069"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:02.070" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:02.070" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:02.070" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:02.069" endtime="20250205 13:18:02.070"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:02.072" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:02.072" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:02.072" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:02.071" endtime="20250205 13:18:02.072"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:02.074" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:02.074" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:02.074" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:02.074" endtime="20250205 13:18:02.076"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:02.076" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:02.076" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:02.076" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:02.076" endtime="20250205 13:18:02.076"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:02.079" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:02.080" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:02.080" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:02.080" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:02.080" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:02.079" endtime="20250205 13:18:02.080"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:02.081" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:02.081" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:02.081" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:02.080" endtime="20250205 13:18:02.081"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:02.082" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:02.082" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:02.113" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:02.114" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:02.082" endtime="20250205 13:18:02.114"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:02.114" endtime="20250205 13:18:02.115"/>
</return>
<msg timestamp="20250205 13:18:02.115" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:02.116" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:02.079" endtime="20250205 13:18:02.116"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${STATUS}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:02.118" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:02.118" level="TRACE">Return: '7b1c7dca-e3aa-11ef-bff7-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:02.119" level="INFO">${STATUS} = 7b1c7dca-e3aa-11ef-bff7-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:02.117" endtime="20250205 13:18:02.119"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/findByStatus?status=${STATUS}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:02.122" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet/findByStatus?status=7b1c7dca-e3aa-11ef-bff7-744ca1d2e576' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:02.125" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:02.683" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/pet/findByStatus?status=7b1c7dca-e3aa-11ef-bff7-744ca1d2e576 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:02.692" level="TRACE">Return: {'body': [],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567748,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:02.692" level="INFO">${RESPONSE} = {'seconds': 0.567748, 'status': 200, 'reason': 'OK', 'body': [], 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:02 GMT', 'Content-Type': 'application/json', 'Transfer-Encoding': 'chunked', 'Connection': ...</msg>
<status status="PASS" starttime="20250205 13:18:02.120" endtime="20250205 13:18:02.692"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:02.692" level="TRACE">Arguments: [ {'body': [],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567748,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:02.692" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:02.723" level="TRACE">Return: []</msg>
<msg timestamp="20250205 13:18:02.724" level="INFO">${RESPONSE_PAYLOAD} = []</msg>
<status status="PASS" starttime="20250205 13:18:02.692" endtime="20250205 13:18:02.724"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:02.726" level="TRACE">Arguments: [ {'body': [],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567748,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:02.727" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:02.752" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:02.752" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:02.725" endtime="20250205 13:18:02.752"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:02.754" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:02.754" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:02.754" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.753" endtime="20250205 13:18:02.754"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${BODY}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:02.754" level="TRACE">Arguments: [ {'body': [],
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:02 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567748,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:02.754" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:02.782" level="TRACE">Return: []</msg>
<msg timestamp="20250205 13:18:02.782" level="INFO">${BODY} = []</msg>
<status status="PASS" starttime="20250205 13:18:02.754" endtime="20250205 13:18:02.782"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"[]"</arg>
<arg>"${BODY}"</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:02.784" level="TRACE">Arguments: [ '"[]"' | '"[]"' ]</msg>
<msg timestamp="20250205 13:18:02.784" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:02.785" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.784" endtime="20250205 13:18:02.785"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:02.786" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:02.786" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.786" endtime="20250205 13:18:02.786"/>
</kw>
<doc>Test Description:Retrieve pets filtered by invalid status 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:02.055" endtime="20250205 13:18:02.786"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:02.790" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:02.790" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:02.790" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.790" endtime="20250205 13:18:02.791"/>
</kw>
<msg timestamp="20250205 13:18:02.791" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.790" endtime="20250205 13:18:02.791"/>
</kw>
<status status="PASS" starttime="20250205 13:17:59.644" endtime="20250205 13:18:02.791"/>
</suite>
<suite id="s1-s1-s4" name="04 DELETE pet" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\pet\04_DELETE_pet.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:02.803" level="TRACE">Arguments: [ ${CSVFILE}='pet.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:02.804" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:02.804" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:02.804" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:02.804" endtime="20250205 13:18:02.805"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:02.805" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'pet.csv' ]</msg>
<msg timestamp="20250205 13:18:02.807" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_03'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_04'), ('Type', 'Negative'), ('Description', 'Create pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_05'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_06'), ('Type', 'Negative'), ('Description', 'Create pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_pet_07'), ('Type', 'Negative'), ('Description', 'Create pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_08'), ('Type', 'Positive'), ('Description', 'Update pet name and status with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_09'), ('Type', 'Negative'), ('Description', 'Update pet name and status with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_10'), ('Type', 'Negative'), ('Description', 'Update pet status with formdata using invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_11'), ('Type', 'Positive'), ('Description', 'Upload pet image with formdata'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_pet_12'), ('Type', 'Negative'), ('Description', 'Update pet image with formdata using non-existing pet id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_01'), ('Type', 'Positive'), ('Description', 'Update an existing pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_02'), ('Type', 'Positive'), ('Description', 'Create pet by providing non-existing id to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_03'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [name]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_04'), ('Type', 'Negative'), ('Description', 'Update pet with payload missing mandatory field [photoUrls]'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_05'), ('Type', 'Negative'), ('Description', 'Update pet with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_pet_06'), ('Type', 'Negative'), ('Description', 'Update pet with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_01'), ('Type', 'Positive'), ('Description', 'Retrieve pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_02'), ('Type', 'Negative'), ('Description', 'Retrieve pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_03'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by valid  status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_pet_04'), ('Type', 'Positive'), ('Description', 'Retrieve pets filtered by invalid status'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'), ('Type', 'Positive'), ('Description', 'Delete pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'), ('Type', 'Negative'), ('Description', 'Delete pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:02.807" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:02.810" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<status status="PASS" starttime="20250205 13:18:02.805" endtime="20250205 13:18:02.810"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:02.811" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:02.811" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_pet_01'), ('Type', 'Positive'), ('Description', 'Create pet with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": ...</msg>
<msg timestamp="20250205 13:18:02.811" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.810" endtime="20250205 13:18:02.811"/>
</kw>
<msg timestamp="20250205 13:18:02.811" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.803" endtime="20250205 13:18:02.811"/>
</kw>
<test id="s1-s1-s4-t1" name="TC_DELETE_pet_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:02.814" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:02.814" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_DELETE_pet_01' ]</msg>
<msg timestamp="20250205 13:18:02.815" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Delete pet with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:02.815" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'), ('Type', 'Positive'), ('Description', 'Delete pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:02.814" endtime="20250205 13:18:02.815"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:02.815" level="TRACE">Arguments: [ 'Test Description:Delete pet with existing id \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:02.815" level="INFO">Set test documentation to:
Test Description:Delete pet with existing id 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:02.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:02.815" endtime="20250205 13:18:02.815"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:02.815" endtime="20250205 13:18:02.815"/>
</return>
<msg timestamp="20250205 13:18:02.815" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
             ('Type', 'Positive'),
             ('Description', 'Delete pet with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:02.815" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'), ('Type', 'Positive'), ('Description', 'Delete pet with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:02.813" endtime="20250205 13:18:02.815"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:02.823" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:02.823" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:02.824" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:02.822" endtime="20250205 13:18:02.824"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:02.826" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:02.826" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:02.826" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:02.825" endtime="20250205 13:18:02.826"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:02.829" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:02.829" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:02.830" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:02.826" endtime="20250205 13:18:02.831"/>
</kw>
<kw name="DELETE" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${PET_01_ID}</arg>
<arg>validate=True</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:02.832" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet/1738750664' | validate=True ]</msg>
<msg timestamp="20250205 13:18:02.834" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:03.402" level="DEBUG">https://petstore.swagger.io:443 "DELETE /v2/pet/1738750664 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:03.402" level="TRACE">Return: {'body': {'code': 200, 'message': '1738750664', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:03 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.568093,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:03.402" level="INFO">${RESPONSE} = {'seconds': 0.568093, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': '1738750664'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:03 GMT', 'Content-Type': 'applicatio...</msg>
<status status="PASS" starttime="20250205 13:18:02.832" endtime="20250205 13:18:03.402"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:03.402" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750664', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:03 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.568093,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:03.402" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:03.462" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:03.462" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:03.402" endtime="20250205 13:18:03.462"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:03.462" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:03.462" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:03.462" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:03.462" endtime="20250205 13:18:03.462"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:03.472" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:03.472" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:03.472" endtime="20250205 13:18:03.472"/>
</kw>
<doc>Test Description:Delete pet with existing id 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:02.812" endtime="20250205 13:18:03.472"/>
</test>
<test id="s1-s1-s4-t2" name="TC_DELETE_pet_02" line="30">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:03.477" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:03.478" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Create pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_07'),
              ('Type', 'Negative'),
              ('Description', 'Create pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_08'),
              ('Type', 'Positive'),
              ('Description', 'Update pet name and status with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_09'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet name and status with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_10'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet status with formdata using invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_11'),
              ('Type', 'Positive'),
              ('Description', 'Upload pet image with formdata'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_pet_12'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet image with formdata using non-existing pet id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Update an existing pet with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create pet by providing non-existing id to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_03'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [name]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_04'),
              ('Type', 'Negative'),
              ('Description',
               'Update pet with payload missing mandatory field [photoUrls]'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "available"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_05'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "category": {\n    "id": 0,\n    "name": "string"\n  },\n  "name": "doggie",\n  "photoUrls": [\n    "string"\n  ],\n  "tags": [\n    {\n      "id": 0,\n      "name": "string"\n    }\n  ],\n  "status": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_pet_06'),
              ('Type', 'Negative'),
              ('Description', 'Update pet with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by valid  status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_pet_04'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve pets filtered by invalid status'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete pet with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete pet with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_DELETE_pet_02' ]</msg>
<msg timestamp="20250205 13:18:03.481" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
             ('Type', 'Negative'),
             ('Description', 'Delete pet with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:03.481" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'), ('Type', 'Negative'), ('Description', 'Delete pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:03.478" endtime="20250205 13:18:03.481"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:03.482" level="TRACE">Arguments: [ 'Test Description:Delete pet with non-existing id \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:03.482" level="INFO">Set test documentation to:
Test Description:Delete pet with non-existing id 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:03.482" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:03.481" endtime="20250205 13:18:03.482"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:03.483" endtime="20250205 13:18:03.483"/>
</return>
<msg timestamp="20250205 13:18:03.483" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'),
             ('Type', 'Negative'),
             ('Description', 'Delete pet with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:03.485" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_pet_02'), ('Type', 'Negative'), ('Description', 'Delete pet with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:03.477" endtime="20250205 13:18:03.485"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:03.486" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:03.486" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:03.486" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:03.485" endtime="20250205 13:18:03.486"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:03.489" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:03.489" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:03.489" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:03.488" endtime="20250205 13:18:03.489"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:03.489" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:03.489" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:03.491" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:03.489" endtime="20250205 13:18:03.491"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_ID}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:03.493" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:03.493" level="TRACE">Return: '7bee25f0-e3aa-11ef-8bfd-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:03.493" level="INFO">${NON_EXISTING_ID} = 7bee25f0-e3aa-11ef-8bfd-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:03.493" endtime="20250205 13:18:03.493"/>
</kw>
<kw name="DELETE" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${NON_EXISTING_ID}</arg>
<arg>validate=True</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:03.494" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/pet/7bee25f0-e3aa-11ef-8bfd-744ca1d2e576' | validate=True ]</msg>
<msg timestamp="20250205 13:18:03.496" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:04.093" level="DEBUG">https://petstore.swagger.io:443 "DELETE /v2/pet/7bee25f0-e3aa-11ef-8bfd-744ca1d2e576 HTTP/1.1" 404 None</msg>
<msg timestamp="20250205 13:18:04.093" level="TRACE">Return: {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "7bee25f0-e3aa-11ef-8bfd-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:04 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.596401,
 'status': 404}</msg>
<msg timestamp="20250205 13:18:04.093" level="INFO">${RESPONSE} = {'seconds': 0.596401, 'status': 404, 'reason': 'Not Found', 'body': {'code': 404, 'type': 'unknown', 'message': 'java.lang.NumberFormatException: For input string: "7bee25f0-e3aa-11ef-8bfd-744ca1d2e57...</msg>
<status status="PASS" starttime="20250205 13:18:03.493" endtime="20250205 13:18:04.093"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:04.093" level="TRACE">Arguments: [ {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "7bee25f0-e3aa-11ef-8bfd-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:04 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.596401,
 'status': 404} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:04.093" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:04.124" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:18:04.124" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:18:04.093" endtime="20250205 13:18:04.125"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:04.126" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:04.127" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:04.127" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.125" endtime="20250205 13:18:04.128"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:04.129" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:04.129" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.129" endtime="20250205 13:18:04.129"/>
</kw>
<doc>Test Description:Delete pet with non-existing id 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:18:03.472" endtime="20250205 13:18:04.129"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:04.132" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:04.133" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:04.133" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.133" endtime="20250205 13:18:04.133"/>
</kw>
<msg timestamp="20250205 13:18:04.133" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.132" endtime="20250205 13:18:04.134"/>
</kw>
<status status="PASS" starttime="20250205 13:18:02.794" endtime="20250205 13:18:04.134"/>
</suite>
<status status="FAIL" starttime="20250205 13:17:43.135" endtime="20250205 13:18:04.136"/>
</suite>
<suite id="s1-s2" name="Store" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\store">
<suite id="s1-s2-s1" name="01 POST store" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\store\01_POST_store.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:04.155" level="TRACE">Arguments: [ ${CSVFILE}='store.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:04.155" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:04.155" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:04.155" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:04.155" endtime="20250205 13:18:04.155"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:04.155" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'store.csv' ]</msg>
<msg timestamp="20250205 13:18:04.155" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_02'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_03'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_04'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid quantity'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_05'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid shipDate'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_06'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_07'), ('Type', 'Negative'), ('Description', 'Create order with no payload'), ('ExpectedHTTPResponseStatusCode', '400'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_01'), ('Type', 'Positive'), ('Description', 'Retrieve order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_02'), ('Type', 'Negative'), ('Description', 'Retrieve order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_03'), ('Type', 'Positive'), ('Description', 'Retrieve store inventory'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_store_01'), ('Type', 'Positive'), ('Description', 'Delete order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_store_02'), ('Type', 'Negative'), ('Description', 'Delete order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:04.155" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:04.155" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "i...</msg>
<status status="PASS" starttime="20250205 13:18:04.155" endtime="20250205 13:18:04.161"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:04.161" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:04.162" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "i...</msg>
<msg timestamp="20250205 13:18:04.162" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.161" endtime="20250205 13:18:04.162"/>
</kw>
<msg timestamp="20250205 13:18:04.163" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.155" endtime="20250205 13:18:04.163"/>
</kw>
<test id="s1-s2-s1-t1" name="TC_POST_store_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:04.166" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:04.167" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_01' ]</msg>
<msg timestamp="20250205 13:18:04.168" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_01'),
             ('Type', 'Positive'),
             ('Description', 'Create order with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:04.168" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id...</msg>
<status status="PASS" starttime="20250205 13:18:04.166" endtime="20250205 13:18:04.169"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:04.171" level="TRACE">Arguments: [ 'Test Description:Create order with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:04.171" level="INFO">Set test documentation to:
Test Description:Create order with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:04.172" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.169" endtime="20250205 13:18:04.172"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:04.172" endtime="20250205 13:18:04.172"/>
</return>
<msg timestamp="20250205 13:18:04.173" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_01'),
             ('Type', 'Positive'),
             ('Description', 'Create order with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:04.173" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id...</msg>
<status status="PASS" starttime="20250205 13:18:04.165" endtime="20250205 13:18:04.173"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.176" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:04.176" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:04.176" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:04.174" endtime="20250205 13:18:04.177"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.179" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:04.179" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:04.179" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:04.178" endtime="20250205 13:18:04.180"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.182" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:04.182" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:04.182" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:04.181" endtime="20250205 13:18:04.183"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:04.184" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}' ]</msg>
<msg timestamp="20250205 13:18:04.185" level="TRACE">Return: {'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:04.185" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:04.183" endtime="20250205 13:18:04.185"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:04.186" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:04.186" level="TRACE">Return: 1738750684</msg>
<msg timestamp="20250205 13:18:04.187" level="INFO">${SECS} = 1738750684</msg>
<status status="PASS" starttime="20250205 13:18:04.186" endtime="20250205 13:18:04.187"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.189" level="TRACE">Arguments: [ 1738750684 ]</msg>
<msg timestamp="20250205 13:18:04.189" level="TRACE">Return: 1738750684</msg>
<msg timestamp="20250205 13:18:04.190" level="INFO">${ID} = 1738750684</msg>
<status status="PASS" starttime="20250205 13:18:04.188" endtime="20250205 13:18:04.190"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:04.193" level="TRACE">Arguments: [ {'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | '$.id' | 1738750684 ]</msg>
<msg timestamp="20250205 13:18:04.194" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:18:04.222" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<status status="PASS" starttime="20250205 13:18:04.192" endtime="20250205 13:18:04.222"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_01_ID}</arg>
<arg>${ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:04.222" level="TRACE">Arguments: [ '${ORDER_01_ID}' | '${ID}' ]</msg>
<msg timestamp="20250205 13:18:04.222" level="INFO">${ORDER_01_ID} = 1738750684</msg>
<msg timestamp="20250205 13:18:04.222" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.222" endtime="20250205 13:18:04.222"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${PETID}</var>
<arg>100</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:04.222" level="TRACE">Arguments: [ '100' ]</msg>
<msg timestamp="20250205 13:18:04.222" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:04.222" level="TRACE">Return: 100</msg>
<msg timestamp="20250205 13:18:04.222" level="INFO">${PETID} = 100</msg>
<status status="PASS" starttime="20250205 13:18:04.222" endtime="20250205 13:18:04.222"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.petId</arg>
<arg>${PETID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:04.222" level="TRACE">Arguments: [ {'complete': True,
 'id': 1738750684,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | '$.petId' | 100 ]</msg>
<msg timestamp="20250205 13:18:04.222" level="INFO">Update JSON with expression: '$.petId'</msg>
<msg timestamp="20250205 13:18:04.257" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<status status="PASS" starttime="20250205 13:18:04.222" endtime="20250205 13:18:04.257"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_01_PETID}</arg>
<arg>${PETID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:04.259" level="TRACE">Arguments: [ '${ORDER_01_PETID}' | '${PETID}' ]</msg>
<msg timestamp="20250205 13:18:04.259" level="INFO">${ORDER_01_PETID} = 100</msg>
<msg timestamp="20250205 13:18:04.259" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.259" endtime="20250205 13:18:04.259"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${QUANTITY}</var>
<arg>5</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:04.261" level="TRACE">Arguments: [ '5' ]</msg>
<msg timestamp="20250205 13:18:04.262" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:04.262" level="TRACE">Return: 5</msg>
<msg timestamp="20250205 13:18:04.262" level="INFO">${QUANTITY} = 5</msg>
<status status="PASS" starttime="20250205 13:18:04.261" endtime="20250205 13:18:04.262"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.quantity</arg>
<arg>${QUANTITY}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:04.262" level="TRACE">Arguments: [ {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | '$.quantity' | 5 ]</msg>
<msg timestamp="20250205 13:18:04.262" level="INFO">Update JSON with expression: '$.quantity'</msg>
<msg timestamp="20250205 13:18:04.297" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<status status="PASS" starttime="20250205 13:18:04.262" endtime="20250205 13:18:04.298"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_01_QUANTITY}</arg>
<arg>${QUANTITY}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:04.300" level="TRACE">Arguments: [ '${ORDER_01_QUANTITY}' | '${QUANTITY}' ]</msg>
<msg timestamp="20250205 13:18:04.302" level="INFO">${ORDER_01_QUANTITY} = 5</msg>
<msg timestamp="20250205 13:18:04.302" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.299" endtime="20250205 13:18:04.302"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${SHIPDATE}</var>
<arg>2025-02-03T19:45:05.865Z</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.302" level="TRACE">Arguments: [ '2025-02-03T19:45:05.865Z' ]</msg>
<msg timestamp="20250205 13:18:04.302" level="TRACE">Return: '2025-02-03T19:45:05.865Z'</msg>
<msg timestamp="20250205 13:18:04.302" level="INFO">${SHIPDATE} = 2025-02-03T19:45:05.865Z</msg>
<status status="PASS" starttime="20250205 13:18:04.302" endtime="20250205 13:18:04.302"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.shipDate</arg>
<arg>${SHIPDATE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:04.302" level="TRACE">Arguments: [ {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | '$.shipDate' | '2025-02-03T19:45:05.865Z' ]</msg>
<msg timestamp="20250205 13:18:04.302" level="INFO">Update JSON with expression: '$.shipDate'</msg>
<msg timestamp="20250205 13:18:04.331" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<status status="PASS" starttime="20250205 13:18:04.302" endtime="20250205 13:18:04.331"/>
</kw>
<kw name="Get Substring" library="String">
<var>${SHIPDATE}</var>
<arg>${SHIPDATE}</arg>
<arg>0</arg>
<arg>23</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Arguments: [ '2025-02-03T19:45:05.865Z' | '0' | '23' ]</msg>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Return: '2025-02-03T19:45:05.865'</msg>
<msg timestamp="20250205 13:18:04.333" level="INFO">${SHIPDATE} = 2025-02-03T19:45:05.865</msg>
<status status="PASS" starttime="20250205 13:18:04.333" endtime="20250205 13:18:04.333"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_01_SHIPDATE}</arg>
<arg>${SHIPDATE}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Arguments: [ '${ORDER_01_SHIPDATE}' | '${SHIPDATE}' ]</msg>
<msg timestamp="20250205 13:18:04.333" level="INFO">${ORDER_01_SHIPDATE} = 2025-02-03T19:45:05.865</msg>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.333" endtime="20250205 13:18:04.333"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${STATUS}</var>
<arg>placed</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Arguments: [ 'placed' ]</msg>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Return: 'placed'</msg>
<msg timestamp="20250205 13:18:04.333" level="INFO">${STATUS} = placed</msg>
<status status="PASS" starttime="20250205 13:18:04.333" endtime="20250205 13:18:04.333"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.status</arg>
<arg>${STATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:04.333" level="TRACE">Arguments: [ {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | '$.status' | 'placed' ]</msg>
<msg timestamp="20250205 13:18:04.333" level="INFO">Update JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:04.365" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<status status="PASS" starttime="20250205 13:18:04.333" endtime="20250205 13:18:04.367"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_01_STATUS}</arg>
<arg>${STATUS}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:04.367" level="TRACE">Arguments: [ '${ORDER_01_STATUS}' | '${STATUS}' ]</msg>
<msg timestamp="20250205 13:18:04.368" level="INFO">${ORDER_01_STATUS} = placed</msg>
<msg timestamp="20250205 13:18:04.368" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.367" endtime="20250205 13:18:04.368"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${COMPLETE}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:04.368" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20250205 13:18:04.368" level="TRACE">Return: True</msg>
<msg timestamp="20250205 13:18:04.368" level="INFO">${COMPLETE} = True</msg>
<status status="PASS" starttime="20250205 13:18:04.368" endtime="20250205 13:18:04.368"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.complete</arg>
<arg>${COMPLETE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:04.372" level="TRACE">Arguments: [ {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | '$.complete' | True ]</msg>
<msg timestamp="20250205 13:18:04.373" level="INFO">Update JSON with expression: '$.complete'</msg>
<msg timestamp="20250205 13:18:04.399" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<status status="PASS" starttime="20250205 13:18:04.372" endtime="20250205 13:18:04.400"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_01_COMPLETE}</arg>
<arg>${COMPLETE}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:04.401" level="TRACE">Arguments: [ '${ORDER_01_COMPLETE}' | '${COMPLETE}' ]</msg>
<msg timestamp="20250205 13:18:04.402" level="INFO">${ORDER_01_COMPLETE} = True</msg>
<msg timestamp="20250205 13:18:04.403" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:04.400" endtime="20250205 13:18:04.403"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:04.404" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:04.404" endtime="20250205 13:18:04.404"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:04.404" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:04.404" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:04.404" endtime="20250205 13:18:04.404"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:04.404" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:04.404" endtime="20250205 13:18:04.404"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:04.404" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:04.404" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:04.443" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:04.404" endtime="20250205 13:18:04.443"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:04.443" endtime="20250205 13:18:04.443"/>
</return>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:04.443" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:04.404" endtime="20250205 13:18:04.443"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:04.443" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:04.443" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:04.443" endtime="20250205 13:18:04.443"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:04.443" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:04.443" endtime="20250205 13:18:04.443"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:04.443" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:04.443" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:04.478" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:04.479" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:04.443" endtime="20250205 13:18:04.479"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:04.479" endtime="20250205 13:18:04.479"/>
</return>
<msg timestamp="20250205 13:18:04.480" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:04.481" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:04.443" endtime="20250205 13:18:04.481"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:04.483" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | body={'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:04.483" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:05.063" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:05.063" level="TRACE">Return: {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:05.063" level="INFO">${RESPONSE} = {'seconds': 0.5825370000000001, 'status': 200, 'reason': 'OK', 'body': {'id': 1738750684, 'petId': 100, 'quantity': 5, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'placed', 'complete': True}...</msg>
<status status="PASS" starttime="20250205 13:18:04.482" endtime="20250205 13:18:05.063"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.072" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:05.072" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:05.100" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865+0000',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:05.100" level="INFO">${RESPONSE_PAYLOAD} = {'id': 1738750684, 'petId': 100, 'quantity': 5, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:05.072" endtime="20250205 13:18:05.100"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.103" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:05.104" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:05.129" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:05.130" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:05.102" endtime="20250205 13:18:05.130"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:05.133" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:05.134" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.134" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.131" endtime="20250205 13:18:05.134"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.134" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:05.134" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:05.160" level="TRACE">Return: 1738750684</msg>
<msg timestamp="20250205 13:18:05.161" level="INFO">${PAYLOAD_VALUE} = 1738750684</msg>
<status status="PASS" starttime="20250205 13:18:05.134" endtime="20250205 13:18:05.161"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:05.164" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:05.164" level="TRACE">Arguments: [ '"1738750684"' | '"1738750684"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:05.165" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.165" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.164" endtime="20250205 13:18:05.165"/>
</kw>
<msg timestamp="20250205 13:18:05.165" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:05.163" endtime="20250205 13:18:05.165"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.petId</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.165" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body.petId' ]</msg>
<msg timestamp="20250205 13:18:05.165" level="INFO">Get value from JSON with expression: '$.body.petId'</msg>
<msg timestamp="20250205 13:18:05.194" level="TRACE">Return: 100</msg>
<msg timestamp="20250205 13:18:05.194" level="INFO">${PAYLOAD_VALUE} = 100</msg>
<status status="PASS" starttime="20250205 13:18:05.165" endtime="20250205 13:18:05.194"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PETID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:05.196" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PETID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PETID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:05.196" level="TRACE">Arguments: [ '"100"' | '"100"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:05.197" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.197" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.196" endtime="20250205 13:18:05.197"/>
</kw>
<msg timestamp="20250205 13:18:05.197" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:05.195" endtime="20250205 13:18:05.197"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.quantity</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.198" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body.quantity' ]</msg>
<msg timestamp="20250205 13:18:05.198" level="INFO">Get value from JSON with expression: '$.body.quantity'</msg>
<msg timestamp="20250205 13:18:05.224" level="TRACE">Return: 5</msg>
<msg timestamp="20250205 13:18:05.225" level="INFO">${PAYLOAD_VALUE} = 5</msg>
<status status="PASS" starttime="20250205 13:18:05.197" endtime="20250205 13:18:05.225"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${QUANTITY}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:05.226" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${QUANTITY}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${QUANTITY}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:05.226" level="TRACE">Arguments: [ '"5"' | '"5"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:05.226" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.226" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.226" endtime="20250205 13:18:05.226"/>
</kw>
<msg timestamp="20250205 13:18:05.226" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:05.226" endtime="20250205 13:18:05.226"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.shipDate</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.226" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body.shipDate' ]</msg>
<msg timestamp="20250205 13:18:05.226" level="INFO">Get value from JSON with expression: '$.body.shipDate'</msg>
<msg timestamp="20250205 13:18:05.258" level="TRACE">Return: '2025-02-03T19:45:05.865+0000'</msg>
<msg timestamp="20250205 13:18:05.258" level="INFO">${PAYLOAD_VALUE} = 2025-02-03T19:45:05.865+0000</msg>
<status status="PASS" starttime="20250205 13:18:05.226" endtime="20250205 13:18:05.258"/>
</kw>
<kw name="Get Substring" library="String">
<var>${PAYLOAD_VALUE}</var>
<arg>${PAYLOAD_VALUE}</arg>
<arg>0</arg>
<arg>23</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:05.262" level="TRACE">Arguments: [ '2025-02-03T19:45:05.865+0000' | '0' | '23' ]</msg>
<msg timestamp="20250205 13:18:05.263" level="TRACE">Return: '2025-02-03T19:45:05.865'</msg>
<msg timestamp="20250205 13:18:05.263" level="INFO">${PAYLOAD_VALUE} = 2025-02-03T19:45:05.865</msg>
<status status="PASS" starttime="20250205 13:18:05.258" endtime="20250205 13:18:05.263"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${SHIPDATE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:05.265" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${SHIPDATE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${SHIPDATE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:05.265" level="TRACE">Arguments: [ '"2025-02-03T19:45:05.865"' | '"2025-02-03T19:45:05.865"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:05.265" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.266" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.265" endtime="20250205 13:18:05.266"/>
</kw>
<msg timestamp="20250205 13:18:05.266" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:05.264" endtime="20250205 13:18:05.266"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.267" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body.status' ]</msg>
<msg timestamp="20250205 13:18:05.267" level="INFO">Get value from JSON with expression: '$.body.status'</msg>
<msg timestamp="20250205 13:18:05.293" level="TRACE">Return: 'placed'</msg>
<msg timestamp="20250205 13:18:05.294" level="INFO">${PAYLOAD_VALUE} = placed</msg>
<status status="PASS" starttime="20250205 13:18:05.267" endtime="20250205 13:18:05.294"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:05.294" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${STATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:05.294" level="TRACE">Arguments: [ '"placed"' | '"placed"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:05.294" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.294" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.294" endtime="20250205 13:18:05.294"/>
</kw>
<msg timestamp="20250205 13:18:05.294" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:05.294" endtime="20250205 13:18:05.294"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.complete</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:05.294" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:05 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5825370000000001,
 'status': 200} | '$.body.complete' ]</msg>
<msg timestamp="20250205 13:18:05.294" level="INFO">Get value from JSON with expression: '$.body.complete'</msg>
<msg timestamp="20250205 13:18:05.329" level="TRACE">Return: True</msg>
<msg timestamp="20250205 13:18:05.329" level="INFO">${PAYLOAD_VALUE} = True</msg>
<status status="PASS" starttime="20250205 13:18:05.294" endtime="20250205 13:18:05.330"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal</arg>
<arg>"${COMPLETE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:05.331" level="TRACE">Arguments: [ 'Should Be Equal' | '"${COMPLETE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal" library="BuiltIn">
<arg>"${COMPLETE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20250205 13:18:05.331" level="TRACE">Arguments: [ '"True"' | '"True"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:05.332" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.332" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.331" endtime="20250205 13:18:05.332"/>
</kw>
<msg timestamp="20250205 13:18:05.332" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:05.330" endtime="20250205 13:18:05.332"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:05.333" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:05.334" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.333" endtime="20250205 13:18:05.334"/>
</kw>
<doc>Test Description:Create order with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:04.164" endtime="20250205 13:18:05.334"/>
</test>
<test id="s1-s2-s1-t2" name="TC_POST_store_02" line="98">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:05.334" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:05.340" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_02' ]</msg>
<msg timestamp="20250205 13:18:05.341" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create order with valid JSON payload having no id field'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:05.342" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_02'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request ...</msg>
<status status="PASS" starttime="20250205 13:18:05.334" endtime="20250205 13:18:05.342"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:05.344" level="TRACE">Arguments: [ 'Test Description:Create order with valid JSON payload having no id field \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:05.344" level="INFO">Set test documentation to:
Test Description:Create order with valid JSON payload having no id field 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:05.345" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:05.342" endtime="20250205 13:18:05.345"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:05.345" endtime="20250205 13:18:05.345"/>
</return>
<msg timestamp="20250205 13:18:05.346" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create order with valid JSON payload having no id field'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:05.346" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_02'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request ...</msg>
<status status="PASS" starttime="20250205 13:18:05.334" endtime="20250205 13:18:05.346"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:05.347" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:05.347" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:05.347" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:05.347" endtime="20250205 13:18:05.349"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:05.350" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:05.350" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:05.350" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:05.349" endtime="20250205 13:18:05.350"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:05.352" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:05.352" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:05.352" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:05.351" endtime="20250205 13:18:05.352"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:05.354" level="TRACE">Arguments: [ '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}' ]</msg>
<msg timestamp="20250205 13:18:05.354" level="TRACE">Return: {'complete': True,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:05.355" level="INFO">${REQUEST_PAYLOAD} = {'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:05.353" endtime="20250205 13:18:05.355"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:05.356" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:05.358" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:05.358" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:05.356" endtime="20250205 13:18:05.358"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:05.360" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:05.361" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:05.361" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.361" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:05.361" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:05.361" endtime="20250205 13:18:05.361"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:05.362" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:05.362" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:05.363" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:05.362" endtime="20250205 13:18:05.363"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:05.364" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:05.364" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:05.395" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:05.401" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:05.363" endtime="20250205 13:18:05.401"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:05.401" endtime="20250205 13:18:05.402"/>
</return>
<msg timestamp="20250205 13:18:05.402" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:05.402" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:05.359" endtime="20250205 13:18:05.403"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:05.406" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:05.407" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:05.407" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:05.407" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:05.407" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:05.407" endtime="20250205 13:18:05.407"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:05.407" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:05.407" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:05.407" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:05.407" endtime="20250205 13:18:05.407"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:05.411" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:05.411" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:05.433" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:05.433" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:05.407" endtime="20250205 13:18:05.433"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:05.433" endtime="20250205 13:18:05.442"/>
</return>
<msg timestamp="20250205 13:18:05.442" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:05.443" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:05.404" endtime="20250205 13:18:05.443"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:05.443" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | body={'complete': True,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:05.443" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:06.033" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:06.033" level="TRACE">Return: {'body': {'complete': True,
          'id': 9223372036854765001,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588478,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:06.033" level="INFO">${RESPONSE} = {'seconds': 0.588478, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854765001, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'placed', 'complete': True}, '...</msg>
<status status="PASS" starttime="20250205 13:18:05.443" endtime="20250205 13:18:06.033"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:06.033" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765001,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588478,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:06.042" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:06.068" level="TRACE">Return: {'complete': True,
 'id': 9223372036854765001,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865+0000',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:06.068" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854765001, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:06.033" endtime="20250205 13:18:06.068"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:06.070" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765001,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588478,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:06.071" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:06.096" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:06.096" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:06.069" endtime="20250205 13:18:06.096"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:06.098" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:06.098" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.098" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.097" endtime="20250205 13:18:06.098"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:06.098" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765001,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588478,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:06.098" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:06.125" level="TRACE">Return: 9223372036854765001</msg>
<msg timestamp="20250205 13:18:06.125" level="INFO">${ID} = 9223372036854765001</msg>
<status status="PASS" starttime="20250205 13:18:06.098" endtime="20250205 13:18:06.125"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:06.127" level="TRACE">Arguments: [ 'Should Not Be Equal As Strings' | '"${None}"' | '"${ID}"' | '\\nERROR: ID is missing in response payload' ]</msg>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:06.128" level="TRACE">Arguments: [ '"None"' | '"9223372036854765001"' | '\nERROR: ID is missing in response payload' ]</msg>
<msg timestamp="20250205 13:18:06.128" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.128" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.128" endtime="20250205 13:18:06.128"/>
</kw>
<msg timestamp="20250205 13:18:06.128" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:06.126" endtime="20250205 13:18:06.128"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${ORDER_02_ID}</arg>
<arg>${ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:06.128" level="TRACE">Arguments: [ '${ORDER_02_ID}' | '${ID}' ]</msg>
<msg timestamp="20250205 13:18:06.131" level="INFO">${ORDER_02_ID} = 9223372036854765001</msg>
<msg timestamp="20250205 13:18:06.131" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.128" endtime="20250205 13:18:06.131"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:06.133" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:06.133" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.132" endtime="20250205 13:18:06.133"/>
</kw>
<doc>Test Description:Create order with valid JSON payload having no id field 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:05.334" endtime="20250205 13:18:06.134"/>
</test>
<test id="s1-s2-s1-t3" name="TC_POST_store_03" line="131">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:06.134" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:06.134" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_03' ]</msg>
<msg timestamp="20250205 13:18:06.140" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_03'),
             ('Type', 'Negative'),
             ('Description', 'Create order with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:06.140" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_03'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{...</msg>
<status status="PASS" starttime="20250205 13:18:06.134" endtime="20250205 13:18:06.141"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:06.141" level="TRACE">Arguments: [ 'Test Description:Create order with payload having invalid id \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:18:06.142" level="INFO">Set test documentation to:
Test Description:Create order with payload having invalid id 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:18:06.142" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.141" endtime="20250205 13:18:06.142"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:06.142" endtime="20250205 13:18:06.143"/>
</return>
<msg timestamp="20250205 13:18:06.143" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_03'),
             ('Type', 'Negative'),
             ('Description', 'Create order with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:06.143" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_03'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{...</msg>
<status status="PASS" starttime="20250205 13:18:06.134" endtime="20250205 13:18:06.143"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:06.145" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:06.145" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:06.146" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:06.145" endtime="20250205 13:18:06.146"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:06.146" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:06.146" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:06.146" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:06.146" endtime="20250205 13:18:06.146"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:06.152" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:06.153" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:06.153" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:06.146" endtime="20250205 13:18:06.153"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:06.156" level="TRACE">Arguments: [ '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}' ]</msg>
<msg timestamp="20250205 13:18:06.156" level="TRACE">Return: {'complete': True,
 'id': 'invalidId',
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:06.157" level="INFO">${REQUEST_PAYLOAD} = {'id': 'invalidId', 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:06.154" endtime="20250205 13:18:06.157"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:06.159" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:06.159" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:06.159" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:06.158" endtime="20250205 13:18:06.159"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:06.163" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:06.164" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:06.164" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.165" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:06.165" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:06.163" endtime="20250205 13:18:06.165"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:06.165" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:06.165" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.165" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.165" endtime="20250205 13:18:06.165"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:06.165" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:06.165" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:06.200" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.200" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.165" endtime="20250205 13:18:06.200"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:06.200" endtime="20250205 13:18:06.200"/>
</return>
<msg timestamp="20250205 13:18:06.200" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.203" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.160" endtime="20250205 13:18:06.203"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:06.205" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:06.205" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:06.205" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.205" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:06.205" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:06.205" endtime="20250205 13:18:06.205"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:06.205" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:06.205" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.205" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.205" endtime="20250205 13:18:06.205"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:06.205" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:06.205" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:06.234" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.234" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.205" endtime="20250205 13:18:06.234"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:06.234" endtime="20250205 13:18:06.234"/>
</return>
<msg timestamp="20250205 13:18:06.234" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.234" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.204" endtime="20250205 13:18:06.234"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:06.234" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | body={'complete': True,
 'id': 'invalidId',
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:06.234" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:06.803" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:18:06.812" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.568828,
 'status': 500}</msg>
<msg timestamp="20250205 13:18:06.812" level="INFO">${RESPONSE} = {'seconds': 0.568828, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:06 GMT', 'Cont...</msg>
<status status="PASS" starttime="20250205 13:18:06.234" endtime="20250205 13:18:06.812"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:06.812" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.568828,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:06.812" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:06.841" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:06.841" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:18:06.812" endtime="20250205 13:18:06.842"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:06.843" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:06 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.568828,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:06.844" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:06.873" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:18:06.873" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:18:06.843" endtime="20250205 13:18:06.873"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:06.874" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:06.874" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.874" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.874" endtime="20250205 13:18:06.874"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:06.874" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:06.874" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.874" endtime="20250205 13:18:06.874"/>
</kw>
<doc>Test Description:Create order with payload having invalid id 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:18:06.134" endtime="20250205 13:18:06.874"/>
</test>
<test id="s1-s2-s1-t4" name="TC_POST_store_04" line="157">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:06.884" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:06.884" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_04' ]</msg>
<msg timestamp="20250205 13:18:06.884" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_04'),
             ('Type', 'Negative'),
             ('Description',
              'Create order with payload having invalid quantity'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:06.884" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_04'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid quantity'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payloa...</msg>
<status status="PASS" starttime="20250205 13:18:06.884" endtime="20250205 13:18:06.884"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:06.884" level="TRACE">Arguments: [ 'Test Description:Create order with payload having invalid quantity \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:18:06.892" level="INFO">Set test documentation to:
Test Description:Create order with payload having invalid quantity 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:18:06.892" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:06.884" endtime="20250205 13:18:06.892"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:06.892" endtime="20250205 13:18:06.893"/>
</return>
<msg timestamp="20250205 13:18:06.893" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_04'),
             ('Type', 'Negative'),
             ('Description',
              'Create order with payload having invalid quantity'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:06.894" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_04'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid quantity'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payloa...</msg>
<status status="PASS" starttime="20250205 13:18:06.884" endtime="20250205 13:18:06.894"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:06.897" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:06.897" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:06.897" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:06.895" endtime="20250205 13:18:06.897"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:06.898" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:06.898" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:06.898" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:06.898" endtime="20250205 13:18:06.898"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:06.902" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:06.902" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:06.902" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:06.901" endtime="20250205 13:18:06.903"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:06.904" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}' ]</msg>
<msg timestamp="20250205 13:18:06.904" level="TRACE">Return: {'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 'invalidQuantity',
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:06.905" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'petId': 0, 'quantity': 'invalidQuantity', 'shipDate': '2025-02-03T19:45:05.865Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:06.903" endtime="20250205 13:18:06.905"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:06.906" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:06.906" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:06.906" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:06.906" endtime="20250205 13:18:06.906"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:06.909" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:06.910" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:06.911" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.911" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:06.911" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:06.909" endtime="20250205 13:18:06.911"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:06.912" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:06.912" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.912" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.911" endtime="20250205 13:18:06.912"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:06.913" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:06.913" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:06.942" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.943" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.913" endtime="20250205 13:18:06.943"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:06.944" endtime="20250205 13:18:06.944"/>
</return>
<msg timestamp="20250205 13:18:06.944" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.944" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.906" endtime="20250205 13:18:06.945"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:06.946" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:06.946" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:06.947" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:06.947" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:06.947" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:06.946" endtime="20250205 13:18:06.947"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:06.948" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:06.948" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.948" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.947" endtime="20250205 13:18:06.948"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:06.949" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:06.949" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:06.962" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.962" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.948" endtime="20250205 13:18:06.962"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:06.962" endtime="20250205 13:18:06.962"/>
</return>
<msg timestamp="20250205 13:18:06.962" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:06.962" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:06.945" endtime="20250205 13:18:06.962"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:06.979" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | body={'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 'invalidQuantity',
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'placed'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:06.983" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:07.562" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:18:07.562" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:07 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.580924,
 'status': 500}</msg>
<msg timestamp="20250205 13:18:07.562" level="INFO">${RESPONSE} = {'seconds': 0.580924, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:07 GMT', 'Cont...</msg>
<status status="PASS" starttime="20250205 13:18:06.978" endtime="20250205 13:18:07.562"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:07.562" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:07 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.580924,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:07.562" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:07.595" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:07.596" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:18:07.562" endtime="20250205 13:18:07.596"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:07.598" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:07 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.580924,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:07.598" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:07.623" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:18:07.623" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:18:07.597" endtime="20250205 13:18:07.623"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:07.627" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:07.627" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:07.627" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:07.625" endtime="20250205 13:18:07.627"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:07.628" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:07.628" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:07.628" endtime="20250205 13:18:07.628"/>
</kw>
<doc>Test Description:Create order with payload having invalid quantity 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:18:06.882" endtime="20250205 13:18:07.629"/>
</test>
<test id="s1-s2-s1-t5" name="TC_POST_store_05" line="183">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:07.633" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:07.633" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_05' ]</msg>
<msg timestamp="20250205 13:18:07.635" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_05'),
             ('Type', 'Negative'),
             ('Description',
              'Create order with payload having invalid shipDate'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:07.635" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_05'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid shipDate'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payloa...</msg>
<status status="PASS" starttime="20250205 13:18:07.633" endtime="20250205 13:18:07.635"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:07.635" level="TRACE">Arguments: [ 'Test Description:Create order with payload having invalid shipDate \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:07.635" level="INFO">Set test documentation to:
Test Description:Create order with payload having invalid shipDate 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:07.635" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:07.635" endtime="20250205 13:18:07.635"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:07.635" endtime="20250205 13:18:07.635"/>
</return>
<msg timestamp="20250205 13:18:07.635" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_05'),
             ('Type', 'Negative'),
             ('Description',
              'Create order with payload having invalid shipDate'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:07.635" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_05'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid shipDate'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payloa...</msg>
<status status="PASS" starttime="20250205 13:18:07.629" endtime="20250205 13:18:07.635"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:07.635" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:07.635" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:07.635" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:07.635" endtime="20250205 13:18:07.635"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:07.644" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:07.644" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:07.644" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:07.642" endtime="20250205 13:18:07.644"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:07.646" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:07.646" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:07.646" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:07.645" endtime="20250205 13:18:07.646"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:07.646" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}' ]</msg>
<msg timestamp="20250205 13:18:07.646" level="TRACE">Return: {'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-99-99T19:45:05.865Z',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:07.646" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'petId': 0, 'quantity': 0, 'shipDate': '2025-99-99T19:45:05.865Z', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:07.646" endtime="20250205 13:18:07.646"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:07.646" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:07.646" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:07.646" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:07.646" endtime="20250205 13:18:07.646"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:07.653" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:07.654" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:07.654" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:07.656" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:07.656" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:07.654" endtime="20250205 13:18:07.656"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:07.656" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:07.656" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:07.657" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:07.656" endtime="20250205 13:18:07.657"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:07.657" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:07.658" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:07.683" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:07.657" endtime="20250205 13:18:07.683"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:07.683" endtime="20250205 13:18:07.683"/>
</return>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:07.683" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:07.646" endtime="20250205 13:18:07.683"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:07.683" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:07.683" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:07.683" endtime="20250205 13:18:07.683"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:07.683" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:07.683" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:07.683" endtime="20250205 13:18:07.683"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:07.692" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:07.693" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:07.762" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:07.762" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:07.683" endtime="20250205 13:18:07.762"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:07.762" endtime="20250205 13:18:07.762"/>
</return>
<msg timestamp="20250205 13:18:07.762" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:07.762" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:07.683" endtime="20250205 13:18:07.762"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:07.762" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | body={'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-99-99T19:45:05.865Z',
 'status': 'placed'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:07.762" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:08.342" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:08.342" level="TRACE">Return: {'body': {'complete': True,
          'id': 9223372036854765002,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2033-06-07T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:08 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.572511,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:08.342" level="INFO">${RESPONSE} = {'seconds': 0.572511, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854765002, 'petId': 0, 'quantity': 0, 'shipDate': '2033-06-07T19:45:05.865+0000', 'status': 'placed', 'complete': True}, '...</msg>
<status status="PASS" starttime="20250205 13:18:07.762" endtime="20250205 13:18:08.342"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:08.342" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765002,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2033-06-07T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:08 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.572511,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:08.342" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:08.375" level="TRACE">Return: {'complete': True,
 'id': 9223372036854765002,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2033-06-07T19:45:05.865+0000',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:08.375" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854765002, 'petId': 0, 'quantity': 0, 'shipDate': '2033-06-07T19:45:05.865+0000', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:08.342" endtime="20250205 13:18:08.376"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:08.377" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765002,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2033-06-07T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:08 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.572511,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:08.378" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:08.403" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:08.403" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:08.377" endtime="20250205 13:18:08.404"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:08.405" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:08.407" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:08.407" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:18:08.408" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:18:08.404" endtime="20250205 13:18:08.408"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:08.408" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:18:08.408" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-99-99T19:45:05.865Z',
 'status': 'placed'} | ${RESPONSE_PAYLOAD}={'complete': True,
 'id': 9223372036854765002,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2033-06-07T19:45:05.865+0000',
 'status': 'placed'} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:08.411" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'petId': 0, 'quantity': 0, 'shipDate': '2025-99-99T19:45:05.865Z', 'status': 'placed', 'complete': True}" ]</msg>
<msg timestamp="20250205 13:18:08.411" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:08.408" endtime="20250205 13:18:08.412"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:08.413" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854765002, 'petId': 0, 'quantity': 0, 'shipDate': '2033-06-07T19:45:05.865+0000', 'status': 'placed', 'complete': True}" ]</msg>
<msg timestamp="20250205 13:18:08.413" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:08.413" endtime="20250205 13:18:08.413"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:08.416" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:18:08.417" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:08.413" endtime="20250205 13:18:08.417"/>
</kw>
<msg timestamp="20250205 13:18:08.418" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:08.408" endtime="20250205 13:18:08.418"/>
</kw>
<msg timestamp="20250205 13:18:08.418" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:08.408" endtime="20250205 13:18:08.418"/>
</kw>
<doc>Test Description:Create order with payload having invalid shipDate 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:18:07.629" endtime="20250205 13:18:08.418">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s2-s1-t6" name="TC_POST_store_06" line="209">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:08.418" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:08.418" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_06' ]</msg>
<msg timestamp="20250205 13:18:08.424" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_06'),
             ('Type', 'Negative'),
             ('Description', 'Create order with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:08.424" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_06'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload'...</msg>
<status status="PASS" starttime="20250205 13:18:08.418" endtime="20250205 13:18:08.424"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:08.425" level="TRACE">Arguments: [ 'Test Description:Create order with payload having invalid status \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:08.427" level="INFO">Set test documentation to:
Test Description:Create order with payload having invalid status 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:08.427" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:08.425" endtime="20250205 13:18:08.427"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:08.427" endtime="20250205 13:18:08.427"/>
</return>
<msg timestamp="20250205 13:18:08.428" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_06'),
             ('Type', 'Negative'),
             ('Description', 'Create order with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload',
              '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')])</msg>
<msg timestamp="20250205 13:18:08.428" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_06'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload'...</msg>
<status status="PASS" starttime="20250205 13:18:08.418" endtime="20250205 13:18:08.428"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:08.429" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:08.429" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:08.429" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:08.429" endtime="20250205 13:18:08.429"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:08.431" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:08.431" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:08.431" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:08.430" endtime="20250205 13:18:08.431"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:08.433" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:08.434" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:08.434" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:08.432" endtime="20250205 13:18:08.434"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:08.436" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}' ]</msg>
<msg timestamp="20250205 13:18:08.436" level="TRACE">Return: {'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'invalidStatus'}</msg>
<msg timestamp="20250205 13:18:08.436" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865Z', 'status': 'invalidStatus', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:08.436" endtime="20250205 13:18:08.436"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:08.440" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:08.440" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:08.440" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:08.439" endtime="20250205 13:18:08.440"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:08.441" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:08.442" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:08.442" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:08.442" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:08.442" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:08.441" endtime="20250205 13:18:08.442"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:08.443" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:08.443" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:08.443" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:08.442" endtime="20250205 13:18:08.443"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:08.444" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:08.444" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:08.473" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:08.473" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:08.443" endtime="20250205 13:18:08.473"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:08.473" endtime="20250205 13:18:08.473"/>
</return>
<msg timestamp="20250205 13:18:08.473" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:08.473" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:08.441" endtime="20250205 13:18:08.473"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:08.473" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:08.482" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:08.482" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:08.483" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:08.483" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:08.481" endtime="20250205 13:18:08.483"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:08.484" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:08.484" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:08.485" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:08.483" endtime="20250205 13:18:08.485"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:08.486" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:08.486" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:08.513" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:08.513" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:08.485" endtime="20250205 13:18:08.513"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:08.513" endtime="20250205 13:18:08.513"/>
</return>
<msg timestamp="20250205 13:18:08.513" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:08.513" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:08.473" endtime="20250205 13:18:08.513"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:08.513" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | body={'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'invalidStatus'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:08.523" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:09.102" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:09.102" level="TRACE">Return: {'body': {'complete': True,
          'id': 9223372036854765003,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'invalidStatus'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:09 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5801499999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:09.102" level="INFO">${RESPONSE} = {'seconds': 0.5801499999999999, 'status': 200, 'reason': 'OK', 'body': {'id': 9223372036854765003, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'invalidStatus', 'co...</msg>
<status status="PASS" starttime="20250205 13:18:08.513" endtime="20250205 13:18:09.102"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:09.102" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765003,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'invalidStatus'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:09 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5801499999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:09.102" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:09.136" level="TRACE">Return: {'complete': True,
 'id': 9223372036854765003,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865+0000',
 'status': 'invalidStatus'}</msg>
<msg timestamp="20250205 13:18:09.136" level="INFO">${RESPONSE_PAYLOAD} = {'id': 9223372036854765003, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'invalidStatus', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:09.102" endtime="20250205 13:18:09.136"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:09.137" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 9223372036854765003,
          'petId': 0,
          'quantity': 0,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'invalidStatus'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:09 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5801499999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:09.138" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:09.163" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:09.163" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:09.137" endtime="20250205 13:18:09.163"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:09.166" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:09.167" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:09.167" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:18:09.167" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:18:09.165" endtime="20250205 13:18:09.168"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:09.169" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:18:09.170" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}={'complete': True,
 'id': 0,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865Z',
 'status': 'invalidStatus'} | ${RESPONSE_PAYLOAD}={'complete': True,
 'id': 9223372036854765003,
 'petId': 0,
 'quantity': 0,
 'shipDate': '2025-02-03T19:45:05.865+0000',
 'status': 'invalidStatus'} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:09.171" level="TRACE">Arguments: [ "\nREQUEST PAYLOAD  : {'id': 0, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865Z', 'status': 'invalidStatus', 'complete': True}" ]</msg>
<msg timestamp="20250205 13:18:09.172" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.170" endtime="20250205 13:18:09.172"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:09.173" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'id': 9223372036854765003, 'petId': 0, 'quantity': 0, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'invalidStatus', 'complete': True}" ]</msg>
<msg timestamp="20250205 13:18:09.174" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.172" endtime="20250205 13:18:09.174"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:09.174" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:18:09.174" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.174" endtime="20250205 13:18:09.174"/>
</kw>
<msg timestamp="20250205 13:18:09.174" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.170" endtime="20250205 13:18:09.174"/>
</kw>
<msg timestamp="20250205 13:18:09.174" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.168" endtime="20250205 13:18:09.174"/>
</kw>
<doc>Test Description:Create order with payload having invalid status 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:18:08.418" endtime="20250205 13:18:09.174">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s2-s1-t7" name="TC_POST_store_07" line="235">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:09.181" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:09.181" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_store_07' ]</msg>
<msg timestamp="20250205 13:18:09.183" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_07'),
             ('Type', 'Negative'),
             ('Description', 'Create order with no payload'),
             ('ExpectedHTTPResponseStatusCode', '400'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:09.183" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_07'), ('Type', 'Negative'), ('Description', 'Create order with no payload'), ('ExpectedHTTPResponseStatusCode', '400'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:09.181" endtime="20250205 13:18:09.183"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:09.185" level="TRACE">Arguments: [ 'Test Description:Create order with no payload \n\n Expected Result:400 \n\n' ]</msg>
<msg timestamp="20250205 13:18:09.186" level="INFO">Set test documentation to:
Test Description:Create order with no payload 

 Expected Result:400 

</msg>
<msg timestamp="20250205 13:18:09.186" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.184" endtime="20250205 13:18:09.186"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:09.186" endtime="20250205 13:18:09.187"/>
</return>
<msg timestamp="20250205 13:18:09.187" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_store_07'),
             ('Type', 'Negative'),
             ('Description', 'Create order with no payload'),
             ('ExpectedHTTPResponseStatusCode', '400'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:09.187" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_store_07'), ('Type', 'Negative'), ('Description', 'Create order with no payload'), ('ExpectedHTTPResponseStatusCode', '400'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:09.174" endtime="20250205 13:18:09.187"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:09.189" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:09.189" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:09.190" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:09.188" endtime="20250205 13:18:09.190"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:09.191" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:09.191" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:09.192" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:09.191" endtime="20250205 13:18:09.192"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:09.194" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:09.194" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:09.194" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:09.192" endtime="20250205 13:18:09.194"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:09.196" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:09.196" endtime="20250205 13:18:09.196"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:09.196" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:09.196" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:09.196" endtime="20250205 13:18:09.196"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:09.196" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.202" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.196" endtime="20250205 13:18:09.202"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:09.203" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:09.203" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:09.232" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.232" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.202" endtime="20250205 13:18:09.232"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:09.232" endtime="20250205 13:18:09.232"/>
</return>
<msg timestamp="20250205 13:18:09.232" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.232" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.196" endtime="20250205 13:18:09.232"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:09.232" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:09.242" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:09.242" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:09.242" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:09.242" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:09.241" endtime="20250205 13:18:09.242"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:09.242" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:09.242" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.242" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.242" endtime="20250205 13:18:09.242"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:09.242" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:09.242" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:09.273" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.273" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.242" endtime="20250205 13:18:09.273"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:09.273" endtime="20250205 13:18:09.273"/>
</return>
<msg timestamp="20250205 13:18:09.273" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.273" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.232" endtime="20250205 13:18:09.273"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:09.273" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:09.273" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:09.830" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/store/order HTTP/1.1" 400 None</msg>
<msg timestamp="20250205 13:18:09.845" level="TRACE">Return: {'body': {'code': 1, 'message': 'No data', 'type': 'error'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:09 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Bad Request',
 'seconds': 0.564374,
 'status': 400}</msg>
<msg timestamp="20250205 13:18:09.845" level="INFO">${RESPONSE} = {'seconds': 0.564374, 'status': 400, 'reason': 'Bad Request', 'body': {'code': 1, 'type': 'error', 'message': 'No data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:09 GMT', 'Content-Type': 'applicat...</msg>
<status status="PASS" starttime="20250205 13:18:09.273" endtime="20250205 13:18:09.845"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:09.845" level="TRACE">Arguments: [ {'body': {'code': 1, 'message': 'No data', 'type': 'error'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:09 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Bad Request',
 'seconds': 0.564374,
 'status': 400} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:09.845" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:09.875" level="TRACE">Return: {'code': 1, 'message': 'No data', 'type': 'error'}</msg>
<msg timestamp="20250205 13:18:09.875" level="INFO">${RESPONSE_PAYLOAD} = {'code': 1, 'type': 'error', 'message': 'No data'}</msg>
<status status="PASS" starttime="20250205 13:18:09.845" endtime="20250205 13:18:09.875"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:09.877" level="TRACE">Arguments: [ {'body': {'code': 1, 'message': 'No data', 'type': 'error'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:09 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Bad Request',
 'seconds': 0.564374,
 'status': 400} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:09.877" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:09.903" level="TRACE">Return: 400</msg>
<msg timestamp="20250205 13:18:09.904" level="INFO">${RESPONSE_STATUS} = 400</msg>
<status status="PASS" starttime="20250205 13:18:09.876" endtime="20250205 13:18:09.904"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:09.905" level="TRACE">Arguments: [ '"400"' | '"400"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:09.906" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:09.906" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.904" endtime="20250205 13:18:09.907"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:09.908" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:09.908" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.907" endtime="20250205 13:18:09.908"/>
</kw>
<doc>Test Description:Create order with no payload 

 Expected Result:400 

</doc>
<status status="PASS" starttime="20250205 13:18:09.174" endtime="20250205 13:18:09.909"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:09.909" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:09.912" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:09.913" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.912" endtime="20250205 13:18:09.913"/>
</kw>
<msg timestamp="20250205 13:18:09.914" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.909" endtime="20250205 13:18:09.914"/>
</kw>
<status status="FAIL" starttime="20250205 13:18:04.146" endtime="20250205 13:18:09.915"/>
</suite>
<suite id="s1-s2-s2" name="03 GET store" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\store\03_GET_store.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:09.938" level="TRACE">Arguments: [ ${CSVFILE}='store.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:09.938" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:09.938" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:09.938" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:09.938" endtime="20250205 13:18:09.938"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:09.938" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'store.csv' ]</msg>
<msg timestamp="20250205 13:18:09.943" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_02'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_03'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_04'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid quantity'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_05'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid shipDate'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_06'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_07'), ('Type', 'Negative'), ('Description', 'Create order with no payload'), ('ExpectedHTTPResponseStatusCode', '400'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_01'), ('Type', 'Positive'), ('Description', 'Retrieve order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_02'), ('Type', 'Negative'), ('Description', 'Retrieve order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_03'), ('Type', 'Positive'), ('Description', 'Retrieve store inventory'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_store_01'), ('Type', 'Positive'), ('Description', 'Delete order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_store_02'), ('Type', 'Negative'), ('Description', 'Delete order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:09.943" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:09.945" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "i...</msg>
<status status="PASS" starttime="20250205 13:18:09.938" endtime="20250205 13:18:09.946"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:09.947" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:09.948" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "i...</msg>
<msg timestamp="20250205 13:18:09.949" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.947" endtime="20250205 13:18:09.949"/>
</kw>
<msg timestamp="20250205 13:18:09.950" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.937" endtime="20250205 13:18:09.950"/>
</kw>
<test id="s1-s2-s2-t1" name="TC_GET_store_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:09.956" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:09.956" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_store_01' ]</msg>
<msg timestamp="20250205 13:18:09.956" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_store_01'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve order with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:09.956" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_store_01'), ('Type', 'Positive'), ('Description', 'Retrieve order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:09.956" endtime="20250205 13:18:09.956"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:09.956" level="TRACE">Arguments: [ 'Test Description:Retrieve order with existing id \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:09.956" level="INFO">Set test documentation to:
Test Description:Retrieve order with existing id 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:09.956" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:09.956" endtime="20250205 13:18:09.956"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:09.956" endtime="20250205 13:18:09.956"/>
</return>
<msg timestamp="20250205 13:18:09.956" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_store_01'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve order with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:09.956" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_store_01'), ('Type', 'Positive'), ('Description', 'Retrieve order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:09.954" endtime="20250205 13:18:09.956"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:09.968" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:09.968" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:09.968" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:09.956" endtime="20250205 13:18:09.968"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:09.971" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:09.971"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:09.971" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:09.971"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:09.971" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:09.971"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:09.971" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:09.971" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:09.971"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:09.971" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:09.971" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:09.971"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:09.987" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:09.988" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:10.012" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:10.012" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:10.012"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:10.012" endtime="20250205 13:18:10.012"/>
</return>
<msg timestamp="20250205 13:18:10.012" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:10.012" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:09.971" endtime="20250205 13:18:10.012"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order/${ORDER_01_ID}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:10.012" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order/1738750684' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:10.012" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:10.593" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/store/order/1738750684 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:10.593" level="TRACE">Return: {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:10.593" level="INFO">${RESPONSE} = {'seconds': 0.5756169999999999, 'status': 200, 'reason': 'OK', 'body': {'id': 1738750684, 'petId': 100, 'quantity': 5, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'placed', 'complete': True}...</msg>
<status status="PASS" starttime="20250205 13:18:10.012" endtime="20250205 13:18:10.593"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.602" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:10.602" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:10.633" level="TRACE">Return: {'complete': True,
 'id': 1738750684,
 'petId': 100,
 'quantity': 5,
 'shipDate': '2025-02-03T19:45:05.865+0000',
 'status': 'placed'}</msg>
<msg timestamp="20250205 13:18:10.634" level="INFO">${RESPONSE_PAYLOAD} = {'id': 1738750684, 'petId': 100, 'quantity': 5, 'shipDate': '2025-02-03T19:45:05.865+0000', 'status': 'placed', 'complete': True}</msg>
<status status="PASS" starttime="20250205 13:18:10.602" endtime="20250205 13:18:10.634"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.638" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:10.638" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:10.666" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:10.667" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:10.638" endtime="20250205 13:18:10.667"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:10.668" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:10.670" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.670" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.668" endtime="20250205 13:18:10.670"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.670" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:10.671" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:10.696" level="TRACE">Return: 1738750684</msg>
<msg timestamp="20250205 13:18:10.696" level="INFO">${PAYLOAD_VALUE} = 1738750684</msg>
<status status="PASS" starttime="20250205 13:18:10.670" endtime="20250205 13:18:10.696"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ORDER_01_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:10.696" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ORDER_01_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ORDER_01_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:10.696" level="TRACE">Arguments: [ '"1738750684"' | '"1738750684"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:10.696" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.696" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.696" endtime="20250205 13:18:10.696"/>
</kw>
<msg timestamp="20250205 13:18:10.696" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:10.696" endtime="20250205 13:18:10.696"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.petId</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.696" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body.petId' ]</msg>
<msg timestamp="20250205 13:18:10.701" level="INFO">Get value from JSON with expression: '$.body.petId'</msg>
<msg timestamp="20250205 13:18:10.728" level="TRACE">Return: 100</msg>
<msg timestamp="20250205 13:18:10.728" level="INFO">${PAYLOAD_VALUE} = 100</msg>
<status status="PASS" starttime="20250205 13:18:10.696" endtime="20250205 13:18:10.728"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ORDER_01_PETID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:10.730" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ORDER_01_PETID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ORDER_01_PETID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:10.730" level="TRACE">Arguments: [ '"100"' | '"100"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:10.730" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.730" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.730" endtime="20250205 13:18:10.730"/>
</kw>
<msg timestamp="20250205 13:18:10.730" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:10.729" endtime="20250205 13:18:10.731"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.quantity</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.732" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body.quantity' ]</msg>
<msg timestamp="20250205 13:18:10.733" level="INFO">Get value from JSON with expression: '$.body.quantity'</msg>
<msg timestamp="20250205 13:18:10.760" level="TRACE">Return: 5</msg>
<msg timestamp="20250205 13:18:10.760" level="INFO">${PAYLOAD_VALUE} = 5</msg>
<status status="PASS" starttime="20250205 13:18:10.731" endtime="20250205 13:18:10.760"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ORDER_01_QUANTITY}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:10.761" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ORDER_01_QUANTITY}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ORDER_01_QUANTITY}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:10.762" level="TRACE">Arguments: [ '"5"' | '"5"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:10.762" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.763" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.762" endtime="20250205 13:18:10.763"/>
</kw>
<msg timestamp="20250205 13:18:10.763" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:10.761" endtime="20250205 13:18:10.763"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.shipDate</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.765" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body.shipDate' ]</msg>
<msg timestamp="20250205 13:18:10.765" level="INFO">Get value from JSON with expression: '$.body.shipDate'</msg>
<msg timestamp="20250205 13:18:10.791" level="TRACE">Return: '2025-02-03T19:45:05.865+0000'</msg>
<msg timestamp="20250205 13:18:10.791" level="INFO">${PAYLOAD_VALUE} = 2025-02-03T19:45:05.865+0000</msg>
<status status="PASS" starttime="20250205 13:18:10.765" endtime="20250205 13:18:10.791"/>
</kw>
<kw name="Get Substring" library="String">
<var>${PAYLOAD_VALUE}</var>
<arg>${PAYLOAD_VALUE}</arg>
<arg>0</arg>
<arg>23</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:10.793" level="TRACE">Arguments: [ '2025-02-03T19:45:05.865+0000' | '0' | '23' ]</msg>
<msg timestamp="20250205 13:18:10.794" level="TRACE">Return: '2025-02-03T19:45:05.865'</msg>
<msg timestamp="20250205 13:18:10.794" level="INFO">${PAYLOAD_VALUE} = 2025-02-03T19:45:05.865</msg>
<status status="PASS" starttime="20250205 13:18:10.793" endtime="20250205 13:18:10.794"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ORDER_01_SHIPDATE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:10.795" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ORDER_01_SHIPDATE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ORDER_01_SHIPDATE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:10.796" level="TRACE">Arguments: [ '"2025-02-03T19:45:05.865"' | '"2025-02-03T19:45:05.865"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:10.796" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.796" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.795" endtime="20250205 13:18:10.796"/>
</kw>
<msg timestamp="20250205 13:18:10.796" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:10.795" endtime="20250205 13:18:10.796"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.796" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body.status' ]</msg>
<msg timestamp="20250205 13:18:10.796" level="INFO">Get value from JSON with expression: '$.body.status'</msg>
<msg timestamp="20250205 13:18:10.824" level="TRACE">Return: 'placed'</msg>
<msg timestamp="20250205 13:18:10.824" level="INFO">${PAYLOAD_VALUE} = placed</msg>
<status status="PASS" starttime="20250205 13:18:10.796" endtime="20250205 13:18:10.824"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ORDER_01_STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:10.824" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ORDER_01_STATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ORDER_01_STATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:10.824" level="TRACE">Arguments: [ '"placed"' | '"placed"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:10.824" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.824" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.824" endtime="20250205 13:18:10.824"/>
</kw>
<msg timestamp="20250205 13:18:10.824" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:10.824" endtime="20250205 13:18:10.824"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.complete</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:10.824" level="TRACE">Arguments: [ {'body': {'complete': True,
          'id': 1738750684,
          'petId': 100,
          'quantity': 5,
          'shipDate': '2025-02-03T19:45:05.865+0000',
          'status': 'placed'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:10 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5756169999999999,
 'status': 200} | '$.body.complete' ]</msg>
<msg timestamp="20250205 13:18:10.824" level="INFO">Get value from JSON with expression: '$.body.complete'</msg>
<msg timestamp="20250205 13:18:10.862" level="TRACE">Return: True</msg>
<msg timestamp="20250205 13:18:10.863" level="INFO">${PAYLOAD_VALUE} = True</msg>
<status status="PASS" starttime="20250205 13:18:10.824" endtime="20250205 13:18:10.863"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal</arg>
<arg>"${ORDER_01_COMPLETE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:10.866" level="TRACE">Arguments: [ 'Should Be Equal' | '"${ORDER_01_COMPLETE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal" library="BuiltIn">
<arg>"${ORDER_01_COMPLETE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20250205 13:18:10.866" level="TRACE">Arguments: [ '"True"' | '"True"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:10.866" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.866" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.866" endtime="20250205 13:18:10.866"/>
</kw>
<msg timestamp="20250205 13:18:10.866" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:10.865" endtime="20250205 13:18:10.866"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:10.866" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:10.866" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.866" endtime="20250205 13:18:10.866"/>
</kw>
<doc>Test Description:Retrieve order with existing id 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:09.950" endtime="20250205 13:18:10.866"/>
</test>
<test id="s1-s2-s2-t2" name="TC_GET_store_02" line="71">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:10.874" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:10.875" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_store_02' ]</msg>
<msg timestamp="20250205 13:18:10.876" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_store_02'),
             ('Type', 'Negative'),
             ('Description', 'Retrieve order with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:10.877" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_store_02'), ('Type', 'Negative'), ('Description', 'Retrieve order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:10.875" endtime="20250205 13:18:10.877"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:10.877" level="TRACE">Arguments: [ 'Test Description:Retrieve order with non-existing id \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:10.877" level="INFO">Set test documentation to:
Test Description:Retrieve order with non-existing id 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:10.877" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:10.877" endtime="20250205 13:18:10.877"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:10.877" endtime="20250205 13:18:10.877"/>
</return>
<msg timestamp="20250205 13:18:10.877" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_store_02'),
             ('Type', 'Negative'),
             ('Description', 'Retrieve order with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:10.881" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_store_02'), ('Type', 'Negative'), ('Description', 'Retrieve order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:10.872" endtime="20250205 13:18:10.881"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:10.883" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:10.883" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:10.883" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:10.882" endtime="20250205 13:18:10.884"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:10.885" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:10.887" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:10.888" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:10.885" endtime="20250205 13:18:10.888"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:10.890" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:10.890" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:10.890" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:10.888" endtime="20250205 13:18:10.890"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:10.891" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:10.891" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:10.891" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:10.890" endtime="20250205 13:18:10.891"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:10.892" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:10.893" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:10.893" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:10.893" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:10.893" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:10.893" endtime="20250205 13:18:10.893"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:10.894" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:10.894" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:10.894" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:10.894" endtime="20250205 13:18:10.894"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:10.895" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:10.896" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:10.923" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:10.923" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:10.895" endtime="20250205 13:18:10.923"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:10.923" endtime="20250205 13:18:10.923"/>
</return>
<msg timestamp="20250205 13:18:10.923" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:10.923" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:10.892" endtime="20250205 13:18:10.923"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_ID}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:10.923" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:10.923" level="TRACE">Return: '805c0652-e3aa-11ef-88b1-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:10.923" level="INFO">${NON_EXISTING_ID} = 805c0652-e3aa-11ef-88b1-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:10.923" endtime="20250205 13:18:10.923"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order/${NON_EXISTING_ID}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:10.923" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order/805c0652-e3aa-11ef-88b1-744ca1d2e576' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:10.933" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:11.492" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/store/order/805c0652-e3aa-11ef-88b1-744ca1d2e576 HTTP/1.1" 404 None</msg>
<msg timestamp="20250205 13:18:11.492" level="TRACE">Return: {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "805c0652-e3aa-11ef-88b1-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:11 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.563313,
 'status': 404}</msg>
<msg timestamp="20250205 13:18:11.492" level="INFO">${RESPONSE} = {'seconds': 0.563313, 'status': 404, 'reason': 'Not Found', 'body': {'code': 404, 'type': 'unknown', 'message': 'java.lang.NumberFormatException: For input string: "805c0652-e3aa-11ef-88b1-744ca1d2e57...</msg>
<status status="PASS" starttime="20250205 13:18:10.923" endtime="20250205 13:18:11.492"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:11.502" level="TRACE">Arguments: [ {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "805c0652-e3aa-11ef-88b1-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:11 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.563313,
 'status': 404} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:11.502" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:11.534" level="TRACE">Return: {'code': 404,
 'message': 'java.lang.NumberFormatException: For input string: "805c0652-e3aa-11ef-88b1-744ca1d2e576"',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:11.534" level="INFO">${RESPONSE_PAYLOAD} = {'code': 404, 'type': 'unknown', 'message': 'java.lang.NumberFormatException: For input string: "805c0652-e3aa-11ef-88b1-744ca1d2e576"'}</msg>
<status status="PASS" starttime="20250205 13:18:11.492" endtime="20250205 13:18:11.534"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:11.534" level="TRACE">Arguments: [ {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "805c0652-e3aa-11ef-88b1-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:11 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.563313,
 'status': 404} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:11.534" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:11.564" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:18:11.564" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:18:11.534" endtime="20250205 13:18:11.565"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:11.566" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:11.567" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:11.567" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:11.565" endtime="20250205 13:18:11.568"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:11.569" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:11.569" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:11.568" endtime="20250205 13:18:11.569"/>
</kw>
<doc>Test Description:Retrieve order with non-existing id 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:18:10.871" endtime="20250205 13:18:11.570"/>
</test>
<test id="s1-s2-s2-t3" name="TC_GET_store_03" line="94">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:11.573" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:11.574" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_store_03' ]</msg>
<msg timestamp="20250205 13:18:11.576" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_store_03'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve store inventory'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:11.576" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_store_03'), ('Type', 'Positive'), ('Description', 'Retrieve store inventory'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:11.573" endtime="20250205 13:18:11.576"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:11.578" level="TRACE">Arguments: [ 'Test Description:Retrieve store inventory \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:11.578" level="INFO">Set test documentation to:
Test Description:Retrieve store inventory 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:11.578" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:11.576" endtime="20250205 13:18:11.578"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:11.578" endtime="20250205 13:18:11.578"/>
</return>
<msg timestamp="20250205 13:18:11.579" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_store_03'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve store inventory'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:11.579" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_store_03'), ('Type', 'Positive'), ('Description', 'Retrieve store inventory'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:11.573" endtime="20250205 13:18:11.579"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:11.580" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:11.580" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:11.580" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:11.580" endtime="20250205 13:18:11.581"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:11.582" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:11.582" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:11.583" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:11.581" endtime="20250205 13:18:11.583"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:11.585" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:11.585" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:11.585" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:11.583" endtime="20250205 13:18:11.585"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:11.587" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:11.587" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:11.587" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:11.587" endtime="20250205 13:18:11.587"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:11.589" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:11.590" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:11.590" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:11.590" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:11.590" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:11.590" endtime="20250205 13:18:11.590"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:11.591" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:11.591" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:11.591" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:11.591" endtime="20250205 13:18:11.592"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:11.593" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:11.593" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:11.624" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:11.624" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:11.592" endtime="20250205 13:18:11.624"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:11.624" endtime="20250205 13:18:11.624"/>
</return>
<msg timestamp="20250205 13:18:11.624" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:11.624" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:11.589" endtime="20250205 13:18:11.624"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/inventory</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:11.624" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/inventory' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:11.624" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:12.183" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/store/inventory HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:12.183" level="TRACE">Return: {'body': {'Sold': 1,
          'available': 268,
          'available;pending;sold': 1,
          'invalidStatus': 4,
          'pending': 13,
          'peric': 14,
          'sold': 31,
          'string': 577},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:12 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.556299,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:12.183" level="INFO">${RESPONSE} = {'seconds': 0.556299, 'status': 200, 'reason': 'OK', 'body': {'sold': 31, 'Sold': 1, 'string': 577, 'invalidStatus': 4, 'pending': 13, 'available': 268, 'available;pending;sold': 1, 'peric': 14}, 'hea...</msg>
<status status="PASS" starttime="20250205 13:18:11.624" endtime="20250205 13:18:12.183"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:12.183" level="TRACE">Arguments: [ {'body': {'Sold': 1,
          'available': 268,
          'available;pending;sold': 1,
          'invalidStatus': 4,
          'pending': 13,
          'peric': 14,
          'sold': 31,
          'string': 577},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:12 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.556299,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:12.183" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:12.216" level="TRACE">Return: {'Sold': 1,
 'available': 268,
 'available;pending;sold': 1,
 'invalidStatus': 4,
 'pending': 13,
 'peric': 14,
 'sold': 31,
 'string': 577}</msg>
<msg timestamp="20250205 13:18:12.217" level="INFO">${RESPONSE_PAYLOAD} = {'sold': 31, 'Sold': 1, 'string': 577, 'invalidStatus': 4, 'pending': 13, 'available': 268, 'available;pending;sold': 1, 'peric': 14}</msg>
<status status="PASS" starttime="20250205 13:18:12.183" endtime="20250205 13:18:12.217"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:12.220" level="TRACE">Arguments: [ {'body': {'Sold': 1,
          'available': 268,
          'available;pending;sold': 1,
          'invalidStatus': 4,
          'pending': 13,
          'peric': 14,
          'sold': 31,
          'string': 577},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:12 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.556299,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:12.221" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:12.248" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:12.248" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:12.219" endtime="20250205 13:18:12.248"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:12.251" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:12.252" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:12.252" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.250" endtime="20250205 13:18:12.252"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:12.254" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:12.254" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.254" endtime="20250205 13:18:12.254"/>
</kw>
<doc>Test Description:Retrieve store inventory 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:11.572" endtime="20250205 13:18:12.254"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:12.254" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:12.254" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:12.254" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.254" endtime="20250205 13:18:12.254"/>
</kw>
<msg timestamp="20250205 13:18:12.254" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.254" endtime="20250205 13:18:12.254"/>
</kw>
<status status="PASS" starttime="20250205 13:18:09.917" endtime="20250205 13:18:12.254"/>
</suite>
<suite id="s1-s2-s3" name="04 DELETE store" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\store\04_DELETE_store.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:12.273" level="TRACE">Arguments: [ ${CSVFILE}='store.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:12.274" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:12.274" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:12.274" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:12.274" endtime="20250205 13:18:12.274"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:12.275" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'store.csv' ]</msg>
<msg timestamp="20250205 13:18:12.277" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_02'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_03'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_04'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid quantity'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_05'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid shipDate'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_06'), ('Type', 'Negative'), ('Description', 'Create order with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')])
OrderedDict([('TestCaseID', 'TC_POST_store_07'), ('Type', 'Negative'), ('Description', 'Create order with no payload'), ('ExpectedHTTPResponseStatusCode', '400'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_01'), ('Type', 'Positive'), ('Description', 'Retrieve order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_02'), ('Type', 'Negative'), ('Description', 'Retrieve order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_store_03'), ('Type', 'Positive'), ('Description', 'Retrieve store inventory'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_store_01'), ('Type', 'Positive'), ('Description', 'Delete order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_store_02'), ('Type', 'Negative'), ('Description', 'Delete order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:12.277" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:12.278" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "i...</msg>
<status status="PASS" starttime="20250205 13:18:12.275" endtime="20250205 13:18:12.278"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:12.280" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:12.280" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_store_01'), ('Type', 'Positive'), ('Description', 'Create order with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "i...</msg>
<msg timestamp="20250205 13:18:12.281" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.280" endtime="20250205 13:18:12.281"/>
</kw>
<msg timestamp="20250205 13:18:12.281" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.273" endtime="20250205 13:18:12.281"/>
</kw>
<test id="s1-s2-s3-t1" name="TC_DELETE_store_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:12.283" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:12.284" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_DELETE_store_01' ]</msg>
<msg timestamp="20250205 13:18:12.286" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
             ('Type', 'Positive'),
             ('Description', 'Delete order with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:12.286" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_store_01'), ('Type', 'Positive'), ('Description', 'Delete order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:12.284" endtime="20250205 13:18:12.286"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:12.286" level="TRACE">Arguments: [ 'Test Description:Delete order with existing id \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:12.286" level="INFO">Set test documentation to:
Test Description:Delete order with existing id 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:12.286" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.286" endtime="20250205 13:18:12.286"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:12.286" endtime="20250205 13:18:12.286"/>
</return>
<msg timestamp="20250205 13:18:12.286" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
             ('Type', 'Positive'),
             ('Description', 'Delete order with existing id'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:12.286" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_store_01'), ('Type', 'Positive'), ('Description', 'Delete order with existing id'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:12.282" endtime="20250205 13:18:12.286"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:12.292" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:12.292" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:12.293" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:12.291" endtime="20250205 13:18:12.293"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:12.296" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:12.296" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:12.296" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:12.295" endtime="20250205 13:18:12.296"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:12.298" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:12.299" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:12.300" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:12.298" endtime="20250205 13:18:12.300"/>
</kw>
<kw name="DELETE" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order/${ORDER_01_ID}</arg>
<arg>validate=True</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:12.301" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order/1738750684' | validate=True ]</msg>
<msg timestamp="20250205 13:18:12.304" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:12.874" level="DEBUG">https://petstore.swagger.io:443 "DELETE /v2/store/order/1738750684 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:12.874" level="TRACE">Return: {'body': {'code': 200, 'message': '1738750684', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:12 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.570939,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:12.874" level="INFO">${RESPONSE} = {'seconds': 0.570939, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': '1738750684'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:12 GMT', 'Content-Type': 'applicatio...</msg>
<status status="PASS" starttime="20250205 13:18:12.301" endtime="20250205 13:18:12.874"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:12.874" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750684', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:12 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.570939,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:12.874" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:12.907" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:12.907" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:12.874" endtime="20250205 13:18:12.907"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:12.908" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:12.909" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:12.909" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.908" endtime="20250205 13:18:12.910"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:12.911" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:12.911" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.910" endtime="20250205 13:18:12.911"/>
</kw>
<doc>Test Description:Delete order with existing id 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:12.281" endtime="20250205 13:18:12.911"/>
</test>
<test id="s1-s2-s3-t2" name="TC_DELETE_store_02" line="30">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:12.916" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:12.916" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Create order with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create order with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_03'),
              ('Type', 'Negative'),
              ('Description', 'Create order with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_04'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid quantity'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": "invalidQuantity",\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_05'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid shipDate'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-99-99T19:45:05.865Z",\n  "status": "placed",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_06'),
              ('Type', 'Negative'),
              ('Description',
               'Create order with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload',
               '{\n  "id": 0,\n  "petId": 0,\n  "quantity": 0,\n  "shipDate": "2025-02-03T19:45:05.865Z",\n  "status": "invalidStatus",\n  "complete": true\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_store_07'),
              ('Type', 'Negative'),
              ('Description', 'Create order with no payload'),
              ('ExpectedHTTPResponseStatusCode', '400'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_store_03'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve store inventory'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete order with existing id'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete order with non-existing id'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_DELETE_store_02' ]</msg>
<msg timestamp="20250205 13:18:12.918" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
             ('Type', 'Negative'),
             ('Description', 'Delete order with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:12.918" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_store_02'), ('Type', 'Negative'), ('Description', 'Delete order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:12.916" endtime="20250205 13:18:12.918"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:12.920" level="TRACE">Arguments: [ 'Test Description:Delete order with non-existing id \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:12.920" level="INFO">Set test documentation to:
Test Description:Delete order with non-existing id 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:12.920" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:12.918" endtime="20250205 13:18:12.920"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:12.920" endtime="20250205 13:18:12.920"/>
</return>
<msg timestamp="20250205 13:18:12.920" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_store_02'),
             ('Type', 'Negative'),
             ('Description', 'Delete order with non-existing id'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:12.921" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_store_02'), ('Type', 'Negative'), ('Description', 'Delete order with non-existing id'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:12.914" endtime="20250205 13:18:12.921"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:12.923" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:12.923" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:12.924" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:12.922" endtime="20250205 13:18:12.924"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:12.925" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:12.925" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:12.925" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:12.924" endtime="20250205 13:18:12.925"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:12.928" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:12.929" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:12.929" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:12.925" endtime="20250205 13:18:12.929"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_ID}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:12.931" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:12.931" level="TRACE">Return: '818e4c8a-e3aa-11ef-acc2-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:12.931" level="INFO">${NON_EXISTING_ID} = 818e4c8a-e3aa-11ef-acc2-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:12.931" endtime="20250205 13:18:12.931"/>
</kw>
<kw name="DELETE" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/order/${NON_EXISTING_ID}</arg>
<arg>validate=True</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:12.933" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/store/order/818e4c8a-e3aa-11ef-acc2-744ca1d2e576' | validate=True ]</msg>
<msg timestamp="20250205 13:18:12.937" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:13.493" level="DEBUG">https://petstore.swagger.io:443 "DELETE /v2/store/order/818e4c8a-e3aa-11ef-acc2-744ca1d2e576 HTTP/1.1" 404 None</msg>
<msg timestamp="20250205 13:18:13.493" level="TRACE">Return: {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "818e4c8a-e3aa-11ef-acc2-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:13 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.558654,
 'status': 404}</msg>
<msg timestamp="20250205 13:18:13.493" level="INFO">${RESPONSE} = {'seconds': 0.558654, 'status': 404, 'reason': 'Not Found', 'body': {'code': 404, 'type': 'unknown', 'message': 'java.lang.NumberFormatException: For input string: "818e4c8a-e3aa-11ef-acc2-744ca1d2e57...</msg>
<status status="PASS" starttime="20250205 13:18:12.932" endtime="20250205 13:18:13.493"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:13.493" level="TRACE">Arguments: [ {'body': {'code': 404,
          'message': 'java.lang.NumberFormatException: For input string: "818e4c8a-e3aa-11ef-acc2-744ca1d2e576"',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:13 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.558654,
 'status': 404} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:13.493" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:13.526" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:18:13.526" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:18:13.493" endtime="20250205 13:18:13.526"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:13.528" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:13.529" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:13.529" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.527" endtime="20250205 13:18:13.529"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:13.530" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:13.530" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.529" endtime="20250205 13:18:13.530"/>
</kw>
<doc>Test Description:Delete order with non-existing id 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:18:12.914" endtime="20250205 13:18:13.532"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:13.533" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:13.533" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:13.533" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.533" endtime="20250205 13:18:13.533"/>
</kw>
<msg timestamp="20250205 13:18:13.536" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.533" endtime="20250205 13:18:13.536"/>
</kw>
<status status="PASS" starttime="20250205 13:18:12.263" endtime="20250205 13:18:13.536"/>
</suite>
<status status="FAIL" starttime="20250205 13:18:04.143" endtime="20250205 13:18:13.538"/>
</suite>
<suite id="s1-s3" name="User" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\user">
<suite id="s1-s3-s1" name="01 POST user" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\user\01_POST_user.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:13.566" level="TRACE">Arguments: [ ${CSVFILE}='user.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:13.566" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:13.566" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:13.566" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:13.566" endtime="20250205 13:18:13.566"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:13.566" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'user.csv' ]</msg>
<msg timestamp="20250205 13:18:13.566" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_02'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_03'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_04'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_05'), ('Type', 'Negative'), ('Description', 'Create user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_06'), ('Type', 'Positive'), ('Description', 'Create user [createWithArray] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_07'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithArray] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_08'), ('Type', 'Negative'), ('Description', 'Create user [createWithArray]  with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_09'), ('Type', 'Positive'), ('Description', 'Create user [createWithList] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_10'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithList] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_11'), ('Type', 'Negative'), ('Description', 'Create user [createWithList] with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_user_01'), ('Type', 'Positive'), ('Description', 'Update an existing user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_02'), ('Type', 'Positive'), ('Description', 'Create user by providing non-existing username to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_03'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_04'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_05'), ('Type', 'Negative'), ('Description', 'Update user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_01'), ('Type', 'Positive'), ('Description', 'Retrieve user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_02'), ('Type', 'Negative'), ('Description', 'Retrieve user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_03'), ('Type', 'Positive'), ('Description', 'Login  user with valid username and password'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_04'), ('Type', 'Negative'), ('Description', 'Login  user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_05'), ('Type', 'Negative'), ('Description', 'Login  user with wrong password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_06'), ('Type', 'Negative'), ('Description', 'Login  user with missing username'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_07'), ('Type', 'Negative'), ('Description', 'Login  user with missing  password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_08'), ('Type', 'Positive'), ('Description', 'Logout user'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_01'), ('Type', 'Positive'), ('Description', 'Delete user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_02'), ('Type', 'Negative'), ('Description', 'Delete user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:13.571" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:13.576" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<status status="PASS" starttime="20250205 13:18:13.566" endtime="20250205 13:18:13.577"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:13.578" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:13.578" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<msg timestamp="20250205 13:18:13.578" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.577" endtime="20250205 13:18:13.578"/>
</kw>
<msg timestamp="20250205 13:18:13.578" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.566" endtime="20250205 13:18:13.578"/>
</kw>
<test id="s1-s3-s1-t1" name="TC_POST_user_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:13.581" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:13.582" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_01' ]</msg>
<msg timestamp="20250205 13:18:13.586" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Create user with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:13.586" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id":...</msg>
<status status="PASS" starttime="20250205 13:18:13.582" endtime="20250205 13:18:13.586"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:13.586" level="TRACE">Arguments: [ 'Test Description:Create user with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:13.586" level="INFO">Set test documentation to:
Test Description:Create user with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:13.586" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.586" endtime="20250205 13:18:13.586"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:13.589" endtime="20250205 13:18:13.589"/>
</return>
<msg timestamp="20250205 13:18:13.589" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Create user with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:13.589" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id":...</msg>
<status status="PASS" starttime="20250205 13:18:13.581" endtime="20250205 13:18:13.589"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.592" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:13.592" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:13.593" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:13.590" endtime="20250205 13:18:13.593"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.594" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:13.596" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:13.596" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:13.593" endtime="20250205 13:18:13.596"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.596" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:13.596" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:13.596" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:13.596" endtime="20250205 13:18:13.596"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:13.596" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}' ]</msg>
<msg timestamp="20250205 13:18:13.596" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:13.596" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}</msg>
<status status="PASS" starttime="20250205 13:18:13.596" endtime="20250205 13:18:13.596"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:13.601" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:13.601" level="TRACE">Return: 1738750693</msg>
<msg timestamp="20250205 13:18:13.601" level="INFO">${SECS} = 1738750693</msg>
<status status="PASS" starttime="20250205 13:18:13.601" endtime="20250205 13:18:13.602"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.604" level="TRACE">Arguments: [ 1738750693 ]</msg>
<msg timestamp="20250205 13:18:13.604" level="TRACE">Return: 1738750693</msg>
<msg timestamp="20250205 13:18:13.604" level="INFO">${ID} = 1738750693</msg>
<status status="PASS" starttime="20250205 13:18:13.603" endtime="20250205 13:18:13.605"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.606" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.id' | 1738750693 ]</msg>
<msg timestamp="20250205 13:18:13.607" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:18:13.635" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 1738750693,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<status status="PASS" starttime="20250205 13:18:13.605" endtime="20250205 13:18:13.635"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_ID}</arg>
<arg>${ID}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.635" level="TRACE">Arguments: [ '${USER_01_ID}' | '${ID}' ]</msg>
<msg timestamp="20250205 13:18:13.635" level="INFO">${USER_01_ID} = 1738750693</msg>
<msg timestamp="20250205 13:18:13.635" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.635" endtime="20250205 13:18:13.635"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.641" level="TRACE">Arguments: [ 'USER1738750693' ]</msg>
<msg timestamp="20250205 13:18:13.641" level="TRACE">Return: 'USER1738750693'</msg>
<msg timestamp="20250205 13:18:13.641" level="INFO">${USERNAME} = USER1738750693</msg>
<status status="PASS" starttime="20250205 13:18:13.635" endtime="20250205 13:18:13.642"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.643" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 1738750693,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.username' | 'USER1738750693' ]</msg>
<msg timestamp="20250205 13:18:13.643" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:13.676" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 1738750693,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.643" endtime="20250205 13:18:13.676"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_USERNAME}</arg>
<arg>${USERNAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.682" level="TRACE">Arguments: [ '${USER_01_USERNAME}' | '${USERNAME}' ]</msg>
<msg timestamp="20250205 13:18:13.686" level="INFO">${USER_01_USERNAME} = USER1738750693</msg>
<msg timestamp="20250205 13:18:13.686" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.682" endtime="20250205 13:18:13.686"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${FIRSTNAME}</var>
<arg>FIRSTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.687" level="TRACE">Arguments: [ 'FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:13.687" level="TRACE">Return: 'FIRSTNAME'</msg>
<msg timestamp="20250205 13:18:13.687" level="INFO">${FIRSTNAME} = FIRSTNAME</msg>
<status status="PASS" starttime="20250205 13:18:13.687" endtime="20250205 13:18:13.688"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.firstName</arg>
<arg>${FIRSTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.689" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 1738750693,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'} | '$.firstName' | 'FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:13.690" level="INFO">Update JSON with expression: '$.firstName'</msg>
<msg timestamp="20250205 13:18:13.715" level="TRACE">Return: {'email': 'string',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.688" endtime="20250205 13:18:13.715"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_FIRSTNAME}</arg>
<arg>${FIRSTNAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.715" level="TRACE">Arguments: [ '${USER_01_FIRSTNAME}' | '${FIRSTNAME}' ]</msg>
<msg timestamp="20250205 13:18:13.715" level="INFO">${USER_01_FIRSTNAME} = FIRSTNAME</msg>
<msg timestamp="20250205 13:18:13.715" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.715" endtime="20250205 13:18:13.715"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${LASTNAME}</var>
<arg>LASTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.715" level="TRACE">Arguments: [ 'LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:13.715" level="TRACE">Return: 'LASTNAME'</msg>
<msg timestamp="20250205 13:18:13.715" level="INFO">${LASTNAME} = LASTNAME</msg>
<status status="PASS" starttime="20250205 13:18:13.715" endtime="20250205 13:18:13.715"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.lastName</arg>
<arg>${LASTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.723" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'} | '$.lastName' | 'LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:13.723" level="INFO">Update JSON with expression: '$.lastName'</msg>
<msg timestamp="20250205 13:18:13.782" level="TRACE">Return: {'email': 'string',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.721" endtime="20250205 13:18:13.782"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_LASTNAME}</arg>
<arg>${LASTNAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.782" level="TRACE">Arguments: [ '${USER_01_LASTNAME}' | '${LASTNAME}' ]</msg>
<msg timestamp="20250205 13:18:13.782" level="INFO">${USER_01_LASTNAME} = LASTNAME</msg>
<msg timestamp="20250205 13:18:13.782" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.782" endtime="20250205 13:18:13.782"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${EMAIL}</var>
<arg>abc@def.com</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.782" level="TRACE">Arguments: [ 'abc@def.com' ]</msg>
<msg timestamp="20250205 13:18:13.782" level="TRACE">Return: 'abc@def.com'</msg>
<msg timestamp="20250205 13:18:13.782" level="INFO">${EMAIL} = abc@def.com</msg>
<status status="PASS" starttime="20250205 13:18:13.782" endtime="20250205 13:18:13.782"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.email</arg>
<arg>${EMAIL}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.782" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'} | '$.email' | 'abc@def.com' ]</msg>
<msg timestamp="20250205 13:18:13.782" level="INFO">Update JSON with expression: '$.email'</msg>
<msg timestamp="20250205 13:18:13.815" level="TRACE">Return: {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.782" endtime="20250205 13:18:13.815"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_EMAIL}</arg>
<arg>${EMAIL}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.815" level="TRACE">Arguments: [ '${USER_01_EMAIL}' | '${EMAIL}' ]</msg>
<msg timestamp="20250205 13:18:13.815" level="INFO">${USER_01_EMAIL} = abc@def.com</msg>
<msg timestamp="20250205 13:18:13.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.815" endtime="20250205 13:18:13.815"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PASSWORD}</var>
<arg>PASS${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.815" level="TRACE">Arguments: [ 'PASS1738750693' ]</msg>
<msg timestamp="20250205 13:18:13.815" level="TRACE">Return: 'PASS1738750693'</msg>
<msg timestamp="20250205 13:18:13.815" level="INFO">${PASSWORD} = PASS1738750693</msg>
<status status="PASS" starttime="20250205 13:18:13.815" endtime="20250205 13:18:13.821"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.password</arg>
<arg>${PASSWORD}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.822" level="TRACE">Arguments: [ {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'} | '$.password' | 'PASS1738750693' ]</msg>
<msg timestamp="20250205 13:18:13.823" level="INFO">Update JSON with expression: '$.password'</msg>
<msg timestamp="20250205 13:18:13.850" level="TRACE">Return: {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.821" endtime="20250205 13:18:13.850"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_PASSWORD}</arg>
<arg>${PASSWORD}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.850" level="TRACE">Arguments: [ '${USER_01_PASSWORD}' | '${PASSWORD}' ]</msg>
<msg timestamp="20250205 13:18:13.852" level="INFO">${USER_01_PASSWORD} = PASS1738750693</msg>
<msg timestamp="20250205 13:18:13.852" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.850" endtime="20250205 13:18:13.853"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHONE}</var>
<arg>0123456789</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:13.855" level="TRACE">Arguments: [ '0123456789' ]</msg>
<msg timestamp="20250205 13:18:13.855" level="TRACE">Return: '0123456789'</msg>
<msg timestamp="20250205 13:18:13.855" level="INFO">${PHONE} = 0123456789</msg>
<status status="PASS" starttime="20250205 13:18:13.855" endtime="20250205 13:18:13.855"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.phone</arg>
<arg>${PHONE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.855" level="TRACE">Arguments: [ {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'} | '$.phone' | '0123456789' ]</msg>
<msg timestamp="20250205 13:18:13.855" level="INFO">Update JSON with expression: '$.phone'</msg>
<msg timestamp="20250205 13:18:13.885" level="TRACE">Return: {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': '0123456789',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.855" endtime="20250205 13:18:13.885"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_PHONE}</arg>
<arg>${PHONE}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.885" level="TRACE">Arguments: [ '${USER_01_PHONE}' | '${PHONE}' ]</msg>
<msg timestamp="20250205 13:18:13.893" level="INFO">${USER_01_PHONE} = 0123456789</msg>
<msg timestamp="20250205 13:18:13.893" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.885" endtime="20250205 13:18:13.893"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${USERSTATUS}</var>
<arg>1</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:13.893" level="TRACE">Arguments: [ '1' ]</msg>
<msg timestamp="20250205 13:18:13.893" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:13.893" level="TRACE">Return: 1</msg>
<msg timestamp="20250205 13:18:13.893" level="INFO">${USERSTATUS} = 1</msg>
<status status="PASS" starttime="20250205 13:18:13.893" endtime="20250205 13:18:13.893"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.userStatus</arg>
<arg>${USERSTATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:13.893" level="TRACE">Arguments: [ {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': '0123456789',
 'userStatus': 0,
 'username': 'USER1738750693'} | '$.userStatus' | 1 ]</msg>
<msg timestamp="20250205 13:18:13.893" level="INFO">Update JSON with expression: '$.userStatus'</msg>
<msg timestamp="20250205 13:18:13.923" level="TRACE">Return: {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': '0123456789',
 'userStatus': 1,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:13.893" endtime="20250205 13:18:13.923"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_01_USERSTATUS}</arg>
<arg>${USERSTATUS}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:13.923" level="TRACE">Arguments: [ '${USER_01_USERSTATUS}' | '${USERSTATUS}' ]</msg>
<msg timestamp="20250205 13:18:13.923" level="INFO">${USER_01_USERSTATUS} = 1</msg>
<msg timestamp="20250205 13:18:13.923" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:13.923" endtime="20250205 13:18:13.923"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:13.923" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:13.923" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:13.923" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:13.923" endtime="20250205 13:18:13.923"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:13.932" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:13.933" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:13.933" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:13.933" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:13.933" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:13.932" endtime="20250205 13:18:13.933"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:13.934" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:13.934" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:13.934" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:13.934" endtime="20250205 13:18:13.934"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:13.935" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:13.936" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:13.965" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:13.935" endtime="20250205 13:18:13.965"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:13.965" endtime="20250205 13:18:13.965"/>
</return>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:13.965" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:13.931" endtime="20250205 13:18:13.965"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:13.965" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:13.965" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:13.965" endtime="20250205 13:18:13.965"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:13.965" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:13.965" endtime="20250205 13:18:13.965"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:13.965" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:13.965" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:13.997" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:13.998" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:13.965" endtime="20250205 13:18:13.998"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:13.998" endtime="20250205 13:18:13.998"/>
</return>
<msg timestamp="20250205 13:18:13.998" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:13.999" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:13.965" endtime="20250205 13:18:13.999"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:14.002" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user' | body={'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': '0123456789',
 'userStatus': 1,
 'username': 'USER1738750693'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:14.003" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:14.595" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:14.595" level="TRACE">Return: {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:14.595" level="INFO">${RESPONSE} = {'seconds': 0.597432, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': '1738750693'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:14 GMT', 'Content-Type': 'applicatio...</msg>
<status status="PASS" starttime="20250205 13:18:13.999" endtime="20250205 13:18:14.595"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.595" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:14.595" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:14.633" level="TRACE">Return: {'code': 200, 'message': '1738750693', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:14.633" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': '1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:14.595" endtime="20250205 13:18:14.633"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.636" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:14.636" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:14.655" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:14.662" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:14.635" endtime="20250205 13:18:14.662"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.664" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:14.664" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.664" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:14.664" endtime="20250205 13:18:14.664"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.664" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:14.664" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:14.686" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.692" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.664" endtime="20250205 13:18:14.692"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.694" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.695" level="TRACE">Arguments: [ '"1738750693"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.696" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.696" level="FAIL">
WARNING: Field validation failure: "1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.696" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "1738750693" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.694" endtime="20250205 13:18:14.696"/>
</kw>
<msg timestamp="20250205 13:18:14.696" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.697" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "1738750693" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.693" endtime="20250205 13:18:14.698"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.username</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.698" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.username' ]</msg>
<msg timestamp="20250205 13:18:14.698" level="INFO">Get value from JSON with expression: '$.body.username'</msg>
<msg timestamp="20250205 13:18:14.725" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.726" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.698" endtime="20250205 13:18:14.726"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.726" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USERNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.726" level="TRACE">Arguments: [ '"USER1738750693"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.726" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.726" level="FAIL">
WARNING: Field validation failure: "USER1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.726" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "USER1738750693" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.726" endtime="20250205 13:18:14.726"/>
</kw>
<msg timestamp="20250205 13:18:14.726" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "USER1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.726" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "USER1738750693" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.726" endtime="20250205 13:18:14.726"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.firstName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.732" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.firstName' ]</msg>
<msg timestamp="20250205 13:18:14.732" level="INFO">Get value from JSON with expression: '$.body.firstName'</msg>
<msg timestamp="20250205 13:18:14.756" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.756" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.726" endtime="20250205 13:18:14.756"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.756" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${FIRSTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.756" level="TRACE">Arguments: [ '"FIRSTNAME"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.756" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.762" level="FAIL">
WARNING: Field validation failure: "FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:14.762" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "FIRSTNAME" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.756" endtime="20250205 13:18:14.762"/>
</kw>
<msg timestamp="20250205 13:18:14.763" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:14.763" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "FIRSTNAME" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.756" endtime="20250205 13:18:14.763"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.lastName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.763" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.lastName' ]</msg>
<msg timestamp="20250205 13:18:14.763" level="INFO">Get value from JSON with expression: '$.body.lastName'</msg>
<msg timestamp="20250205 13:18:14.790" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.792" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.763" endtime="20250205 13:18:14.792"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.793" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${LASTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.794" level="TRACE">Arguments: [ '"LASTNAME"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.794" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.794" level="FAIL">
WARNING: Field validation failure: "LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:14.794" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "LASTNAME" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.793" endtime="20250205 13:18:14.794"/>
</kw>
<msg timestamp="20250205 13:18:14.795" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:14.795" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "LASTNAME" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.793" endtime="20250205 13:18:14.795"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.email</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.795" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.email' ]</msg>
<msg timestamp="20250205 13:18:14.795" level="INFO">Get value from JSON with expression: '$.body.email'</msg>
<msg timestamp="20250205 13:18:14.830" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.831" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.795" endtime="20250205 13:18:14.831"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.833" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${EMAIL}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.834" level="TRACE">Arguments: [ '"abc@def.com"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.834" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.834" level="FAIL">
WARNING: Field validation failure: "abc@def.com" != "None"</msg>
<msg timestamp="20250205 13:18:14.834" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "abc@def.com" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.834" endtime="20250205 13:18:14.834"/>
</kw>
<msg timestamp="20250205 13:18:14.834" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "abc@def.com" != "None"</msg>
<msg timestamp="20250205 13:18:14.834" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "abc@def.com" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.832" endtime="20250205 13:18:14.834"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.password</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.834" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.password' ]</msg>
<msg timestamp="20250205 13:18:14.834" level="INFO">Get value from JSON with expression: '$.body.password'</msg>
<msg timestamp="20250205 13:18:14.864" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.865" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.834" endtime="20250205 13:18:14.865"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.865" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PASSWORD}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.865" level="TRACE">Arguments: [ '"PASS1738750693"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.865" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.865" level="FAIL">
WARNING: Field validation failure: "PASS1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.865" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "PASS1738750693" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.865" endtime="20250205 13:18:14.865"/>
</kw>
<msg timestamp="20250205 13:18:14.865" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "PASS1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.865" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "PASS1738750693" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.865" endtime="20250205 13:18:14.865"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.phone</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.865" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.phone' ]</msg>
<msg timestamp="20250205 13:18:14.865" level="INFO">Get value from JSON with expression: '$.body.phone'</msg>
<msg timestamp="20250205 13:18:14.898" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.898" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.865" endtime="20250205 13:18:14.898"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.899" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PHONE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.899" level="TRACE">Arguments: [ '"0123456789"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.899" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.902" level="FAIL">
WARNING: Field validation failure: "0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:14.902" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "0123456789" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.899" endtime="20250205 13:18:14.902"/>
</kw>
<msg timestamp="20250205 13:18:14.902" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:14.904" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "0123456789" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.899" endtime="20250205 13:18:14.904"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.userStatus</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:14.905" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:14 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.597432,
 'status': 200} | '$.body.userStatus' ]</msg>
<msg timestamp="20250205 13:18:14.905" level="INFO">Get value from JSON with expression: '$.body.userStatus'</msg>
<msg timestamp="20250205 13:18:14.929" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:14.929" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:14.904" endtime="20250205 13:18:14.929"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:14.932" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USERSTATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:14.933" level="TRACE">Arguments: [ '"1"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:14.934" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:14.934" level="FAIL">
WARNING: Field validation failure: "1" != "None"</msg>
<msg timestamp="20250205 13:18:14.935" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "1" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:14.933" endtime="20250205 13:18:14.935"/>
</kw>
<msg timestamp="20250205 13:18:14.935" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1" != "None"</msg>
<msg timestamp="20250205 13:18:14.935" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "1" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:14.932" endtime="20250205 13:18:14.935"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:14.935" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:14.935" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:14.935" endtime="20250205 13:18:14.935"/>
</kw>
<doc>Test Description:Create user with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:13.578" endtime="20250205 13:18:14.935"/>
</test>
<test id="s1-s3-s1-t2" name="TC_POST_user_02" line="114">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:14.943" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:14.943" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_02' ]</msg>
<msg timestamp="20250205 13:18:14.945" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create user with valid JSON payload having no id field'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:14.945" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_02'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Pa...</msg>
<status status="PASS" starttime="20250205 13:18:14.943" endtime="20250205 13:18:14.945"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:14.945" level="TRACE">Arguments: [ 'Test Description:Create user with valid JSON payload having no id field \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:14.945" level="INFO">Set test documentation to:
Test Description:Create user with valid JSON payload having no id field 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:14.945" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:14.945" endtime="20250205 13:18:14.945"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:14.945" endtime="20250205 13:18:14.945"/>
</return>
<msg timestamp="20250205 13:18:14.945" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create user with valid JSON payload having no id field'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:14.945" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_02'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Pa...</msg>
<status status="PASS" starttime="20250205 13:18:14.942" endtime="20250205 13:18:14.945"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:14.953" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:14.952" endtime="20250205 13:18:14.953"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:14.953" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:14.953" endtime="20250205 13:18:14.953"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:14.953" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:14.953" endtime="20250205 13:18:14.953"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Arguments: [ '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}' ]</msg>
<msg timestamp="20250205 13:18:14.953" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:14.953" level="INFO">${REQUEST_PAYLOAD} = {'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}</msg>
<status status="PASS" starttime="20250205 13:18:14.953" endtime="20250205 13:18:14.953"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:14.963" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:14.963" level="TRACE">Return: 1738750694</msg>
<msg timestamp="20250205 13:18:14.963" level="INFO">${SECS} = 1738750694</msg>
<status status="PASS" starttime="20250205 13:18:14.962" endtime="20250205 13:18:14.963"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:14.965" level="TRACE">Arguments: [ 'USER1738750694' ]</msg>
<msg timestamp="20250205 13:18:14.965" level="TRACE">Return: 'USER1738750694'</msg>
<msg timestamp="20250205 13:18:14.965" level="INFO">${USERNAME} = USER1738750694</msg>
<status status="PASS" starttime="20250205 13:18:14.964" endtime="20250205 13:18:14.965"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:14.966" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.username' | 'USER1738750694' ]</msg>
<msg timestamp="20250205 13:18:14.966" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:15.004" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:14.966" endtime="20250205 13:18:15.004"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${USER_02_USERNAME}</arg>
<arg>${USERNAME}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20250205 13:18:15.004" level="TRACE">Arguments: [ '${USER_02_USERNAME}' | '${USERNAME}' ]</msg>
<msg timestamp="20250205 13:18:15.012" level="INFO">${USER_02_USERNAME} = USER1738750694</msg>
<msg timestamp="20250205 13:18:15.012" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:15.004" endtime="20250205 13:18:15.012"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:15.014" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:15.014" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:15.014" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:15.013" endtime="20250205 13:18:15.014"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:15.016" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:15.016" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:15.016" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:15.016" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:15.016" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:15.016" endtime="20250205 13:18:15.017"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:15.017" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:15.017" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.017" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.017" endtime="20250205 13:18:15.018"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:15.018" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:15.018" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.045" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.018" endtime="20250205 13:18:15.045"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:15.045" endtime="20250205 13:18:15.045"/>
</return>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.045" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.015" endtime="20250205 13:18:15.045"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:15.045" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:15.045" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:15.045" endtime="20250205 13:18:15.045"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:15.045" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.045" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.045" endtime="20250205 13:18:15.045"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:15.051" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:15.051" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:15.075" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.075" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.045" endtime="20250205 13:18:15.075"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:15.075" endtime="20250205 13:18:15.075"/>
</return>
<msg timestamp="20250205 13:18:15.075" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.075" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.045" endtime="20250205 13:18:15.075"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:15.079" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user' | body={'email': 'string',
 'firstName': 'string',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:15.084" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:15.643" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:15.652" level="TRACE">Return: {'body': {'code': 200, 'message': '9223372036854766797', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:15 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567568,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:15.652" level="INFO">${RESPONSE} = {'seconds': 0.567568, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': '9223372036854766797'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:15 GMT', 'Content-Type': 'a...</msg>
<status status="PASS" starttime="20250205 13:18:15.079" endtime="20250205 13:18:15.652"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:15.652" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '9223372036854766797', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:15 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567568,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:15.652" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:15.683" level="TRACE">Return: {'code': 200, 'message': '9223372036854766797', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:15.683" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': '9223372036854766797'}</msg>
<status status="PASS" starttime="20250205 13:18:15.652" endtime="20250205 13:18:15.683"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:15.685" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '9223372036854766797', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:15 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567568,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:15.685" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:15.710" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:15.710" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:15.684" endtime="20250205 13:18:15.710"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:15.713" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:15.714" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:15.714" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:15.711" endtime="20250205 13:18:15.714"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:15.714" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '9223372036854766797', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:15 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.567568,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:15.714" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:15.748" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:15.748" level="INFO">${ID} = None</msg>
<status status="PASS" starttime="20250205 13:18:15.714" endtime="20250205 13:18:15.748"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:15.748" level="TRACE">Arguments: [ 'Should Not Be Equal As Strings' | '"${None}"' | '"${ID}"' | '\\nERROR: ID is missing in response payload' ]</msg>
<kw name="Should Not Be Equal As Strings" library="BuiltIn">
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Fails if objects are equal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:15.751" level="TRACE">Arguments: [ '"None"' | '"None"' | '\nERROR: ID is missing in response payload' ]</msg>
<msg timestamp="20250205 13:18:15.751" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:15.751" level="FAIL">
ERROR: ID is missing in response payload: "None" == "None"</msg>
<msg timestamp="20250205 13:18:15.752" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: ID is missing in response payload: "None" == "None"</msg>
<status status="FAIL" starttime="20250205 13:18:15.748" endtime="20250205 13:18:15.752"/>
</kw>
<msg timestamp="20250205 13:18:15.752" level="WARN">Executing keyword 'Should Not Be Equal As Strings' failed:

ERROR: ID is missing in response payload: "None" == "None"</msg>
<msg timestamp="20250205 13:18:15.753" level="TRACE">Return: ('FAIL', '\nERROR: ID is missing in response payload: "None" == "None"')</msg>
<status status="PASS" starttime="20250205 13:18:15.748" endtime="20250205 13:18:15.753"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:15.753" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:15.753" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:15.753" endtime="20250205 13:18:15.753"/>
</kw>
<doc>Test Description:Create user with valid JSON payload having no id field 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:14.941" endtime="20250205 13:18:15.753"/>
</test>
<test id="s1-s3-s1-t3" name="TC_POST_user_03" line="150">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:15.760" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:15.761" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_03' ]</msg>
<msg timestamp="20250205 13:18:15.763" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_03'),
             ('Type', 'Negative'),
             ('Description', 'Create user with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:15.764" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_03'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n...</msg>
<status status="PASS" starttime="20250205 13:18:15.760" endtime="20250205 13:18:15.764"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:15.766" level="TRACE">Arguments: [ 'Test Description:Create user with payload having invalid id \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:18:15.766" level="INFO">Set test documentation to:
Test Description:Create user with payload having invalid id 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:18:15.766" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:15.764" endtime="20250205 13:18:15.766"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:15.766" endtime="20250205 13:18:15.767"/>
</return>
<msg timestamp="20250205 13:18:15.767" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_03'),
             ('Type', 'Negative'),
             ('Description', 'Create user with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:15.767" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_03'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n...</msg>
<status status="PASS" starttime="20250205 13:18:15.753" endtime="20250205 13:18:15.767"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:15.769" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:15.770" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:15.770" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:15.768" endtime="20250205 13:18:15.770"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:15.772" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:15.772" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:15.772" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:15.771" endtime="20250205 13:18:15.773"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:15.774" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:15.775" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:15.775" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:15.773" endtime="20250205 13:18:15.775"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:15.776" level="TRACE">Arguments: [ '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}' ]</msg>
<msg timestamp="20250205 13:18:15.778" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:15.778" level="INFO">${REQUEST_PAYLOAD} = {'id': 'invalidId', 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}</msg>
<status status="PASS" starttime="20250205 13:18:15.776" endtime="20250205 13:18:15.778"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:15.780" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:15.780" level="TRACE">Return: 1738750695</msg>
<msg timestamp="20250205 13:18:15.780" level="INFO">${SECS} = 1738750695</msg>
<status status="PASS" starttime="20250205 13:18:15.779" endtime="20250205 13:18:15.780"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:15.781" level="TRACE">Arguments: [ 'USER1738750695' ]</msg>
<msg timestamp="20250205 13:18:15.781" level="TRACE">Return: 'USER1738750695'</msg>
<msg timestamp="20250205 13:18:15.782" level="INFO">${USERNAME} = USER1738750695</msg>
<status status="PASS" starttime="20250205 13:18:15.781" endtime="20250205 13:18:15.782"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:15.783" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.username' | 'USER1738750695' ]</msg>
<msg timestamp="20250205 13:18:15.784" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750695'}</msg>
<status status="PASS" starttime="20250205 13:18:15.783" endtime="20250205 13:18:15.814"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:15.814" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:15.814" endtime="20250205 13:18:15.814"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:15.814" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:15.814" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:15.814" endtime="20250205 13:18:15.814"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.814" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.814" endtime="20250205 13:18:15.814"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:15.814" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:15.814" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.852" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.814" endtime="20250205 13:18:15.852"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:15.852" endtime="20250205 13:18:15.852"/>
</return>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.852" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.814" endtime="20250205 13:18:15.852"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:15.852" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:15.852" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:15.852" endtime="20250205 13:18:15.852"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.852" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.852" endtime="20250205 13:18:15.852"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:15.852" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:15.852" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:15.883" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.883" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.852" endtime="20250205 13:18:15.883"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:15.883" endtime="20250205 13:18:15.883"/>
</return>
<msg timestamp="20250205 13:18:15.883" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:15.883" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:15.852" endtime="20250205 13:18:15.883"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:15.883" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user' | body={'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750695'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:15.893" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:16.445" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:18:16.460" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:16 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.565296,
 'status': 500}</msg>
<msg timestamp="20250205 13:18:16.460" level="INFO">${RESPONSE} = {'seconds': 0.565296, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:16 GMT', 'Cont...</msg>
<status status="PASS" starttime="20250205 13:18:15.883" endtime="20250205 13:18:16.460"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:16.460" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:16 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.565296,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:16.460" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:16.490" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:16.491" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:18:16.460" endtime="20250205 13:18:16.491"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:16.493" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:16 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.565296,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:16.493" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:16.519" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:18:16.519" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:18:16.492" endtime="20250205 13:18:16.519"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:16.522" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:16.522" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:16.522" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:16.520" endtime="20250205 13:18:16.522"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:16.523" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:16.523" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:16.523" endtime="20250205 13:18:16.523"/>
</kw>
<doc>Test Description:Create user with payload having invalid id 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:18:15.753" endtime="20250205 13:18:16.523"/>
</test>
<test id="s1-s3-s1-t4" name="TC_POST_user_04" line="179">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:16.523" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:16.530" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_04' ]</msg>
<msg timestamp="20250205 13:18:16.532" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_04'),
             ('Type', 'Negative'),
             ('Description', 'Create user with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:18:16.533" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_04'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', ...</msg>
<status status="PASS" starttime="20250205 13:18:16.529" endtime="20250205 13:18:16.533"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:16.535" level="TRACE">Arguments: [ 'Test Description:Create user with payload having invalid status \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:18:16.535" level="INFO">Set test documentation to:
Test Description:Create user with payload having invalid status 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:18:16.536" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:16.534" endtime="20250205 13:18:16.536"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:16.536" endtime="20250205 13:18:16.536"/>
</return>
<msg timestamp="20250205 13:18:16.536" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_04'),
             ('Type', 'Negative'),
             ('Description', 'Create user with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:18:16.537" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_04'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', ...</msg>
<status status="PASS" starttime="20250205 13:18:16.523" endtime="20250205 13:18:16.537"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:16.539" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:16.539" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:16.539" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:16.537" endtime="20250205 13:18:16.540"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:16.542" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:16.542" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:16.542" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:16.540" endtime="20250205 13:18:16.543"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:16.544" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:16.544" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:16.544" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:16.543" endtime="20250205 13:18:16.544"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:16.546" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}' ]</msg>
<msg timestamp="20250205 13:18:16.546" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:16.546" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:18:16.546" endtime="20250205 13:18:16.546"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:16.550" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:16.550" level="TRACE">Return: 1738750696</msg>
<msg timestamp="20250205 13:18:16.550" level="INFO">${SECS} = 1738750696</msg>
<status status="PASS" starttime="20250205 13:18:16.549" endtime="20250205 13:18:16.550"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:16.552" level="TRACE">Arguments: [ 'USER1738750696' ]</msg>
<msg timestamp="20250205 13:18:16.552" level="TRACE">Return: 'USER1738750696'</msg>
<msg timestamp="20250205 13:18:16.552" level="INFO">${USERNAME} = USER1738750696</msg>
<status status="PASS" starttime="20250205 13:18:16.551" endtime="20250205 13:18:16.553"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:16.554" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'string'} | '$.username' | 'USER1738750696' ]</msg>
<msg timestamp="20250205 13:18:16.554" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:16.586" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'USER1738750696'}</msg>
<status status="PASS" starttime="20250205 13:18:16.553" endtime="20250205 13:18:16.586"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:16.591" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:16.592" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:16.592" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:16.586" endtime="20250205 13:18:16.592"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:16.594" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:16.594" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:16.594" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:16.594" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:16.594" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:16.594" endtime="20250205 13:18:16.594"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:16.594" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:16.594" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:16.594" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:16.594" endtime="20250205 13:18:16.594"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:16.594" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:16.594" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:16.612" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:16.612" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:16.594" endtime="20250205 13:18:16.612"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:16.612" endtime="20250205 13:18:16.612"/>
</return>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:16.627" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:16.593" endtime="20250205 13:18:16.627"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:16.627" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:16.627" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:16.627" endtime="20250205 13:18:16.627"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:16.627" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:16.627" endtime="20250205 13:18:16.627"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:16.627" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:16.627" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:16.658" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:16.658" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:16.627" endtime="20250205 13:18:16.658"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:16.658" endtime="20250205 13:18:16.658"/>
</return>
<msg timestamp="20250205 13:18:16.658" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:16.658" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:16.627" endtime="20250205 13:18:16.658"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:16.663" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user' | body={'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'USER1738750696'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:16.663" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:17.233" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:18:17.233" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:17 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.568918,
 'status': 500}</msg>
<msg timestamp="20250205 13:18:17.233" level="INFO">${RESPONSE} = {'seconds': 0.568918, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:17 GMT', 'Cont...</msg>
<status status="PASS" starttime="20250205 13:18:16.662" endtime="20250205 13:18:17.233"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:17.233" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:17 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.568918,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:17.233" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:17.266" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:17.266" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:18:17.233" endtime="20250205 13:18:17.266"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:17.267" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:17 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.568918,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:17.268" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:17.294" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:18:17.294" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:18:17.267" endtime="20250205 13:18:17.295"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:17.297" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:17.297" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:17.297" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:17.296" endtime="20250205 13:18:17.297"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:17.299" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:17.299" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:17.298" endtime="20250205 13:18:17.299"/>
</kw>
<doc>Test Description:Create user with payload having invalid status 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:18:16.523" endtime="20250205 13:18:17.299"/>
</test>
<test id="s1-s3-s1-t5" name="TC_POST_user_05" line="208">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:17.303" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:17.305" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_05' ]</msg>
<msg timestamp="20250205 13:18:17.307" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_05'),
             ('Type', 'Negative'),
             ('Description', 'Create user with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:17.307" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_05'), ('Type', 'Negative'), ('Description', 'Create user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:17.303" endtime="20250205 13:18:17.308"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:17.309" level="TRACE">Arguments: [ 'Test Description:Create user with no payload \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:17.309" level="INFO">Set test documentation to:
Test Description:Create user with no payload 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:17.310" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:17.308" endtime="20250205 13:18:17.310"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:17.310" endtime="20250205 13:18:17.310"/>
</return>
<msg timestamp="20250205 13:18:17.310" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_05'),
             ('Type', 'Negative'),
             ('Description', 'Create user with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:17.310" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_05'), ('Type', 'Negative'), ('Description', 'Create user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:17.302" endtime="20250205 13:18:17.311"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:17.312" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:17.313" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:17.313" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:17.311" endtime="20250205 13:18:17.313"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:17.315" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:17.316" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:17.316" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:17.314" endtime="20250205 13:18:17.316"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:17.316" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:17.316" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:17.316" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:17.316" endtime="20250205 13:18:17.316"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:17.316" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:17.316" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:17.316" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:17.316" endtime="20250205 13:18:17.316"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:17.321" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:17.322" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:17.322" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:17.323" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:17.323" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:17.322" endtime="20250205 13:18:17.323"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:17.326" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:17.326" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:17.326" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:17.324" endtime="20250205 13:18:17.326"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:17.327" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:17.327" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:17.383" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:17.327" endtime="20250205 13:18:17.383"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:17.383" endtime="20250205 13:18:17.383"/>
</return>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:17.383" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:17.316" endtime="20250205 13:18:17.383"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:17.383" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:17.383" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:17.383" endtime="20250205 13:18:17.383"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:17.383" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:17.383" endtime="20250205 13:18:17.383"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:17.383" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:17.383" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:17.422" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:17.422" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:17.383" endtime="20250205 13:18:17.422"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:17.422" endtime="20250205 13:18:17.422"/>
</return>
<msg timestamp="20250205 13:18:17.422" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:17.422" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:17.383" endtime="20250205 13:18:17.422"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:17.432" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:17.438" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:18.033" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user HTTP/1.1" 405 None</msg>
<msg timestamp="20250205 13:18:18.033" level="TRACE">Return: {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:18 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.598793,
 'status': 405}</msg>
<msg timestamp="20250205 13:18:18.033" level="INFO">${RESPONSE} = {'seconds': 0.598793, 'status': 405, 'reason': 'Method Not Allowed', 'body': {'code': 405, 'type': 'unknown', 'message': 'no data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:18 GMT', 'Content-Type'...</msg>
<status status="PASS" starttime="20250205 13:18:17.422" endtime="20250205 13:18:18.033"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:18.033" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:18 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.598793,
 'status': 405} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:18.033" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:18.066" level="TRACE">Return: {'code': 405, 'message': 'no data', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:18.066" level="INFO">${RESPONSE_PAYLOAD} = {'code': 405, 'type': 'unknown', 'message': 'no data'}</msg>
<status status="PASS" starttime="20250205 13:18:18.033" endtime="20250205 13:18:18.067"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:18.069" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:18 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.598793,
 'status': 405} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:18.069" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:18.094" level="TRACE">Return: 405</msg>
<msg timestamp="20250205 13:18:18.094" level="INFO">${RESPONSE_STATUS} = 405</msg>
<status status="PASS" starttime="20250205 13:18:18.068" endtime="20250205 13:18:18.094"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:18.097" level="TRACE">Arguments: [ '"405"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:18.097" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:18.097" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:18.095" endtime="20250205 13:18:18.097"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:18.098" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:18.098" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:18.097" endtime="20250205 13:18:18.098"/>
</kw>
<doc>Test Description:Create user with no payload 

 Expected Result:405 

</doc>
<status status="PASS" starttime="20250205 13:18:17.301" endtime="20250205 13:18:18.099"/>
</test>
<test id="s1-s3-s1-t6" name="TC_POST_user_06" line="228">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:18.102" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:18.102" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_06' ]</msg>
<msg timestamp="20250205 13:18:18.106" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_06'),
             ('Type', 'Positive'),
             ('Description',
              'Create user [createWithArray] with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])</msg>
<msg timestamp="20250205 13:18:18.106" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_06'), ('Type', 'Positive'), ('Description', 'Create user [createWithArray] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Pay...</msg>
<status status="PASS" starttime="20250205 13:18:18.102" endtime="20250205 13:18:18.106"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:18.107" level="TRACE">Arguments: [ 'Test Description:Create user [createWithArray] with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:18.108" level="INFO">Set test documentation to:
Test Description:Create user [createWithArray] with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:18.108" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:18.106" endtime="20250205 13:18:18.108"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:18.108" endtime="20250205 13:18:18.108"/>
</return>
<msg timestamp="20250205 13:18:18.109" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_06'),
             ('Type', 'Positive'),
             ('Description',
              'Create user [createWithArray] with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])</msg>
<msg timestamp="20250205 13:18:18.109" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_06'), ('Type', 'Positive'), ('Description', 'Create user [createWithArray] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Pay...</msg>
<status status="PASS" starttime="20250205 13:18:18.101" endtime="20250205 13:18:18.109"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.111" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:18.111" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:18.111" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:18.110" endtime="20250205 13:18:18.111"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.113" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:18.114" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:18.114" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:18.112" endtime="20250205 13:18:18.114"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.116" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:18.116" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:18.116" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:18.115" endtime="20250205 13:18:18.116"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:18.116" level="TRACE">Arguments: [ '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]' ]</msg>
<msg timestamp="20250205 13:18:18.116" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<msg timestamp="20250205 13:18:18.116" level="INFO">${REQUEST_PAYLOAD} = [{'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}]</msg>
<status status="PASS" starttime="20250205 13:18:18.116" endtime="20250205 13:18:18.116"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:18.121" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:18.121" level="TRACE">Return: 1738750698</msg>
<msg timestamp="20250205 13:18:18.121" level="INFO">${SECS} = 1738750698</msg>
<status status="PASS" starttime="20250205 13:18:18.116" endtime="20250205 13:18:18.121"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.123" level="TRACE">Arguments: [ 1738750698 ]</msg>
<msg timestamp="20250205 13:18:18.123" level="TRACE">Return: 1738750698</msg>
<msg timestamp="20250205 13:18:18.123" level="INFO">${ID} = 1738750698</msg>
<status status="PASS" starttime="20250205 13:18:18.122" endtime="20250205 13:18:18.123"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.126" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[0].id' | 1738750698 ]</msg>
<msg timestamp="20250205 13:18:18.126" level="INFO">Update JSON with expression: '$[0].id'</msg>
<msg timestamp="20250205 13:18:18.156" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 1738750698,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.126" endtime="20250205 13:18:18.156"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.156" level="TRACE">Arguments: [ 'USER1738750698' ]</msg>
<msg timestamp="20250205 13:18:18.156" level="TRACE">Return: 'USER1738750698'</msg>
<msg timestamp="20250205 13:18:18.156" level="INFO">${USERNAME} = USER1738750698</msg>
<status status="PASS" starttime="20250205 13:18:18.156" endtime="20250205 13:18:18.156"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.156" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 1738750698,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[0].username' | 'USER1738750698' ]</msg>
<msg timestamp="20250205 13:18:18.164" level="INFO">Update JSON with expression: '$[0].username'</msg>
<msg timestamp="20250205 13:18:18.192" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 1738750698,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.156" endtime="20250205 13:18:18.193"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${FIRSTNAME}</var>
<arg>FIRSTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.194" level="TRACE">Arguments: [ 'FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:18.194" level="TRACE">Return: 'FIRSTNAME'</msg>
<msg timestamp="20250205 13:18:18.195" level="INFO">${FIRSTNAME} = FIRSTNAME</msg>
<status status="PASS" starttime="20250205 13:18:18.194" endtime="20250205 13:18:18.195"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].firstName</arg>
<arg>${FIRSTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.196" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 1738750698,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}] | '$[0].firstName' | 'FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:18.197" level="INFO">Update JSON with expression: '$[0].firstName'</msg>
<msg timestamp="20250205 13:18:18.214" level="TRACE">Return: [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.196" endtime="20250205 13:18:18.222"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${LASTNAME}</var>
<arg>LASTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.223" level="TRACE">Arguments: [ 'LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:18.223" level="TRACE">Return: 'LASTNAME'</msg>
<msg timestamp="20250205 13:18:18.224" level="INFO">${LASTNAME} = LASTNAME</msg>
<status status="PASS" starttime="20250205 13:18:18.223" endtime="20250205 13:18:18.224"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].lastName</arg>
<arg>${LASTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.224" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}] | '$[0].lastName' | 'LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:18.224" level="INFO">Update JSON with expression: '$[0].lastName'</msg>
<msg timestamp="20250205 13:18:18.247" level="TRACE">Return: [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.224" endtime="20250205 13:18:18.247"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${EMAIL}</var>
<arg>abc@def.com</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.252" level="TRACE">Arguments: [ 'abc@def.com' ]</msg>
<msg timestamp="20250205 13:18:18.252" level="TRACE">Return: 'abc@def.com'</msg>
<msg timestamp="20250205 13:18:18.252" level="INFO">${EMAIL} = abc@def.com</msg>
<status status="PASS" starttime="20250205 13:18:18.251" endtime="20250205 13:18:18.252"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].email</arg>
<arg>${EMAIL}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.254" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}] | '$[0].email' | 'abc@def.com' ]</msg>
<msg timestamp="20250205 13:18:18.255" level="INFO">Update JSON with expression: '$[0].email'</msg>
<msg timestamp="20250205 13:18:18.273" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.254" endtime="20250205 13:18:18.273"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PASSWORD}</var>
<arg>PASS${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.282" level="TRACE">Arguments: [ 'PASS1738750698' ]</msg>
<msg timestamp="20250205 13:18:18.283" level="TRACE">Return: 'PASS1738750698'</msg>
<msg timestamp="20250205 13:18:18.283" level="INFO">${PASSWORD} = PASS1738750698</msg>
<status status="PASS" starttime="20250205 13:18:18.282" endtime="20250205 13:18:18.283"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].password</arg>
<arg>${PASSWORD}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.284" level="TRACE">Arguments: [ [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}] | '$[0].password' | 'PASS1738750698' ]</msg>
<msg timestamp="20250205 13:18:18.285" level="INFO">Update JSON with expression: '$[0].password'</msg>
<msg timestamp="20250205 13:18:18.309" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750698',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.284" endtime="20250205 13:18:18.309"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHONE}</var>
<arg>0123456789</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:18.312" level="TRACE">Arguments: [ '0123456789' ]</msg>
<msg timestamp="20250205 13:18:18.313" level="TRACE">Return: '0123456789'</msg>
<msg timestamp="20250205 13:18:18.313" level="INFO">${PHONE} = 0123456789</msg>
<status status="PASS" starttime="20250205 13:18:18.312" endtime="20250205 13:18:18.313"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].phone</arg>
<arg>${PHONE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.313" level="TRACE">Arguments: [ [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750698',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750698'}] | '$[0].phone' | '0123456789' ]</msg>
<msg timestamp="20250205 13:18:18.313" level="INFO">Update JSON with expression: '$[0].phone'</msg>
<msg timestamp="20250205 13:18:18.339" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750698',
  'phone': '0123456789',
  'userStatus': 0,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.313" endtime="20250205 13:18:18.339"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${USERSTATUS}</var>
<arg>1</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:18.339" level="TRACE">Arguments: [ '1' ]</msg>
<msg timestamp="20250205 13:18:18.339" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:18.339" level="TRACE">Return: 1</msg>
<msg timestamp="20250205 13:18:18.339" level="INFO">${USERSTATUS} = 1</msg>
<status status="PASS" starttime="20250205 13:18:18.339" endtime="20250205 13:18:18.342"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].userStatus</arg>
<arg>${USERSTATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:18.343" level="TRACE">Arguments: [ [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750698',
  'phone': '0123456789',
  'userStatus': 0,
  'username': 'USER1738750698'}] | '$[0].userStatus' | 1 ]</msg>
<msg timestamp="20250205 13:18:18.344" level="INFO">Update JSON with expression: '$[0].userStatus'</msg>
<msg timestamp="20250205 13:18:18.369" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750698',
  'phone': '0123456789',
  'userStatus': 1,
  'username': 'USER1738750698'}]</msg>
<status status="PASS" starttime="20250205 13:18:18.342" endtime="20250205 13:18:18.369"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:18.372" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:18.372" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:18.372" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:18.371" endtime="20250205 13:18:18.373"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:18.375" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:18.375" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:18.375" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:18.375" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:18.375" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:18.375" endtime="20250205 13:18:18.375"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:18.375" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:18.375" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:18.375" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:18.375" endtime="20250205 13:18:18.375"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:18.375" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:18.375" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:18.404" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:18.375" endtime="20250205 13:18:18.404"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:18.404" endtime="20250205 13:18:18.404"/>
</return>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:18.404" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:18.373" endtime="20250205 13:18:18.404"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:18.404" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:18.404" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:18.404" endtime="20250205 13:18:18.404"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:18.404" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:18.404" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:18.404" endtime="20250205 13:18:18.404"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:18.412" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:18.413" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:18.442" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:18.443" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:18.404" endtime="20250205 13:18:18.443"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:18.443" endtime="20250205 13:18:18.443"/>
</return>
<msg timestamp="20250205 13:18:18.443" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:18.443" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:18.404" endtime="20250205 13:18:18.443"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/createWithArray</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:18.443" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/createWithArray' | body=[{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750698,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750698',
  'phone': '0123456789',
  'userStatus': 1,
  'username': 'USER1738750698'}] | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:18.443" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:19.033" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user/createWithArray HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:19.033" level="TRACE">Return: {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:19 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588172,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:19.041" level="INFO">${RESPONSE} = {'seconds': 0.588172, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'ok'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:19 GMT', 'Content-Type': 'application/json',...</msg>
<status status="PASS" starttime="20250205 13:18:18.443" endtime="20250205 13:18:19.041"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:19.042" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:19 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588172,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:19.042" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:19.070" level="TRACE">Return: {'code': 200, 'message': 'ok', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:19.070" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'ok'}</msg>
<status status="PASS" starttime="20250205 13:18:19.042" endtime="20250205 13:18:19.070"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:19.073" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:19 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588172,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:19.073" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:19.098" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:19.098" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:19.072" endtime="20250205 13:18:19.099"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:19.101" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:19.101" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:19.101" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:19.100" endtime="20250205 13:18:19.101"/>
</kw>
<kw name="Convert JSON to String" library="RPA.JSON">
<var>${STR}</var>
<arg>${RESPONSE_PAYLOAD}</arg>
<doc>Convert a JSON serializable object to a string and return it.</doc>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Arguments: [ {'code': 200, 'message': 'ok', 'type': 'unknown'} ]</msg>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Return: '{"code": 200, "type": "unknown", "message": "ok"}'</msg>
<msg timestamp="20250205 13:18:19.104" level="INFO">${STR} = {"code": 200, "type": "unknown", "message": "ok"}</msg>
<status status="PASS" starttime="20250205 13:18:19.102" endtime="20250205 13:18:19.104"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Start With</arg>
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Arguments: [ 'Should Start With' | '${STR}' | '[' | '\\nWARNING: Response body is not an array' ]</msg>
<kw name="Should Start With" library="BuiltIn">
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Arguments: [ '{"code": 200, "type": "unknown", "message": "ok"}' | '[' | '\nWARNING: Response body is not an array' ]</msg>
<msg timestamp="20250205 13:18:19.104" level="FAIL">
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:19.104" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<status status="FAIL" starttime="20250205 13:18:19.104" endtime="20250205 13:18:19.104"/>
</kw>
<msg timestamp="20250205 13:18:19.104" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Return: ('FAIL',
 '\nWARNING: Response body is not an array: \'{"code": 200, "type": "unknown", "message": "ok"}\' does not start with \'[\'')</msg>
<status status="PASS" starttime="20250205 13:18:19.104" endtime="20250205 13:18:19.104"/>
</kw>
<kw name="Get Substring" library="String">
<var>${FIRSTCHAR}</var>
<arg>${STR}[0]</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Arguments: [ '{' | '0' | '1' ]</msg>
<msg timestamp="20250205 13:18:19.104" level="TRACE">Return: '{'</msg>
<msg timestamp="20250205 13:18:19.104" level="INFO">${FIRSTCHAR} = {</msg>
<status status="PASS" starttime="20250205 13:18:19.104" endtime="20250205 13:18:19.104"/>
</kw>
<if>
<branch type="IF" condition="&quot;${FIRSTCHAR}&quot; == &quot;[&quot;">
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.112" endtime="20250205 13:18:19.113"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.113" endtime="20250205 13:18:19.113"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].username</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.113" endtime="20250205 13:18:19.113"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.114" endtime="20250205 13:18:19.114"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].firstName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.114" endtime="20250205 13:18:19.114"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.114" endtime="20250205 13:18:19.115"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].lastName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.115" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].email</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].password</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].phone</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.116"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.116" endtime="20250205 13:18:19.119"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].userStatus</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.119" endtime="20250205 13:18:19.119"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.119" endtime="20250205 13:18:19.119"/>
</kw>
<status status="NOT RUN" starttime="20250205 13:18:19.112" endtime="20250205 13:18:19.120"/>
</branch>
<status status="PASS" starttime="20250205 13:18:19.112" endtime="20250205 13:18:19.120"/>
</if>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:19.121" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:19.121" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:19.121" endtime="20250205 13:18:19.121"/>
</kw>
<doc>Test Description:Create user [createWithArray] with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:18.100" endtime="20250205 13:18:19.122"/>
</test>
<test id="s1-s3-s1-t7" name="TC_POST_user_07" line="324">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:19.126" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:19.126" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_07' ]</msg>
<msg timestamp="20250205 13:18:19.126" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_07'),
             ('Type', 'Positive'),
             ('Description',
              'Create list of users [createWithArray] with valid JSON payloads'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])</msg>
<msg timestamp="20250205 13:18:19.126" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_07'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithArray] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('R...</msg>
<status status="PASS" starttime="20250205 13:18:19.126" endtime="20250205 13:18:19.126"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:19.132" level="TRACE">Arguments: [ 'Test Description:Create list of users [createWithArray] with valid JSON payloads \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:19.132" level="INFO">Set test documentation to:
Test Description:Create list of users [createWithArray] with valid JSON payloads 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:19.133" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:19.126" endtime="20250205 13:18:19.133"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:19.133" endtime="20250205 13:18:19.133"/>
</return>
<msg timestamp="20250205 13:18:19.133" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_07'),
             ('Type', 'Positive'),
             ('Description',
              'Create list of users [createWithArray] with valid JSON payloads'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])</msg>
<msg timestamp="20250205 13:18:19.134" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_07'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithArray] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('R...</msg>
<status status="PASS" starttime="20250205 13:18:19.125" endtime="20250205 13:18:19.134"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.136" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:19.137" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:19.137" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:19.134" endtime="20250205 13:18:19.137"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.139" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:19.140" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:19.140" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:19.137" endtime="20250205 13:18:19.140"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.141" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:19.142" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:19.142" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:19.140" endtime="20250205 13:18:19.142"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:19.144" level="TRACE">Arguments: [ '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]' ]</msg>
<msg timestamp="20250205 13:18:19.144" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<msg timestamp="20250205 13:18:19.146" level="INFO">${REQUEST_PAYLOAD} = [{'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}, {'id': 0, 'username': 'string', 'firstName':...</msg>
<status status="PASS" starttime="20250205 13:18:19.143" endtime="20250205 13:18:19.146"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:19.146" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:19.146" level="TRACE">Return: 1738750699</msg>
<msg timestamp="20250205 13:18:19.146" level="INFO">${SECS} = 1738750699</msg>
<status status="PASS" starttime="20250205 13:18:19.146" endtime="20250205 13:18:19.146"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER1${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.151" level="TRACE">Arguments: [ 'USER11738750699' ]</msg>
<msg timestamp="20250205 13:18:19.151" level="TRACE">Return: 'USER11738750699'</msg>
<msg timestamp="20250205 13:18:19.151" level="INFO">${USERNAME} = USER11738750699</msg>
<status status="PASS" starttime="20250205 13:18:19.146" endtime="20250205 13:18:19.152"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:19.154" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[0].username' | 'USER11738750699' ]</msg>
<msg timestamp="20250205 13:18:19.154" level="INFO">Update JSON with expression: '$[0].username'</msg>
<msg timestamp="20250205 13:18:19.191" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750699'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<status status="PASS" starttime="20250205 13:18:19.153" endtime="20250205 13:18:19.192"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER2${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.194" level="TRACE">Arguments: [ 'USER21738750699' ]</msg>
<msg timestamp="20250205 13:18:19.194" level="TRACE">Return: 'USER21738750699'</msg>
<msg timestamp="20250205 13:18:19.194" level="INFO">${USERNAME} = USER21738750699</msg>
<status status="PASS" starttime="20250205 13:18:19.193" endtime="20250205 13:18:19.194"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[1].username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:19.196" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750699'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[1].username' | 'USER21738750699' ]</msg>
<msg timestamp="20250205 13:18:19.196" level="INFO">Update JSON with expression: '$[1].username'</msg>
<msg timestamp="20250205 13:18:19.224" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750699'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER21738750699'}]</msg>
<status status="PASS" starttime="20250205 13:18:19.195" endtime="20250205 13:18:19.224"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:19.224" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:19.224" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:19.224" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:19.224" endtime="20250205 13:18:19.224"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:19.224" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:19.224" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:19.224" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:19.224" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:19.224" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:19.224" endtime="20250205 13:18:19.231"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:19.231" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:19.231" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.232" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.231" endtime="20250205 13:18:19.232"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:19.234" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:19.234" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:19.259" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.259" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.233" endtime="20250205 13:18:19.259"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:19.261" endtime="20250205 13:18:19.261"/>
</return>
<msg timestamp="20250205 13:18:19.261" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.261" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.224" endtime="20250205 13:18:19.261"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:19.263" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:19.264" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:19.264" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:19.265" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:19.265" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:19.263" endtime="20250205 13:18:19.265"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:19.265" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:19.265" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.265" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.265" endtime="20250205 13:18:19.265"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:19.265" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:19.265" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:19.293" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.293" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.265" endtime="20250205 13:18:19.293"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:19.293" endtime="20250205 13:18:19.293"/>
</return>
<msg timestamp="20250205 13:18:19.293" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.293" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.262" endtime="20250205 13:18:19.293"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/createWithArray</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:19.293" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/createWithArray' | body=[{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750699'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER21738750699'}] | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:19.293" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:19.883" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user/createWithArray HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:19.883" level="TRACE">Return: {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:19 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.583105,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:19.883" level="INFO">${RESPONSE} = {'seconds': 0.583105, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'ok'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:19 GMT', 'Content-Type': 'application/json',...</msg>
<status status="PASS" starttime="20250205 13:18:19.293" endtime="20250205 13:18:19.883"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:19.890" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:19 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.583105,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:19.890" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:19.917" level="TRACE">Return: {'code': 200, 'message': 'ok', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:19.917" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'ok'}</msg>
<status status="PASS" starttime="20250205 13:18:19.883" endtime="20250205 13:18:19.917"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:19.919" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:19 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.583105,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:19.919" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:19.944" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:19.945" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:19.918" endtime="20250205 13:18:19.945"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:19.947" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:19.947" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:19.947" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:19.946" endtime="20250205 13:18:19.947"/>
</kw>
<kw name="Convert JSON to String" library="RPA.JSON">
<var>${STR}</var>
<arg>${RESPONSE_PAYLOAD}</arg>
<doc>Convert a JSON serializable object to a string and return it.</doc>
<msg timestamp="20250205 13:18:19.949" level="TRACE">Arguments: [ {'code': 200, 'message': 'ok', 'type': 'unknown'} ]</msg>
<msg timestamp="20250205 13:18:19.949" level="TRACE">Return: '{"code": 200, "type": "unknown", "message": "ok"}'</msg>
<msg timestamp="20250205 13:18:19.949" level="INFO">${STR} = {"code": 200, "type": "unknown", "message": "ok"}</msg>
<status status="PASS" starttime="20250205 13:18:19.948" endtime="20250205 13:18:19.949"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Start With</arg>
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:19.949" level="TRACE">Arguments: [ 'Should Start With' | '${STR}' | '[' | '\\nWARNING: Response body is not an array' ]</msg>
<kw name="Should Start With" library="BuiltIn">
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
<msg timestamp="20250205 13:18:19.951" level="TRACE">Arguments: [ '{"code": 200, "type": "unknown", "message": "ok"}' | '[' | '\nWARNING: Response body is not an array' ]</msg>
<msg timestamp="20250205 13:18:19.951" level="FAIL">
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:19.951" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<status status="FAIL" starttime="20250205 13:18:19.949" endtime="20250205 13:18:19.951"/>
</kw>
<msg timestamp="20250205 13:18:19.952" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:19.953" level="TRACE">Return: ('FAIL',
 '\nWARNING: Response body is not an array: \'{"code": 200, "type": "unknown", "message": "ok"}\' does not start with \'[\'')</msg>
<status status="PASS" starttime="20250205 13:18:19.949" endtime="20250205 13:18:19.953"/>
</kw>
<kw name="Get Substring" library="String">
<var>${FIRSTCHAR}</var>
<arg>${STR}[0]</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:19.955" level="TRACE">Arguments: [ '{' | '0' | '1' ]</msg>
<msg timestamp="20250205 13:18:19.955" level="TRACE">Return: '{'</msg>
<msg timestamp="20250205 13:18:19.955" level="INFO">${FIRSTCHAR} = {</msg>
<status status="PASS" starttime="20250205 13:18:19.955" endtime="20250205 13:18:19.955"/>
</kw>
<if>
<branch type="IF" condition="&quot;${FIRSTCHAR}&quot; == &quot;[&quot;">
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.958" endtime="20250205 13:18:19.959"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.959" endtime="20250205 13:18:19.959"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[1].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.959" endtime="20250205 13:18:19.959"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:19.959" endtime="20250205 13:18:19.959"/>
</kw>
<status status="NOT RUN" starttime="20250205 13:18:19.958" endtime="20250205 13:18:19.959"/>
</branch>
<status status="PASS" starttime="20250205 13:18:19.958" endtime="20250205 13:18:19.960"/>
</if>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:19.961" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:19.961" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:19.960" endtime="20250205 13:18:19.961"/>
</kw>
<doc>Test Description:Create list of users [createWithArray] with valid JSON payloads 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:19.124" endtime="20250205 13:18:19.962"/>
</test>
<test id="s1-s3-s1-t8" name="TC_POST_user_08" line="372">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:19.965" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:19.965" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_08' ]</msg>
<msg timestamp="20250205 13:18:19.965" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_08'),
             ('Type', 'Negative'),
             ('Description', 'Create user [createWithArray]  with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:19.965" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_08'), ('Type', 'Negative'), ('Description', 'Create user [createWithArray]  with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', ...</msg>
<status status="PASS" starttime="20250205 13:18:19.965" endtime="20250205 13:18:19.965"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:19.972" level="TRACE">Arguments: [ 'Test Description:Create user [createWithArray]  with no payload \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:19.972" level="INFO">Set test documentation to:
Test Description:Create user [createWithArray]  with no payload 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:19.972" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:19.970" endtime="20250205 13:18:19.972"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:19.972" endtime="20250205 13:18:19.973"/>
</return>
<msg timestamp="20250205 13:18:19.973" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_08'),
             ('Type', 'Negative'),
             ('Description', 'Create user [createWithArray]  with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:19.973" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_08'), ('Type', 'Negative'), ('Description', 'Create user [createWithArray]  with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', ...</msg>
<status status="PASS" starttime="20250205 13:18:19.965" endtime="20250205 13:18:19.973"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.976" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:19.976" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:19.976" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:19.974" endtime="20250205 13:18:19.976"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.976" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:19.976" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:19.976" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:19.976" endtime="20250205 13:18:19.976"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:19.976" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:19.976" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:19.976" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:19.976" endtime="20250205 13:18:19.976"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:19.982" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:19.982" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:19.982" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:19.981" endtime="20250205 13:18:19.982"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:19.985" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:19.985" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:19.985" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:19.985" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:19.986" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:19.985" endtime="20250205 13:18:19.986"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:19.986" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:19.986" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:19.987" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.986" endtime="20250205 13:18:19.987"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:19.987" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:19.987" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:20.013" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:20.013" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.987" endtime="20250205 13:18:20.013"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:20.013" endtime="20250205 13:18:20.013"/>
</return>
<msg timestamp="20250205 13:18:20.013" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:20.013" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:19.983" endtime="20250205 13:18:20.013"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:20.013" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:20.021" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:20.021" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:20.021" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:20.021" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:20.013" endtime="20250205 13:18:20.021"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:20.022" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:20.022" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:20.023" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:20.021" endtime="20250205 13:18:20.023"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:20.023" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:20.024" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:20.056" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:20.056" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:20.023" endtime="20250205 13:18:20.056"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:20.056" endtime="20250205 13:18:20.056"/>
</return>
<msg timestamp="20250205 13:18:20.061" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:20.061" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:20.013" endtime="20250205 13:18:20.061"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/createWithArray</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:20.063" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/createWithArray' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:20.066" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:20.653" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user/createWithArray HTTP/1.1" 405 None</msg>
<msg timestamp="20250205 13:18:20.653" level="TRACE">Return: {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:20 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5910019999999999,
 'status': 405}</msg>
<msg timestamp="20250205 13:18:20.653" level="INFO">${RESPONSE} = {'seconds': 0.5910019999999999, 'status': 405, 'reason': 'Method Not Allowed', 'body': {'code': 405, 'type': 'unknown', 'message': 'no data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:20 GMT', 'Con...</msg>
<status status="PASS" starttime="20250205 13:18:20.062" endtime="20250205 13:18:20.653"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:20.653" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:20 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5910019999999999,
 'status': 405} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:20.661" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:20.687" level="TRACE">Return: {'code': 405, 'message': 'no data', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:20.688" level="INFO">${RESPONSE_PAYLOAD} = {'code': 405, 'type': 'unknown', 'message': 'no data'}</msg>
<status status="PASS" starttime="20250205 13:18:20.653" endtime="20250205 13:18:20.688"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:20.690" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:20 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5910019999999999,
 'status': 405} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:20.690" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:20.716" level="TRACE">Return: 405</msg>
<msg timestamp="20250205 13:18:20.716" level="INFO">${RESPONSE_STATUS} = 405</msg>
<status status="PASS" starttime="20250205 13:18:20.689" endtime="20250205 13:18:20.716"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:20.718" level="TRACE">Arguments: [ '"405"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:20.718" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:20.718" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:20.717" endtime="20250205 13:18:20.718"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:20.721" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:20.721" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:20.718" endtime="20250205 13:18:20.721"/>
</kw>
<doc>Test Description:Create user [createWithArray]  with no payload 

 Expected Result:405 

</doc>
<status status="PASS" starttime="20250205 13:18:19.964" endtime="20250205 13:18:20.722"/>
</test>
<test id="s1-s3-s1-t9" name="TC_POST_user_09" line="392">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:20.725" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:20.727" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_09' ]</msg>
<msg timestamp="20250205 13:18:20.729" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_09'),
             ('Type', 'Positive'),
             ('Description',
              'Create user [createWithList] with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])</msg>
<msg timestamp="20250205 13:18:20.729" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_09'), ('Type', 'Positive'), ('Description', 'Create user [createWithList] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payl...</msg>
<status status="PASS" starttime="20250205 13:18:20.725" endtime="20250205 13:18:20.730"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:20.731" level="TRACE">Arguments: [ 'Test Description:Create user [createWithList] with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:20.732" level="INFO">Set test documentation to:
Test Description:Create user [createWithList] with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:20.732" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:20.730" endtime="20250205 13:18:20.732"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:20.732" endtime="20250205 13:18:20.732"/>
</return>
<msg timestamp="20250205 13:18:20.733" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_09'),
             ('Type', 'Positive'),
             ('Description',
              'Create user [createWithList] with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])</msg>
<msg timestamp="20250205 13:18:20.733" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_09'), ('Type', 'Positive'), ('Description', 'Create user [createWithList] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payl...</msg>
<status status="PASS" starttime="20250205 13:18:20.725" endtime="20250205 13:18:20.733"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.735" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:20.735" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:20.735" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:20.734" endtime="20250205 13:18:20.736"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.736" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:20.736" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:20.736" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:20.736" endtime="20250205 13:18:20.736"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.736" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:20.741" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:20.741" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:20.736" endtime="20250205 13:18:20.741"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:20.743" level="TRACE">Arguments: [ '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]' ]</msg>
<msg timestamp="20250205 13:18:20.744" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<msg timestamp="20250205 13:18:20.744" level="INFO">${REQUEST_PAYLOAD} = [{'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}]</msg>
<status status="PASS" starttime="20250205 13:18:20.742" endtime="20250205 13:18:20.744"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:20.746" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:20.746" level="TRACE">Return: 1738750700</msg>
<msg timestamp="20250205 13:18:20.746" level="INFO">${SECS} = 1738750700</msg>
<status status="PASS" starttime="20250205 13:18:20.746" endtime="20250205 13:18:20.746"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.748" level="TRACE">Arguments: [ 1738750700 ]</msg>
<msg timestamp="20250205 13:18:20.748" level="TRACE">Return: 1738750700</msg>
<msg timestamp="20250205 13:18:20.748" level="INFO">${ID} = 1738750700</msg>
<status status="PASS" starttime="20250205 13:18:20.747" endtime="20250205 13:18:20.748"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.750" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[0].id' | 1738750700 ]</msg>
<msg timestamp="20250205 13:18:20.750" level="INFO">Update JSON with expression: '$[0].id'</msg>
<msg timestamp="20250205 13:18:20.775" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 1738750700,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.749" endtime="20250205 13:18:20.775"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.775" level="TRACE">Arguments: [ 'USER1738750700' ]</msg>
<msg timestamp="20250205 13:18:20.775" level="TRACE">Return: 'USER1738750700'</msg>
<msg timestamp="20250205 13:18:20.775" level="INFO">${USERNAME} = USER1738750700</msg>
<status status="PASS" starttime="20250205 13:18:20.775" endtime="20250205 13:18:20.775"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.781" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 1738750700,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[0].username' | 'USER1738750700' ]</msg>
<msg timestamp="20250205 13:18:20.781" level="INFO">Update JSON with expression: '$[0].username'</msg>
<msg timestamp="20250205 13:18:20.805" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 1738750700,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.775" endtime="20250205 13:18:20.805"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${FIRSTNAME}</var>
<arg>FIRSTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.805" level="TRACE">Arguments: [ 'FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:20.805" level="TRACE">Return: 'FIRSTNAME'</msg>
<msg timestamp="20250205 13:18:20.805" level="INFO">${FIRSTNAME} = FIRSTNAME</msg>
<status status="PASS" starttime="20250205 13:18:20.805" endtime="20250205 13:18:20.805"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].firstName</arg>
<arg>${FIRSTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.805" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 1738750700,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}] | '$[0].firstName' | 'FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:20.805" level="INFO">Update JSON with expression: '$[0].firstName'</msg>
<msg timestamp="20250205 13:18:20.842" level="TRACE">Return: [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.805" endtime="20250205 13:18:20.843"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${LASTNAME}</var>
<arg>LASTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.845" level="TRACE">Arguments: [ 'LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:20.845" level="TRACE">Return: 'LASTNAME'</msg>
<msg timestamp="20250205 13:18:20.845" level="INFO">${LASTNAME} = LASTNAME</msg>
<status status="PASS" starttime="20250205 13:18:20.845" endtime="20250205 13:18:20.845"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].lastName</arg>
<arg>${LASTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.845" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}] | '$[0].lastName' | 'LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:20.845" level="INFO">Update JSON with expression: '$[0].lastName'</msg>
<msg timestamp="20250205 13:18:20.875" level="TRACE">Return: [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.845" endtime="20250205 13:18:20.875"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${EMAIL}</var>
<arg>abc@def.com</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.875" level="TRACE">Arguments: [ 'abc@def.com' ]</msg>
<msg timestamp="20250205 13:18:20.875" level="TRACE">Return: 'abc@def.com'</msg>
<msg timestamp="20250205 13:18:20.875" level="INFO">${EMAIL} = abc@def.com</msg>
<status status="PASS" starttime="20250205 13:18:20.875" endtime="20250205 13:18:20.875"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].email</arg>
<arg>${EMAIL}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.875" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}] | '$[0].email' | 'abc@def.com' ]</msg>
<msg timestamp="20250205 13:18:20.875" level="INFO">Update JSON with expression: '$[0].email'</msg>
<msg timestamp="20250205 13:18:20.905" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.875" endtime="20250205 13:18:20.905"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PASSWORD}</var>
<arg>PASS${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.907" level="TRACE">Arguments: [ 'PASS1738750700' ]</msg>
<msg timestamp="20250205 13:18:20.907" level="TRACE">Return: 'PASS1738750700'</msg>
<msg timestamp="20250205 13:18:20.907" level="INFO">${PASSWORD} = PASS1738750700</msg>
<status status="PASS" starttime="20250205 13:18:20.906" endtime="20250205 13:18:20.908"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].password</arg>
<arg>${PASSWORD}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.909" level="TRACE">Arguments: [ [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}] | '$[0].password' | 'PASS1738750700' ]</msg>
<msg timestamp="20250205 13:18:20.909" level="INFO">Update JSON with expression: '$[0].password'</msg>
<msg timestamp="20250205 13:18:20.934" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750700',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.908" endtime="20250205 13:18:20.934"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHONE}</var>
<arg>0123456789</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:20.934" level="TRACE">Arguments: [ '0123456789' ]</msg>
<msg timestamp="20250205 13:18:20.934" level="TRACE">Return: '0123456789'</msg>
<msg timestamp="20250205 13:18:20.934" level="INFO">${PHONE} = 0123456789</msg>
<status status="PASS" starttime="20250205 13:18:20.934" endtime="20250205 13:18:20.934"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].phone</arg>
<arg>${PHONE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:20.934" level="TRACE">Arguments: [ [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750700',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER1738750700'}] | '$[0].phone' | '0123456789' ]</msg>
<msg timestamp="20250205 13:18:20.934" level="INFO">Update JSON with expression: '$[0].phone'</msg>
<msg timestamp="20250205 13:18:20.999" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750700',
  'phone': '0123456789',
  'userStatus': 0,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:20.934" endtime="20250205 13:18:20.999"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${USERSTATUS}</var>
<arg>1</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:21.000" level="TRACE">Arguments: [ '1' ]</msg>
<msg timestamp="20250205 13:18:21.001" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:21.001" level="TRACE">Return: 1</msg>
<msg timestamp="20250205 13:18:21.001" level="INFO">${USERSTATUS} = 1</msg>
<status status="PASS" starttime="20250205 13:18:21.000" endtime="20250205 13:18:21.001"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].userStatus</arg>
<arg>${USERSTATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:21.002" level="TRACE">Arguments: [ [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750700',
  'phone': '0123456789',
  'userStatus': 0,
  'username': 'USER1738750700'}] | '$[0].userStatus' | 1 ]</msg>
<msg timestamp="20250205 13:18:21.003" level="INFO">Update JSON with expression: '$[0].userStatus'</msg>
<msg timestamp="20250205 13:18:21.027" level="TRACE">Return: [{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750700',
  'phone': '0123456789',
  'userStatus': 1,
  'username': 'USER1738750700'}]</msg>
<status status="PASS" starttime="20250205 13:18:21.002" endtime="20250205 13:18:21.027"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:21.029" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:21.029" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:21.029" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:21.029" endtime="20250205 13:18:21.029"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:21.031" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:21.032" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:21.032" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:21.032" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:21.032" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:21.031" endtime="20250205 13:18:21.032"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:21.033" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:21.033" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.033" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.033" endtime="20250205 13:18:21.033"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:21.034" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:21.034" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:21.059" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.059" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.033" endtime="20250205 13:18:21.059"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:21.059" endtime="20250205 13:18:21.059"/>
</return>
<msg timestamp="20250205 13:18:21.059" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.062" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.030" endtime="20250205 13:18:21.062"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:21.063" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:21.065" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:21.065" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:21.065" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:21.065" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:21.064" endtime="20250205 13:18:21.065"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:21.065" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:21.065" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.065" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.065" endtime="20250205 13:18:21.065"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:21.065" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:21.065" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:21.093" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.093" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.065" endtime="20250205 13:18:21.093"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:21.093" endtime="20250205 13:18:21.093"/>
</return>
<msg timestamp="20250205 13:18:21.093" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.093" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.062" endtime="20250205 13:18:21.093"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/createWithList</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:21.104" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/createWithList' | body=[{'email': 'abc@def.com',
  'firstName': 'FIRSTNAME',
  'id': 1738750700,
  'lastName': 'LASTNAME',
  'password': 'PASS1738750700',
  'phone': '0123456789',
  'userStatus': 1,
  'username': 'USER1738750700'}] | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:21.104" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:21.693" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user/createWithList HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:21.693" level="TRACE">Return: {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:21 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588406,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:21.693" level="INFO">${RESPONSE} = {'seconds': 0.588406, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'ok'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:21 GMT', 'Content-Type': 'application/json',...</msg>
<status status="PASS" starttime="20250205 13:18:21.104" endtime="20250205 13:18:21.693"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:21.702" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:21 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588406,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:21.702" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:21.728" level="TRACE">Return: {'code': 200, 'message': 'ok', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:21.728" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'ok'}</msg>
<status status="PASS" starttime="20250205 13:18:21.693" endtime="20250205 13:18:21.728"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:21.730" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:21 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.588406,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:21.731" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:21.756" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:21.757" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:21.729" endtime="20250205 13:18:21.757"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:21.758" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:21.758" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:21.758" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:21.757" endtime="20250205 13:18:21.758"/>
</kw>
<kw name="Convert JSON to String" library="RPA.JSON">
<var>${STR}</var>
<arg>${RESPONSE_PAYLOAD}</arg>
<doc>Convert a JSON serializable object to a string and return it.</doc>
<msg timestamp="20250205 13:18:21.761" level="TRACE">Arguments: [ {'code': 200, 'message': 'ok', 'type': 'unknown'} ]</msg>
<msg timestamp="20250205 13:18:21.761" level="TRACE">Return: '{"code": 200, "type": "unknown", "message": "ok"}'</msg>
<msg timestamp="20250205 13:18:21.761" level="INFO">${STR} = {"code": 200, "type": "unknown", "message": "ok"}</msg>
<status status="PASS" starttime="20250205 13:18:21.760" endtime="20250205 13:18:21.761"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Start With</arg>
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:21.762" level="TRACE">Arguments: [ 'Should Start With' | '${STR}' | '[' | '\\nWARNING: Response body is not an array' ]</msg>
<kw name="Should Start With" library="BuiltIn">
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
<msg timestamp="20250205 13:18:21.764" level="TRACE">Arguments: [ '{"code": 200, "type": "unknown", "message": "ok"}' | '[' | '\nWARNING: Response body is not an array' ]</msg>
<msg timestamp="20250205 13:18:21.764" level="FAIL">
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:21.764" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<status status="FAIL" starttime="20250205 13:18:21.763" endtime="20250205 13:18:21.765"/>
</kw>
<msg timestamp="20250205 13:18:21.765" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:21.766" level="TRACE">Return: ('FAIL',
 '\nWARNING: Response body is not an array: \'{"code": 200, "type": "unknown", "message": "ok"}\' does not start with \'[\'')</msg>
<status status="PASS" starttime="20250205 13:18:21.762" endtime="20250205 13:18:21.767"/>
</kw>
<kw name="Get Substring" library="String">
<var>${FIRSTCHAR}</var>
<arg>${STR}[0]</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:21.767" level="TRACE">Arguments: [ '{' | '0' | '1' ]</msg>
<msg timestamp="20250205 13:18:21.767" level="TRACE">Return: '{'</msg>
<msg timestamp="20250205 13:18:21.767" level="INFO">${FIRSTCHAR} = {</msg>
<status status="PASS" starttime="20250205 13:18:21.767" endtime="20250205 13:18:21.767"/>
</kw>
<if>
<branch type="IF" condition="&quot;${FIRSTCHAR}&quot; == &quot;[&quot;">
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.770" endtime="20250205 13:18:21.770"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.770" endtime="20250205 13:18:21.770"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].username</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.770" endtime="20250205 13:18:21.771"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.771" endtime="20250205 13:18:21.771"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].firstName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.771" endtime="20250205 13:18:21.771"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.772" endtime="20250205 13:18:21.772"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].lastName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.772" endtime="20250205 13:18:21.772"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.772" endtime="20250205 13:18:21.773"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].email</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.773" endtime="20250205 13:18:21.773"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.774" endtime="20250205 13:18:21.774"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].password</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.774" endtime="20250205 13:18:21.774"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.776" endtime="20250205 13:18:21.776"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].phone</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.776" endtime="20250205 13:18:21.776"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.776" endtime="20250205 13:18:21.777"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].userStatus</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.777" endtime="20250205 13:18:21.777"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:21.777" endtime="20250205 13:18:21.777"/>
</kw>
<status status="NOT RUN" starttime="20250205 13:18:21.770" endtime="20250205 13:18:21.777"/>
</branch>
<status status="PASS" starttime="20250205 13:18:21.767" endtime="20250205 13:18:21.778"/>
</if>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:21.779" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:21.779" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:21.778" endtime="20250205 13:18:21.779"/>
</kw>
<doc>Test Description:Create user [createWithList] with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:20.724" endtime="20250205 13:18:21.779"/>
</test>
<test id="s1-s3-s1-t10" name="TC_POST_user_10" line="488">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:21.782" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:21.783" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_10' ]</msg>
<msg timestamp="20250205 13:18:21.786" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_10'),
             ('Type', 'Positive'),
             ('Description',
              'Create list of users [createWithList] with valid JSON payloads'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])</msg>
<msg timestamp="20250205 13:18:21.786" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_10'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithList] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Re...</msg>
<status status="PASS" starttime="20250205 13:18:21.783" endtime="20250205 13:18:21.786"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:21.789" level="TRACE">Arguments: [ 'Test Description:Create list of users [createWithList] with valid JSON payloads \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:21.789" level="INFO">Set test documentation to:
Test Description:Create list of users [createWithList] with valid JSON payloads 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:21.789" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:21.786" endtime="20250205 13:18:21.789"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:21.790" endtime="20250205 13:18:21.790"/>
</return>
<msg timestamp="20250205 13:18:21.790" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_10'),
             ('Type', 'Positive'),
             ('Description',
              'Create list of users [createWithList] with valid JSON payloads'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])</msg>
<msg timestamp="20250205 13:18:21.790" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_10'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithList] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Re...</msg>
<status status="PASS" starttime="20250205 13:18:21.782" endtime="20250205 13:18:21.790"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:21.793" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:21.793" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:21.793" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:21.791" endtime="20250205 13:18:21.794"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:21.795" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:21.796" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:21.796" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:21.794" endtime="20250205 13:18:21.796"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:21.799" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:21.799" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:21.799" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:21.798" endtime="20250205 13:18:21.799"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:21.801" level="TRACE">Arguments: [ '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]' ]</msg>
<msg timestamp="20250205 13:18:21.801" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<msg timestamp="20250205 13:18:21.801" level="INFO">${REQUEST_PAYLOAD} = [{'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}, {'id': 0, 'username': 'string', 'firstName':...</msg>
<status status="PASS" starttime="20250205 13:18:21.799" endtime="20250205 13:18:21.801"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:21.802" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:21.803" level="TRACE">Return: 1738750701</msg>
<msg timestamp="20250205 13:18:21.803" level="INFO">${SECS} = 1738750701</msg>
<status status="PASS" starttime="20250205 13:18:21.802" endtime="20250205 13:18:21.803"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER1${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:21.804" level="TRACE">Arguments: [ 'USER11738750701' ]</msg>
<msg timestamp="20250205 13:18:21.804" level="TRACE">Return: 'USER11738750701'</msg>
<msg timestamp="20250205 13:18:21.804" level="INFO">${USERNAME} = USER11738750701</msg>
<status status="PASS" starttime="20250205 13:18:21.804" endtime="20250205 13:18:21.804"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[0].username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:21.805" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[0].username' | 'USER11738750701' ]</msg>
<msg timestamp="20250205 13:18:21.807" level="INFO">Update JSON with expression: '$[0].username'</msg>
<msg timestamp="20250205 13:18:21.833" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750701'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}]</msg>
<status status="PASS" starttime="20250205 13:18:21.805" endtime="20250205 13:18:21.833"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>USER2${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:21.842" level="TRACE">Arguments: [ 'USER21738750701' ]</msg>
<msg timestamp="20250205 13:18:21.843" level="TRACE">Return: 'USER21738750701'</msg>
<msg timestamp="20250205 13:18:21.843" level="INFO">${USERNAME} = USER21738750701</msg>
<status status="PASS" starttime="20250205 13:18:21.842" endtime="20250205 13:18:21.843"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$[1].username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:21.843" level="TRACE">Arguments: [ [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750701'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'string'}] | '$[1].username' | 'USER21738750701' ]</msg>
<msg timestamp="20250205 13:18:21.844" level="INFO">Update JSON with expression: '$[1].username'</msg>
<msg timestamp="20250205 13:18:21.876" level="TRACE">Return: [{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750701'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER21738750701'}]</msg>
<status status="PASS" starttime="20250205 13:18:21.843" endtime="20250205 13:18:21.876"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:21.878" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:21.879" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:21.879" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:21.878" endtime="20250205 13:18:21.879"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:21.879" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:21.879" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:21.879" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:21.879" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:21.881" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:21.879" endtime="20250205 13:18:21.881"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:21.881" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:21.882" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.882" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.881" endtime="20250205 13:18:21.882"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:21.883" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:21.883" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:21.909" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.911" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.882" endtime="20250205 13:18:21.911"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:21.911" endtime="20250205 13:18:21.911"/>
</return>
<msg timestamp="20250205 13:18:21.912" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.912" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.879" endtime="20250205 13:18:21.912"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:21.913" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:21.915" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:21.915" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:21.915" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:21.915" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:21.915" endtime="20250205 13:18:21.915"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:21.915" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:21.915" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.915" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.915" endtime="20250205 13:18:21.915"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:21.915" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:21.915" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:21.943" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.943" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.915" endtime="20250205 13:18:21.943"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:21.943" endtime="20250205 13:18:21.943"/>
</return>
<msg timestamp="20250205 13:18:21.943" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:21.943" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:21.913" endtime="20250205 13:18:21.943"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/createWithList</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:21.952" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/createWithList' | body=[{'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER11738750701'},
 {'email': 'string',
  'firstName': 'string',
  'id': 0,
  'lastName': 'string',
  'password': 'string',
  'phone': 'string',
  'userStatus': 0,
  'username': 'USER21738750701'}] | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:21.957" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:22.518" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user/createWithList HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:22.522" level="TRACE">Return: {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:22 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5654349999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:22.522" level="INFO">${RESPONSE} = {'seconds': 0.5654349999999999, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'ok'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:22 GMT', 'Content-Type': 'applicat...</msg>
<status status="PASS" starttime="20250205 13:18:21.943" endtime="20250205 13:18:22.522"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:22.526" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:22 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5654349999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:22.526" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:22.552" level="TRACE">Return: {'code': 200, 'message': 'ok', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:22.552" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'ok'}</msg>
<status status="PASS" starttime="20250205 13:18:22.526" endtime="20250205 13:18:22.552"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:22.554" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:22 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5654349999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:22.554" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:22.580" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:22.581" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:22.554" endtime="20250205 13:18:22.581"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:22.583" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:22.583" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:22.583" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:22.581" endtime="20250205 13:18:22.583"/>
</kw>
<kw name="Convert JSON to String" library="RPA.JSON">
<var>${STR}</var>
<arg>${RESPONSE_PAYLOAD}</arg>
<doc>Convert a JSON serializable object to a string and return it.</doc>
<msg timestamp="20250205 13:18:22.583" level="TRACE">Arguments: [ {'code': 200, 'message': 'ok', 'type': 'unknown'} ]</msg>
<msg timestamp="20250205 13:18:22.583" level="TRACE">Return: '{"code": 200, "type": "unknown", "message": "ok"}'</msg>
<msg timestamp="20250205 13:18:22.583" level="INFO">${STR} = {"code": 200, "type": "unknown", "message": "ok"}</msg>
<status status="PASS" starttime="20250205 13:18:22.583" endtime="20250205 13:18:22.583"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Start With</arg>
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:22.583" level="TRACE">Arguments: [ 'Should Start With' | '${STR}' | '[' | '\\nWARNING: Response body is not an array' ]</msg>
<kw name="Should Start With" library="BuiltIn">
<arg>${STR}</arg>
<arg>[</arg>
<arg>\nWARNING: Response body is not an array</arg>
<doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
<msg timestamp="20250205 13:18:22.583" level="TRACE">Arguments: [ '{"code": 200, "type": "unknown", "message": "ok"}' | '[' | '\nWARNING: Response body is not an array' ]</msg>
<msg timestamp="20250205 13:18:22.589" level="FAIL">
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:22.589" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<status status="FAIL" starttime="20250205 13:18:22.583" endtime="20250205 13:18:22.589"/>
</kw>
<msg timestamp="20250205 13:18:22.589" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:22.589" level="TRACE">Return: ('FAIL',
 '\nWARNING: Response body is not an array: \'{"code": 200, "type": "unknown", "message": "ok"}\' does not start with \'[\'')</msg>
<status status="PASS" starttime="20250205 13:18:22.583" endtime="20250205 13:18:22.591"/>
</kw>
<kw name="Get Substring" library="String">
<var>${FIRSTCHAR}</var>
<arg>${STR}[0]</arg>
<arg>0</arg>
<arg>1</arg>
<doc>Returns a substring from ``start`` index to ``end`` index.</doc>
<msg timestamp="20250205 13:18:22.592" level="TRACE">Arguments: [ '{' | '0' | '1' ]</msg>
<msg timestamp="20250205 13:18:22.592" level="TRACE">Return: '{'</msg>
<msg timestamp="20250205 13:18:22.594" level="INFO">${FIRSTCHAR} = {</msg>
<status status="PASS" starttime="20250205 13:18:22.592" endtime="20250205 13:18:22.595"/>
</kw>
<if>
<branch type="IF" condition="&quot;${FIRSTCHAR}&quot; == &quot;[&quot;">
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[0].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:22.596" endtime="20250205 13:18:22.596"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:22.597" endtime="20250205 13:18:22.597"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${ID}</var>
<arg>${RESPONSE}</arg>
<arg>$.body[1].id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<status status="NOT RUN" starttime="20250205 13:18:22.597" endtime="20250205 13:18:22.597"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Not Be Equal As Strings</arg>
<arg>"${None}"</arg>
<arg>"${ID}"</arg>
<arg>\nERROR: ID is missing in response payload</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<status status="NOT RUN" starttime="20250205 13:18:22.597" endtime="20250205 13:18:22.597"/>
</kw>
<status status="NOT RUN" starttime="20250205 13:18:22.595" endtime="20250205 13:18:22.597"/>
</branch>
<status status="PASS" starttime="20250205 13:18:22.595" endtime="20250205 13:18:22.597"/>
</if>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:22.599" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:22.599" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:22.599" endtime="20250205 13:18:22.599"/>
</kw>
<doc>Test Description:Create list of users [createWithList] with valid JSON payloads 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:21.781" endtime="20250205 13:18:22.599"/>
</test>
<test id="s1-s3-s1-t11" name="TC_POST_user_11" line="536">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:22.603" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:22.604" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_POST_user_11' ]</msg>
<msg timestamp="20250205 13:18:22.605" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_11'),
             ('Type', 'Negative'),
             ('Description', 'Create user [createWithList] with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:22.605" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_11'), ('Type', 'Negative'), ('Description', 'Create user [createWithList] with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', ''...</msg>
<status status="PASS" starttime="20250205 13:18:22.603" endtime="20250205 13:18:22.605"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:22.610" level="TRACE">Arguments: [ 'Test Description:Create user [createWithList] with no payload \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:22.610" level="INFO">Set test documentation to:
Test Description:Create user [createWithList] with no payload 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:22.610" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:22.605" endtime="20250205 13:18:22.610"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:22.610" endtime="20250205 13:18:22.611"/>
</return>
<msg timestamp="20250205 13:18:22.611" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_POST_user_11'),
             ('Type', 'Negative'),
             ('Description', 'Create user [createWithList] with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:22.611" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_POST_user_11'), ('Type', 'Negative'), ('Description', 'Create user [createWithList] with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', ''...</msg>
<status status="PASS" starttime="20250205 13:18:22.603" endtime="20250205 13:18:22.611"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:22.613" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:22.613" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:22.613" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:22.612" endtime="20250205 13:18:22.614"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:22.616" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:22.616" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:22.616" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:22.615" endtime="20250205 13:18:22.616"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:22.616" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:22.616" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:22.616" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:22.616" endtime="20250205 13:18:22.616"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:22.616" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:22.616" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:22.621" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:22.616" endtime="20250205 13:18:22.621"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:22.623" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:22.624" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:22.624" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:22.624" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:22.624" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:22.624" endtime="20250205 13:18:22.624"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:22.624" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:22.624" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:22.626" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:22.624" endtime="20250205 13:18:22.626"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:22.626" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:22.627" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:22.662" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:22.663" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:22.626" endtime="20250205 13:18:22.663"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:22.663" endtime="20250205 13:18:22.663"/>
</return>
<msg timestamp="20250205 13:18:22.664" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:22.664" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:22.622" endtime="20250205 13:18:22.664"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:22.666" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:22.667" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:22.667" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:22.667" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:22.667" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:22.666" endtime="20250205 13:18:22.667"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:22.668" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:22.668" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:22.669" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:22.668" endtime="20250205 13:18:22.669"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:22.670" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:22.670" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:22.683" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:22.683" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:22.669" endtime="20250205 13:18:22.683"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:22.699" endtime="20250205 13:18:22.699"/>
</return>
<msg timestamp="20250205 13:18:22.699" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:22.699" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:22.665" endtime="20250205 13:18:22.699"/>
</kw>
<kw name="POST" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/createWithList</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a POST request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:22.702" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/createWithList' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:22.704" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:23.263" level="DEBUG">https://petstore.swagger.io:443 "POST /v2/user/createWithList HTTP/1.1" 405 None</msg>
<msg timestamp="20250205 13:18:23.272" level="TRACE">Return: {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:23 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5662,
 'status': 405}</msg>
<msg timestamp="20250205 13:18:23.272" level="INFO">${RESPONSE} = {'seconds': 0.5662, 'status': 405, 'reason': 'Method Not Allowed', 'body': {'code': 405, 'type': 'unknown', 'message': 'no data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:23 GMT', 'Content-Type': ...</msg>
<status status="PASS" starttime="20250205 13:18:22.701" endtime="20250205 13:18:23.272"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:23.272" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:23 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5662,
 'status': 405} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:23.272" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:23.302" level="TRACE">Return: {'code': 405, 'message': 'no data', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:23.303" level="INFO">${RESPONSE_PAYLOAD} = {'code': 405, 'type': 'unknown', 'message': 'no data'}</msg>
<status status="PASS" starttime="20250205 13:18:23.272" endtime="20250205 13:18:23.303"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:23.305" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:23 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.5662,
 'status': 405} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:23.306" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:23.324" level="TRACE">Return: 405</msg>
<msg timestamp="20250205 13:18:23.324" level="INFO">${RESPONSE_STATUS} = 405</msg>
<status status="PASS" starttime="20250205 13:18:23.304" endtime="20250205 13:18:23.324"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:23.334" level="TRACE">Arguments: [ '"405"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:23.334" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:23.334" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.332" endtime="20250205 13:18:23.334"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:23.334" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:23.334" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.334" endtime="20250205 13:18:23.334"/>
</kw>
<doc>Test Description:Create user [createWithList] with no payload 

 Expected Result:405 

</doc>
<status status="PASS" starttime="20250205 13:18:22.602" endtime="20250205 13:18:23.334"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:23.340" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:23.340" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:23.340" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.340" endtime="20250205 13:18:23.341"/>
</kw>
<msg timestamp="20250205 13:18:23.341" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.334" endtime="20250205 13:18:23.341"/>
</kw>
<status status="PASS" starttime="20250205 13:18:13.552" endtime="20250205 13:18:23.341"/>
</suite>
<suite id="s1-s3-s2" name="02 PUT user" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\user\02_PUT_user.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:23.353" level="TRACE">Arguments: [ ${CSVFILE}='user.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:23.354" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:23.354" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:23.354" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:23.353" endtime="20250205 13:18:23.354"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:23.355" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'user.csv' ]</msg>
<msg timestamp="20250205 13:18:23.356" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_02'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_03'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_04'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_05'), ('Type', 'Negative'), ('Description', 'Create user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_06'), ('Type', 'Positive'), ('Description', 'Create user [createWithArray] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_07'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithArray] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_08'), ('Type', 'Negative'), ('Description', 'Create user [createWithArray]  with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_09'), ('Type', 'Positive'), ('Description', 'Create user [createWithList] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_10'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithList] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_11'), ('Type', 'Negative'), ('Description', 'Create user [createWithList] with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_user_01'), ('Type', 'Positive'), ('Description', 'Update an existing user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_02'), ('Type', 'Positive'), ('Description', 'Create user by providing non-existing username to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_03'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_04'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_05'), ('Type', 'Negative'), ('Description', 'Update user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_01'), ('Type', 'Positive'), ('Description', 'Retrieve user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_02'), ('Type', 'Negative'), ('Description', 'Retrieve user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_03'), ('Type', 'Positive'), ('Description', 'Login  user with valid username and password'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_04'), ('Type', 'Negative'), ('Description', 'Login  user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_05'), ('Type', 'Negative'), ('Description', 'Login  user with wrong password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_06'), ('Type', 'Negative'), ('Description', 'Login  user with missing username'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_07'), ('Type', 'Negative'), ('Description', 'Login  user with missing  password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_08'), ('Type', 'Positive'), ('Description', 'Logout user'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_01'), ('Type', 'Positive'), ('Description', 'Delete user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_02'), ('Type', 'Negative'), ('Description', 'Delete user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:23.357" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:23.359" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<status status="PASS" starttime="20250205 13:18:23.354" endtime="20250205 13:18:23.359"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:23.361" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:23.361" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<msg timestamp="20250205 13:18:23.361" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.361" endtime="20250205 13:18:23.362"/>
</kw>
<msg timestamp="20250205 13:18:23.362" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.353" endtime="20250205 13:18:23.362"/>
</kw>
<test id="s1-s3-s2-t1" name="TC_PUT_user_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:23.364" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:23.365" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_user_01' ]</msg>
<msg timestamp="20250205 13:18:23.365" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Update an existing user with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:23.365" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_01'), ('Type', 'Positive'), ('Description', 'Update an existing user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', ...</msg>
<status status="PASS" starttime="20250205 13:18:23.365" endtime="20250205 13:18:23.365"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:23.371" level="TRACE">Arguments: [ 'Test Description:Update an existing user with valid JSON payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:23.371" level="INFO">Set test documentation to:
Test Description:Update an existing user with valid JSON payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:23.371" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:23.365" endtime="20250205 13:18:23.371"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:23.372" endtime="20250205 13:18:23.372"/>
</return>
<msg timestamp="20250205 13:18:23.372" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Update an existing user with valid JSON payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:23.372" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_01'), ('Type', 'Positive'), ('Description', 'Update an existing user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', ...</msg>
<status status="PASS" starttime="20250205 13:18:23.363" endtime="20250205 13:18:23.373"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.374" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:23.374" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:23.374" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:23.374" endtime="20250205 13:18:23.374"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.374" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:23.374" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:23.374" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:23.374" endtime="20250205 13:18:23.374"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.374" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:23.374" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:23.374" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:23.374" endtime="20250205 13:18:23.374"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:23.382" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}' ]</msg>
<msg timestamp="20250205 13:18:23.383" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:23.383" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}</msg>
<status status="PASS" starttime="20250205 13:18:23.381" endtime="20250205 13:18:23.383"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:23.384" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:23.385" level="TRACE">Return: 1738750703</msg>
<msg timestamp="20250205 13:18:23.385" level="INFO">${SECS} = 1738750703</msg>
<status status="PASS" starttime="20250205 13:18:23.384" endtime="20250205 13:18:23.385"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.386" level="TRACE">Arguments: [ 1738750703 ]</msg>
<msg timestamp="20250205 13:18:23.387" level="TRACE">Return: 1738750703</msg>
<msg timestamp="20250205 13:18:23.387" level="INFO">${ID} = 1738750703</msg>
<status status="PASS" starttime="20250205 13:18:23.386" endtime="20250205 13:18:23.387"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.388" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.id' | 1738750703 ]</msg>
<msg timestamp="20250205 13:18:23.388" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:18:23.423" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 1738750703,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<status status="PASS" starttime="20250205 13:18:23.387" endtime="20250205 13:18:23.423"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>${USER_02_USERNAME}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.423" level="TRACE">Arguments: [ 'USER1738750694' ]</msg>
<msg timestamp="20250205 13:18:23.423" level="TRACE">Return: 'USER1738750694'</msg>
<msg timestamp="20250205 13:18:23.423" level="INFO">${USERNAME} = USER1738750694</msg>
<status status="PASS" starttime="20250205 13:18:23.423" endtime="20250205 13:18:23.423"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.432" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 1738750703,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.username' | 'USER1738750694' ]</msg>
<msg timestamp="20250205 13:18:23.432" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:23.459" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 1738750703,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.423" endtime="20250205 13:18:23.459"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${FIRSTNAME}</var>
<arg>NEW.FIRSTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.462" level="TRACE">Arguments: [ 'NEW.FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:23.462" level="TRACE">Return: 'NEW.FIRSTNAME'</msg>
<msg timestamp="20250205 13:18:23.462" level="INFO">${FIRSTNAME} = NEW.FIRSTNAME</msg>
<status status="PASS" starttime="20250205 13:18:23.461" endtime="20250205 13:18:23.462"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.firstName</arg>
<arg>${FIRSTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.462" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 1738750703,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'} | '$.firstName' | 'NEW.FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:23.462" level="INFO">Update JSON with expression: '$.firstName'</msg>
<msg timestamp="20250205 13:18:23.490" level="TRACE">Return: {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.462" endtime="20250205 13:18:23.490"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${LASTNAME}</var>
<arg>NEW.LASTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.491" level="TRACE">Arguments: [ 'NEW.LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:23.491" level="TRACE">Return: 'NEW.LASTNAME'</msg>
<msg timestamp="20250205 13:18:23.492" level="INFO">${LASTNAME} = NEW.LASTNAME</msg>
<status status="PASS" starttime="20250205 13:18:23.490" endtime="20250205 13:18:23.492"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.lastName</arg>
<arg>${LASTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.492" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'} | '$.lastName' | 'NEW.LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:23.492" level="INFO">Update JSON with expression: '$.lastName'</msg>
<msg timestamp="20250205 13:18:23.520" level="TRACE">Return: {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.492" endtime="20250205 13:18:23.520"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${EMAIL}</var>
<arg>abc@xyz.com</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.522" level="TRACE">Arguments: [ 'abc@xyz.com' ]</msg>
<msg timestamp="20250205 13:18:23.522" level="TRACE">Return: 'abc@xyz.com'</msg>
<msg timestamp="20250205 13:18:23.522" level="INFO">${EMAIL} = abc@xyz.com</msg>
<status status="PASS" starttime="20250205 13:18:23.522" endtime="20250205 13:18:23.522"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.email</arg>
<arg>${EMAIL}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.522" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'} | '$.email' | 'abc@xyz.com' ]</msg>
<msg timestamp="20250205 13:18:23.522" level="INFO">Update JSON with expression: '$.email'</msg>
<msg timestamp="20250205 13:18:23.551" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.522" endtime="20250205 13:18:23.551"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PASSWORD}</var>
<arg>NEW.PASS${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.552" level="TRACE">Arguments: [ 'NEW.PASS1738750703' ]</msg>
<msg timestamp="20250205 13:18:23.552" level="TRACE">Return: 'NEW.PASS1738750703'</msg>
<msg timestamp="20250205 13:18:23.552" level="INFO">${PASSWORD} = NEW.PASS1738750703</msg>
<status status="PASS" starttime="20250205 13:18:23.552" endtime="20250205 13:18:23.552"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.password</arg>
<arg>${PASSWORD}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.552" level="TRACE">Arguments: [ {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'} | '$.password' | 'NEW.PASS1738750703' ]</msg>
<msg timestamp="20250205 13:18:23.552" level="INFO">Update JSON with expression: '$.password'</msg>
<msg timestamp="20250205 13:18:23.582" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750703',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.552" endtime="20250205 13:18:23.582"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHONE}</var>
<arg>+0123456789</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:23.582" level="TRACE">Arguments: [ '+0123456789' ]</msg>
<msg timestamp="20250205 13:18:23.582" level="TRACE">Return: '+0123456789'</msg>
<msg timestamp="20250205 13:18:23.582" level="INFO">${PHONE} = +0123456789</msg>
<status status="PASS" starttime="20250205 13:18:23.582" endtime="20250205 13:18:23.582"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.phone</arg>
<arg>${PHONE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.582" level="TRACE">Arguments: [ {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750703',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750694'} | '$.phone' | '+0123456789' ]</msg>
<msg timestamp="20250205 13:18:23.582" level="INFO">Update JSON with expression: '$.phone'</msg>
<msg timestamp="20250205 13:18:23.611" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750703',
 'phone': '+0123456789',
 'userStatus': 0,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.582" endtime="20250205 13:18:23.612"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${USERSTATUS}</var>
<arg>-1</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:23.612" level="TRACE">Arguments: [ '-1' ]</msg>
<msg timestamp="20250205 13:18:23.612" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:23.612" level="TRACE">Return: -1</msg>
<msg timestamp="20250205 13:18:23.612" level="INFO">${USERSTATUS} = -1</msg>
<status status="PASS" starttime="20250205 13:18:23.612" endtime="20250205 13:18:23.612"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.userStatus</arg>
<arg>${USERSTATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:23.612" level="TRACE">Arguments: [ {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750703',
 'phone': '+0123456789',
 'userStatus': 0,
 'username': 'USER1738750694'} | '$.userStatus' | -1 ]</msg>
<msg timestamp="20250205 13:18:23.612" level="INFO">Update JSON with expression: '$.userStatus'</msg>
<msg timestamp="20250205 13:18:23.642" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750703',
 'phone': '+0123456789',
 'userStatus': -1,
 'username': 'USER1738750694'}</msg>
<status status="PASS" starttime="20250205 13:18:23.612" endtime="20250205 13:18:23.642"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:23.642" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:23.642" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:23.642" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:23.642" endtime="20250205 13:18:23.642"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:23.642" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:23.642" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:23.642" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:23.642" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:23.642" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:23.642" endtime="20250205 13:18:23.642"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:23.651" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:23.652" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:23.652" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:23.642" endtime="20250205 13:18:23.652"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:23.652" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:23.652" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:23.690" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:23.691" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:23.652" endtime="20250205 13:18:23.691"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:23.691" endtime="20250205 13:18:23.691"/>
</return>
<msg timestamp="20250205 13:18:23.691" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:23.692" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:23.642" endtime="20250205 13:18:23.692"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:23.695" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:23.695" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:23.695" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:23.695" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:23.695" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:23.695" endtime="20250205 13:18:23.695"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:23.695" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:23.695" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:23.695" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:23.695" endtime="20250205 13:18:23.695"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:23.695" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:23.695" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:23.723" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:23.723" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:23.695" endtime="20250205 13:18:23.723"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:23.723" endtime="20250205 13:18:23.723"/>
</return>
<msg timestamp="20250205 13:18:23.723" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:23.723" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:23.693" endtime="20250205 13:18:23.723"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USERNAME}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:23.723" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/USER1738750694' | body={'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750703,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750703',
 'phone': '+0123456789',
 'userStatus': -1,
 'username': 'USER1738750694'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:23.733" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:24.303" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/user/USER1738750694 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:24.303" level="TRACE">Return: {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:24.303" level="INFO">${RESPONSE} = {'seconds': 0.5758099999999999, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': '1738750703'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:24 GMT', 'Content-Type': '...</msg>
<status status="PASS" starttime="20250205 13:18:23.723" endtime="20250205 13:18:24.303"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.312" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:24.312" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:24.340" level="TRACE">Return: {'code': 200, 'message': '1738750703', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:24.340" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': '1738750703'}</msg>
<status status="PASS" starttime="20250205 13:18:24.312" endtime="20250205 13:18:24.340"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.341" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:24.342" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:24.370" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:24.370" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:24.341" endtime="20250205 13:18:24.370"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.373" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:24.373" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.373" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:24.371" endtime="20250205 13:18:24.373"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.373" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:24.373" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:24.402" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.402" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.373" endtime="20250205 13:18:24.402"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.404" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.405" level="TRACE">Arguments: [ '"1738750703"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.405" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.405" level="FAIL">
WARNING: Field validation failure: "1738750703" != "None"</msg>
<msg timestamp="20250205 13:18:24.405" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "1738750703" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.404" endtime="20250205 13:18:24.405"/>
</kw>
<msg timestamp="20250205 13:18:24.405" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1738750703" != "None"</msg>
<msg timestamp="20250205 13:18:24.405" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "1738750703" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.403" endtime="20250205 13:18:24.405"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.username</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.405" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.username' ]</msg>
<msg timestamp="20250205 13:18:24.405" level="INFO">Get value from JSON with expression: '$.body.username'</msg>
<msg timestamp="20250205 13:18:24.433" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.434" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.405" endtime="20250205 13:18:24.434"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.435" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USERNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.436" level="TRACE">Arguments: [ '"USER1738750694"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.436" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.437" level="FAIL">
WARNING: Field validation failure: "USER1738750694" != "None"</msg>
<msg timestamp="20250205 13:18:24.437" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "USER1738750694" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.436" endtime="20250205 13:18:24.437"/>
</kw>
<msg timestamp="20250205 13:18:24.437" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "USER1738750694" != "None"</msg>
<msg timestamp="20250205 13:18:24.438" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "USER1738750694" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.435" endtime="20250205 13:18:24.438"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.firstName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.438" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.firstName' ]</msg>
<msg timestamp="20250205 13:18:24.441" level="INFO">Get value from JSON with expression: '$.body.firstName'</msg>
<msg timestamp="20250205 13:18:24.475" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.476" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.438" endtime="20250205 13:18:24.476"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.477" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${FIRSTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.477" level="TRACE">Arguments: [ '"NEW.FIRSTNAME"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.477" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.477" level="FAIL">
WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:24.477" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.477" endtime="20250205 13:18:24.477"/>
</kw>
<msg timestamp="20250205 13:18:24.477" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:24.477" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "NEW.FIRSTNAME" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.477" endtime="20250205 13:18:24.477"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.lastName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.483" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.lastName' ]</msg>
<msg timestamp="20250205 13:18:24.483" level="INFO">Get value from JSON with expression: '$.body.lastName'</msg>
<msg timestamp="20250205 13:18:24.506" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.506" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.481" endtime="20250205 13:18:24.506"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.511" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${LASTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.511" level="TRACE">Arguments: [ '"NEW.LASTNAME"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.511" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.512" level="FAIL">
WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:24.513" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.511" endtime="20250205 13:18:24.513"/>
</kw>
<msg timestamp="20250205 13:18:24.513" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:24.513" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "NEW.LASTNAME" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.506" endtime="20250205 13:18:24.513"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.email</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.513" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.email' ]</msg>
<msg timestamp="20250205 13:18:24.513" level="INFO">Get value from JSON with expression: '$.body.email'</msg>
<msg timestamp="20250205 13:18:24.562" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.562" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.513" endtime="20250205 13:18:24.562"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.578" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${EMAIL}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.578" level="TRACE">Arguments: [ '"abc@xyz.com"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.578" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.578" level="FAIL">
WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<msg timestamp="20250205 13:18:24.578" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.578" endtime="20250205 13:18:24.578"/>
</kw>
<msg timestamp="20250205 13:18:24.578" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<msg timestamp="20250205 13:18:24.578" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "abc@xyz.com" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.578" endtime="20250205 13:18:24.578"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.password</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.583" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.password' ]</msg>
<msg timestamp="20250205 13:18:24.584" level="INFO">Get value from JSON with expression: '$.body.password'</msg>
<msg timestamp="20250205 13:18:24.606" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.606" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.583" endtime="20250205 13:18:24.606"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.611" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PASSWORD}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.611" level="TRACE">Arguments: [ '"NEW.PASS1738750703"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.612" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.612" level="FAIL">
WARNING: Field validation failure: "NEW.PASS1738750703" != "None"</msg>
<msg timestamp="20250205 13:18:24.613" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "NEW.PASS1738750703" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.611" endtime="20250205 13:18:24.613"/>
</kw>
<msg timestamp="20250205 13:18:24.613" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.PASS1738750703" != "None"</msg>
<msg timestamp="20250205 13:18:24.613" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "NEW.PASS1738750703" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.606" endtime="20250205 13:18:24.613"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.phone</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.613" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.phone' ]</msg>
<msg timestamp="20250205 13:18:24.613" level="INFO">Get value from JSON with expression: '$.body.phone'</msg>
<msg timestamp="20250205 13:18:24.635" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.642" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.613" endtime="20250205 13:18:24.642"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.642" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PHONE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.645" level="TRACE">Arguments: [ '"+0123456789"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.645" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.645" level="FAIL">
WARNING: Field validation failure: "+0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:24.645" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "+0123456789" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.642" endtime="20250205 13:18:24.645"/>
</kw>
<msg timestamp="20250205 13:18:24.645" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "+0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:24.647" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "+0123456789" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.642" endtime="20250205 13:18:24.647"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.userStatus</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:24.647" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750703', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:24 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5758099999999999,
 'status': 200} | '$.body.userStatus' ]</msg>
<msg timestamp="20250205 13:18:24.647" level="INFO">Get value from JSON with expression: '$.body.userStatus'</msg>
<msg timestamp="20250205 13:18:24.674" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:24.675" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:24.647" endtime="20250205 13:18:24.676"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:24.676" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USERSTATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:24.676" level="TRACE">Arguments: [ '"-1"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:24.676" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.676" level="FAIL">
WARNING: Field validation failure: "-1" != "None"</msg>
<msg timestamp="20250205 13:18:24.676" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "-1" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:24.676" endtime="20250205 13:18:24.676"/>
</kw>
<msg timestamp="20250205 13:18:24.676" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "-1" != "None"</msg>
<msg timestamp="20250205 13:18:24.676" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "-1" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:24.676" endtime="20250205 13:18:24.676"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:24.681" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:24.682" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:24.681" endtime="20250205 13:18:24.682"/>
</kw>
<doc>Test Description:Update an existing user with valid JSON payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:23.362" endtime="20250205 13:18:24.683"/>
</test>
<test id="s1-s3-s2-t2" name="TC_PUT_user_02" line="106">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:24.688" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:24.688" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_user_02' ]</msg>
<msg timestamp="20250205 13:18:24.693" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create user by providing non-existing username to in update request payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:24.694" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_02'), ('Type', 'Positive'), ('Description', 'Create user by providing non-existing username to in update request payload'), ('ExpectedHTTPResponseStatusCode', ...</msg>
<status status="PASS" starttime="20250205 13:18:24.688" endtime="20250205 13:18:24.694"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:24.696" level="TRACE">Arguments: [ 'Test Description:Create user by providing non-existing username to in update request payload \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:24.696" level="INFO">Set test documentation to:
Test Description:Create user by providing non-existing username to in update request payload 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:24.696" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:24.694" endtime="20250205 13:18:24.696"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:24.696" endtime="20250205 13:18:24.696"/>
</return>
<msg timestamp="20250205 13:18:24.696" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
             ('Type', 'Positive'),
             ('Description',
              'Create user by providing non-existing username to in update request payload'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:24.696" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_02'), ('Type', 'Positive'), ('Description', 'Create user by providing non-existing username to in update request payload'), ('ExpectedHTTPResponseStatusCode', ...</msg>
<status status="PASS" starttime="20250205 13:18:24.688" endtime="20250205 13:18:24.696"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.701" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:24.701" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:24.702" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:24.696" endtime="20250205 13:18:24.702"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.705" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:24.705" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:24.705" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:24.703" endtime="20250205 13:18:24.706"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.707" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:24.707" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:24.707" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:24.707" endtime="20250205 13:18:24.707"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:24.711" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}' ]</msg>
<msg timestamp="20250205 13:18:24.711" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:24.712" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}</msg>
<status status="PASS" starttime="20250205 13:18:24.707" endtime="20250205 13:18:24.712"/>
</kw>
<kw name="Get Time" library="BuiltIn">
<var>${SECS}</var>
<arg>epoch</arg>
<doc>Returns the given time in the requested format.</doc>
<msg timestamp="20250205 13:18:24.713" level="TRACE">Arguments: [ 'epoch' ]</msg>
<msg timestamp="20250205 13:18:24.713" level="TRACE">Return: 1738750704</msg>
<msg timestamp="20250205 13:18:24.714" level="INFO">${SECS} = 1738750704</msg>
<status status="PASS" starttime="20250205 13:18:24.713" endtime="20250205 13:18:24.714"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ID}</var>
<arg>${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.716" level="TRACE">Arguments: [ 1738750704 ]</msg>
<msg timestamp="20250205 13:18:24.716" level="TRACE">Return: 1738750704</msg>
<msg timestamp="20250205 13:18:24.717" level="INFO">${ID} = 1738750704</msg>
<status status="PASS" starttime="20250205 13:18:24.715" endtime="20250205 13:18:24.717"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.id</arg>
<arg>${ID}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.721" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.id' | 1738750704 ]</msg>
<msg timestamp="20250205 13:18:24.721" level="INFO">Update JSON with expression: '$.id'</msg>
<msg timestamp="20250205 13:18:24.745" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 1738750704,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<status status="PASS" starttime="20250205 13:18:24.719" endtime="20250205 13:18:24.745"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${USERNAME}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:24.752" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:24.753" level="TRACE">Return: '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:24.753" level="INFO">${USERNAME} = 889a3b5c-e3aa-11ef-a57f-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:24.751" endtime="20250205 13:18:24.753"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.753" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 1738750704,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.username' | '889a3b5c-e3aa-11ef-a57f-744ca1d2e576' ]</msg>
<msg timestamp="20250205 13:18:24.753" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:24.782" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 1738750704,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.753" endtime="20250205 13:18:24.782"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${FIRSTNAME}</var>
<arg>NEW.FIRSTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.784" level="TRACE">Arguments: [ 'NEW.FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:24.785" level="TRACE">Return: 'NEW.FIRSTNAME'</msg>
<msg timestamp="20250205 13:18:24.785" level="INFO">${FIRSTNAME} = NEW.FIRSTNAME</msg>
<status status="PASS" starttime="20250205 13:18:24.784" endtime="20250205 13:18:24.785"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.firstName</arg>
<arg>${FIRSTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.786" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 1738750704,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | '$.firstName' | 'NEW.FIRSTNAME' ]</msg>
<msg timestamp="20250205 13:18:24.787" level="INFO">Update JSON with expression: '$.firstName'</msg>
<msg timestamp="20250205 13:18:24.809" level="TRACE">Return: {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.786" endtime="20250205 13:18:24.812"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${LASTNAME}</var>
<arg>NEW.LASTNAME</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.814" level="TRACE">Arguments: [ 'NEW.LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:24.815" level="TRACE">Return: 'NEW.LASTNAME'</msg>
<msg timestamp="20250205 13:18:24.815" level="INFO">${LASTNAME} = NEW.LASTNAME</msg>
<status status="PASS" starttime="20250205 13:18:24.814" endtime="20250205 13:18:24.815"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.lastName</arg>
<arg>${LASTNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.815" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | '$.lastName' | 'NEW.LASTNAME' ]</msg>
<msg timestamp="20250205 13:18:24.815" level="INFO">Update JSON with expression: '$.lastName'</msg>
<msg timestamp="20250205 13:18:24.843" level="TRACE">Return: {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.815" endtime="20250205 13:18:24.844"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${EMAIL}</var>
<arg>abc@xyz.com</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.845" level="TRACE">Arguments: [ 'abc@xyz.com' ]</msg>
<msg timestamp="20250205 13:18:24.845" level="TRACE">Return: 'abc@xyz.com'</msg>
<msg timestamp="20250205 13:18:24.845" level="INFO">${EMAIL} = abc@xyz.com</msg>
<status status="PASS" starttime="20250205 13:18:24.845" endtime="20250205 13:18:24.845"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.email</arg>
<arg>${EMAIL}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.845" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | '$.email' | 'abc@xyz.com' ]</msg>
<msg timestamp="20250205 13:18:24.845" level="INFO">Update JSON with expression: '$.email'</msg>
<msg timestamp="20250205 13:18:24.875" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.845" endtime="20250205 13:18:24.875"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PASSWORD}</var>
<arg>NEW.PASS${SECS}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.875" level="TRACE">Arguments: [ 'NEW.PASS1738750704' ]</msg>
<msg timestamp="20250205 13:18:24.882" level="TRACE">Return: 'NEW.PASS1738750704'</msg>
<msg timestamp="20250205 13:18:24.884" level="INFO">${PASSWORD} = NEW.PASS1738750704</msg>
<status status="PASS" starttime="20250205 13:18:24.875" endtime="20250205 13:18:24.885"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.password</arg>
<arg>${PASSWORD}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.885" level="TRACE">Arguments: [ {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | '$.password' | 'NEW.PASS1738750704' ]</msg>
<msg timestamp="20250205 13:18:24.885" level="INFO">Update JSON with expression: '$.password'</msg>
<msg timestamp="20250205 13:18:24.912" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750704',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.885" endtime="20250205 13:18:24.913"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${PHONE}</var>
<arg>+0123456789</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:24.914" level="TRACE">Arguments: [ '+0123456789' ]</msg>
<msg timestamp="20250205 13:18:24.914" level="TRACE">Return: '+0123456789'</msg>
<msg timestamp="20250205 13:18:24.914" level="INFO">${PHONE} = +0123456789</msg>
<status status="PASS" starttime="20250205 13:18:24.914" endtime="20250205 13:18:24.914"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.phone</arg>
<arg>${PHONE}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.914" level="TRACE">Arguments: [ {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750704',
 'phone': 'string',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | '$.phone' | '+0123456789' ]</msg>
<msg timestamp="20250205 13:18:24.914" level="INFO">Update JSON with expression: '$.phone'</msg>
<msg timestamp="20250205 13:18:24.942" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750704',
 'phone': '+0123456789',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.914" endtime="20250205 13:18:24.942"/>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<var>${USERSTATUS}</var>
<arg>-1</arg>
<doc>Converts the given item to an integer number.</doc>
<msg timestamp="20250205 13:18:24.943" level="TRACE">Arguments: [ '-1' ]</msg>
<msg timestamp="20250205 13:18:24.943" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.943" level="TRACE">Return: -1</msg>
<msg timestamp="20250205 13:18:24.944" level="INFO">${USERSTATUS} = -1</msg>
<status status="PASS" starttime="20250205 13:18:24.943" endtime="20250205 13:18:24.945"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.userStatus</arg>
<arg>${USERSTATUS}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:24.945" level="TRACE">Arguments: [ {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750704',
 'phone': '+0123456789',
 'userStatus': 0,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | '$.userStatus' | -1 ]</msg>
<msg timestamp="20250205 13:18:24.945" level="INFO">Update JSON with expression: '$.userStatus'</msg>
<msg timestamp="20250205 13:18:24.973" level="TRACE">Return: {'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750704',
 'phone': '+0123456789',
 'userStatus': -1,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'}</msg>
<status status="PASS" starttime="20250205 13:18:24.945" endtime="20250205 13:18:24.973"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:24.974" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:24.974" endtime="20250205 13:18:24.974"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:24.974" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:24.974" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:24.974" endtime="20250205 13:18:24.974"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:24.974" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:24.974" endtime="20250205 13:18:24.974"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:24.974" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:24.974" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:25.004" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:25.004" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:24.974" endtime="20250205 13:18:25.004"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:25.004" endtime="20250205 13:18:25.004"/>
</return>
<msg timestamp="20250205 13:18:25.004" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:25.004" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:24.974" endtime="20250205 13:18:25.004"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:25.013" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:25.013" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:25.013" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.013" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:25.013" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:25.013" endtime="20250205 13:18:25.013"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:25.013" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:25.013" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:25.013" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:25.013" endtime="20250205 13:18:25.013"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:25.013" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:25.013" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:25.043" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:25.043" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:25.013" endtime="20250205 13:18:25.043"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:25.043" endtime="20250205 13:18:25.043"/>
</return>
<msg timestamp="20250205 13:18:25.043" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:25.043" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:25.012" endtime="20250205 13:18:25.043"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USERNAME}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:25.054" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/889a3b5c-e3aa-11ef-a57f-744ca1d2e576' | body={'email': 'abc@xyz.com',
 'firstName': 'NEW.FIRSTNAME',
 'id': 1738750704,
 'lastName': 'NEW.LASTNAME',
 'password': 'NEW.PASS1738750704',
 'phone': '+0123456789',
 'userStatus': -1,
 'username': '889a3b5c-e3aa-11ef-a57f-744ca1d2e576'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:25.059" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:25.623" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/user/889a3b5c-e3aa-11ef-a57f-744ca1d2e576 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:25.623" level="TRACE">Return: {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:25.623" level="INFO">${RESPONSE} = {'seconds': 0.5697559999999999, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': '1738750704'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:25 GMT', 'Content-Type': '...</msg>
<status status="PASS" starttime="20250205 13:18:25.053" endtime="20250205 13:18:25.623"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.632" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:25.632" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:25.659" level="TRACE">Return: {'code': 200, 'message': '1738750704', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:25.659" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': '1738750704'}</msg>
<status status="PASS" starttime="20250205 13:18:25.631" endtime="20250205 13:18:25.659"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.661" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:25.661" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:25.687" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:25.687" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:25.660" endtime="20250205 13:18:25.688"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.691" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:25.691" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.691" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:25.689" endtime="20250205 13:18:25.691"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.694" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:25.694" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:25.718" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.718" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.692" endtime="20250205 13:18:25.718"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.720" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.720" level="TRACE">Arguments: [ '"1738750704"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.721" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.721" level="FAIL">
WARNING: Field validation failure: "1738750704" != "None"</msg>
<msg timestamp="20250205 13:18:25.721" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "1738750704" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.720" endtime="20250205 13:18:25.721"/>
</kw>
<msg timestamp="20250205 13:18:25.721" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1738750704" != "None"</msg>
<msg timestamp="20250205 13:18:25.723" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "1738750704" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.720" endtime="20250205 13:18:25.723"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.username</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.725" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.username' ]</msg>
<msg timestamp="20250205 13:18:25.725" level="INFO">Get value from JSON with expression: '$.body.username'</msg>
<msg timestamp="20250205 13:18:25.751" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.752" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.724" endtime="20250205 13:18:25.752"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.753" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USERNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.754" level="TRACE">Arguments: [ '"889a3b5c-e3aa-11ef-a57f-744ca1d2e576"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.754" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.754" level="FAIL">
WARNING: Field validation failure: "889a3b5c-e3aa-11ef-a57f-744ca1d2e576" != "None"</msg>
<msg timestamp="20250205 13:18:25.754" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "889a3b5c-e3aa-11ef-a57f-744ca1d2e576" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.753" endtime="20250205 13:18:25.754"/>
</kw>
<msg timestamp="20250205 13:18:25.754" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "889a3b5c-e3aa-11ef-a57f-744ca1d2e576" != "None"</msg>
<msg timestamp="20250205 13:18:25.756" level="TRACE">Return: ('FAIL',
 '\nWARNING: Field validation failure: "889a3b5c-e3aa-11ef-a57f-744ca1d2e576" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.753" endtime="20250205 13:18:25.756"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.firstName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.756" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.firstName' ]</msg>
<msg timestamp="20250205 13:18:25.756" level="INFO">Get value from JSON with expression: '$.body.firstName'</msg>
<msg timestamp="20250205 13:18:25.784" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.784" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.756" endtime="20250205 13:18:25.784"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.786" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${FIRSTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.786" level="TRACE">Arguments: [ '"NEW.FIRSTNAME"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.787" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.787" level="FAIL">
WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:25.787" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.786" endtime="20250205 13:18:25.787"/>
</kw>
<msg timestamp="20250205 13:18:25.787" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:25.789" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "NEW.FIRSTNAME" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.785" endtime="20250205 13:18:25.789"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.lastName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.789" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.lastName' ]</msg>
<msg timestamp="20250205 13:18:25.789" level="INFO">Get value from JSON with expression: '$.body.lastName'</msg>
<msg timestamp="20250205 13:18:25.816" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.816" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.789" endtime="20250205 13:18:25.816"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.818" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${LASTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.818" level="TRACE">Arguments: [ '"NEW.LASTNAME"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.818" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.818" level="FAIL">
WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:25.818" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.818" endtime="20250205 13:18:25.818"/>
</kw>
<msg timestamp="20250205 13:18:25.818" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:25.818" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "NEW.LASTNAME" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.818" endtime="20250205 13:18:25.821"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.email</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.822" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.email' ]</msg>
<msg timestamp="20250205 13:18:25.822" level="INFO">Get value from JSON with expression: '$.body.email'</msg>
<msg timestamp="20250205 13:18:25.856" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.856" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.821" endtime="20250205 13:18:25.856"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.856" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${EMAIL}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.856" level="TRACE">Arguments: [ '"abc@xyz.com"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.856" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.856" level="FAIL">
WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<msg timestamp="20250205 13:18:25.856" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.856" endtime="20250205 13:18:25.856"/>
</kw>
<msg timestamp="20250205 13:18:25.856" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<msg timestamp="20250205 13:18:25.861" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "abc@xyz.com" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.856" endtime="20250205 13:18:25.862"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.password</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.864" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.password' ]</msg>
<msg timestamp="20250205 13:18:25.865" level="INFO">Get value from JSON with expression: '$.body.password'</msg>
<msg timestamp="20250205 13:18:25.892" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.893" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.863" endtime="20250205 13:18:25.893"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.894" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PASSWORD}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.895" level="TRACE">Arguments: [ '"NEW.PASS1738750704"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.895" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.895" level="FAIL">
WARNING: Field validation failure: "NEW.PASS1738750704" != "None"</msg>
<msg timestamp="20250205 13:18:25.895" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "NEW.PASS1738750704" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.894" endtime="20250205 13:18:25.895"/>
</kw>
<msg timestamp="20250205 13:18:25.895" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.PASS1738750704" != "None"</msg>
<msg timestamp="20250205 13:18:25.895" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "NEW.PASS1738750704" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.893" endtime="20250205 13:18:25.895"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.phone</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.895" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.phone' ]</msg>
<msg timestamp="20250205 13:18:25.895" level="INFO">Get value from JSON with expression: '$.body.phone'</msg>
<msg timestamp="20250205 13:18:25.926" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.926" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.895" endtime="20250205 13:18:25.927"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.928" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${PHONE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.928" level="TRACE">Arguments: [ '"+0123456789"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.928" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.928" level="FAIL">
WARNING: Field validation failure: "+0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:25.928" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "+0123456789" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.928" endtime="20250205 13:18:25.928"/>
</kw>
<msg timestamp="20250205 13:18:25.930" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "+0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:25.930" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "+0123456789" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.927" endtime="20250205 13:18:25.930"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.userStatus</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:25.932" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': '1738750704', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:25 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5697559999999999,
 'status': 200} | '$.body.userStatus' ]</msg>
<msg timestamp="20250205 13:18:25.932" level="INFO">Get value from JSON with expression: '$.body.userStatus'</msg>
<msg timestamp="20250205 13:18:25.956" level="TRACE">Return: None</msg>
<msg timestamp="20250205 13:18:25.956" level="INFO">${PAYLOAD_VALUE} = None</msg>
<status status="PASS" starttime="20250205 13:18:25.931" endtime="20250205 13:18:25.956"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:25.956" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USERSTATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:25.956" level="TRACE">Arguments: [ '"-1"' | '"None"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:25.961" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:25.961" level="FAIL">
WARNING: Field validation failure: "-1" != "None"</msg>
<msg timestamp="20250205 13:18:25.961" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
WARNING: Field validation failure: "-1" != "None"</msg>
<status status="FAIL" starttime="20250205 13:18:25.956" endtime="20250205 13:18:25.961"/>
</kw>
<msg timestamp="20250205 13:18:25.961" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "-1" != "None"</msg>
<msg timestamp="20250205 13:18:25.963" level="TRACE">Return: ('FAIL', '\nWARNING: Field validation failure: "-1" != "None"')</msg>
<status status="PASS" starttime="20250205 13:18:25.956" endtime="20250205 13:18:25.963"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:25.963" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:25.963" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:25.963" endtime="20250205 13:18:25.963"/>
</kw>
<doc>Test Description:Create user by providing non-existing username to in update request payload 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:24.685" endtime="20250205 13:18:25.963"/>
</test>
<test id="s1-s3-s2-t3" name="TC_PUT_user_03" line="197">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:25.969" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:25.969" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_user_03' ]</msg>
<msg timestamp="20250205 13:18:25.972" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
             ('Type', 'Negative'),
             ('Description', 'Update user with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:25.972" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_03'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n ...</msg>
<status status="PASS" starttime="20250205 13:18:25.969" endtime="20250205 13:18:25.972"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:25.974" level="TRACE">Arguments: [ 'Test Description:Update user with payload having invalid id \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:18:25.975" level="INFO">Set test documentation to:
Test Description:Update user with payload having invalid id 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:18:25.975" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:25.972" endtime="20250205 13:18:25.975"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:25.976" endtime="20250205 13:18:25.976"/>
</return>
<msg timestamp="20250205 13:18:25.976" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
             ('Type', 'Negative'),
             ('Description', 'Update user with payload having invalid id'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])</msg>
<msg timestamp="20250205 13:18:25.976" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_03'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n ...</msg>
<status status="PASS" starttime="20250205 13:18:25.963" endtime="20250205 13:18:25.977"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:25.978" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:25.978" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:25.978" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:25.977" endtime="20250205 13:18:25.979"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:25.981" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:25.981" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:25.981" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:25.980" endtime="20250205 13:18:25.981"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:25.983" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:25.983" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:25.983" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:25.982" endtime="20250205 13:18:25.984"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:25.985" level="TRACE">Arguments: [ '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}' ]</msg>
<msg timestamp="20250205 13:18:25.985" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:25.985" level="INFO">${REQUEST_PAYLOAD} = {'id': 'invalidId', 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 0}</msg>
<status status="PASS" starttime="20250205 13:18:25.984" endtime="20250205 13:18:25.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>${USER_01_USERNAME}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:25.985" level="TRACE">Arguments: [ 'USER1738750693' ]</msg>
<msg timestamp="20250205 13:18:25.985" level="TRACE">Return: 'USER1738750693'</msg>
<msg timestamp="20250205 13:18:25.985" level="INFO">${USERNAME} = USER1738750693</msg>
<status status="PASS" starttime="20250205 13:18:25.985" endtime="20250205 13:18:25.985"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:25.985" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'string'} | '$.username' | 'USER1738750693' ]</msg>
<msg timestamp="20250205 13:18:25.985" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:26.015" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:25.985" endtime="20250205 13:18:26.015"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:26.022" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:26.023" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:26.023" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:26.022" endtime="20250205 13:18:26.023"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:26.024" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:26.024" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:26.024" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:26.024" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:26.024" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:26.024" endtime="20250205 13:18:26.024"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:26.024" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:26.024" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.024" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.024" endtime="20250205 13:18:26.024"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:26.024" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:26.024" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:26.063" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.064" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.024" endtime="20250205 13:18:26.064"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:26.065" endtime="20250205 13:18:26.065"/>
</return>
<msg timestamp="20250205 13:18:26.066" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.066" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.024" endtime="20250205 13:18:26.066"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:26.068" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:26.068" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:26.068" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:26.068" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:26.068" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:26.068" endtime="20250205 13:18:26.068"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:26.068" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:26.068" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.068" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.068" endtime="20250205 13:18:26.071"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:26.071" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:26.072" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:26.099" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.100" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.071" endtime="20250205 13:18:26.100"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:26.100" endtime="20250205 13:18:26.100"/>
</return>
<msg timestamp="20250205 13:18:26.100" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.100" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.068" endtime="20250205 13:18:26.100"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USERNAME}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:26.102" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/USER1738750693' | body={'email': 'string',
 'firstName': 'string',
 'id': 'invalidId',
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 0,
 'username': 'USER1738750693'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:26.105" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:26.652" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/user/USER1738750693 HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:18:26.662" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:26 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.553591,
 'status': 500}</msg>
<msg timestamp="20250205 13:18:26.662" level="INFO">${RESPONSE} = {'seconds': 0.553591, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:26 GMT', 'Cont...</msg>
<status status="PASS" starttime="20250205 13:18:26.101" endtime="20250205 13:18:26.662"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:26.662" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:26 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.553591,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:26.662" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:26.689" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:26.689" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:18:26.662" endtime="20250205 13:18:26.689"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:26.691" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:26 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.553591,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:26.691" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:26.717" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:18:26.717" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:18:26.690" endtime="20250205 13:18:26.717"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:26.719" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:26.720" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:26.720" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:26.718" endtime="20250205 13:18:26.721"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:26.722" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:26.722" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:26.721" endtime="20250205 13:18:26.722"/>
</kw>
<doc>Test Description:Update user with payload having invalid id 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:18:25.963" endtime="20250205 13:18:26.723"/>
</test>
<test id="s1-s3-s2-t4" name="TC_PUT_user_04" line="225">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:26.724" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:26.727" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_user_04' ]</msg>
<msg timestamp="20250205 13:18:26.729" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
             ('Type', 'Negative'),
             ('Description', 'Update user with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:18:26.730" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_04'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '...</msg>
<status status="PASS" starttime="20250205 13:18:26.724" endtime="20250205 13:18:26.730"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:26.731" level="TRACE">Arguments: [ 'Test Description:Update user with payload having invalid status \n\n Expected Result:500 \n\n' ]</msg>
<msg timestamp="20250205 13:18:26.732" level="INFO">Set test documentation to:
Test Description:Update user with payload having invalid status 

 Expected Result:500 

</msg>
<msg timestamp="20250205 13:18:26.732" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:26.730" endtime="20250205 13:18:26.732"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:26.732" endtime="20250205 13:18:26.732"/>
</return>
<msg timestamp="20250205 13:18:26.733" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
             ('Type', 'Negative'),
             ('Description', 'Update user with payload having invalid status'),
             ('ExpectedHTTPResponseStatusCode', '500'),
             ('Request Payload',
              '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])</msg>
<msg timestamp="20250205 13:18:26.733" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_04'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '...</msg>
<status status="PASS" starttime="20250205 13:18:26.724" endtime="20250205 13:18:26.733"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:26.736" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:26.736" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:26.736" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:26.734" endtime="20250205 13:18:26.736"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:26.736" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:26.736" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:26.736" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:26.736" endtime="20250205 13:18:26.736"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:26.736" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:26.736" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:26.736" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:26.736" endtime="20250205 13:18:26.736"/>
</kw>
<kw name="Convert String to JSON" library="RPA.JSON">
<var>${REQUEST_PAYLOAD}</var>
<arg>${CASEDATA["Request Payload"]}</arg>
<doc>Convert a string to a JSON serializable object and return it.</doc>
<msg timestamp="20250205 13:18:26.742" level="TRACE">Arguments: [ '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}' ]</msg>
<msg timestamp="20250205 13:18:26.743" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'string'}</msg>
<msg timestamp="20250205 13:18:26.744" level="INFO">${REQUEST_PAYLOAD} = {'id': 0, 'username': 'string', 'firstName': 'string', 'lastName': 'string', 'email': 'string', 'password': 'string', 'phone': 'string', 'userStatus': 'invalidStatus'}</msg>
<status status="PASS" starttime="20250205 13:18:26.741" endtime="20250205 13:18:26.744"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${USERNAME}</var>
<arg>${USER_01_USERNAME}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:26.744" level="TRACE">Arguments: [ 'USER1738750693' ]</msg>
<msg timestamp="20250205 13:18:26.744" level="TRACE">Return: 'USER1738750693'</msg>
<msg timestamp="20250205 13:18:26.744" level="INFO">${USERNAME} = USER1738750693</msg>
<status status="PASS" starttime="20250205 13:18:26.744" endtime="20250205 13:18:26.747"/>
</kw>
<kw name="Update value to JSON" library="RPA.JSON">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>$.username</arg>
<arg>${USERNAME}</arg>
<doc>Update existing values in a JSON serializable object and return the result.
Will change all values that match the expression.</doc>
<msg timestamp="20250205 13:18:26.748" level="TRACE">Arguments: [ {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'string'} | '$.username' | 'USER1738750693' ]</msg>
<msg timestamp="20250205 13:18:26.748" level="INFO">Update JSON with expression: '$.username'</msg>
<msg timestamp="20250205 13:18:26.783" level="TRACE">Return: {'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'USER1738750693'}</msg>
<status status="PASS" starttime="20250205 13:18:26.747" endtime="20250205 13:18:26.783"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:26.785" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:26.786" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:26.786" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:26.784" endtime="20250205 13:18:26.786"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:26.788" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:26.791" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:26.791" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:26.791" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:26.791" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:26.788" endtime="20250205 13:18:26.792"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:26.792" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:26.794" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.794" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.792" endtime="20250205 13:18:26.794"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:26.794" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:26.795" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:26.822" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.822" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.794" endtime="20250205 13:18:26.822"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:26.822" endtime="20250205 13:18:26.823"/>
</return>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.823" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.788" endtime="20250205 13:18:26.823"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:26.823" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:26.823" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:26.823" endtime="20250205 13:18:26.823"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.823" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.823" endtime="20250205 13:18:26.823"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:26.823" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:26.823" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:26.854" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.855" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.823" endtime="20250205 13:18:26.855"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:26.855" endtime="20250205 13:18:26.855"/>
</return>
<msg timestamp="20250205 13:18:26.855" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:26.855" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:26.823" endtime="20250205 13:18:26.856"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USERNAME}</arg>
<arg>body=${REQUEST_PAYLOAD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:26.858" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/USER1738750693' | body={'email': 'string',
 'firstName': 'string',
 'id': 0,
 'lastName': 'string',
 'password': 'string',
 'phone': 'string',
 'userStatus': 'invalidStatus',
 'username': 'USER1738750693'} | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:26.861" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:27.423" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/user/USER1738750693 HTTP/1.1" 500 None</msg>
<msg timestamp="20250205 13:18:27.423" level="TRACE">Return: {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:27 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.567633,
 'status': 500}</msg>
<msg timestamp="20250205 13:18:27.423" level="INFO">${RESPONSE} = {'seconds': 0.567633, 'status': 500, 'reason': 'Server Error', 'body': {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:27 GMT', 'Cont...</msg>
<status status="PASS" starttime="20250205 13:18:26.857" endtime="20250205 13:18:27.423"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:27.432" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:27 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.567633,
 'status': 500} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:27.432" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:27.492" level="TRACE">Return: {'code': 500, 'message': 'something bad happened', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:27.492" level="INFO">${RESPONSE_PAYLOAD} = {'code': 500, 'type': 'unknown', 'message': 'something bad happened'}</msg>
<status status="PASS" starttime="20250205 13:18:27.432" endtime="20250205 13:18:27.492"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:27.492" level="TRACE">Arguments: [ {'body': {'code': 500, 'message': 'something bad happened', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:27 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Server Error',
 'seconds': 0.567633,
 'status': 500} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:27.492" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:27.522" level="TRACE">Return: 500</msg>
<msg timestamp="20250205 13:18:27.522" level="INFO">${RESPONSE_STATUS} = 500</msg>
<status status="PASS" starttime="20250205 13:18:27.492" endtime="20250205 13:18:27.523"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:27.525" level="TRACE">Arguments: [ '"500"' | '"500"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:27.526" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:27.526" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:27.523" endtime="20250205 13:18:27.526"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:27.527" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:27.527" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:27.527" endtime="20250205 13:18:27.527"/>
</kw>
<doc>Test Description:Update user with payload having invalid status 

 Expected Result:500 

</doc>
<status status="PASS" starttime="20250205 13:18:26.724" endtime="20250205 13:18:27.529"/>
</test>
<test id="s1-s3-s2-t5" name="TC_PUT_user_05" line="253">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:27.532" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:27.532" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_PUT_user_05' ]</msg>
<msg timestamp="20250205 13:18:27.535" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
             ('Type', 'Negative'),
             ('Description', 'Update user with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:27.535" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_05'), ('Type', 'Negative'), ('Description', 'Update user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:27.532" endtime="20250205 13:18:27.535"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:27.538" level="TRACE">Arguments: [ 'Test Description:Update user with no payload \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:27.538" level="INFO">Set test documentation to:
Test Description:Update user with no payload 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:27.538" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:27.537" endtime="20250205 13:18:27.539"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:27.539" endtime="20250205 13:18:27.539"/>
</return>
<msg timestamp="20250205 13:18:27.539" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
             ('Type', 'Negative'),
             ('Description', 'Update user with no payload'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:27.539" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_PUT_user_05'), ('Type', 'Negative'), ('Description', 'Update user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:27.531" endtime="20250205 13:18:27.540"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:27.542" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:27.543" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:27.543" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:27.541" endtime="20250205 13:18:27.543"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:27.545" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:27.545" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:27.546" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:27.544" endtime="20250205 13:18:27.546"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:27.546" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:27.546" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:27.546" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:27.546" endtime="20250205 13:18:27.546"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:27.546" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:27.546" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:27.546" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:27.546" endtime="20250205 13:18:27.546"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:27.553" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:27.553" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:27.554" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:27.554" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:27.554" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:27.553" endtime="20250205 13:18:27.554"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:27.554" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:27.555" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:27.555" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:27.554" endtime="20250205 13:18:27.555"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:27.555" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:27.555" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:27.592" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:27.592" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:27.555" endtime="20250205 13:18:27.593"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:27.593" endtime="20250205 13:18:27.593"/>
</return>
<msg timestamp="20250205 13:18:27.593" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:27.593" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:27.552" endtime="20250205 13:18:27.593"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Content-Type</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:27.593" level="TRACE">Arguments: [ ${HEADERS}={'Accept': 'application/json'} | ${KEY}='Content-Type' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:27.593" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:27.593" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:27.593" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:27.593" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:27.593" endtime="20250205 13:18:27.593"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:27.593" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:27.593" level="TRACE">Return: {'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:27.593" level="INFO">${HEADER_TO_ADD} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:27.593" endtime="20250205 13:18:27.593"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:27.602" level="TRACE">Arguments: [ {'Accept': 'application/json'} | '$' | {'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:27.602" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:27.629" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:27.629" level="INFO">${HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:27.593" endtime="20250205 13:18:27.629"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:27.629" endtime="20250205 13:18:27.629"/>
</return>
<msg timestamp="20250205 13:18:27.629" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20250205 13:18:27.631" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:27.593" endtime="20250205 13:18:27.631"/>
</kw>
<kw name="PUT" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USER_01_USERNAME}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a PUT request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:27.633" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/USER1738750693' | validate=True | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:27.633" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:28.233" level="DEBUG">https://petstore.swagger.io:443 "PUT /v2/user/USER1738750693 HTTP/1.1" 405 None</msg>
<msg timestamp="20250205 13:18:28.242" level="TRACE">Return: {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:28 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.6054579999999999,
 'status': 405}</msg>
<msg timestamp="20250205 13:18:28.242" level="INFO">${RESPONSE} = {'seconds': 0.6054579999999999, 'status': 405, 'reason': 'Method Not Allowed', 'body': {'code': 405, 'type': 'unknown', 'message': 'no data'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:28 GMT', 'Con...</msg>
<status status="PASS" starttime="20250205 13:18:27.632" endtime="20250205 13:18:28.242"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:28.242" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:28 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.6054579999999999,
 'status': 405} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:28.242" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:28.273" level="TRACE">Return: {'code': 405, 'message': 'no data', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:28.274" level="INFO">${RESPONSE_PAYLOAD} = {'code': 405, 'type': 'unknown', 'message': 'no data'}</msg>
<status status="PASS" starttime="20250205 13:18:28.242" endtime="20250205 13:18:28.274"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:28.276" level="TRACE">Arguments: [ {'body': {'code': 405, 'message': 'no data', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:28 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Method Not Allowed',
 'seconds': 0.6054579999999999,
 'status': 405} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:28.277" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:28.300" level="TRACE">Return: 405</msg>
<msg timestamp="20250205 13:18:28.300" level="INFO">${RESPONSE_STATUS} = 405</msg>
<status status="PASS" starttime="20250205 13:18:28.275" endtime="20250205 13:18:28.300"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:28.305" level="TRACE">Arguments: [ '"405"' | '"405"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:28.305" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:28.305" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.302" endtime="20250205 13:18:28.305"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:28.305" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:28.305" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.305" endtime="20250205 13:18:28.305"/>
</kw>
<doc>Test Description:Update user with no payload 

 Expected Result:405 

</doc>
<status status="PASS" starttime="20250205 13:18:27.531" endtime="20250205 13:18:28.305"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:28.305" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:28.310" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:28.310" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.310" endtime="20250205 13:18:28.310"/>
</kw>
<msg timestamp="20250205 13:18:28.310" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.305" endtime="20250205 13:18:28.310"/>
</kw>
<status status="PASS" starttime="20250205 13:18:23.344" endtime="20250205 13:18:28.310"/>
</suite>
<suite id="s1-s3-s3" name="03 GET user" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\user\03_GET_user.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:28.323" level="TRACE">Arguments: [ ${CSVFILE}='user.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:28.325" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:28.325" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:28.325" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:28.325" endtime="20250205 13:18:28.325"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:28.325" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'user.csv' ]</msg>
<msg timestamp="20250205 13:18:28.327" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_02'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_03'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_04'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_05'), ('Type', 'Negative'), ('Description', 'Create user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_06'), ('Type', 'Positive'), ('Description', 'Create user [createWithArray] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_07'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithArray] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_08'), ('Type', 'Negative'), ('Description', 'Create user [createWithArray]  with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_09'), ('Type', 'Positive'), ('Description', 'Create user [createWithList] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_10'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithList] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_11'), ('Type', 'Negative'), ('Description', 'Create user [createWithList] with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_user_01'), ('Type', 'Positive'), ('Description', 'Update an existing user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_02'), ('Type', 'Positive'), ('Description', 'Create user by providing non-existing username to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_03'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_04'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_05'), ('Type', 'Negative'), ('Description', 'Update user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_01'), ('Type', 'Positive'), ('Description', 'Retrieve user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_02'), ('Type', 'Negative'), ('Description', 'Retrieve user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_03'), ('Type', 'Positive'), ('Description', 'Login  user with valid username and password'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_04'), ('Type', 'Negative'), ('Description', 'Login  user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_05'), ('Type', 'Negative'), ('Description', 'Login  user with wrong password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_06'), ('Type', 'Negative'), ('Description', 'Login  user with missing username'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_07'), ('Type', 'Negative'), ('Description', 'Login  user with missing  password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_08'), ('Type', 'Positive'), ('Description', 'Logout user'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_01'), ('Type', 'Positive'), ('Description', 'Delete user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_02'), ('Type', 'Negative'), ('Description', 'Delete user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:28.328" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:28.331" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<status status="PASS" starttime="20250205 13:18:28.325" endtime="20250205 13:18:28.331"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:28.332" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:28.333" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<msg timestamp="20250205 13:18:28.333" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.332" endtime="20250205 13:18:28.333"/>
</kw>
<msg timestamp="20250205 13:18:28.333" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.323" endtime="20250205 13:18:28.333"/>
</kw>
<test id="s1-s3-s3-t1" name="TC_GET_user_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:28.336" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:28.336" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_01' ]</msg>
<msg timestamp="20250205 13:18:28.342" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve user with existing username'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:28.342" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_01'), ('Type', 'Positive'), ('Description', 'Retrieve user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:28.336" endtime="20250205 13:18:28.343"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:28.346" level="TRACE">Arguments: [ 'Test Description:Retrieve user with existing username \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:28.347" level="INFO">Set test documentation to:
Test Description:Retrieve user with existing username 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:28.347" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:28.343" endtime="20250205 13:18:28.347"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:28.347" endtime="20250205 13:18:28.347"/>
</return>
<msg timestamp="20250205 13:18:28.348" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Retrieve user with existing username'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:28.348" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_01'), ('Type', 'Positive'), ('Description', 'Retrieve user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:28.335" endtime="20250205 13:18:28.348"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:28.350" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:28.350" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:28.351" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:28.349" endtime="20250205 13:18:28.351"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:28.353" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:28.354" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:28.354" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:28.352" endtime="20250205 13:18:28.354"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:28.355" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:28.355" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:28.355" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:28.355" endtime="20250205 13:18:28.355"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:28.355" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:28.355" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:28.355" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:28.355" endtime="20250205 13:18:28.355"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:28.362" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:28.363" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:28.363" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:28.363" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:28.363" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:28.362" endtime="20250205 13:18:28.363"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:28.364" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:28.364" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:28.365" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:28.364" endtime="20250205 13:18:28.365"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:28.366" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:28.367" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:28.398" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:28.398" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:28.365" endtime="20250205 13:18:28.398"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:28.398" endtime="20250205 13:18:28.399"/>
</return>
<msg timestamp="20250205 13:18:28.399" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:28.399" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:28.361" endtime="20250205 13:18:28.399"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USER_01_USERNAME}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:28.401" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/USER1738750693' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:28.404" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:28.993" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/USER1738750693 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:28.993" level="TRACE">Return: {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:28.993" level="INFO">${RESPONSE} = {'seconds': 0.5894020000000001, 'status': 200, 'reason': 'OK', 'body': {'id': 1738750693, 'username': 'USER1738750693', 'firstName': 'FIRSTNAME', 'lastName': 'LASTNAME', 'email': 'abc@def.com', 'passw...</msg>
<status status="PASS" starttime="20250205 13:18:28.399" endtime="20250205 13:18:28.993"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:28.993" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:28.993" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:29.026" level="TRACE">Return: {'email': 'abc@def.com',
 'firstName': 'FIRSTNAME',
 'id': 1738750693,
 'lastName': 'LASTNAME',
 'password': 'PASS1738750693',
 'phone': '0123456789',
 'userStatus': 1,
 'username': 'USER1738750693'}</msg>
<msg timestamp="20250205 13:18:29.027" level="INFO">${RESPONSE_PAYLOAD} = {'id': 1738750693, 'username': 'USER1738750693', 'firstName': 'FIRSTNAME', 'lastName': 'LASTNAME', 'email': 'abc@def.com', 'password': 'PASS1738750693', 'phone': '0123456789', 'userStatus': 1}</msg>
<status status="PASS" starttime="20250205 13:18:28.993" endtime="20250205 13:18:29.027"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.029" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:29.029" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:29.063" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:29.063" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:29.028" endtime="20250205 13:18:29.064"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.064" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:29.064" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.064" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.064" endtime="20250205 13:18:29.064"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.id</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.064" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.id' ]</msg>
<msg timestamp="20250205 13:18:29.064" level="INFO">Get value from JSON with expression: '$.body.id'</msg>
<msg timestamp="20250205 13:18:29.094" level="TRACE">Return: 1738750693</msg>
<msg timestamp="20250205 13:18:29.094" level="INFO">${PAYLOAD_VALUE} = 1738750693</msg>
<status status="PASS" starttime="20250205 13:18:29.064" endtime="20250205 13:18:29.094"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.096" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_ID}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_ID}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.097" level="TRACE">Arguments: [ '"1738750693"' | '"1738750693"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.097" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.097" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.096" endtime="20250205 13:18:29.097"/>
</kw>
<msg timestamp="20250205 13:18:29.097" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.095" endtime="20250205 13:18:29.097"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.username</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.098" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.username' ]</msg>
<msg timestamp="20250205 13:18:29.098" level="INFO">Get value from JSON with expression: '$.body.username'</msg>
<msg timestamp="20250205 13:18:29.124" level="TRACE">Return: 'USER1738750693'</msg>
<msg timestamp="20250205 13:18:29.124" level="INFO">${PAYLOAD_VALUE} = USER1738750693</msg>
<status status="PASS" starttime="20250205 13:18:29.097" endtime="20250205 13:18:29.124"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.125" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_USERNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_USERNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.125" level="TRACE">Arguments: [ '"USER1738750693"' | '"USER1738750693"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.125" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.125" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.125" endtime="20250205 13:18:29.125"/>
</kw>
<msg timestamp="20250205 13:18:29.125" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.125" endtime="20250205 13:18:29.125"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.firstName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.125" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.firstName' ]</msg>
<msg timestamp="20250205 13:18:29.125" level="INFO">Get value from JSON with expression: '$.body.firstName'</msg>
<msg timestamp="20250205 13:18:29.155" level="TRACE">Return: 'FIRSTNAME'</msg>
<msg timestamp="20250205 13:18:29.156" level="INFO">${PAYLOAD_VALUE} = FIRSTNAME</msg>
<status status="PASS" starttime="20250205 13:18:29.125" endtime="20250205 13:18:29.156"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.158" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_FIRSTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_FIRSTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.158" level="TRACE">Arguments: [ '"FIRSTNAME"' | '"FIRSTNAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.158" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.158" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.158" endtime="20250205 13:18:29.158"/>
</kw>
<msg timestamp="20250205 13:18:29.158" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.158" endtime="20250205 13:18:29.158"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.lastName</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.158" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.lastName' ]</msg>
<msg timestamp="20250205 13:18:29.161" level="INFO">Get value from JSON with expression: '$.body.lastName'</msg>
<msg timestamp="20250205 13:18:29.186" level="TRACE">Return: 'LASTNAME'</msg>
<msg timestamp="20250205 13:18:29.186" level="INFO">${PAYLOAD_VALUE} = LASTNAME</msg>
<status status="PASS" starttime="20250205 13:18:29.158" endtime="20250205 13:18:29.186"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.186" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_LASTNAME}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_LASTNAME}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.191" level="TRACE">Arguments: [ '"LASTNAME"' | '"LASTNAME"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.191" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.191" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.186" endtime="20250205 13:18:29.191"/>
</kw>
<msg timestamp="20250205 13:18:29.191" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.186" endtime="20250205 13:18:29.191"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.email</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.193" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.email' ]</msg>
<msg timestamp="20250205 13:18:29.193" level="INFO">Get value from JSON with expression: '$.body.email'</msg>
<msg timestamp="20250205 13:18:29.219" level="TRACE">Return: 'abc@def.com'</msg>
<msg timestamp="20250205 13:18:29.219" level="INFO">${PAYLOAD_VALUE} = abc@def.com</msg>
<status status="PASS" starttime="20250205 13:18:29.192" endtime="20250205 13:18:29.220"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.221" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_EMAIL}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_EMAIL}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.221" level="TRACE">Arguments: [ '"abc@def.com"' | '"abc@def.com"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.221" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.221" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.221" endtime="20250205 13:18:29.222"/>
</kw>
<msg timestamp="20250205 13:18:29.222" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.221" endtime="20250205 13:18:29.222"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.password</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.223" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.password' ]</msg>
<msg timestamp="20250205 13:18:29.224" level="INFO">Get value from JSON with expression: '$.body.password'</msg>
<msg timestamp="20250205 13:18:29.250" level="TRACE">Return: 'PASS1738750693'</msg>
<msg timestamp="20250205 13:18:29.251" level="INFO">${PAYLOAD_VALUE} = PASS1738750693</msg>
<status status="PASS" starttime="20250205 13:18:29.223" endtime="20250205 13:18:29.251"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.252" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_PASSWORD}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_PASSWORD}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.253" level="TRACE">Arguments: [ '"PASS1738750693"' | '"PASS1738750693"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.253" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.253" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.252" endtime="20250205 13:18:29.253"/>
</kw>
<msg timestamp="20250205 13:18:29.253" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.251" endtime="20250205 13:18:29.253"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.phone</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.255" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.phone' ]</msg>
<msg timestamp="20250205 13:18:29.255" level="INFO">Get value from JSON with expression: '$.body.phone'</msg>
<msg timestamp="20250205 13:18:29.282" level="TRACE">Return: '0123456789'</msg>
<msg timestamp="20250205 13:18:29.282" level="INFO">${PAYLOAD_VALUE} = 0123456789</msg>
<status status="PASS" starttime="20250205 13:18:29.255" endtime="20250205 13:18:29.282"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.285" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_PHONE}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_PHONE}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.285" level="TRACE">Arguments: [ '"0123456789"' | '"0123456789"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.286" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.286" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.285" endtime="20250205 13:18:29.286"/>
</kw>
<msg timestamp="20250205 13:18:29.286" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.283" endtime="20250205 13:18:29.286"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${PAYLOAD_VALUE}</var>
<arg>${RESPONSE}</arg>
<arg>$.body.userStatus</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.286" level="TRACE">Arguments: [ {'body': {'email': 'abc@def.com',
          'firstName': 'FIRSTNAME',
          'id': 1738750693,
          'lastName': 'LASTNAME',
          'password': 'PASS1738750693',
          'phone': '0123456789',
          'userStatus': 1,
          'username': 'USER1738750693'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:29 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5894020000000001,
 'status': 200} | '$.body.userStatus' ]</msg>
<msg timestamp="20250205 13:18:29.286" level="INFO">Get value from JSON with expression: '$.body.userStatus'</msg>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Return: 1</msg>
<msg timestamp="20250205 13:18:29.323" level="INFO">${PAYLOAD_VALUE} = 1</msg>
<status status="PASS" starttime="20250205 13:18:29.286" endtime="20250205 13:18:29.323"/>
</kw>
<kw name="Run Keyword And Warn On Failure" library="BuiltIn">
<arg>Should Be Equal As Strings</arg>
<arg>"${USER_01_USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Runs the specified keyword logs a warning if the keyword fails.</doc>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '"${USER_01_USERSTATUS}"' | '"${PAYLOAD_VALUE}"' | '\\nWARNING: Field validation failure' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${USER_01_USERSTATUS}"</arg>
<arg>"${PAYLOAD_VALUE}"</arg>
<arg>\nWARNING: Field validation failure</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Arguments: [ '"1"' | '"1"' | '\nWARNING: Field validation failure' ]</msg>
<msg timestamp="20250205 13:18:29.323" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.323" endtime="20250205 13:18:29.323"/>
</kw>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Return: ('PASS', None)</msg>
<status status="PASS" starttime="20250205 13:18:29.323" endtime="20250205 13:18:29.323"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:29.323" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.323" endtime="20250205 13:18:29.323"/>
</kw>
<doc>Test Description:Retrieve user with existing username 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:28.334" endtime="20250205 13:18:29.323"/>
</test>
<test id="s1-s3-s3-t2" name="TC_GET_user_02" line="82">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:29.333" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:29.334" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_02' ]</msg>
<msg timestamp="20250205 13:18:29.337" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_02'),
             ('Type', 'Negative'),
             ('Description', 'Retrieve user with non-existing username'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:29.337" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_02'), ('Type', 'Negative'), ('Description', 'Retrieve user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:29.334" endtime="20250205 13:18:29.337"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:29.338" level="TRACE">Arguments: [ 'Test Description:Retrieve user with non-existing username \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:29.338" level="INFO">Set test documentation to:
Test Description:Retrieve user with non-existing username 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:29.338" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:29.338" endtime="20250205 13:18:29.338"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:29.338" endtime="20250205 13:18:29.338"/>
</return>
<msg timestamp="20250205 13:18:29.338" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_02'),
             ('Type', 'Negative'),
             ('Description', 'Retrieve user with non-existing username'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:29.338" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_02'), ('Type', 'Negative'), ('Description', 'Retrieve user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:29.332" endtime="20250205 13:18:29.338"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:29.343" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:29.343" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:29.343" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:29.342" endtime="20250205 13:18:29.344"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:29.345" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:29.345" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:29.345" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:29.344" endtime="20250205 13:18:29.345"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:29.348" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:29.348" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:29.348" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:29.347" endtime="20250205 13:18:29.348"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:29.350" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:29.350" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:29.350" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:29.349" endtime="20250205 13:18:29.350"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:29.351" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:29.352" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:29.352" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:29.352" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:29.352" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:29.352" endtime="20250205 13:18:29.352"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:29.353" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:29.353" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:29.353" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:29.353" endtime="20250205 13:18:29.354"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:29.354" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:29.354" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:29.384" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:29.384" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:29.354" endtime="20250205 13:18:29.384"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:29.384" endtime="20250205 13:18:29.384"/>
</return>
<msg timestamp="20250205 13:18:29.384" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:29.384" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:29.351" endtime="20250205 13:18:29.384"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_USERNAME}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:29.384" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:29.384" level="TRACE">Return: '8b5cdbee-e3aa-11ef-b007-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:29.384" level="INFO">${NON_EXISTING_USERNAME} = 8b5cdbee-e3aa-11ef-b007-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:29.384" endtime="20250205 13:18:29.384"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${NON_EXISTING_USERNAME}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:29.384" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/8b5cdbee-e3aa-11ef-b007-744ca1d2e576' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:29.392" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:29.962" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/8b5cdbee-e3aa-11ef-b007-744ca1d2e576 HTTP/1.1" 404 None</msg>
<msg timestamp="20250205 13:18:29.972" level="TRACE">Return: {'body': {'code': 1, 'message': 'User not found', 'type': 'error'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:30 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.5785990000000001,
 'status': 404}</msg>
<msg timestamp="20250205 13:18:29.972" level="INFO">${RESPONSE} = {'seconds': 0.5785990000000001, 'status': 404, 'reason': 'Not Found', 'body': {'code': 1, 'type': 'error', 'message': 'User not found'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:30 GMT', 'Content-T...</msg>
<status status="PASS" starttime="20250205 13:18:29.384" endtime="20250205 13:18:29.972"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:29.972" level="TRACE">Arguments: [ {'body': {'code': 1, 'message': 'User not found', 'type': 'error'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:30 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.5785990000000001,
 'status': 404} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:29.972" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:30.013" level="TRACE">Return: {'code': 1, 'message': 'User not found', 'type': 'error'}</msg>
<msg timestamp="20250205 13:18:30.013" level="INFO">${RESPONSE_PAYLOAD} = {'code': 1, 'type': 'error', 'message': 'User not found'}</msg>
<status status="PASS" starttime="20250205 13:18:29.972" endtime="20250205 13:18:30.013"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:30.015" level="TRACE">Arguments: [ {'body': {'code': 1, 'message': 'User not found', 'type': 'error'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:30 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'Not Found',
 'seconds': 0.5785990000000001,
 'status': 404} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:30.015" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:30.034" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:18:30.034" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:18:30.015" endtime="20250205 13:18:30.034"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:30.044" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:30.044" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:30.044" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:30.042" endtime="20250205 13:18:30.044"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:30.046" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:30.046" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:30.045" endtime="20250205 13:18:30.047"/>
</kw>
<doc>Test Description:Retrieve user with non-existing username 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:18:29.331" endtime="20250205 13:18:30.047"/>
</test>
<test id="s1-s3-s3-t3" name="TC_GET_user_03" line="105">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:30.048" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:30.051" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_03' ]</msg>
<msg timestamp="20250205 13:18:30.054" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_03'),
             ('Type', 'Positive'),
             ('Description', 'Login  user with valid username and password'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:30.054" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_03'), ('Type', 'Positive'), ('Description', 'Login  user with valid username and password'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')...</msg>
<status status="PASS" starttime="20250205 13:18:30.048" endtime="20250205 13:18:30.054"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:30.058" level="TRACE">Arguments: [ 'Test Description:Login  user with valid username and password \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:30.058" level="INFO">Set test documentation to:
Test Description:Login  user with valid username and password 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:30.058" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:30.054" endtime="20250205 13:18:30.058"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:30.058" endtime="20250205 13:18:30.058"/>
</return>
<msg timestamp="20250205 13:18:30.059" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_03'),
             ('Type', 'Positive'),
             ('Description', 'Login  user with valid username and password'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:30.059" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_03'), ('Type', 'Positive'), ('Description', 'Login  user with valid username and password'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')...</msg>
<status status="PASS" starttime="20250205 13:18:30.048" endtime="20250205 13:18:30.059"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:30.061" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:30.061" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:30.061" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:30.060" endtime="20250205 13:18:30.061"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:30.063" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:30.063" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:30.063" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:30.062" endtime="20250205 13:18:30.063"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:30.066" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:30.066" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:30.066" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:30.065" endtime="20250205 13:18:30.066"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:30.066" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:30.066" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:30.066" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:30.066" endtime="20250205 13:18:30.066"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:30.066" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:30.072" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:30.072" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:30.072" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:30.072" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:30.071" endtime="20250205 13:18:30.072"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:30.073" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:30.073" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:30.073" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:30.073" endtime="20250205 13:18:30.074"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:30.074" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:30.075" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:30.102" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:30.102" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:30.074" endtime="20250205 13:18:30.103"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:30.103" endtime="20250205 13:18:30.103"/>
</return>
<msg timestamp="20250205 13:18:30.103" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:30.103" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:30.066" endtime="20250205 13:18:30.103"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/login?username=${USER_01_USERNAME},password=${USER_01_PASSWORD}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:30.103" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/login?username=USER1738750693,password=PASS1738750693' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:30.103" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:30.673" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/login?username=USER1738750693%2Cpassword%3DPASS1738750693 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:30.673" level="TRACE">Return: {'body': {'code': 200,
          'message': 'logged in user session:1738750710735',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:30 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:30 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.5680689999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:30.673" level="INFO">${RESPONSE} = {'seconds': 0.5680689999999999, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750710735'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:...</msg>
<status status="PASS" starttime="20250205 13:18:30.103" endtime="20250205 13:18:30.673"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:30.682" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750710735',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:30 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:30 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.5680689999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:30.682" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:30.708" level="TRACE">Return: {'code': 200,
 'message': 'logged in user session:1738750710735',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:30.708" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750710735'}</msg>
<status status="PASS" starttime="20250205 13:18:30.673" endtime="20250205 13:18:30.708"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:30.711" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750710735',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:30 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:30 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.5680689999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:30.711" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:30.737" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:30.738" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:30.711" endtime="20250205 13:18:30.738"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:30.740" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:30.740" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:30.740" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:30.739" endtime="20250205 13:18:30.740"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:30.742" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:30.742" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:30.741" endtime="20250205 13:18:30.743"/>
</kw>
<doc>Test Description:Login  user with valid username and password 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:30.048" endtime="20250205 13:18:30.744"/>
</test>
<test id="s1-s3-s3-t4" name="TC_GET_user_04" line="127">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:30.749" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:30.750" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_04' ]</msg>
<msg timestamp="20250205 13:18:30.752" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_04'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with non-existing username'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:30.753" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_04'), ('Type', 'Negative'), ('Description', 'Login  user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:30.749" endtime="20250205 13:18:30.753"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:30.755" level="TRACE">Arguments: [ 'Test Description:Login  user with non-existing username \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:30.755" level="INFO">Set test documentation to:
Test Description:Login  user with non-existing username 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:30.756" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:30.753" endtime="20250205 13:18:30.756"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:30.756" endtime="20250205 13:18:30.756"/>
</return>
<msg timestamp="20250205 13:18:30.756" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_04'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with non-existing username'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:30.757" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_04'), ('Type', 'Negative'), ('Description', 'Login  user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:30.748" endtime="20250205 13:18:30.757"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:30.759" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:30.759" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:30.760" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:30.758" endtime="20250205 13:18:30.761"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:30.762" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:30.762" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:30.762" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:30.761" endtime="20250205 13:18:30.763"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:30.765" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:30.765" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:30.766" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:30.763" endtime="20250205 13:18:30.766"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:30.768" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:30.768" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:30.768" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:30.766" endtime="20250205 13:18:30.768"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:30.770" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:30.770" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:30.771" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:30.771" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:30.771" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:30.770" endtime="20250205 13:18:30.771"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:30.772" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:30.772" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:30.772" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:30.771" endtime="20250205 13:18:30.772"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:30.773" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:30.773" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:30.803" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:30.803" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:30.772" endtime="20250205 13:18:30.803"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:30.803" endtime="20250205 13:18:30.803"/>
</return>
<msg timestamp="20250205 13:18:30.803" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:30.803" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:30.770" endtime="20250205 13:18:30.803"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_USERNAME}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:30.803" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:30.803" level="TRACE">Return: '8c35649a-e3aa-11ef-9ba2-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:30.803" level="INFO">${NON_EXISTING_USERNAME} = 8c35649a-e3aa-11ef-9ba2-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:30.803" endtime="20250205 13:18:30.803"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/login?username=${NON_EXISTING_USERNAME},password=12345</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:30.812" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/login?username=8c35649a-e3aa-11ef-9ba2-744ca1d2e576,password=12345' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:30.817" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:31.392" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/login?username=8c35649a-e3aa-11ef-9ba2-744ca1d2e576%2Cpassword%3D12345 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:31.392" level="TRACE">Return: {'body': {'code': 200,
          'message': 'logged in user session:1738750711453',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:31 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:31 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.577067,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:31.392" level="INFO">${RESPONSE} = {'seconds': 0.577067, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750711453'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:31 GMT', '...</msg>
<status status="PASS" starttime="20250205 13:18:30.803" endtime="20250205 13:18:31.392"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:31.392" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750711453',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:31 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:31 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.577067,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:31.392" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:31.424" level="TRACE">Return: {'code': 200,
 'message': 'logged in user session:1738750711453',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:31.424" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750711453'}</msg>
<status status="PASS" starttime="20250205 13:18:31.392" endtime="20250205 13:18:31.425"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:31.426" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750711453',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:31 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:31 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.577067,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:31.426" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:31.444" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:31.452" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:31.425" endtime="20250205 13:18:31.452"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:31.454" level="TRACE">Arguments: [ '"404"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:31.454" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:31.454" level="FAIL">
ERROR: Status Code is missing or incorrect: "404" != "200"</msg>
<msg timestamp="20250205 13:18:31.454" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "404" != "200"</msg>
<status status="FAIL" starttime="20250205 13:18:31.453" endtime="20250205 13:18:31.454"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:31.454" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:18:31.454" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}={'code': 200,
 'message': 'logged in user session:1738750711453',
 'type': 'unknown'} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:31.454" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:18:31.454" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:31.454" endtime="20250205 13:18:31.454"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:31.461" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750711453'}" ]</msg>
<msg timestamp="20250205 13:18:31.462" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:31.454" endtime="20250205 13:18:31.462"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:31.463" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:18:31.464" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:31.463" endtime="20250205 13:18:31.464"/>
</kw>
<msg timestamp="20250205 13:18:31.464" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:31.454" endtime="20250205 13:18:31.464"/>
</kw>
<msg timestamp="20250205 13:18:31.464" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:31.454" endtime="20250205 13:18:31.464"/>
</kw>
<doc>Test Description:Login  user with non-existing username 

 Expected Result:404 

</doc>
<status status="FAIL" starttime="20250205 13:18:30.744" endtime="20250205 13:18:31.464">
ERROR: Status Code is missing or incorrect: "404" != "200"</status>
</test>
<test id="s1-s3-s3-t5" name="TC_GET_user_05" line="150">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:31.464" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:31.464" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_05' ]</msg>
<msg timestamp="20250205 13:18:31.473" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_05'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with wrong password'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:31.473" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_05'), ('Type', 'Negative'), ('Description', 'Login  user with wrong password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:31.464" endtime="20250205 13:18:31.473"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:31.476" level="TRACE">Arguments: [ 'Test Description:Login  user with wrong password \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:31.477" level="INFO">Set test documentation to:
Test Description:Login  user with wrong password 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:31.477" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:31.473" endtime="20250205 13:18:31.477"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:31.477" endtime="20250205 13:18:31.477"/>
</return>
<msg timestamp="20250205 13:18:31.478" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_05'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with wrong password'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:31.478" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_05'), ('Type', 'Negative'), ('Description', 'Login  user with wrong password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:31.464" endtime="20250205 13:18:31.478"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:31.479" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:31.480" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:31.480" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:31.479" endtime="20250205 13:18:31.480"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:31.482" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:31.482" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:31.482" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:31.481" endtime="20250205 13:18:31.482"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:31.484" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:31.484" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:31.485" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:31.483" endtime="20250205 13:18:31.485"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:31.485" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:31.485" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:31.487" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:31.485" endtime="20250205 13:18:31.487"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:31.489" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:31.490" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:31.490" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:31.490" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:31.490" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:31.490" endtime="20250205 13:18:31.490"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:31.491" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:31.491" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:31.491" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:31.490" endtime="20250205 13:18:31.491"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:31.492" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:31.492" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:31.524" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:31.524" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:31.492" endtime="20250205 13:18:31.524"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:31.524" endtime="20250205 13:18:31.525"/>
</return>
<msg timestamp="20250205 13:18:31.525" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:31.525" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:31.488" endtime="20250205 13:18:31.525"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/login?username=${USER_01_USERNAME},password=12345</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:31.525" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/login?username=USER1738750693,password=12345' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:31.525" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:32.083" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/login?username=USER1738750693%2Cpassword%3D12345 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:32.092" level="TRACE">Return: {'body': {'code': 200,
          'message': 'logged in user session:1738750712154',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:32 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:32 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.562129,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:32.092" level="INFO">${RESPONSE} = {'seconds': 0.562129, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750712154'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:32 GMT', '...</msg>
<status status="PASS" starttime="20250205 13:18:31.525" endtime="20250205 13:18:32.092"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:32.092" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750712154',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:32 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:32 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.562129,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:32.092" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:32.125" level="TRACE">Return: {'code': 200,
 'message': 'logged in user session:1738750712154',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:32.125" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750712154'}</msg>
<status status="PASS" starttime="20250205 13:18:32.092" endtime="20250205 13:18:32.125"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:32.127" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750712154',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:32 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:32 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.562129,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:32.127" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:32.152" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:32.152" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:32.126" endtime="20250205 13:18:32.152"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:32.155" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:32.155" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:32.155" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:18:32.156" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:18:32.153" endtime="20250205 13:18:32.156"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:32.157" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:18:32.157" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}={'code': 200,
 'message': 'logged in user session:1738750712154',
 'type': 'unknown'} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:32.160" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:18:32.161" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.160" endtime="20250205 13:18:32.161"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:32.162" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750712154'}" ]</msg>
<msg timestamp="20250205 13:18:32.163" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.161" endtime="20250205 13:18:32.163"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:32.163" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:18:32.163" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.163" endtime="20250205 13:18:32.163"/>
</kw>
<msg timestamp="20250205 13:18:32.166" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.157" endtime="20250205 13:18:32.166"/>
</kw>
<msg timestamp="20250205 13:18:32.166" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.157" endtime="20250205 13:18:32.166"/>
</kw>
<doc>Test Description:Login  user with wrong password 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:18:31.464" endtime="20250205 13:18:32.168">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s3-s3-t6" name="TC_GET_user_06" line="172">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:32.168" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:32.171" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_06' ]</msg>
<msg timestamp="20250205 13:18:32.173" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_06'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with missing username'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:32.174" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_06'), ('Type', 'Negative'), ('Description', 'Login  user with missing username'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:32.168" endtime="20250205 13:18:32.174"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:32.177" level="TRACE">Arguments: [ 'Test Description:Login  user with missing username \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:32.177" level="INFO">Set test documentation to:
Test Description:Login  user with missing username 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:32.177" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.174" endtime="20250205 13:18:32.177"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:32.177" endtime="20250205 13:18:32.178"/>
</return>
<msg timestamp="20250205 13:18:32.178" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_06'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with missing username'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:32.178" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_06'), ('Type', 'Negative'), ('Description', 'Login  user with missing username'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:32.168" endtime="20250205 13:18:32.178"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:32.179" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:32.179" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:32.179" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:32.179" endtime="20250205 13:18:32.181"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:32.182" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:32.182" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:32.182" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:32.181" endtime="20250205 13:18:32.182"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:32.184" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:32.184" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:32.185" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:32.183" endtime="20250205 13:18:32.185"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:32.187" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:32.187" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:32.187" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:32.185" endtime="20250205 13:18:32.187"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:32.190" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:32.190" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:32.190" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:32.190" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:32.190" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:32.190" endtime="20250205 13:18:32.190"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:32.191" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:32.191" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:32.192" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:32.191" endtime="20250205 13:18:32.192"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:32.193" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:32.193" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:32.223" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:32.223" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:32.192" endtime="20250205 13:18:32.223"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:32.223" endtime="20250205 13:18:32.223"/>
</return>
<msg timestamp="20250205 13:18:32.223" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:32.223" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:32.187" endtime="20250205 13:18:32.223"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/login?password=12345</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:32.231" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/login?password=12345' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:32.235" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:32.783" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/login?password=12345 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:32.783" level="TRACE">Return: {'body': {'code': 200,
          'message': 'logged in user session:1738750712851',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:32 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:32 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.552947,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:32.783" level="INFO">${RESPONSE} = {'seconds': 0.552947, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750712851'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:32 GMT', '...</msg>
<status status="PASS" starttime="20250205 13:18:32.223" endtime="20250205 13:18:32.791"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:32.792" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750712851',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:32 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:32 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.552947,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:32.792" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:32.819" level="TRACE">Return: {'code': 200,
 'message': 'logged in user session:1738750712851',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:32.819" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750712851'}</msg>
<status status="PASS" starttime="20250205 13:18:32.792" endtime="20250205 13:18:32.820"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:32.821" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750712851',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:32 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:32 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.552947,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:32.821" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:32.847" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:32.848" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:32.821" endtime="20250205 13:18:32.848"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:32.851" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:32.851" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:32.851" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:18:32.852" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:18:32.849" endtime="20250205 13:18:32.852"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:32.854" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:18:32.854" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}={'code': 200,
 'message': 'logged in user session:1738750712851',
 'type': 'unknown'} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:32.854" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:18:32.854" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.854" endtime="20250205 13:18:32.854"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:32.858" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750712851'}" ]</msg>
<msg timestamp="20250205 13:18:32.858" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.858" endtime="20250205 13:18:32.861"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:32.861" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:18:32.861" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.861" endtime="20250205 13:18:32.862"/>
</kw>
<msg timestamp="20250205 13:18:32.862" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.854" endtime="20250205 13:18:32.862"/>
</kw>
<msg timestamp="20250205 13:18:32.862" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.854" endtime="20250205 13:18:32.862"/>
</kw>
<doc>Test Description:Login  user with missing username 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:18:32.168" endtime="20250205 13:18:32.863">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s3-s3-t7" name="TC_GET_user_07" line="191">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:32.865" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:32.868" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_07' ]</msg>
<msg timestamp="20250205 13:18:32.870" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_07'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with missing  password'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:32.871" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_07'), ('Type', 'Negative'), ('Description', 'Login  user with missing  password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:32.865" endtime="20250205 13:18:32.871"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:32.873" level="TRACE">Arguments: [ 'Test Description:Login  user with missing  password \n\n Expected Result:405 \n\n' ]</msg>
<msg timestamp="20250205 13:18:32.874" level="INFO">Set test documentation to:
Test Description:Login  user with missing  password 

 Expected Result:405 

</msg>
<msg timestamp="20250205 13:18:32.874" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:32.871" endtime="20250205 13:18:32.874"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:32.874" endtime="20250205 13:18:32.874"/>
</return>
<msg timestamp="20250205 13:18:32.875" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_07'),
             ('Type', 'Negative'),
             ('Description', 'Login  user with missing  password'),
             ('ExpectedHTTPResponseStatusCode', '405'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:32.875" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_07'), ('Type', 'Negative'), ('Description', 'Login  user with missing  password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:32.865" endtime="20250205 13:18:32.875"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:32.877" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:32.877" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:32.877" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:32.876" endtime="20250205 13:18:32.877"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:32.881" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:32.881" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:32.881" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:32.880" endtime="20250205 13:18:32.881"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:32.883" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:32.883" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:32.884" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:32.882" endtime="20250205 13:18:32.884"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:32.885" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:32.885" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:32.885" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:32.884" endtime="20250205 13:18:32.886"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:32.886" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:32.886" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:32.886" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:32.886" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:32.886" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:32.886" endtime="20250205 13:18:32.886"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:32.890" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:32.890" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:32.890" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:32.889" endtime="20250205 13:18:32.890"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:32.891" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:32.891" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:32.952" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:32.952" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:32.891" endtime="20250205 13:18:32.952"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:32.952" endtime="20250205 13:18:32.952"/>
</return>
<msg timestamp="20250205 13:18:32.952" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:32.952" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:32.886" endtime="20250205 13:18:32.952"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/login?username=${USER_01_USERNAME}</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:32.952" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/login?username=USER1738750693' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:32.952" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:33.512" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/login?username=USER1738750693 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:33.512" level="TRACE">Return: {'body': {'code': 200,
          'message': 'logged in user session:1738750713578',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:33 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:33 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.5559740000000001,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:33.512" level="INFO">${RESPONSE} = {'seconds': 0.5559740000000001, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750713578'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:...</msg>
<status status="PASS" starttime="20250205 13:18:32.952" endtime="20250205 13:18:33.512"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:33.512" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750713578',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:33 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:33 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.5559740000000001,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:33.512" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:33.546" level="TRACE">Return: {'code': 200,
 'message': 'logged in user session:1738750713578',
 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:33.546" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750713578'}</msg>
<status status="PASS" starttime="20250205 13:18:33.512" endtime="20250205 13:18:33.546"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:33.548" level="TRACE">Arguments: [ {'body': {'code': 200,
          'message': 'logged in user session:1738750713578',
          'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:33 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked',
             'X-Expires-After': 'Wed Feb 05 11:18:33 UTC 2025',
             'X-Rate-Limit': '5000'},
 'reason': 'OK',
 'seconds': 0.5559740000000001,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:33.548" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:33.573" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:33.573" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:33.547" endtime="20250205 13:18:33.573"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:33.576" level="TRACE">Arguments: [ '"405"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:33.577" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:33.577" level="FAIL">
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<msg timestamp="20250205 13:18:33.578" level="DEBUG">Traceback (most recent call last):
  None
AssertionError: 
ERROR: Status Code is missing or incorrect: "405" != "200"</msg>
<status status="FAIL" starttime="20250205 13:18:33.575" endtime="20250205 13:18:33.578"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:33.578" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<kw name="TestCase Teardown" library="automationKeywords">
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<tag>teardown</tag>
<doc>TestCase teardown.</doc>
<msg timestamp="20250205 13:18:33.578" level="TRACE">Arguments: [ ${REQUEST_PAYLOAD}='' | ${RESPONSE_PAYLOAD}={'code': 200,
 'message': 'logged in user session:1738750713578',
 'type': 'unknown'} | ${RESPONSE_STATUS}=200 ]</msg>
<kw name="Log To Console" library="BuiltIn">
<arg>\nREQUEST PAYLOAD${SPACE}${SPACE}:${SPACE}${REQUEST_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:33.581" level="TRACE">Arguments: [ '\nREQUEST PAYLOAD  : ' ]</msg>
<msg timestamp="20250205 13:18:33.581" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:33.578" endtime="20250205 13:18:33.582"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE PAYLOAD${SPACE}:${SPACE}${RESPONSE_PAYLOAD}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:33.583" level="TRACE">Arguments: [ "RESPONSE PAYLOAD : {'code': 200, 'type': 'unknown', 'message': 'logged in user session:1738750713578'}" ]</msg>
<msg timestamp="20250205 13:18:33.583" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:33.583" endtime="20250205 13:18:33.583"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>RESPONSE STATUS${SPACE}${SPACE}:${SPACE}${RESPONSE_STATUS}</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20250205 13:18:33.586" level="TRACE">Arguments: [ 'RESPONSE STATUS  : 200' ]</msg>
<msg timestamp="20250205 13:18:33.586" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:33.583" endtime="20250205 13:18:33.587"/>
</kw>
<msg timestamp="20250205 13:18:33.587" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:33.578" endtime="20250205 13:18:33.587"/>
</kw>
<msg timestamp="20250205 13:18:33.587" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:33.578" endtime="20250205 13:18:33.587"/>
</kw>
<doc>Test Description:Login  user with missing  password 

 Expected Result:405 

</doc>
<status status="FAIL" starttime="20250205 13:18:32.865" endtime="20250205 13:18:33.587">
ERROR: Status Code is missing or incorrect: "405" != "200"</status>
</test>
<test id="s1-s3-s3-t8" name="TC_GET_user_08" line="213">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:33.591" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:33.591" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_GET_user_08' ]</msg>
<msg timestamp="20250205 13:18:33.594" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_08'),
             ('Type', 'Positive'),
             ('Description', 'Logout user'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:33.594" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_08'), ('Type', 'Positive'), ('Description', 'Logout user'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:33.591" endtime="20250205 13:18:33.594"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:33.596" level="TRACE">Arguments: [ 'Test Description:Logout user \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:33.597" level="INFO">Set test documentation to:
Test Description:Logout user 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:33.597" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:33.595" endtime="20250205 13:18:33.597"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:33.597" endtime="20250205 13:18:33.597"/>
</return>
<msg timestamp="20250205 13:18:33.598" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_GET_user_08'),
             ('Type', 'Positive'),
             ('Description', 'Logout user'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:33.598" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_GET_user_08'), ('Type', 'Positive'), ('Description', 'Logout user'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:33.587" endtime="20250205 13:18:33.598"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:33.600" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:33.600" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:33.600" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:33.599" endtime="20250205 13:18:33.600"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:33.602" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:33.602" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:33.603" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:33.601" endtime="20250205 13:18:33.603"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:33.605" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:33.605" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:33.605" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:33.604" endtime="20250205 13:18:33.606"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${REQUEST_HEADERS}</var>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Return: {}</msg>
<msg timestamp="20250205 13:18:33.606" level="INFO">${REQUEST_HEADERS} = {}</msg>
<status status="PASS" starttime="20250205 13:18:33.606" endtime="20250205 13:18:33.606"/>
</kw>
<kw name="Add To Headers" library="automationKeywords">
<var>${REQUEST_HEADERS}</var>
<arg>${REQUEST_HEADERS}</arg>
<arg>Accept</arg>
<arg>application/json</arg>
<doc>Adds key=value to header.</doc>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Arguments: [ ${HEADERS}={} | ${KEY}='Accept' | ${VALUE}='application/json' ]</msg>
<kw name="Convert To String" library="BuiltIn">
<var>${VALUE}</var>
<arg>${VALUE}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Arguments: [ 'application/json' ]</msg>
<msg timestamp="20250205 13:18:33.606" level="DEBUG">Argument types are:
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Return: 'application/json'</msg>
<msg timestamp="20250205 13:18:33.606" level="INFO">${VALUE} = application/json</msg>
<status status="PASS" starttime="20250205 13:18:33.606" endtime="20250205 13:18:33.606"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${HEADER_TO_ADD}</var>
<arg>${KEY}=${VALUE}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Arguments: [ '${KEY}=${VALUE}' ]</msg>
<msg timestamp="20250205 13:18:33.606" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:33.606" level="INFO">${HEADER_TO_ADD} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:33.606" endtime="20250205 13:18:33.606"/>
</kw>
<kw name="Add to JSON" library="RPA.JSON">
<var>${HEADERS}</var>
<arg>${HEADERS}</arg>
<arg>$</arg>
<arg>${HEADER_TO_ADD}</arg>
<doc>Add items into a JSON serializable object and return the result.</doc>
<msg timestamp="20250205 13:18:33.611" level="TRACE">Arguments: [ {} | '$' | {'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:33.612" level="INFO">Add to JSON with expression: '$'</msg>
<msg timestamp="20250205 13:18:33.637" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:33.637" level="INFO">${HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:33.611" endtime="20250205 13:18:33.637"/>
</kw>
<return>
<value>${HEADERS}</value>
<status status="PASS" starttime="20250205 13:18:33.637" endtime="20250205 13:18:33.637"/>
</return>
<msg timestamp="20250205 13:18:33.637" level="TRACE">Return: {'Accept': 'application/json'}</msg>
<msg timestamp="20250205 13:18:33.637" level="INFO">${REQUEST_HEADERS} = {'Accept': 'application/json'}</msg>
<status status="PASS" starttime="20250205 13:18:33.606" endtime="20250205 13:18:33.637"/>
</kw>
<kw name="GET" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/logout</arg>
<arg>validate=True</arg>
<arg>headers=${REQUEST_HEADERS}</arg>
<tag>http</tag>
<doc>*Sends a GET request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:33.644" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/logout' | validate=True | headers={'Accept': 'application/json'} ]</msg>
<msg timestamp="20250205 13:18:33.644" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:34.213" level="DEBUG">https://petstore.swagger.io:443 "GET /v2/user/logout HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:34.221" level="TRACE">Return: {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:34 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5729829999999999,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:34.222" level="INFO">${RESPONSE} = {'seconds': 0.5729829999999999, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'ok'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:34 GMT', 'Content-Type': 'applicat...</msg>
<status status="PASS" starttime="20250205 13:18:33.642" endtime="20250205 13:18:34.222"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${RESPONSE}</arg>
<arg>$.body</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:34.222" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:34 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5729829999999999,
 'status': 200} | '$.body' ]</msg>
<msg timestamp="20250205 13:18:34.222" level="INFO">Get value from JSON with expression: '$.body'</msg>
<msg timestamp="20250205 13:18:34.250" level="TRACE">Return: {'code': 200, 'message': 'ok', 'type': 'unknown'}</msg>
<msg timestamp="20250205 13:18:34.250" level="INFO">${RESPONSE_PAYLOAD} = {'code': 200, 'type': 'unknown', 'message': 'ok'}</msg>
<status status="PASS" starttime="20250205 13:18:34.222" endtime="20250205 13:18:34.252"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:34.253" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'ok', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:34 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.5729829999999999,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:34.254" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:34.278" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:34.279" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:34.252" endtime="20250205 13:18:34.279"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:34.281" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:34.282" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:34.282" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.280" endtime="20250205 13:18:34.282"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:34.283" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:34.283" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.283" endtime="20250205 13:18:34.283"/>
</kw>
<doc>Test Description:Logout user 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:33.587" endtime="20250205 13:18:34.283"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:34.283" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:34.289" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:34.289" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.289" endtime="20250205 13:18:34.290"/>
</kw>
<msg timestamp="20250205 13:18:34.290" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.283" endtime="20250205 13:18:34.290"/>
</kw>
<status status="FAIL" starttime="20250205 13:18:28.314" endtime="20250205 13:18:34.290"/>
</suite>
<suite id="s1-s3-s4" name="04 DELETE user" source="c:\Users\kalaycioglus\Documents\GitHub\Sabri KalayciogluAPITask\testsuites\user\04_DELETE_user.robot">
<kw name="Scenario Setup" library="automationKeywords" type="SETUP">
<arg>${TESTDATA_FILENAME}</arg>
<doc>Setup scenario items.</doc>
<msg timestamp="20250205 13:18:34.303" level="TRACE">Arguments: [ ${CSVFILE}='user.csv' ]</msg>
<kw name="Set Log Level" library="BuiltIn">
<arg>TRACE</arg>
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<msg timestamp="20250205 13:18:34.303" level="TRACE">Arguments: [ 'TRACE' ]</msg>
<msg timestamp="20250205 13:18:34.303" level="INFO">Log level changed from TRACE to TRACE.</msg>
<msg timestamp="20250205 13:18:34.304" level="TRACE">Return: 'TRACE'</msg>
<status status="PASS" starttime="20250205 13:18:34.303" endtime="20250205 13:18:34.304"/>
</kw>
<kw name="Readcsv Data Dict" library="utils">
<var>${TESTDATA}</var>
<arg>${TESTCASES_PATH}</arg>
<arg>${CSVFILE}</arg>
<doc>Reads CSV data into dictionary from given pathCsv and sheetCsv.</doc>
<msg timestamp="20250205 13:18:34.304" level="TRACE">Arguments: [ 'C:\\Users\\kalaycioglus\\Documents\\GitHub\\Sabri KalayciogluAPITask/testcases' | 'user.csv' ]</msg>
<msg timestamp="20250205 13:18:34.307" level="INFO">OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_02'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload having no id field'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_03'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_04'), ('Type', 'Negative'), ('Description', 'Create user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_POST_user_05'), ('Type', 'Negative'), ('Description', 'Create user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_06'), ('Type', 'Positive'), ('Description', 'Create user [createWithArray] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_07'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithArray] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_08'), ('Type', 'Negative'), ('Description', 'Create user [createWithArray]  with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_POST_user_09'), ('Type', 'Positive'), ('Description', 'Create user [createWithList] with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')])
OrderedDict([('TestCaseID', 'TC_POST_user_10'), ('Type', 'Positive'), ('Description', 'Create list of users [createWithList] with valid JSON payloads'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')])
OrderedDict([('TestCaseID', 'TC_POST_user_11'), ('Type', 'Negative'), ('Description', 'Create user [createWithList] with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_PUT_user_01'), ('Type', 'Positive'), ('Description', 'Update an existing user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_02'), ('Type', 'Positive'), ('Description', 'Create user by providing non-existing username to in update request payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_03'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid id'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_04'), ('Type', 'Negative'), ('Description', 'Update user with payload having invalid status'), ('ExpectedHTTPResponseStatusCode', '500'), ('Request Payload', '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')])
OrderedDict([('TestCaseID', 'TC_PUT_user_05'), ('Type', 'Negative'), ('Description', 'Update user with no payload'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_01'), ('Type', 'Positive'), ('Description', 'Retrieve user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_02'), ('Type', 'Negative'), ('Description', 'Retrieve user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_03'), ('Type', 'Positive'), ('Description', 'Login  user with valid username and password'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_04'), ('Type', 'Negative'), ('Description', 'Login  user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_05'), ('Type', 'Negative'), ('Description', 'Login  user with wrong password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_06'), ('Type', 'Negative'), ('Description', 'Login  user with missing username'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_07'), ('Type', 'Negative'), ('Description', 'Login  user with missing  password'), ('ExpectedHTTPResponseStatusCode', '405'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_GET_user_08'), ('Type', 'Positive'), ('Description', 'Logout user'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_01'), ('Type', 'Positive'), ('Description', 'Delete user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])
OrderedDict([('TestCaseID', 'TC_DELETE_user_02'), ('Type', 'Negative'), ('Description', 'Delete user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:34.307" level="TRACE">Return: [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])]</msg>
<msg timestamp="20250205 13:18:34.309" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<status status="PASS" starttime="20250205 13:18:34.304" endtime="20250205 13:18:34.310"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${TESTDATA}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20250205 13:18:34.311" level="TRACE">Arguments: [ '${TESTDATA}' ]</msg>
<msg timestamp="20250205 13:18:34.311" level="INFO">${TESTDATA} = [OrderedDict([('TestCaseID', 'TC_POST_user_01'), ('Type', 'Positive'), ('Description', 'Create user with valid JSON payload'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '{\n  "id"...</msg>
<msg timestamp="20250205 13:18:34.311" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.311" endtime="20250205 13:18:34.311"/>
</kw>
<msg timestamp="20250205 13:18:34.312" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.302" endtime="20250205 13:18:34.312"/>
</kw>
<test id="s1-s3-s4-t1" name="TC_DELETE_user_01" line="15">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:34.313" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:34.314" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_DELETE_user_01' ]</msg>
<msg timestamp="20250205 13:18:34.315" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Delete user with existing username'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:34.315" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_user_01'), ('Type', 'Positive'), ('Description', 'Delete user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:34.314" endtime="20250205 13:18:34.315"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:34.315" level="TRACE">Arguments: [ 'Test Description:Delete user with existing username \n\n Expected Result:200 \n\n' ]</msg>
<msg timestamp="20250205 13:18:34.315" level="INFO">Set test documentation to:
Test Description:Delete user with existing username 

 Expected Result:200 

</msg>
<msg timestamp="20250205 13:18:34.315" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.315" endtime="20250205 13:18:34.315"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:34.315" endtime="20250205 13:18:34.315"/>
</return>
<msg timestamp="20250205 13:18:34.315" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
             ('Type', 'Positive'),
             ('Description', 'Delete user with existing username'),
             ('ExpectedHTTPResponseStatusCode', '200'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:34.315" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_user_01'), ('Type', 'Positive'), ('Description', 'Delete user with existing username'), ('ExpectedHTTPResponseStatusCode', '200'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:34.313" endtime="20250205 13:18:34.315"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:34.323" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:34.324" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:34.324" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:34.322" endtime="20250205 13:18:34.324"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:34.325" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:34.327" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:34.328" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:34.325" endtime="20250205 13:18:34.328"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:34.329" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:34.329" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:34.330" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:34.328" endtime="20250205 13:18:34.330"/>
</kw>
<kw name="DELETE" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${USER_01_USERNAME}</arg>
<arg>validate=True</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:34.332" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/USER1738750693' | validate=True ]</msg>
<msg timestamp="20250205 13:18:34.334" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:34.882" level="DEBUG">https://petstore.swagger.io:443 "DELETE /v2/user/USER1738750693 HTTP/1.1" 200 None</msg>
<msg timestamp="20250205 13:18:34.892" level="TRACE">Return: {'body': {'code': 200, 'message': 'USER1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:34 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.557163,
 'status': 200}</msg>
<msg timestamp="20250205 13:18:34.892" level="INFO">${RESPONSE} = {'seconds': 0.557163, 'status': 200, 'reason': 'OK', 'body': {'code': 200, 'type': 'unknown', 'message': 'USER1738750693'}, 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:34 GMT', 'Content-Type': 'applic...</msg>
<status status="PASS" starttime="20250205 13:18:34.331" endtime="20250205 13:18:34.892"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:34.892" level="TRACE">Arguments: [ {'body': {'code': 200, 'message': 'USER1738750693', 'type': 'unknown'},
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Type': 'application/json',
             'Date': 'Wed, 05 Feb 2025 10:18:34 GMT',
             'Server': 'Jetty(9.2.9.v20150224)',
             'Transfer-Encoding': 'chunked'},
 'reason': 'OK',
 'seconds': 0.557163,
 'status': 200} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:34.892" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:34.931" level="TRACE">Return: 200</msg>
<msg timestamp="20250205 13:18:34.931" level="INFO">${RESPONSE_STATUS} = 200</msg>
<status status="PASS" starttime="20250205 13:18:34.892" endtime="20250205 13:18:34.931"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:34.933" level="TRACE">Arguments: [ '"200"' | '"200"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:34.933" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:34.933" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.931" endtime="20250205 13:18:34.933"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:34.933" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:34.933" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.933" endtime="20250205 13:18:34.933"/>
</kw>
<doc>Test Description:Delete user with existing username 

 Expected Result:200 

</doc>
<status status="PASS" starttime="20250205 13:18:34.312" endtime="20250205 13:18:34.933"/>
</test>
<test id="s1-s3-s4-t2" name="TC_DELETE_user_02" line="30">
<kw name="Test Setup" library="automationKeywords">
<var>${CASEDATA}</var>
<doc>Read CSV data and prepare test case.</doc>
<msg timestamp="20250205 13:18:34.940" level="TRACE">Arguments: [  ]</msg>
<kw name="Get CSV Data By Test Id" library="utils">
<var>${CASEDATA}</var>
<arg>${TESTDATA}</arg>
<arg>${TESTNAME}</arg>
<doc>Returns all the columns data in csv filter by test_id.
Return :  A Dictionary variable</doc>
<msg timestamp="20250205 13:18:34.941" level="TRACE">Arguments: [ [OrderedDict([('TestCaseID', 'TC_POST_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Create user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user with valid JSON payload having no id field'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Create user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Create user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_06'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithArray] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_07'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithArray] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_08'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithArray]  with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_09'),
              ('Type', 'Positive'),
              ('Description',
               'Create user [createWithList] with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }\n]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_10'),
              ('Type', 'Positive'),
              ('Description',
               'Create list of users [createWithList] with valid JSON payloads'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '[\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  },\n  {\n    "id": 0,\n    "username": "string",\n    "firstName": "string",\n    "lastName": "string",\n    "email": "string",\n    "password": "string",\n    "phone": "string",\n    "userStatus": 0\n  }]')]),
 OrderedDict([('TestCaseID', 'TC_POST_user_11'),
              ('Type', 'Negative'),
              ('Description', 'Create user [createWithList] with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_01'),
              ('Type', 'Positive'),
              ('Description',
               'Update an existing user with valid JSON payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_02'),
              ('Type', 'Positive'),
              ('Description',
               'Create user by providing non-existing username to in update request payload'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_03'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid id'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": "invalidId",\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": 0\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Update user with payload having invalid status'),
              ('ExpectedHTTPResponseStatusCode', '500'),
              ('Request Payload',
               '{\n  "id": 0,\n  "username": "string",\n  "firstName": "string",\n  "lastName": "string",\n  "email": "string",\n  "password": "string",\n  "phone": "string",\n  "userStatus": "invalidStatus"\n}')]),
 OrderedDict([('TestCaseID', 'TC_PUT_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Update user with no payload'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Retrieve user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Retrieve user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_03'),
              ('Type', 'Positive'),
              ('Description', 'Login  user with valid username and password'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_04'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_05'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with wrong password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_06'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing username'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_07'),
              ('Type', 'Negative'),
              ('Description', 'Login  user with missing  password'),
              ('ExpectedHTTPResponseStatusCode', '405'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_GET_user_08'),
              ('Type', 'Positive'),
              ('Description', 'Logout user'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_01'),
              ('Type', 'Positive'),
              ('Description', 'Delete user with existing username'),
              ('ExpectedHTTPResponseStatusCode', '200'),
              ('Request Payload', '')]),
 OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
              ('Type', 'Negative'),
              ('Description', 'Delete user with non-existing username'),
              ('ExpectedHTTPResponseStatusCode', '404'),
              ('Request Payload', '')])] | 'TC_DELETE_user_02' ]</msg>
<msg timestamp="20250205 13:18:34.944" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
             ('Type', 'Negative'),
             ('Description', 'Delete user with non-existing username'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:34.944" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_user_02'), ('Type', 'Negative'), ('Description', 'Delete user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:34.941" endtime="20250205 13:18:34.944"/>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<arg>Test Description:${CASEDATA["Description"]} \n\n Expected Result:${CASEDATA["ExpectedHTTPResponseStatusCode"]} \n\n</arg>
<doc>Sets documentation for the current test case.</doc>
<msg timestamp="20250205 13:18:34.944" level="TRACE">Arguments: [ 'Test Description:Delete user with non-existing username \n\n Expected Result:404 \n\n' ]</msg>
<msg timestamp="20250205 13:18:34.944" level="INFO">Set test documentation to:
Test Description:Delete user with non-existing username 

 Expected Result:404 

</msg>
<msg timestamp="20250205 13:18:34.944" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:34.944" endtime="20250205 13:18:34.944"/>
</kw>
<return>
<value>${CASEDATA}</value>
<status status="PASS" starttime="20250205 13:18:34.944" endtime="20250205 13:18:34.944"/>
</return>
<msg timestamp="20250205 13:18:34.944" level="TRACE">Return: OrderedDict([('TestCaseID', 'TC_DELETE_user_02'),
             ('Type', 'Negative'),
             ('Description', 'Delete user with non-existing username'),
             ('ExpectedHTTPResponseStatusCode', '404'),
             ('Request Payload', '')])</msg>
<msg timestamp="20250205 13:18:34.944" level="INFO">${CASEDATA} = OrderedDict([('TestCaseID', 'TC_DELETE_user_02'), ('Type', 'Negative'), ('Description', 'Delete user with non-existing username'), ('ExpectedHTTPResponseStatusCode', '404'), ('Request Payload', '')])</msg>
<status status="PASS" starttime="20250205 13:18:34.940" endtime="20250205 13:18:34.944"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${REQUEST_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:34.944" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:34.944" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:34.944" level="INFO">${REQUEST_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:34.944" endtime="20250205 13:18:34.944"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_PAYLOAD}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:34.952" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:34.953" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:34.953" level="INFO">${RESPONSE_PAYLOAD} = </msg>
<status status="PASS" starttime="20250205 13:18:34.951" endtime="20250205 13:18:34.953"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${RESPONSE_STATUS}</var>
<arg>${EMPTY}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20250205 13:18:34.956" level="TRACE">Arguments: [ '' ]</msg>
<msg timestamp="20250205 13:18:34.956" level="TRACE">Return: ''</msg>
<msg timestamp="20250205 13:18:34.956" level="INFO">${RESPONSE_STATUS} = </msg>
<status status="PASS" starttime="20250205 13:18:34.955" endtime="20250205 13:18:34.956"/>
</kw>
<kw name="Generate UUID" library="utils">
<var>${NON_EXISTING_USERNAME}</var>
<doc>Generates UUID.</doc>
<msg timestamp="20250205 13:18:34.958" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:34.958" level="TRACE">Return: '8eaf5694-e3aa-11ef-8043-744ca1d2e576'</msg>
<msg timestamp="20250205 13:18:34.958" level="INFO">${NON_EXISTING_USERNAME} = 8eaf5694-e3aa-11ef-8043-744ca1d2e576</msg>
<status status="PASS" starttime="20250205 13:18:34.957" endtime="20250205 13:18:34.958"/>
</kw>
<kw name="DELETE" library="REST">
<var>${RESPONSE}</var>
<arg>${BASE_URL}/${RESOURCE}/${NON_EXISTING_USERNAME}</arg>
<arg>validate=True</arg>
<tag>http</tag>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<msg timestamp="20250205 13:18:34.959" level="TRACE">Arguments: [ 'https://petstore.swagger.io/v2/user/8eaf5694-e3aa-11ef-8043-744ca1d2e576' | validate=True ]</msg>
<msg timestamp="20250205 13:18:34.962" level="DEBUG">Starting new HTTPS connection (1): petstore.swagger.io:443</msg>
<msg timestamp="20250205 13:18:35.504" level="DEBUG">https://petstore.swagger.io:443 "DELETE /v2/user/8eaf5694-e3aa-11ef-8043-744ca1d2e576 HTTP/1.1" 404 0</msg>
<msg timestamp="20250205 13:18:35.512" level="TRACE">Return: {'body': '',
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Length': '0',
             'Date': 'Wed, 05 Feb 2025 10:18:35 GMT',
             'Server': 'Jetty(9.2.9.v20150224)'},
 'reason': 'Not Found',
 'seconds': 0.54972,
 'status': 404}</msg>
<msg timestamp="20250205 13:18:35.512" level="INFO">${RESPONSE} = {'seconds': 0.54972, 'status': 404, 'reason': 'Not Found', 'body': '', 'headers': {'Date': 'Wed, 05 Feb 2025 10:18:35 GMT', 'Content-Length': '0', 'Connection': 'keep-alive', 'Access-Control-Allow-Ori...</msg>
<status status="PASS" starttime="20250205 13:18:34.959" endtime="20250205 13:18:35.512"/>
</kw>
<kw name="Get value from JSON" library="RPA.JSON">
<var>${RESPONSE_STATUS}</var>
<arg>${RESPONSE}</arg>
<arg>$.status</arg>
<doc>Get a single value from a JSON serializable object that matches the given expression.</doc>
<msg timestamp="20250205 13:18:35.512" level="TRACE">Arguments: [ {'body': '',
 'headers': {'Access-Control-Allow-Headers': 'Content-Type, api_key, Authorization',
             'Access-Control-Allow-Methods': 'GET, POST, DELETE, PUT',
             'Access-Control-Allow-Origin': '*',
             'Connection': 'keep-alive',
             'Content-Length': '0',
             'Date': 'Wed, 05 Feb 2025 10:18:35 GMT',
             'Server': 'Jetty(9.2.9.v20150224)'},
 'reason': 'Not Found',
 'seconds': 0.54972,
 'status': 404} | '$.status' ]</msg>
<msg timestamp="20250205 13:18:35.512" level="INFO">Get value from JSON with expression: '$.status'</msg>
<msg timestamp="20250205 13:18:35.542" level="TRACE">Return: 404</msg>
<msg timestamp="20250205 13:18:35.543" level="INFO">${RESPONSE_STATUS} = 404</msg>
<status status="PASS" starttime="20250205 13:18:35.512" endtime="20250205 13:18:35.543"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>"${CASEDATA["ExpectedHTTPResponseStatusCode"]}"</arg>
<arg>"${RESPONSE_STATUS}"</arg>
<arg>\nERROR: Status Code is missing or incorrect</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20250205 13:18:35.544" level="TRACE">Arguments: [ '"404"' | '"404"' | '\nERROR: Status Code is missing or incorrect' ]</msg>
<msg timestamp="20250205 13:18:35.544" level="DEBUG">Argument types are:
&lt;class 'str'&gt;
&lt;class 'str'&gt;</msg>
<msg timestamp="20250205 13:18:35.546" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:35.544" endtime="20250205 13:18:35.546"/>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn" type="TEARDOWN">
<arg>TestCase Teardown</arg>
<arg>${REQUEST_PAYLOAD}</arg>
<arg>${RESPONSE_PAYLOAD}</arg>
<arg>${RESPONSE_STATUS}</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20250205 13:18:35.547" level="TRACE">Arguments: [ 'TestCase Teardown' | '${REQUEST_PAYLOAD}' | '${RESPONSE_PAYLOAD}' | '${RESPONSE_STATUS}' ]</msg>
<msg timestamp="20250205 13:18:35.547" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:35.546" endtime="20250205 13:18:35.547"/>
</kw>
<doc>Test Description:Delete user with non-existing username 

 Expected Result:404 

</doc>
<status status="PASS" starttime="20250205 13:18:34.933" endtime="20250205 13:18:35.548"/>
</test>
<kw name="Scenario Teardown" library="automationKeywords" type="TEARDOWN">
<doc>Scenario teardown.</doc>
<msg timestamp="20250205 13:18:35.551" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20250205 13:18:35.551" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20250205 13:18:35.551" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:35.551" endtime="20250205 13:18:35.551"/>
</kw>
<msg timestamp="20250205 13:18:35.552" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20250205 13:18:35.550" endtime="20250205 13:18:35.552"/>
</kw>
<status status="PASS" starttime="20250205 13:18:34.293" endtime="20250205 13:18:35.552"/>
</suite>
<status status="FAIL" starttime="20250205 13:18:13.545" endtime="20250205 13:18:35.555"/>
</suite>
<status status="FAIL" starttime="20250205 13:17:43.103" endtime="20250205 13:18:35.563"/>
</suite>
<statistics>
<total>
<stat pass="47" fail="15" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="47" fail="15" skip="0" id="s1" name="Testsuites">Testsuites</stat>
<stat pass="15" fail="9" skip="0" id="s1-s1" name="Pet">Testsuites.Pet</stat>
<stat pass="6" fail="6" skip="0" id="s1-s1-s1" name="01 POST pet">Testsuites.Pet.01 POST pet</stat>
<stat pass="3" fail="3" skip="0" id="s1-s1-s2" name="02 PUT pet">Testsuites.Pet.02 PUT pet</stat>
<stat pass="4" fail="0" skip="0" id="s1-s1-s3" name="03 GET pet">Testsuites.Pet.03 GET pet</stat>
<stat pass="2" fail="0" skip="0" id="s1-s1-s4" name="04 DELETE pet">Testsuites.Pet.04 DELETE pet</stat>
<stat pass="10" fail="2" skip="0" id="s1-s2" name="Store">Testsuites.Store</stat>
<stat pass="5" fail="2" skip="0" id="s1-s2-s1" name="01 POST store">Testsuites.Store.01 POST store</stat>
<stat pass="3" fail="0" skip="0" id="s1-s2-s2" name="03 GET store">Testsuites.Store.03 GET store</stat>
<stat pass="2" fail="0" skip="0" id="s1-s2-s3" name="04 DELETE store">Testsuites.Store.04 DELETE store</stat>
<stat pass="22" fail="4" skip="0" id="s1-s3" name="User">Testsuites.User</stat>
<stat pass="11" fail="0" skip="0" id="s1-s3-s1" name="01 POST user">Testsuites.User.01 POST user</stat>
<stat pass="5" fail="0" skip="0" id="s1-s3-s2" name="02 PUT user">Testsuites.User.02 PUT user</stat>
<stat pass="4" fail="4" skip="0" id="s1-s3-s3" name="03 GET user">Testsuites.User.03 GET user</stat>
<stat pass="2" fail="0" skip="0" id="s1-s3-s4" name="04 DELETE user">Testsuites.User.04 DELETE user</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20250205 13:18:14.696" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.726" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "USER1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.763" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:14.795" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:14.834" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "abc@def.com" != "None"</msg>
<msg timestamp="20250205 13:18:14.865" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "PASS1738750693" != "None"</msg>
<msg timestamp="20250205 13:18:14.902" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:14.935" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1" != "None"</msg>
<msg timestamp="20250205 13:18:15.752" level="WARN">Executing keyword 'Should Not Be Equal As Strings' failed:

ERROR: ID is missing in response payload: "None" == "None"</msg>
<msg timestamp="20250205 13:18:19.104" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:19.952" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:21.765" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:22.589" level="WARN">Executing keyword 'Should Start With' failed:

WARNING: Response body is not an array: '{"code": 200, "type": "unknown", "message": "ok"}' does not start with '['</msg>
<msg timestamp="20250205 13:18:24.405" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1738750703" != "None"</msg>
<msg timestamp="20250205 13:18:24.437" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "USER1738750694" != "None"</msg>
<msg timestamp="20250205 13:18:24.477" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:24.513" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:24.578" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<msg timestamp="20250205 13:18:24.613" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.PASS1738750703" != "None"</msg>
<msg timestamp="20250205 13:18:24.645" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "+0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:24.676" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "-1" != "None"</msg>
<msg timestamp="20250205 13:18:25.721" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "1738750704" != "None"</msg>
<msg timestamp="20250205 13:18:25.754" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "889a3b5c-e3aa-11ef-a57f-744ca1d2e576" != "None"</msg>
<msg timestamp="20250205 13:18:25.787" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.FIRSTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:25.818" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.LASTNAME" != "None"</msg>
<msg timestamp="20250205 13:18:25.856" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "abc@xyz.com" != "None"</msg>
<msg timestamp="20250205 13:18:25.895" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "NEW.PASS1738750704" != "None"</msg>
<msg timestamp="20250205 13:18:25.930" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "+0123456789" != "None"</msg>
<msg timestamp="20250205 13:18:25.961" level="WARN">Executing keyword 'Should Be Equal As Strings' failed:

WARNING: Field validation failure: "-1" != "None"</msg>
</errors>
</robot>
